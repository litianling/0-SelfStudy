// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _OverturnKernel_HH_
#define _OverturnKernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct OverturnKernel : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > input_matrix_address0;
    sc_out< sc_logic > input_matrix_ce0;
    sc_in< sc_lv<32> > input_matrix_q0;
    sc_out< sc_lv<4> > output_matrix_address0;
    sc_out< sc_logic > output_matrix_ce0;
    sc_out< sc_logic > output_matrix_we0;
    sc_out< sc_lv<32> > output_matrix_d0;


    // Module declarations
    OverturnKernel(sc_module_name name);
    SC_HAS_PROCESS(OverturnKernel);

    ~OverturnKernel();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i_fu_91_p2;
    sc_signal< sc_lv<2> > i_reg_195;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > sub_ln220_1_fu_109_p2;
    sc_signal< sc_lv<5> > sub_ln220_1_reg_200;
    sc_signal< sc_lv<1> > icmp_ln218_fu_85_p2;
    sc_signal< sc_lv<5> > add_ln220_1_fu_143_p2;
    sc_signal< sc_lv<5> > add_ln220_1_reg_205;
    sc_signal< sc_lv<2> > j_fu_159_p2;
    sc_signal< sc_lv<2> > j_reg_213;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln219_fu_153_p2;
    sc_signal< sc_lv<5> > sub_ln220_3_fu_179_p2;
    sc_signal< sc_lv<5> > sub_ln220_3_reg_223;
    sc_signal< sc_lv<2> > i_0_reg_59;
    sc_signal< sc_lv<2> > j_0_reg_70;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln220_fu_174_p1;
    sc_signal< sc_lv<64> > zext_ln220_1_fu_187_p1;
    sc_signal< sc_lv<4> > shl_ln_fu_97_p3;
    sc_signal< sc_lv<5> > zext_ln220_2_fu_105_p1;
    sc_signal< sc_lv<5> > zext_ln218_fu_81_p1;
    sc_signal< sc_lv<2> > sub_ln220_fu_115_p2;
    sc_signal< sc_lv<4> > shl_ln220_1_fu_125_p3;
    sc_signal< sc_lv<5> > zext_ln220_4_fu_133_p1;
    sc_signal< sc_lv<5> > zext_ln220_3_fu_121_p1;
    sc_signal< sc_lv<5> > sub_ln220_2_fu_137_p2;
    sc_signal< sc_lv<5> > zext_ln219_fu_149_p1;
    sc_signal< sc_lv<5> > add_ln220_fu_165_p2;
    sc_signal< sc_lv<32> > sext_ln220_fu_170_p1;
    sc_signal< sc_lv<32> > sext_ln220_1_fu_184_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<5> ap_const_lv5_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln220_1_fu_143_p2();
    void thread_add_ln220_fu_165_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_91_p2();
    void thread_icmp_ln218_fu_85_p2();
    void thread_icmp_ln219_fu_153_p2();
    void thread_input_matrix_address0();
    void thread_input_matrix_ce0();
    void thread_j_fu_159_p2();
    void thread_output_matrix_address0();
    void thread_output_matrix_ce0();
    void thread_output_matrix_d0();
    void thread_output_matrix_we0();
    void thread_sext_ln220_1_fu_184_p1();
    void thread_sext_ln220_fu_170_p1();
    void thread_shl_ln220_1_fu_125_p3();
    void thread_shl_ln_fu_97_p3();
    void thread_sub_ln220_1_fu_109_p2();
    void thread_sub_ln220_2_fu_137_p2();
    void thread_sub_ln220_3_fu_179_p2();
    void thread_sub_ln220_fu_115_p2();
    void thread_zext_ln218_fu_81_p1();
    void thread_zext_ln219_fu_149_p1();
    void thread_zext_ln220_1_fu_187_p1();
    void thread_zext_ln220_2_fu_105_p1();
    void thread_zext_ln220_3_fu_121_p1();
    void thread_zext_ln220_4_fu_133_p1();
    void thread_zext_ln220_fu_174_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
