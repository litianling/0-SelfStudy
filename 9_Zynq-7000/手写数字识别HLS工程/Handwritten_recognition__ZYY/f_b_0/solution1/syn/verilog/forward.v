// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_matrix_AWVALID,
        m_axi_input_matrix_AWREADY,
        m_axi_input_matrix_AWADDR,
        m_axi_input_matrix_AWID,
        m_axi_input_matrix_AWLEN,
        m_axi_input_matrix_AWSIZE,
        m_axi_input_matrix_AWBURST,
        m_axi_input_matrix_AWLOCK,
        m_axi_input_matrix_AWCACHE,
        m_axi_input_matrix_AWPROT,
        m_axi_input_matrix_AWQOS,
        m_axi_input_matrix_AWREGION,
        m_axi_input_matrix_AWUSER,
        m_axi_input_matrix_WVALID,
        m_axi_input_matrix_WREADY,
        m_axi_input_matrix_WDATA,
        m_axi_input_matrix_WSTRB,
        m_axi_input_matrix_WLAST,
        m_axi_input_matrix_WID,
        m_axi_input_matrix_WUSER,
        m_axi_input_matrix_ARVALID,
        m_axi_input_matrix_ARREADY,
        m_axi_input_matrix_ARADDR,
        m_axi_input_matrix_ARID,
        m_axi_input_matrix_ARLEN,
        m_axi_input_matrix_ARSIZE,
        m_axi_input_matrix_ARBURST,
        m_axi_input_matrix_ARLOCK,
        m_axi_input_matrix_ARCACHE,
        m_axi_input_matrix_ARPROT,
        m_axi_input_matrix_ARQOS,
        m_axi_input_matrix_ARREGION,
        m_axi_input_matrix_ARUSER,
        m_axi_input_matrix_RVALID,
        m_axi_input_matrix_RREADY,
        m_axi_input_matrix_RDATA,
        m_axi_input_matrix_RLAST,
        m_axi_input_matrix_RID,
        m_axi_input_matrix_RUSER,
        m_axi_input_matrix_RRESP,
        m_axi_input_matrix_BVALID,
        m_axi_input_matrix_BREADY,
        m_axi_input_matrix_BRESP,
        m_axi_input_matrix_BID,
        m_axi_input_matrix_BUSER,
        input_matrix_offset,
        conv1_offset,
        conv2_offset,
        conv3_offset,
        fc1_offset,
        fc2_offset,
        fc3_offset,
        mnist_data_address0,
        mnist_data_ce0,
        mnist_data_we0,
        mnist_data_d0,
        mnist_data_q0,
        conv_kernel1_address0,
        conv_kernel1_ce0,
        conv_kernel1_we0,
        conv_kernel1_d0,
        conv_kernel1_q0,
        conv_kernel2_address0,
        conv_kernel2_ce0,
        conv_kernel2_we0,
        conv_kernel2_d0,
        conv_kernel2_q0,
        conv_kernel3_address0,
        conv_kernel3_ce0,
        conv_kernel3_we0,
        conv_kernel3_d0,
        conv_kernel3_q0,
        first_conv1_address0,
        first_conv1_ce0,
        first_conv1_we0,
        first_conv1_d0,
        first_conv1_q0,
        sencond_conv1_address0,
        sencond_conv1_ce0,
        sencond_conv1_we0,
        sencond_conv1_d0,
        sencond_conv1_q0,
        fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0,
        fc_hidden_layer1_we0,
        fc_hidden_layer1_d0,
        fc_hidden_layer1_q0,
        fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0,
        fc_hidden_layer2_address1,
        fc_hidden_layer2_ce1,
        fc_hidden_layer2_we1,
        fc_hidden_layer2_d1,
        fc_hidden_layer3_address0,
        fc_hidden_layer3_ce0,
        fc_hidden_layer3_we0,
        fc_hidden_layer3_d0,
        fc_hidden_layer3_q0,
        flatten_conv_0_address0,
        flatten_conv_0_ce0,
        flatten_conv_0_we0,
        flatten_conv_0_d0,
        flatten_conv_0_q0,
        first_fc_0_address0,
        first_fc_0_ce0,
        first_fc_0_we0,
        first_fc_0_d0,
        first_fc_0_q0,
        first_relu_0_address0,
        first_relu_0_ce0,
        first_relu_0_we0,
        first_relu_0_d0,
        first_relu_0_q0,
        second_fc_0_address0,
        second_fc_0_ce0,
        second_fc_0_we0,
        second_fc_0_d0,
        second_fc_0_q0,
        second_relu_0_address0,
        second_relu_0_ce0,
        second_relu_0_we0,
        second_relu_0_d0,
        second_relu_0_q0,
        outmlp_0_address0,
        outmlp_0_ce0,
        outmlp_0_we0,
        outmlp_0_d0
);

parameter    ap_ST_fsm_state1 = 112'd1;
parameter    ap_ST_fsm_state2 = 112'd2;
parameter    ap_ST_fsm_state3 = 112'd4;
parameter    ap_ST_fsm_state4 = 112'd8;
parameter    ap_ST_fsm_state5 = 112'd16;
parameter    ap_ST_fsm_state6 = 112'd32;
parameter    ap_ST_fsm_state7 = 112'd64;
parameter    ap_ST_fsm_pp0_stage0 = 112'd128;
parameter    ap_ST_fsm_state11 = 112'd256;
parameter    ap_ST_fsm_state12 = 112'd512;
parameter    ap_ST_fsm_state13 = 112'd1024;
parameter    ap_ST_fsm_state14 = 112'd2048;
parameter    ap_ST_fsm_state15 = 112'd4096;
parameter    ap_ST_fsm_state16 = 112'd8192;
parameter    ap_ST_fsm_state17 = 112'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 112'd32768;
parameter    ap_ST_fsm_state21 = 112'd65536;
parameter    ap_ST_fsm_state22 = 112'd131072;
parameter    ap_ST_fsm_state23 = 112'd262144;
parameter    ap_ST_fsm_state24 = 112'd524288;
parameter    ap_ST_fsm_state25 = 112'd1048576;
parameter    ap_ST_fsm_state26 = 112'd2097152;
parameter    ap_ST_fsm_state27 = 112'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 112'd8388608;
parameter    ap_ST_fsm_state31 = 112'd16777216;
parameter    ap_ST_fsm_state32 = 112'd33554432;
parameter    ap_ST_fsm_state33 = 112'd67108864;
parameter    ap_ST_fsm_state34 = 112'd134217728;
parameter    ap_ST_fsm_state35 = 112'd268435456;
parameter    ap_ST_fsm_state36 = 112'd536870912;
parameter    ap_ST_fsm_state37 = 112'd1073741824;
parameter    ap_ST_fsm_pp3_stage0 = 112'd2147483648;
parameter    ap_ST_fsm_state41 = 112'd4294967296;
parameter    ap_ST_fsm_state42 = 112'd8589934592;
parameter    ap_ST_fsm_state43 = 112'd17179869184;
parameter    ap_ST_fsm_state44 = 112'd34359738368;
parameter    ap_ST_fsm_state45 = 112'd68719476736;
parameter    ap_ST_fsm_state46 = 112'd137438953472;
parameter    ap_ST_fsm_state47 = 112'd274877906944;
parameter    ap_ST_fsm_pp4_stage0 = 112'd549755813888;
parameter    ap_ST_fsm_state51 = 112'd1099511627776;
parameter    ap_ST_fsm_state52 = 112'd2199023255552;
parameter    ap_ST_fsm_state53 = 112'd4398046511104;
parameter    ap_ST_fsm_state54 = 112'd8796093022208;
parameter    ap_ST_fsm_state55 = 112'd17592186044416;
parameter    ap_ST_fsm_state56 = 112'd35184372088832;
parameter    ap_ST_fsm_state57 = 112'd70368744177664;
parameter    ap_ST_fsm_pp5_stage0 = 112'd140737488355328;
parameter    ap_ST_fsm_state61 = 112'd281474976710656;
parameter    ap_ST_fsm_state62 = 112'd562949953421312;
parameter    ap_ST_fsm_state63 = 112'd1125899906842624;
parameter    ap_ST_fsm_state64 = 112'd2251799813685248;
parameter    ap_ST_fsm_state65 = 112'd4503599627370496;
parameter    ap_ST_fsm_state66 = 112'd9007199254740992;
parameter    ap_ST_fsm_state67 = 112'd18014398509481984;
parameter    ap_ST_fsm_pp6_stage0 = 112'd36028797018963968;
parameter    ap_ST_fsm_state71 = 112'd72057594037927936;
parameter    ap_ST_fsm_state72 = 112'd144115188075855872;
parameter    ap_ST_fsm_state73 = 112'd288230376151711744;
parameter    ap_ST_fsm_state74 = 112'd576460752303423488;
parameter    ap_ST_fsm_state75 = 112'd1152921504606846976;
parameter    ap_ST_fsm_state76 = 112'd2305843009213693952;
parameter    ap_ST_fsm_state77 = 112'd4611686018427387904;
parameter    ap_ST_fsm_state78 = 112'd9223372036854775808;
parameter    ap_ST_fsm_state79 = 112'd18446744073709551616;
parameter    ap_ST_fsm_state80 = 112'd36893488147419103232;
parameter    ap_ST_fsm_state81 = 112'd73786976294838206464;
parameter    ap_ST_fsm_state82 = 112'd147573952589676412928;
parameter    ap_ST_fsm_state83 = 112'd295147905179352825856;
parameter    ap_ST_fsm_state84 = 112'd590295810358705651712;
parameter    ap_ST_fsm_state85 = 112'd1180591620717411303424;
parameter    ap_ST_fsm_state86 = 112'd2361183241434822606848;
parameter    ap_ST_fsm_state87 = 112'd4722366482869645213696;
parameter    ap_ST_fsm_state88 = 112'd9444732965739290427392;
parameter    ap_ST_fsm_state89 = 112'd18889465931478580854784;
parameter    ap_ST_fsm_state90 = 112'd37778931862957161709568;
parameter    ap_ST_fsm_state91 = 112'd75557863725914323419136;
parameter    ap_ST_fsm_state92 = 112'd151115727451828646838272;
parameter    ap_ST_fsm_state93 = 112'd302231454903657293676544;
parameter    ap_ST_fsm_state94 = 112'd604462909807314587353088;
parameter    ap_ST_fsm_state95 = 112'd1208925819614629174706176;
parameter    ap_ST_fsm_state96 = 112'd2417851639229258349412352;
parameter    ap_ST_fsm_state97 = 112'd4835703278458516698824704;
parameter    ap_ST_fsm_state98 = 112'd9671406556917033397649408;
parameter    ap_ST_fsm_state99 = 112'd19342813113834066795298816;
parameter    ap_ST_fsm_state100 = 112'd38685626227668133590597632;
parameter    ap_ST_fsm_state101 = 112'd77371252455336267181195264;
parameter    ap_ST_fsm_state102 = 112'd154742504910672534362390528;
parameter    ap_ST_fsm_state103 = 112'd309485009821345068724781056;
parameter    ap_ST_fsm_state104 = 112'd618970019642690137449562112;
parameter    ap_ST_fsm_state105 = 112'd1237940039285380274899124224;
parameter    ap_ST_fsm_state106 = 112'd2475880078570760549798248448;
parameter    ap_ST_fsm_state107 = 112'd4951760157141521099596496896;
parameter    ap_ST_fsm_state108 = 112'd9903520314283042199192993792;
parameter    ap_ST_fsm_state109 = 112'd19807040628566084398385987584;
parameter    ap_ST_fsm_state110 = 112'd39614081257132168796771975168;
parameter    ap_ST_fsm_state111 = 112'd79228162514264337593543950336;
parameter    ap_ST_fsm_state112 = 112'd158456325028528675187087900672;
parameter    ap_ST_fsm_state113 = 112'd316912650057057350374175801344;
parameter    ap_ST_fsm_state114 = 112'd633825300114114700748351602688;
parameter    ap_ST_fsm_state115 = 112'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state116 = 112'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state117 = 112'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state118 = 112'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state119 = 112'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state120 = 112'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state121 = 112'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state122 = 112'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state123 = 112'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state124 = 112'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state125 = 112'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state126 = 112'd2596148429267413814265248164610048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_matrix_AWVALID;
input   m_axi_input_matrix_AWREADY;
output  [31:0] m_axi_input_matrix_AWADDR;
output  [0:0] m_axi_input_matrix_AWID;
output  [31:0] m_axi_input_matrix_AWLEN;
output  [2:0] m_axi_input_matrix_AWSIZE;
output  [1:0] m_axi_input_matrix_AWBURST;
output  [1:0] m_axi_input_matrix_AWLOCK;
output  [3:0] m_axi_input_matrix_AWCACHE;
output  [2:0] m_axi_input_matrix_AWPROT;
output  [3:0] m_axi_input_matrix_AWQOS;
output  [3:0] m_axi_input_matrix_AWREGION;
output  [0:0] m_axi_input_matrix_AWUSER;
output   m_axi_input_matrix_WVALID;
input   m_axi_input_matrix_WREADY;
output  [31:0] m_axi_input_matrix_WDATA;
output  [3:0] m_axi_input_matrix_WSTRB;
output   m_axi_input_matrix_WLAST;
output  [0:0] m_axi_input_matrix_WID;
output  [0:0] m_axi_input_matrix_WUSER;
output   m_axi_input_matrix_ARVALID;
input   m_axi_input_matrix_ARREADY;
output  [31:0] m_axi_input_matrix_ARADDR;
output  [0:0] m_axi_input_matrix_ARID;
output  [31:0] m_axi_input_matrix_ARLEN;
output  [2:0] m_axi_input_matrix_ARSIZE;
output  [1:0] m_axi_input_matrix_ARBURST;
output  [1:0] m_axi_input_matrix_ARLOCK;
output  [3:0] m_axi_input_matrix_ARCACHE;
output  [2:0] m_axi_input_matrix_ARPROT;
output  [3:0] m_axi_input_matrix_ARQOS;
output  [3:0] m_axi_input_matrix_ARREGION;
output  [0:0] m_axi_input_matrix_ARUSER;
input   m_axi_input_matrix_RVALID;
output   m_axi_input_matrix_RREADY;
input  [31:0] m_axi_input_matrix_RDATA;
input   m_axi_input_matrix_RLAST;
input  [0:0] m_axi_input_matrix_RID;
input  [0:0] m_axi_input_matrix_RUSER;
input  [1:0] m_axi_input_matrix_RRESP;
input   m_axi_input_matrix_BVALID;
output   m_axi_input_matrix_BREADY;
input  [1:0] m_axi_input_matrix_BRESP;
input  [0:0] m_axi_input_matrix_BID;
input  [0:0] m_axi_input_matrix_BUSER;
input  [29:0] input_matrix_offset;
input  [29:0] conv1_offset;
input  [29:0] conv2_offset;
input  [29:0] conv3_offset;
input  [29:0] fc1_offset;
input  [29:0] fc2_offset;
input  [29:0] fc3_offset;
output  [9:0] mnist_data_address0;
output   mnist_data_ce0;
output   mnist_data_we0;
output  [31:0] mnist_data_d0;
input  [31:0] mnist_data_q0;
output  [3:0] conv_kernel1_address0;
output   conv_kernel1_ce0;
output   conv_kernel1_we0;
output  [31:0] conv_kernel1_d0;
input  [31:0] conv_kernel1_q0;
output  [3:0] conv_kernel2_address0;
output   conv_kernel2_ce0;
output   conv_kernel2_we0;
output  [31:0] conv_kernel2_d0;
input  [31:0] conv_kernel2_q0;
output  [3:0] conv_kernel3_address0;
output   conv_kernel3_ce0;
output   conv_kernel3_we0;
output  [31:0] conv_kernel3_d0;
input  [31:0] conv_kernel3_q0;
output  [9:0] first_conv1_address0;
output   first_conv1_ce0;
output   first_conv1_we0;
output  [31:0] first_conv1_d0;
input  [31:0] first_conv1_q0;
output  [9:0] sencond_conv1_address0;
output   sencond_conv1_ce0;
output   sencond_conv1_we0;
output  [31:0] sencond_conv1_d0;
input  [31:0] sencond_conv1_q0;
output  [16:0] fc_hidden_layer1_address0;
output   fc_hidden_layer1_ce0;
output   fc_hidden_layer1_we0;
output  [31:0] fc_hidden_layer1_d0;
input  [31:0] fc_hidden_layer1_q0;
output  [12:0] fc_hidden_layer2_address0;
output   fc_hidden_layer2_ce0;
input  [31:0] fc_hidden_layer2_q0;
output  [12:0] fc_hidden_layer2_address1;
output   fc_hidden_layer2_ce1;
output   fc_hidden_layer2_we1;
output  [31:0] fc_hidden_layer2_d1;
output  [8:0] fc_hidden_layer3_address0;
output   fc_hidden_layer3_ce0;
output   fc_hidden_layer3_we0;
output  [31:0] fc_hidden_layer3_d0;
input  [31:0] fc_hidden_layer3_q0;
output  [9:0] flatten_conv_0_address0;
output   flatten_conv_0_ce0;
output   flatten_conv_0_we0;
output  [31:0] flatten_conv_0_d0;
input  [31:0] flatten_conv_0_q0;
output  [7:0] first_fc_0_address0;
output   first_fc_0_ce0;
output   first_fc_0_we0;
output  [31:0] first_fc_0_d0;
input  [31:0] first_fc_0_q0;
output  [7:0] first_relu_0_address0;
output   first_relu_0_ce0;
output   first_relu_0_we0;
output  [31:0] first_relu_0_d0;
input  [31:0] first_relu_0_q0;
output  [5:0] second_fc_0_address0;
output   second_fc_0_ce0;
output   second_fc_0_we0;
output  [31:0] second_fc_0_d0;
input  [31:0] second_fc_0_q0;
output  [5:0] second_relu_0_address0;
output   second_relu_0_ce0;
output   second_relu_0_we0;
output  [31:0] second_relu_0_d0;
input  [31:0] second_relu_0_q0;
output  [3:0] outmlp_0_address0;
output   outmlp_0_ce0;
output   outmlp_0_we0;
output  [31:0] outmlp_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_matrix_ARVALID;
reg[31:0] m_axi_input_matrix_ARADDR;
reg[31:0] m_axi_input_matrix_ARLEN;
reg m_axi_input_matrix_RREADY;
reg[9:0] mnist_data_address0;
reg mnist_data_ce0;
reg mnist_data_we0;
reg[3:0] conv_kernel1_address0;
reg conv_kernel1_ce0;
reg conv_kernel1_we0;
reg[3:0] conv_kernel2_address0;
reg conv_kernel2_ce0;
reg conv_kernel2_we0;
reg[3:0] conv_kernel3_address0;
reg conv_kernel3_ce0;
reg conv_kernel3_we0;
reg[9:0] first_conv1_address0;
reg first_conv1_ce0;
reg first_conv1_we0;
reg[9:0] sencond_conv1_address0;
reg sencond_conv1_ce0;
reg sencond_conv1_we0;
reg[16:0] fc_hidden_layer1_address0;
reg fc_hidden_layer1_ce0;
reg fc_hidden_layer1_we0;
reg fc_hidden_layer2_ce0;
reg fc_hidden_layer2_ce1;
reg fc_hidden_layer2_we1;
reg[8:0] fc_hidden_layer3_address0;
reg fc_hidden_layer3_ce0;
reg fc_hidden_layer3_we0;
reg[9:0] flatten_conv_0_address0;
reg flatten_conv_0_ce0;
reg flatten_conv_0_we0;
reg[7:0] first_fc_0_address0;
reg first_fc_0_ce0;
reg first_fc_0_we0;
reg[7:0] first_relu_0_address0;
reg first_relu_0_ce0;
reg first_relu_0_we0;
reg[5:0] second_fc_0_address0;
reg second_fc_0_ce0;
reg second_fc_0_we0;
reg[5:0] second_relu_0_address0;
reg second_relu_0_ce0;
reg second_relu_0_we0;
reg outmlp_0_ce0;
reg outmlp_0_we0;

(* fsm_encoding = "none" *) reg   [111:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] third_conv1_address0;
reg    third_conv1_ce0;
reg    third_conv1_we0;
wire   [31:0] third_conv1_q0;
reg    input_matrix_blk_n_AR;
wire    ap_CS_fsm_state61;
reg    input_matrix_blk_n_R;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln321_reg_1727;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln320_reg_1713;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln319_reg_1699;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln312_reg_1685;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln311_reg_1671;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln310_reg_1657;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln309_reg_1643;
reg   [9:0] phi_ln309_reg_600;
reg   [9:0] phi_ln309_reg_600_pp0_iter1_reg;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] phi_ln310_reg_612;
reg   [3:0] phi_ln310_reg_612_pp1_iter1_reg;
wire    ap_block_state18_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [3:0] phi_ln311_reg_624;
reg   [3:0] phi_ln311_reg_624_pp2_iter1_reg;
wire    ap_block_state28_pp2_stage0_iter0;
reg    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [3:0] phi_ln312_reg_636;
reg   [3:0] phi_ln312_reg_636_pp3_iter1_reg;
wire    ap_block_state38_pp3_stage0_iter0;
reg    ap_block_state39_pp3_stage0_iter1;
wire    ap_block_state40_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [16:0] phi_ln319_reg_648;
reg   [16:0] phi_ln319_reg_648_pp4_iter1_reg;
wire    ap_block_state48_pp4_stage0_iter0;
reg    ap_block_state49_pp4_stage0_iter1;
wire    ap_block_state50_pp4_stage0_iter2;
reg    ap_block_pp4_stage0_11001;
reg   [12:0] phi_ln320_reg_660;
reg   [12:0] phi_ln320_reg_660_pp5_iter1_reg;
wire    ap_block_state58_pp5_stage0_iter0;
reg    ap_block_state59_pp5_stage0_iter1;
wire    ap_block_state60_pp5_stage0_iter2;
reg    ap_block_pp5_stage0_11001;
reg   [8:0] phi_ln321_reg_672;
reg   [8:0] phi_ln321_reg_672_pp6_iter1_reg;
wire    ap_block_state68_pp6_stage0_iter0;
reg    ap_block_state69_pp6_stage0_iter1;
wire    ap_block_state70_pp6_stage0_iter2;
reg    ap_block_pp6_stage0_11001;
wire   [31:0] grp_fu_892_p2;
reg   [31:0] reg_914;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state122;
wire   [31:0] grp_fu_885_p2;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state126;
wire   [63:0] grp_fu_899_p1;
reg   [63:0] reg_926;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state108;
wire   [63:0] grp_fu_909_p2;
reg   [63:0] reg_931;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state113;
wire   [31:0] grp_fu_896_p1;
reg   [31:0] reg_936;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state115;
reg   [31:0] input_matrix_addr_reg_1607;
wire    ap_CS_fsm_state7;
reg   [31:0] input_matrix_addr_1_reg_1613;
reg   [31:0] input_matrix_addr_2_reg_1619;
reg   [31:0] input_matrix_addr_3_reg_1625;
reg   [31:0] input_matrix_addr_4_reg_1631;
reg   [31:0] input_matrix_addr_5_reg_1637;
wire   [0:0] icmp_ln309_fu_1012_p2;
reg   [0:0] icmp_ln309_reg_1643_pp0_iter1_reg;
wire   [9:0] add_ln309_fu_1018_p2;
reg   [9:0] add_ln309_reg_1647;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] input_matrix_addr_6_1_reg_1652;
wire   [0:0] icmp_ln310_fu_1029_p2;
reg   [0:0] icmp_ln310_reg_1657_pp1_iter1_reg;
wire   [3:0] add_ln310_fu_1035_p2;
reg   [3:0] add_ln310_reg_1661;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] input_matrix_addr_5_1_reg_1666;
wire   [0:0] icmp_ln311_fu_1046_p2;
reg   [0:0] icmp_ln311_reg_1671_pp2_iter1_reg;
wire   [3:0] add_ln311_fu_1052_p2;
reg   [3:0] add_ln311_reg_1675;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] input_matrix_addr_4_1_reg_1680;
wire   [0:0] icmp_ln312_fu_1063_p2;
reg   [0:0] icmp_ln312_reg_1685_pp3_iter1_reg;
wire   [3:0] add_ln312_fu_1069_p2;
reg   [3:0] add_ln312_reg_1689;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] input_matrix_addr_3_1_reg_1694;
wire   [0:0] icmp_ln319_fu_1080_p2;
reg   [0:0] icmp_ln319_reg_1699_pp4_iter1_reg;
wire   [16:0] add_ln319_fu_1086_p2;
reg   [16:0] add_ln319_reg_1703;
reg    ap_enable_reg_pp4_iter0;
reg   [31:0] input_matrix_addr_2_1_reg_1708;
wire   [0:0] icmp_ln320_fu_1097_p2;
reg   [0:0] icmp_ln320_reg_1713_pp5_iter1_reg;
wire   [12:0] add_ln320_fu_1103_p2;
reg   [12:0] add_ln320_reg_1717;
reg    ap_enable_reg_pp5_iter0;
reg   [31:0] input_matrix_addr_1_1_reg_1722;
wire   [0:0] icmp_ln321_fu_1114_p2;
reg   [0:0] icmp_ln321_reg_1727_pp6_iter1_reg;
wire   [8:0] add_ln321_fu_1120_p2;
reg   [8:0] add_ln321_reg_1731;
reg    ap_enable_reg_pp6_iter0;
reg   [31:0] input_matrix_addr_re_reg_1736;
wire   [4:0] i_fu_1137_p2;
reg   [4:0] i_reg_1744;
wire    ap_CS_fsm_state72;
wire   [10:0] sub_ln74_fu_1167_p2;
reg   [10:0] sub_ln74_reg_1749;
wire   [0:0] icmp_ln72_fu_1131_p2;
wire   [4:0] j_fu_1183_p2;
reg   [4:0] j_reg_1757;
wire    ap_CS_fsm_state73;
wire   [63:0] zext_ln74_fu_1198_p1;
reg   [63:0] zext_ln74_reg_1762;
wire   [0:0] icmp_ln73_fu_1177_p2;
wire   [16:0] zext_ln79_fu_1203_p1;
reg   [16:0] zext_ln79_reg_1772;
wire    ap_CS_fsm_state75;
wire   [7:0] j_2_fu_1213_p2;
reg   [7:0] j_2_reg_1780;
reg   [7:0] first_fc_0_addr_reg_1785;
wire   [0:0] icmp_ln79_fu_1207_p2;
wire   [9:0] k_fu_1230_p2;
reg   [9:0] k_reg_1793;
wire    ap_CS_fsm_state76;
wire   [0:0] icmp_ln81_fu_1224_p2;
wire   [16:0] add_ln82_1_fu_1241_p2;
reg   [16:0] add_ln82_1_reg_1803;
reg   [31:0] flatten_conv_0_load_reg_1813;
wire    ap_CS_fsm_state77;
reg   [31:0] fc_hidden_layer1_loa_reg_1818;
wire   [7:0] j_6_fu_1263_p2;
reg   [7:0] j_6_reg_1826;
wire    ap_CS_fsm_state85;
wire   [63:0] zext_ln63_fu_1269_p1;
reg   [63:0] zext_ln63_reg_1831;
wire   [0:0] icmp_ln62_fu_1257_p2;
reg   [31:0] first_fc_0_load_reg_1841;
wire    ap_CS_fsm_state86;
wire   [12:0] zext_ln87_fu_1365_p1;
reg   [12:0] zext_ln87_reg_1849;
wire    ap_CS_fsm_state96;
wire   [5:0] j_7_fu_1375_p2;
reg   [5:0] j_7_reg_1857;
reg   [5:0] second_fc_0_addr_reg_1862;
wire   [0:0] icmp_ln87_fu_1369_p2;
wire   [7:0] k_1_fu_1392_p2;
reg   [7:0] k_1_reg_1870;
wire    ap_CS_fsm_state97;
wire   [0:0] icmp_ln89_fu_1386_p2;
wire   [12:0] add_ln90_1_fu_1403_p2;
reg   [12:0] add_ln90_1_reg_1880;
reg   [31:0] first_relu_0_load_reg_1890;
wire    ap_CS_fsm_state98;
reg   [31:0] fc_hidden_layer2_loa_reg_1895;
wire   [5:0] j_8_fu_1425_p2;
reg   [5:0] j_8_reg_1903;
wire    ap_CS_fsm_state106;
wire   [63:0] zext_ln68_fu_1431_p1;
reg   [63:0] zext_ln68_reg_1908;
wire   [0:0] icmp_ln67_fu_1419_p2;
reg   [31:0] second_fc_0_load_reg_1918;
wire    ap_CS_fsm_state107;
wire   [6:0] zext_ln95_fu_1527_p1;
reg   [6:0] zext_ln95_reg_1926;
wire    ap_CS_fsm_state117;
wire   [3:0] j_9_fu_1537_p2;
reg   [3:0] j_9_reg_1934;
reg   [3:0] outmlp_0_addr_reg_1939;
wire   [0:0] icmp_ln95_fu_1531_p2;
wire   [5:0] k_2_fu_1554_p2;
reg   [5:0] k_2_reg_1947;
wire    ap_CS_fsm_state118;
wire   [0:0] icmp_ln97_fu_1548_p2;
reg   [31:0] second_relu_0_load_reg_1962;
wire    ap_CS_fsm_state119;
reg   [31:0] fc_hidden_layer3_loa_reg_1967;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state27;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state37;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state38;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state47;
wire    grp_Conv2d3_fu_875_ap_ready;
wire    grp_Conv2d3_fu_875_ap_done;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state48;
reg    ap_enable_reg_pp4_iter2;
wire    ap_CS_fsm_state57;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state58;
reg    ap_enable_reg_pp5_iter2;
wire    ap_CS_fsm_state67;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state68;
reg    ap_enable_reg_pp6_iter2;
wire    grp_Conv2d1_fu_855_ap_start;
wire    grp_Conv2d1_fu_855_ap_done;
wire    grp_Conv2d1_fu_855_ap_idle;
wire    grp_Conv2d1_fu_855_ap_ready;
wire   [9:0] grp_Conv2d1_fu_855_input_matrix_address0;
wire    grp_Conv2d1_fu_855_input_matrix_ce0;
wire   [3:0] grp_Conv2d1_fu_855_kernel_address0;
wire    grp_Conv2d1_fu_855_kernel_ce0;
wire   [9:0] grp_Conv2d1_fu_855_out_matrix_address0;
wire    grp_Conv2d1_fu_855_out_matrix_ce0;
wire    grp_Conv2d1_fu_855_out_matrix_we0;
wire   [31:0] grp_Conv2d1_fu_855_out_matrix_d0;
wire    grp_Conv2d2_fu_865_ap_start;
wire    grp_Conv2d2_fu_865_ap_done;
wire    grp_Conv2d2_fu_865_ap_idle;
wire    grp_Conv2d2_fu_865_ap_ready;
wire   [9:0] grp_Conv2d2_fu_865_input_matrix_address0;
wire    grp_Conv2d2_fu_865_input_matrix_ce0;
wire   [3:0] grp_Conv2d2_fu_865_kernel_address0;
wire    grp_Conv2d2_fu_865_kernel_ce0;
wire   [9:0] grp_Conv2d2_fu_865_out_matrix_address0;
wire    grp_Conv2d2_fu_865_out_matrix_ce0;
wire    grp_Conv2d2_fu_865_out_matrix_we0;
wire   [31:0] grp_Conv2d2_fu_865_out_matrix_d0;
wire    grp_Conv2d3_fu_875_ap_start;
wire    grp_Conv2d3_fu_875_ap_idle;
wire   [9:0] grp_Conv2d3_fu_875_input_matrix_address0;
wire    grp_Conv2d3_fu_875_input_matrix_ce0;
wire   [3:0] grp_Conv2d3_fu_875_kernel_address0;
wire    grp_Conv2d3_fu_875_kernel_ce0;
wire   [9:0] grp_Conv2d3_fu_875_out_matrix_address0;
wire    grp_Conv2d3_fu_875_out_matrix_ce0;
wire    grp_Conv2d3_fu_875_out_matrix_we0;
wire   [31:0] grp_Conv2d3_fu_875_out_matrix_d0;
reg   [9:0] ap_phi_mux_phi_ln309_phi_fu_604_p4;
reg   [3:0] ap_phi_mux_phi_ln310_phi_fu_616_p4;
reg   [3:0] ap_phi_mux_phi_ln311_phi_fu_628_p4;
reg   [3:0] ap_phi_mux_phi_ln312_phi_fu_640_p4;
reg   [16:0] ap_phi_mux_phi_ln319_phi_fu_652_p4;
reg   [12:0] ap_phi_mux_phi_ln320_phi_fu_664_p4;
reg   [8:0] ap_phi_mux_phi_ln321_phi_fu_676_p4;
reg   [4:0] i_0_i_reg_684;
wire    ap_CS_fsm_state71;
reg   [4:0] j_0_i_reg_695;
wire    ap_CS_fsm_state74;
reg   [7:0] j_0_i89_reg_706;
reg   [31:0] storemerge_reg_717;
reg   [9:0] k_0_i_reg_730;
reg   [16:0] phi_mul_reg_741;
reg   [7:0] j_0_i92_reg_752;
wire    ap_CS_fsm_state95;
reg   [5:0] j_0_i99_reg_763;
reg   [31:0] storemerge198_reg_774;
reg   [7:0] k_0_i101_reg_787;
reg   [12:0] phi_mul196_reg_798;
reg   [5:0] j_0_i110_reg_809;
wire    ap_CS_fsm_state116;
reg   [3:0] j_0_i119_reg_820;
reg   [31:0] storemerge199_reg_831;
reg   [5:0] k_0_i121_reg_844;
reg    grp_Conv2d1_fu_855_ap_start_reg;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
reg    grp_Conv2d2_fu_865_ap_start_reg;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg    grp_Conv2d3_fu_875_ap_start_reg;
wire    ap_CS_fsm_state46;
wire   [63:0] zext_ln309_fu_1024_p1;
wire   [63:0] zext_ln310_fu_1041_p1;
wire   [63:0] zext_ln311_fu_1058_p1;
wire   [63:0] zext_ln312_fu_1075_p1;
wire   [63:0] zext_ln319_fu_1092_p1;
wire   [63:0] zext_ln320_fu_1109_p1;
wire   [63:0] zext_ln321_fu_1126_p1;
wire   [63:0] zext_ln80_fu_1219_p1;
wire   [63:0] zext_ln82_fu_1236_p1;
wire   [63:0] zext_ln82_1_fu_1252_p1;
wire   [63:0] zext_ln88_fu_1381_p1;
wire   [63:0] zext_ln90_fu_1398_p1;
wire   [63:0] zext_ln90_1_fu_1414_p1;
wire   [63:0] zext_ln96_fu_1543_p1;
wire   [63:0] zext_ln98_fu_1560_p1;
wire   [63:0] zext_ln98_1_fu_1596_p1;
wire   [63:0] zext_ln308_6_fu_941_p1;
wire   [63:0] zext_ln308_fu_952_p1;
wire   [63:0] zext_ln308_1_fu_962_p1;
wire   [63:0] zext_ln308_2_fu_972_p1;
wire   [63:0] zext_ln308_3_fu_982_p1;
wire   [63:0] zext_ln308_4_fu_992_p1;
wire   [63:0] zext_ln308_5_fu_1002_p1;
reg   [31:0] grp_fu_885_p0;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state123;
reg   [31:0] grp_fu_892_p0;
reg   [31:0] grp_fu_892_p1;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state114;
reg   [31:0] grp_fu_899_p0;
reg   [31:0] grp_fu_904_p0;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state109;
wire   [9:0] shl_ln_fu_1143_p3;
wire   [7:0] shl_ln74_1_fu_1155_p3;
wire   [10:0] zext_ln74_1_fu_1151_p1;
wire   [10:0] zext_ln74_2_fu_1163_p1;
wire   [10:0] zext_ln73_fu_1173_p1;
wire   [10:0] add_ln74_fu_1189_p2;
wire  signed [31:0] sext_ln74_fu_1194_p1;
wire   [16:0] add_ln82_fu_1247_p2;
wire   [31:0] bitcast_ln28_fu_1274_p1;
wire   [31:0] bitcast_ln28_1_fu_1291_p1;
wire   [7:0] tmp_1_fu_1277_p4;
wire   [22:0] trunc_ln28_fu_1287_p1;
wire   [0:0] icmp_ln28_1_fu_1315_p2;
wire   [0:0] icmp_ln28_fu_1309_p2;
wire   [7:0] tmp_2_fu_1295_p4;
wire   [22:0] trunc_ln28_1_fu_1305_p1;
wire   [0:0] icmp_ln28_3_fu_1333_p2;
wire   [0:0] icmp_ln28_2_fu_1327_p2;
wire   [0:0] or_ln28_fu_1321_p2;
wire   [0:0] or_ln28_1_fu_1339_p2;
wire   [0:0] and_ln28_fu_1345_p2;
wire   [0:0] grp_fu_904_p2;
wire   [0:0] and_ln28_1_fu_1351_p2;
wire   [12:0] add_ln90_fu_1409_p2;
wire   [31:0] bitcast_ln28_2_fu_1436_p1;
wire   [31:0] bitcast_ln28_3_fu_1453_p1;
wire   [7:0] tmp_4_fu_1439_p4;
wire   [22:0] trunc_ln28_2_fu_1449_p1;
wire   [0:0] icmp_ln28_5_fu_1477_p2;
wire   [0:0] icmp_ln28_4_fu_1471_p2;
wire   [7:0] tmp_5_fu_1457_p4;
wire   [22:0] trunc_ln28_3_fu_1467_p1;
wire   [0:0] icmp_ln28_7_fu_1495_p2;
wire   [0:0] icmp_ln28_6_fu_1489_p2;
wire   [0:0] or_ln28_2_fu_1483_p2;
wire   [0:0] or_ln28_3_fu_1501_p2;
wire   [0:0] and_ln28_2_fu_1507_p2;
wire   [0:0] and_ln28_3_fu_1513_p2;
wire   [6:0] shl_ln98_1_fu_1573_p3;
wire   [6:0] add_ln98_fu_1581_p2;
wire   [8:0] shl_ln1_fu_1565_p3;
wire   [8:0] zext_ln98_2_fu_1586_p1;
wire   [8:0] add_ln98_1_fu_1590_p2;
reg   [111:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;

// power-on initialization
initial begin
#0 ap_CS_fsm = 112'd1;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 grp_Conv2d1_fu_855_ap_start_reg = 1'b0;
#0 grp_Conv2d2_fu_865_ap_start_reg = 1'b0;
#0 grp_Conv2d3_fu_875_ap_start_reg = 1'b0;
end

forward_third_conv1 #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
third_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(third_conv1_address0),
    .ce0(third_conv1_ce0),
    .we0(third_conv1_we0),
    .d0(grp_Conv2d3_fu_875_out_matrix_d0),
    .q0(third_conv1_q0)
);

Conv2d1 grp_Conv2d1_fu_855(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d1_fu_855_ap_start),
    .ap_done(grp_Conv2d1_fu_855_ap_done),
    .ap_idle(grp_Conv2d1_fu_855_ap_idle),
    .ap_ready(grp_Conv2d1_fu_855_ap_ready),
    .input_matrix_address0(grp_Conv2d1_fu_855_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d1_fu_855_input_matrix_ce0),
    .input_matrix_q0(mnist_data_q0),
    .kernel_address0(grp_Conv2d1_fu_855_kernel_address0),
    .kernel_ce0(grp_Conv2d1_fu_855_kernel_ce0),
    .kernel_q0(conv_kernel1_q0),
    .out_matrix_address0(grp_Conv2d1_fu_855_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d1_fu_855_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d1_fu_855_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d1_fu_855_out_matrix_d0)
);

Conv2d2 grp_Conv2d2_fu_865(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d2_fu_865_ap_start),
    .ap_done(grp_Conv2d2_fu_865_ap_done),
    .ap_idle(grp_Conv2d2_fu_865_ap_idle),
    .ap_ready(grp_Conv2d2_fu_865_ap_ready),
    .input_matrix_address0(grp_Conv2d2_fu_865_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d2_fu_865_input_matrix_ce0),
    .input_matrix_q0(first_conv1_q0),
    .kernel_address0(grp_Conv2d2_fu_865_kernel_address0),
    .kernel_ce0(grp_Conv2d2_fu_865_kernel_ce0),
    .kernel_q0(conv_kernel2_q0),
    .out_matrix_address0(grp_Conv2d2_fu_865_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d2_fu_865_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d2_fu_865_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d2_fu_865_out_matrix_d0)
);

Conv2d3 grp_Conv2d3_fu_875(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d3_fu_875_ap_start),
    .ap_done(grp_Conv2d3_fu_875_ap_done),
    .ap_idle(grp_Conv2d3_fu_875_ap_idle),
    .ap_ready(grp_Conv2d3_fu_875_ap_ready),
    .input_matrix_address0(grp_Conv2d3_fu_875_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d3_fu_875_input_matrix_ce0),
    .input_matrix_q0(sencond_conv1_q0),
    .kernel_address0(grp_Conv2d3_fu_875_kernel_address0),
    .kernel_ce0(grp_Conv2d3_fu_875_kernel_ce0),
    .kernel_q0(conv_kernel3_q0),
    .out_matrix_address0(grp_Conv2d3_fu_875_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d3_fu_875_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d3_fu_875_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d3_fu_875_out_matrix_d0)
);

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_885_p0),
    .din1(reg_914),
    .ce(1'b1),
    .dout(grp_fu_885_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_892_p0),
    .din1(grp_fu_892_p1),
    .ce(1'b1),
    .dout(grp_fu_892_p2)
);

forw_back_fptrunceOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
forw_back_fptrunceOg_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_931),
    .ce(1'b1),
    .dout(grp_fu_896_p1)
);

forw_back_fpext_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
forw_back_fpext_3fYi_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_899_p0),
    .ce(1'b1),
    .dout(grp_fu_899_p1)
);

forw_back_fcmp_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
forw_back_fcmp_32g8j_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_904_p0),
    .din1(grp_fu_896_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_904_p2)
);

forw_back_dmul_64hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dmul_64hbi_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_926),
    .din1(64'd4587366580439587226),
    .ce(1'b1),
    .dout(grp_fu_909_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state38) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state38)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state48) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((grp_Conv2d3_fu_875_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state48)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state48);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((grp_Conv2d3_fu_875_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state58) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state58)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state58);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state68) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state67)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state68)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state68);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state67)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d1_fu_855_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state42)) begin
            grp_Conv2d1_fu_855_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d1_fu_855_ap_ready == 1'b1)) begin
            grp_Conv2d1_fu_855_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d2_fu_865_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state44)) begin
            grp_Conv2d2_fu_865_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d2_fu_865_ap_ready == 1'b1)) begin
            grp_Conv2d2_fu_865_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d3_fu_875_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            grp_Conv2d3_fu_875_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d3_fu_875_ap_ready == 1'b1)) begin
            grp_Conv2d3_fu_875_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_1177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        i_0_i_reg_684 <= i_reg_1744;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        i_0_i_reg_684 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        j_0_i110_reg_809 <= j_8_reg_1903;
    end else if (((icmp_ln87_fu_1369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        j_0_i110_reg_809 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_1548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state118))) begin
        j_0_i119_reg_820 <= j_9_reg_1934;
    end else if (((icmp_ln67_fu_1419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state106))) begin
        j_0_i119_reg_820 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_fu_1224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        j_0_i89_reg_706 <= j_2_reg_1780;
    end else if (((icmp_ln72_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
        j_0_i89_reg_706 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        j_0_i92_reg_752 <= j_6_reg_1826;
    end else if (((icmp_ln79_fu_1207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        j_0_i92_reg_752 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_1386_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
        j_0_i99_reg_763 <= j_7_reg_1857;
    end else if (((icmp_ln62_fu_1257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state85))) begin
        j_0_i99_reg_763 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (icmp_ln72_fu_1131_p2 == 1'd0))) begin
        j_0_i_reg_695 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        j_0_i_reg_695 <= j_reg_1757;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        k_0_i101_reg_787 <= k_1_reg_1870;
    end else if (((1'b1 == ap_CS_fsm_state96) & (icmp_ln87_fu_1369_p2 == 1'd0))) begin
        k_0_i101_reg_787 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        k_0_i121_reg_844 <= k_2_reg_1947;
    end else if (((1'b1 == ap_CS_fsm_state117) & (icmp_ln95_fu_1531_p2 == 1'd0))) begin
        k_0_i121_reg_844 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        k_0_i_reg_730 <= k_reg_1793;
    end else if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln79_fu_1207_p2 == 1'd0))) begin
        k_0_i_reg_730 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln309_reg_1643 == 1'd0))) begin
        phi_ln309_reg_600 <= add_ln309_reg_1647;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_ln309_reg_600 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        phi_ln310_reg_612 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln310_reg_1657 == 1'd0))) begin
        phi_ln310_reg_612 <= add_ln310_reg_1661;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        phi_ln311_reg_624 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln311_reg_1671 == 1'd0))) begin
        phi_ln311_reg_624 <= add_ln311_reg_1675;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        phi_ln312_reg_636 <= 4'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln312_reg_1685 == 1'd0))) begin
        phi_ln312_reg_636 <= add_ln312_reg_1689;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln319_reg_1699 == 1'd0))) begin
        phi_ln319_reg_648 <= add_ln319_reg_1703;
    end else if (((grp_Conv2d3_fu_875_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        phi_ln319_reg_648 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        phi_ln320_reg_660 <= 13'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln320_reg_1713 == 1'd0))) begin
        phi_ln320_reg_660 <= add_ln320_reg_1717;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        phi_ln321_reg_672 <= 9'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln321_reg_1727 == 1'd0))) begin
        phi_ln321_reg_672 <= add_ln321_reg_1731;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        phi_mul196_reg_798 <= add_ln90_1_reg_1880;
    end else if (((1'b1 == ap_CS_fsm_state96) & (icmp_ln87_fu_1369_p2 == 1'd0))) begin
        phi_mul196_reg_798 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        phi_mul_reg_741 <= add_ln82_1_reg_1803;
    end else if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln79_fu_1207_p2 == 1'd0))) begin
        phi_mul_reg_741 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        storemerge198_reg_774 <= grp_fu_885_p2;
    end else if (((1'b1 == ap_CS_fsm_state96) & (icmp_ln87_fu_1369_p2 == 1'd0))) begin
        storemerge198_reg_774 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        storemerge199_reg_831 <= grp_fu_885_p2;
    end else if (((1'b1 == ap_CS_fsm_state117) & (icmp_ln95_fu_1531_p2 == 1'd0))) begin
        storemerge199_reg_831 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        storemerge_reg_717 <= grp_fu_885_p2;
    end else if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln79_fu_1207_p2 == 1'd0))) begin
        storemerge_reg_717 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln309_reg_1647 <= add_ln309_fu_1018_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln310_reg_1661 <= add_ln310_fu_1035_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln311_reg_1675 <= add_ln311_fu_1052_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln312_reg_1689 <= add_ln312_fu_1069_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln319_reg_1703 <= add_ln319_fu_1086_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        add_ln320_reg_1717 <= add_ln320_fu_1103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        add_ln321_reg_1731 <= add_ln321_fu_1120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) & (icmp_ln81_fu_1224_p2 == 1'd0))) begin
        add_ln82_1_reg_1803 <= add_ln82_1_fu_1241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state97) & (icmp_ln89_fu_1386_p2 == 1'd0))) begin
        add_ln90_1_reg_1880 <= add_ln90_1_fu_1403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        fc_hidden_layer1_loa_reg_1818 <= fc_hidden_layer1_q0;
        flatten_conv_0_load_reg_1813 <= flatten_conv_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        fc_hidden_layer2_loa_reg_1895 <= fc_hidden_layer2_q0;
        first_relu_0_load_reg_1890 <= first_relu_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        fc_hidden_layer3_loa_reg_1967 <= fc_hidden_layer3_q0;
        second_relu_0_load_reg_1962 <= second_relu_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln79_fu_1207_p2 == 1'd0))) begin
        first_fc_0_addr_reg_1785 <= zext_ln80_fu_1219_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        first_fc_0_load_reg_1841 <= first_fc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        i_reg_1744 <= i_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln309_reg_1643 <= icmp_ln309_fu_1012_p2;
        icmp_ln309_reg_1643_pp0_iter1_reg <= icmp_ln309_reg_1643;
        phi_ln309_reg_600_pp0_iter1_reg <= phi_ln309_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln310_reg_1657 <= icmp_ln310_fu_1029_p2;
        icmp_ln310_reg_1657_pp1_iter1_reg <= icmp_ln310_reg_1657;
        phi_ln310_reg_612_pp1_iter1_reg <= phi_ln310_reg_612;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln311_reg_1671 <= icmp_ln311_fu_1046_p2;
        icmp_ln311_reg_1671_pp2_iter1_reg <= icmp_ln311_reg_1671;
        phi_ln311_reg_624_pp2_iter1_reg <= phi_ln311_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln312_reg_1685 <= icmp_ln312_fu_1063_p2;
        icmp_ln312_reg_1685_pp3_iter1_reg <= icmp_ln312_reg_1685;
        phi_ln312_reg_636_pp3_iter1_reg <= phi_ln312_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln319_reg_1699 <= icmp_ln319_fu_1080_p2;
        icmp_ln319_reg_1699_pp4_iter1_reg <= icmp_ln319_reg_1699;
        phi_ln319_reg_648_pp4_iter1_reg <= phi_ln319_reg_648;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln320_reg_1713 <= icmp_ln320_fu_1097_p2;
        icmp_ln320_reg_1713_pp5_iter1_reg <= icmp_ln320_reg_1713;
        phi_ln320_reg_660_pp5_iter1_reg <= phi_ln320_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln321_reg_1727 <= icmp_ln321_fu_1114_p2;
        icmp_ln321_reg_1727_pp6_iter1_reg <= icmp_ln321_reg_1727;
        phi_ln321_reg_672_pp6_iter1_reg <= phi_ln321_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln320_reg_1713 == 1'd0))) begin
        input_matrix_addr_1_1_reg_1722 <= m_axi_input_matrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_matrix_addr_1_reg_1613[29 : 0] <= zext_ln308_1_fu_962_p1[29 : 0];
        input_matrix_addr_2_reg_1619[29 : 0] <= zext_ln308_2_fu_972_p1[29 : 0];
        input_matrix_addr_3_reg_1625[29 : 0] <= zext_ln308_3_fu_982_p1[29 : 0];
        input_matrix_addr_4_reg_1631[29 : 0] <= zext_ln308_4_fu_992_p1[29 : 0];
        input_matrix_addr_5_reg_1637[29 : 0] <= zext_ln308_5_fu_1002_p1[29 : 0];
        input_matrix_addr_reg_1607[29 : 0] <= zext_ln308_fu_952_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln319_reg_1699 == 1'd0))) begin
        input_matrix_addr_2_1_reg_1708 <= m_axi_input_matrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln312_reg_1685 == 1'd0))) begin
        input_matrix_addr_3_1_reg_1694 <= m_axi_input_matrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln311_reg_1671 == 1'd0))) begin
        input_matrix_addr_4_1_reg_1680 <= m_axi_input_matrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln310_reg_1657 == 1'd0))) begin
        input_matrix_addr_5_1_reg_1666 <= m_axi_input_matrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln309_reg_1643 == 1'd0))) begin
        input_matrix_addr_6_1_reg_1652 <= m_axi_input_matrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln321_reg_1727 == 1'd0))) begin
        input_matrix_addr_re_reg_1736 <= m_axi_input_matrix_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        j_2_reg_1780 <= j_2_fu_1213_p2;
        zext_ln79_reg_1772[7 : 0] <= zext_ln79_fu_1203_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        j_6_reg_1826 <= j_6_fu_1263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        j_7_reg_1857 <= j_7_fu_1375_p2;
        zext_ln87_reg_1849[5 : 0] <= zext_ln87_fu_1365_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        j_8_reg_1903 <= j_8_fu_1425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        j_9_reg_1934 <= j_9_fu_1537_p2;
        zext_ln95_reg_1926[3 : 0] <= zext_ln95_fu_1527_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        j_reg_1757 <= j_fu_1183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        k_1_reg_1870 <= k_1_fu_1392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        k_2_reg_1947 <= k_2_fu_1554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        k_reg_1793 <= k_fu_1230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (icmp_ln95_fu_1531_p2 == 1'd0))) begin
        outmlp_0_addr_reg_1939 <= zext_ln96_fu_1543_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state80))) begin
        reg_914 <= grp_fu_892_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state87))) begin
        reg_926 <= grp_fu_899_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state92))) begin
        reg_931 <= grp_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state94))) begin
        reg_936 <= grp_fu_896_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state96) & (icmp_ln87_fu_1369_p2 == 1'd0))) begin
        second_fc_0_addr_reg_1862 <= zext_ln88_fu_1381_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        second_fc_0_load_reg_1918 <= second_fc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (icmp_ln72_fu_1131_p2 == 1'd0))) begin
        sub_ln74_reg_1749[10 : 3] <= sub_ln74_fu_1167_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state85) & (icmp_ln62_fu_1257_p2 == 1'd0))) begin
        zext_ln63_reg_1831[7 : 0] <= zext_ln63_fu_1269_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state106) & (icmp_ln67_fu_1419_p2 == 1'd0))) begin
        zext_ln68_reg_1908[5 : 0] <= zext_ln68_fu_1431_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln73_fu_1177_p2 == 1'd0))) begin
        zext_ln74_reg_1762[31 : 0] <= zext_ln74_fu_1198_p1[31 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln309_fu_1012_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln310_fu_1029_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln311_fu_1046_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln312_fu_1063_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln319_fu_1080_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state48 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state48 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln320_fu_1097_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln321_fu_1114_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state68 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state68 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln95_fu_1531_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln309_reg_1643 == 1'd0))) begin
        ap_phi_mux_phi_ln309_phi_fu_604_p4 = add_ln309_reg_1647;
    end else begin
        ap_phi_mux_phi_ln309_phi_fu_604_p4 = phi_ln309_reg_600;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln310_reg_1657 == 1'd0))) begin
        ap_phi_mux_phi_ln310_phi_fu_616_p4 = add_ln310_reg_1661;
    end else begin
        ap_phi_mux_phi_ln310_phi_fu_616_p4 = phi_ln310_reg_612;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln311_reg_1671 == 1'd0))) begin
        ap_phi_mux_phi_ln311_phi_fu_628_p4 = add_ln311_reg_1675;
    end else begin
        ap_phi_mux_phi_ln311_phi_fu_628_p4 = phi_ln311_reg_624;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln312_reg_1685 == 1'd0))) begin
        ap_phi_mux_phi_ln312_phi_fu_640_p4 = add_ln312_reg_1689;
    end else begin
        ap_phi_mux_phi_ln312_phi_fu_640_p4 = phi_ln312_reg_636;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln319_reg_1699 == 1'd0))) begin
        ap_phi_mux_phi_ln319_phi_fu_652_p4 = add_ln319_reg_1703;
    end else begin
        ap_phi_mux_phi_ln319_phi_fu_652_p4 = phi_ln319_reg_648;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln320_reg_1713 == 1'd0))) begin
        ap_phi_mux_phi_ln320_phi_fu_664_p4 = add_ln320_reg_1717;
    end else begin
        ap_phi_mux_phi_ln320_phi_fu_664_p4 = phi_ln320_reg_660;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln321_reg_1727 == 1'd0))) begin
        ap_phi_mux_phi_ln321_phi_fu_676_p4 = add_ln321_reg_1731;
    end else begin
        ap_phi_mux_phi_ln321_phi_fu_676_p4 = phi_ln321_reg_672;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_1531_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        conv_kernel1_address0 = zext_ln310_fu_1041_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        conv_kernel1_address0 = grp_Conv2d1_fu_855_kernel_address0;
    end else begin
        conv_kernel1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        conv_kernel1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        conv_kernel1_ce0 = grp_Conv2d1_fu_855_kernel_ce0;
    end else begin
        conv_kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln310_reg_1657_pp1_iter1_reg == 1'd0))) begin
        conv_kernel1_we0 = 1'b1;
    end else begin
        conv_kernel1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        conv_kernel2_address0 = zext_ln311_fu_1058_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        conv_kernel2_address0 = grp_Conv2d2_fu_865_kernel_address0;
    end else begin
        conv_kernel2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        conv_kernel2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        conv_kernel2_ce0 = grp_Conv2d2_fu_865_kernel_ce0;
    end else begin
        conv_kernel2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln311_reg_1671_pp2_iter1_reg == 1'd0))) begin
        conv_kernel2_we0 = 1'b1;
    end else begin
        conv_kernel2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        conv_kernel3_address0 = zext_ln312_fu_1075_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        conv_kernel3_address0 = grp_Conv2d3_fu_875_kernel_address0;
    end else begin
        conv_kernel3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        conv_kernel3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        conv_kernel3_ce0 = grp_Conv2d3_fu_875_kernel_ce0;
    end else begin
        conv_kernel3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln312_reg_1685_pp3_iter1_reg == 1'd0))) begin
        conv_kernel3_we0 = 1'b1;
    end else begin
        conv_kernel3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        fc_hidden_layer1_address0 = zext_ln82_1_fu_1252_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        fc_hidden_layer1_address0 = zext_ln319_fu_1092_p1;
    end else begin
        fc_hidden_layer1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        fc_hidden_layer1_ce0 = 1'b1;
    end else begin
        fc_hidden_layer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln319_reg_1699_pp4_iter1_reg == 1'd0))) begin
        fc_hidden_layer1_we0 = 1'b1;
    end else begin
        fc_hidden_layer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        fc_hidden_layer2_ce0 = 1'b1;
    end else begin
        fc_hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        fc_hidden_layer2_ce1 = 1'b1;
    end else begin
        fc_hidden_layer2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1) & (icmp_ln320_reg_1713_pp5_iter1_reg == 1'd0))) begin
        fc_hidden_layer2_we1 = 1'b1;
    end else begin
        fc_hidden_layer2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        fc_hidden_layer3_address0 = zext_ln98_1_fu_1596_p1;
    end else if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        fc_hidden_layer3_address0 = zext_ln321_fu_1126_p1;
    end else begin
        fc_hidden_layer3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
        fc_hidden_layer3_ce0 = 1'b1;
    end else begin
        fc_hidden_layer3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1) & (icmp_ln321_reg_1727_pp6_iter1_reg == 1'd0))) begin
        fc_hidden_layer3_we0 = 1'b1;
    end else begin
        fc_hidden_layer3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        first_conv1_address0 = grp_Conv2d2_fu_865_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        first_conv1_address0 = grp_Conv2d1_fu_855_out_matrix_address0;
    end else begin
        first_conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        first_conv1_ce0 = grp_Conv2d2_fu_865_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        first_conv1_ce0 = grp_Conv2d1_fu_855_out_matrix_ce0;
    end else begin
        first_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        first_conv1_we0 = grp_Conv2d1_fu_855_out_matrix_we0;
    end else begin
        first_conv1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        first_fc_0_address0 = zext_ln63_fu_1269_p1;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        first_fc_0_address0 = first_fc_0_addr_reg_1785;
    end else begin
        first_fc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state76))) begin
        first_fc_0_ce0 = 1'b1;
    end else begin
        first_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        first_fc_0_we0 = 1'b1;
    end else begin
        first_fc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        first_relu_0_address0 = zext_ln90_fu_1398_p1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        first_relu_0_address0 = zext_ln63_reg_1831;
    end else begin
        first_relu_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95))) begin
        first_relu_0_ce0 = 1'b1;
    end else begin
        first_relu_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        first_relu_0_we0 = 1'b1;
    end else begin
        first_relu_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        flatten_conv_0_address0 = zext_ln82_fu_1236_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        flatten_conv_0_address0 = zext_ln74_reg_1762;
    end else begin
        flatten_conv_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state74))) begin
        flatten_conv_0_ce0 = 1'b1;
    end else begin
        flatten_conv_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        flatten_conv_0_we0 = 1'b1;
    end else begin
        flatten_conv_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        grp_fu_885_p0 = storemerge199_reg_831;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_fu_885_p0 = storemerge198_reg_774;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_885_p0 = storemerge_reg_717;
    end else begin
        grp_fu_885_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_892_p0 = second_relu_0_load_reg_1962;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_892_p0 = first_relu_0_load_reg_1890;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_892_p0 = flatten_conv_0_load_reg_1813;
    end else begin
        grp_fu_892_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_892_p1 = fc_hidden_layer3_loa_reg_1967;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_892_p1 = fc_hidden_layer2_loa_reg_1895;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_892_p1 = fc_hidden_layer1_loa_reg_1818;
    end else begin
        grp_fu_892_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_899_p0 = second_fc_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_899_p0 = first_fc_0_q0;
    end else begin
        grp_fu_899_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        grp_fu_904_p0 = second_fc_0_load_reg_1918;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_904_p0 = first_fc_0_load_reg_1841;
    end else begin
        grp_fu_904_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state61) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        input_matrix_blk_n_AR = m_axi_input_matrix_ARREADY;
    end else begin
        input_matrix_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln309_reg_1643 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln310_reg_1657 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln311_reg_1671 == 1'd0)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln312_reg_1685 == 1'd0)) | ((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln319_reg_1699 == 1'd0)) | ((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln320_reg_1713 == 1'd0)) | ((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln321_reg_1727 == 1'd0)))) begin
        input_matrix_blk_n_R = m_axi_input_matrix_RVALID;
    end else begin
        input_matrix_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARADDR = input_matrix_addr_reg_1607;
    end else if (((1'b1 == ap_CS_fsm_state51) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARADDR = input_matrix_addr_1_reg_1613;
    end else if (((1'b1 == ap_CS_fsm_state41) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARADDR = input_matrix_addr_2_reg_1619;
    end else if (((1'b1 == ap_CS_fsm_state31) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARADDR = input_matrix_addr_3_reg_1625;
    end else if (((1'b1 == ap_CS_fsm_state21) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARADDR = input_matrix_addr_4_reg_1631;
    end else if (((1'b1 == ap_CS_fsm_state11) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARADDR = input_matrix_addr_5_reg_1637;
    end else if ((~((m_axi_input_matrix_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_input_matrix_ARADDR = zext_ln308_6_fu_941_p1;
    end else begin
        m_axi_input_matrix_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARLEN = 32'd450;
    end else if (((1'b1 == ap_CS_fsm_state51) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARLEN = 32'd8100;
    end else if (((1'b1 == ap_CS_fsm_state41) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
        m_axi_input_matrix_ARLEN = 32'd103680;
    end else if ((((1'b1 == ap_CS_fsm_state11) & (m_axi_input_matrix_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (m_axi_input_matrix_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (m_axi_input_matrix_ARREADY == 1'b1)))) begin
        m_axi_input_matrix_ARLEN = 32'd9;
    end else if ((~((m_axi_input_matrix_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_input_matrix_ARLEN = 32'd900;
    end else begin
        m_axi_input_matrix_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (m_axi_input_matrix_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (m_axi_input_matrix_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (m_axi_input_matrix_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (m_axi_input_matrix_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (m_axi_input_matrix_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state61) & (m_axi_input_matrix_ARREADY == 1'b1)) | (~((m_axi_input_matrix_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_axi_input_matrix_ARVALID = 1'b1;
    end else begin
        m_axi_input_matrix_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln309_reg_1643 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln310_reg_1657 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln311_reg_1671 == 1'd0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln312_reg_1685 == 1'd0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln319_reg_1699 == 1'd0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln320_reg_1713 == 1'd0)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln321_reg_1727 == 1'd0)))) begin
        m_axi_input_matrix_RREADY = 1'b1;
    end else begin
        m_axi_input_matrix_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mnist_data_address0 = zext_ln309_fu_1024_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        mnist_data_address0 = grp_Conv2d1_fu_855_input_matrix_address0;
    end else begin
        mnist_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mnist_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        mnist_data_ce0 = grp_Conv2d1_fu_855_input_matrix_ce0;
    end else begin
        mnist_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln309_reg_1643_pp0_iter1_reg == 1'd0))) begin
        mnist_data_we0 = 1'b1;
    end else begin
        mnist_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        outmlp_0_ce0 = 1'b1;
    end else begin
        outmlp_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        outmlp_0_we0 = 1'b1;
    end else begin
        outmlp_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        second_fc_0_address0 = zext_ln68_fu_1431_p1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        second_fc_0_address0 = second_fc_0_addr_reg_1862;
    end else begin
        second_fc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state97))) begin
        second_fc_0_ce0 = 1'b1;
    end else begin
        second_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        second_fc_0_we0 = 1'b1;
    end else begin
        second_fc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        second_relu_0_address0 = zext_ln98_fu_1560_p1;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        second_relu_0_address0 = zext_ln68_reg_1908;
    end else begin
        second_relu_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state116))) begin
        second_relu_0_ce0 = 1'b1;
    end else begin
        second_relu_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        second_relu_0_we0 = 1'b1;
    end else begin
        second_relu_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        sencond_conv1_address0 = grp_Conv2d3_fu_875_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        sencond_conv1_address0 = grp_Conv2d2_fu_865_out_matrix_address0;
    end else begin
        sencond_conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        sencond_conv1_ce0 = grp_Conv2d3_fu_875_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        sencond_conv1_ce0 = grp_Conv2d2_fu_865_out_matrix_ce0;
    end else begin
        sencond_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        sencond_conv1_we0 = grp_Conv2d2_fu_865_out_matrix_we0;
    end else begin
        sencond_conv1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        third_conv1_address0 = zext_ln74_fu_1198_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        third_conv1_address0 = grp_Conv2d3_fu_875_out_matrix_address0;
    end else begin
        third_conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        third_conv1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        third_conv1_ce0 = grp_Conv2d3_fu_875_out_matrix_ce0;
    end else begin
        third_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        third_conv1_we0 = grp_Conv2d3_fu_875_out_matrix_we0;
    end else begin
        third_conv1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_input_matrix_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln309_fu_1012_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln309_fu_1012_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln310_fu_1029_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln310_fu_1029_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln311_fu_1046_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln311_fu_1046_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln312_fu_1063_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln312_fu_1063_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (grp_Conv2d1_fu_855_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (grp_Conv2d2_fu_865_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((grp_Conv2d3_fu_875_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln319_fu_1080_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln319_fu_1080_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((icmp_ln320_fu_1097_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((icmp_ln320_fu_1097_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (m_axi_input_matrix_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((icmp_ln321_fu_1114_p2 == 1'd1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((icmp_ln321_fu_1114_p2 == 1'd1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((icmp_ln72_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln73_fu_1177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln79_fu_1207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln81_fu_1224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state85 : begin
            if (((icmp_ln62_fu_1257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state96 : begin
            if (((icmp_ln87_fu_1369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((icmp_ln89_fu_1386_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state106 : begin
            if (((icmp_ln67_fu_1419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state117 : begin
            if (((icmp_ln95_fu_1531_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state118 : begin
            if (((icmp_ln97_fu_1548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln309_fu_1018_p2 = (ap_phi_mux_phi_ln309_phi_fu_604_p4 + 10'd1);

assign add_ln310_fu_1035_p2 = (ap_phi_mux_phi_ln310_phi_fu_616_p4 + 4'd1);

assign add_ln311_fu_1052_p2 = (ap_phi_mux_phi_ln311_phi_fu_628_p4 + 4'd1);

assign add_ln312_fu_1069_p2 = (ap_phi_mux_phi_ln312_phi_fu_640_p4 + 4'd1);

assign add_ln319_fu_1086_p2 = (ap_phi_mux_phi_ln319_phi_fu_652_p4 + 17'd1);

assign add_ln320_fu_1103_p2 = (ap_phi_mux_phi_ln320_phi_fu_664_p4 + 13'd1);

assign add_ln321_fu_1120_p2 = (ap_phi_mux_phi_ln321_phi_fu_676_p4 + 9'd1);

assign add_ln74_fu_1189_p2 = (sub_ln74_reg_1749 + zext_ln73_fu_1173_p1);

assign add_ln82_1_fu_1241_p2 = (phi_mul_reg_741 + 17'd180);

assign add_ln82_fu_1247_p2 = (zext_ln79_reg_1772 + phi_mul_reg_741);

assign add_ln90_1_fu_1403_p2 = (phi_mul196_reg_798 + 13'd45);

assign add_ln90_fu_1409_p2 = (zext_ln87_reg_1849 + phi_mul196_reg_798);

assign add_ln98_1_fu_1590_p2 = (shl_ln1_fu_1565_p3 + zext_ln98_2_fu_1586_p1);

assign add_ln98_fu_1581_p2 = (zext_ln95_reg_1926 + shl_ln98_1_fu_1573_p3);

assign and_ln28_1_fu_1351_p2 = (grp_fu_904_p2 & and_ln28_fu_1345_p2);

assign and_ln28_2_fu_1507_p2 = (or_ln28_3_fu_1501_p2 & or_ln28_2_fu_1483_p2);

assign and_ln28_3_fu_1513_p2 = (grp_fu_904_p2 & and_ln28_2_fu_1507_p2);

assign and_ln28_fu_1345_p2 = (or_ln28_fu_1321_p2 & or_ln28_1_fu_1339_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd84];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln309_reg_1643 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln309_reg_1643 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln310_reg_1657 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln310_reg_1657 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln311_reg_1671 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln311_reg_1671 == 1'd0));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln312_reg_1685 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln312_reg_1685 == 1'd0));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln319_reg_1699 == 1'd0));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln319_reg_1699 == 1'd0));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln320_reg_1713 == 1'd0));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln320_reg_1713 == 1'd0));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln321_reg_1727 == 1'd0));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((m_axi_input_matrix_RVALID == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln321_reg_1727 == 1'd0));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((m_axi_input_matrix_RVALID == 1'b0) & (icmp_ln310_reg_1657 == 1'd0));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_pp2_stage0_iter1 = ((m_axi_input_matrix_RVALID == 1'b0) & (icmp_ln311_reg_1671 == 1'd0));
end

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_pp3_stage0_iter1 = ((m_axi_input_matrix_RVALID == 1'b0) & (icmp_ln312_reg_1685 == 1'd0));
end

assign ap_block_state40_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state49_pp4_stage0_iter1 = ((m_axi_input_matrix_RVALID == 1'b0) & (icmp_ln319_reg_1699 == 1'd0));
end

assign ap_block_state50_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59_pp5_stage0_iter1 = ((m_axi_input_matrix_RVALID == 1'b0) & (icmp_ln320_reg_1713 == 1'd0));
end

assign ap_block_state60_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state69_pp6_stage0_iter1 = ((m_axi_input_matrix_RVALID == 1'b0) & (icmp_ln321_reg_1727 == 1'd0));
end

assign ap_block_state70_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((m_axi_input_matrix_RVALID == 1'b0) & (icmp_ln309_reg_1643 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign bitcast_ln28_1_fu_1291_p1 = reg_936;

assign bitcast_ln28_2_fu_1436_p1 = second_fc_0_load_reg_1918;

assign bitcast_ln28_3_fu_1453_p1 = reg_936;

assign bitcast_ln28_fu_1274_p1 = first_fc_0_load_reg_1841;

assign conv_kernel1_d0 = input_matrix_addr_5_1_reg_1666;

assign conv_kernel2_d0 = input_matrix_addr_4_1_reg_1680;

assign conv_kernel3_d0 = input_matrix_addr_3_1_reg_1694;

assign fc_hidden_layer1_d0 = input_matrix_addr_2_1_reg_1708;

assign fc_hidden_layer2_address0 = zext_ln90_1_fu_1414_p1;

assign fc_hidden_layer2_address1 = zext_ln320_fu_1109_p1;

assign fc_hidden_layer2_d1 = input_matrix_addr_1_1_reg_1722;

assign fc_hidden_layer3_d0 = input_matrix_addr_re_reg_1736;

assign first_conv1_d0 = grp_Conv2d1_fu_855_out_matrix_d0;

assign first_fc_0_d0 = storemerge_reg_717;

assign first_relu_0_d0 = ((and_ln28_1_fu_1351_p2[0:0] === 1'b1) ? first_fc_0_load_reg_1841 : reg_936);

assign flatten_conv_0_d0 = third_conv1_q0;

assign grp_Conv2d1_fu_855_ap_start = grp_Conv2d1_fu_855_ap_start_reg;

assign grp_Conv2d2_fu_865_ap_start = grp_Conv2d2_fu_865_ap_start_reg;

assign grp_Conv2d3_fu_875_ap_start = grp_Conv2d3_fu_875_ap_start_reg;

assign i_fu_1137_p2 = (i_0_i_reg_684 + 5'd1);

assign icmp_ln28_1_fu_1315_p2 = ((trunc_ln28_fu_1287_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_1327_p2 = ((tmp_2_fu_1295_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_1333_p2 = ((trunc_ln28_1_fu_1305_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_1471_p2 = ((tmp_4_fu_1439_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_1477_p2 = ((trunc_ln28_2_fu_1449_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_1489_p2 = ((tmp_5_fu_1457_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_1495_p2 = ((trunc_ln28_3_fu_1467_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_1309_p2 = ((tmp_1_fu_1277_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln309_fu_1012_p2 = ((ap_phi_mux_phi_ln309_phi_fu_604_p4 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln310_fu_1029_p2 = ((ap_phi_mux_phi_ln310_phi_fu_616_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln311_fu_1046_p2 = ((ap_phi_mux_phi_ln311_phi_fu_628_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln312_fu_1063_p2 = ((ap_phi_mux_phi_ln312_phi_fu_640_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln319_fu_1080_p2 = ((ap_phi_mux_phi_ln319_phi_fu_652_p4 == 17'd103680) ? 1'b1 : 1'b0);

assign icmp_ln320_fu_1097_p2 = ((ap_phi_mux_phi_ln320_phi_fu_664_p4 == 13'd8100) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_1114_p2 = ((ap_phi_mux_phi_ln321_phi_fu_676_p4 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_1257_p2 = ((j_0_i92_reg_752 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_1419_p2 = ((j_0_i110_reg_809 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_1131_p2 = ((i_0_i_reg_684 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_1177_p2 = ((j_0_i_reg_695 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1207_p2 = ((j_0_i89_reg_706 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_1224_p2 = ((k_0_i_reg_730 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_1369_p2 = ((j_0_i99_reg_763 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_1386_p2 = ((k_0_i101_reg_787 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1531_p2 = ((j_0_i119_reg_820 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_1548_p2 = ((k_0_i121_reg_844 == 6'd45) ? 1'b1 : 1'b0);

assign j_2_fu_1213_p2 = (j_0_i89_reg_706 + 8'd1);

assign j_6_fu_1263_p2 = (j_0_i92_reg_752 + 8'd1);

assign j_7_fu_1375_p2 = (j_0_i99_reg_763 + 6'd1);

assign j_8_fu_1425_p2 = (j_0_i110_reg_809 + 6'd1);

assign j_9_fu_1537_p2 = (j_0_i119_reg_820 + 4'd1);

assign j_fu_1183_p2 = (j_0_i_reg_695 + 5'd1);

assign k_1_fu_1392_p2 = (k_0_i101_reg_787 + 8'd1);

assign k_2_fu_1554_p2 = (k_0_i121_reg_844 + 6'd1);

assign k_fu_1230_p2 = (k_0_i_reg_730 + 10'd1);

assign m_axi_input_matrix_ARBURST = 2'd0;

assign m_axi_input_matrix_ARCACHE = 4'd0;

assign m_axi_input_matrix_ARID = 1'd0;

assign m_axi_input_matrix_ARLOCK = 2'd0;

assign m_axi_input_matrix_ARPROT = 3'd0;

assign m_axi_input_matrix_ARQOS = 4'd0;

assign m_axi_input_matrix_ARREGION = 4'd0;

assign m_axi_input_matrix_ARSIZE = 3'd0;

assign m_axi_input_matrix_ARUSER = 1'd0;

assign m_axi_input_matrix_AWADDR = 32'd0;

assign m_axi_input_matrix_AWBURST = 2'd0;

assign m_axi_input_matrix_AWCACHE = 4'd0;

assign m_axi_input_matrix_AWID = 1'd0;

assign m_axi_input_matrix_AWLEN = 32'd0;

assign m_axi_input_matrix_AWLOCK = 2'd0;

assign m_axi_input_matrix_AWPROT = 3'd0;

assign m_axi_input_matrix_AWQOS = 4'd0;

assign m_axi_input_matrix_AWREGION = 4'd0;

assign m_axi_input_matrix_AWSIZE = 3'd0;

assign m_axi_input_matrix_AWUSER = 1'd0;

assign m_axi_input_matrix_AWVALID = 1'b0;

assign m_axi_input_matrix_BREADY = 1'b0;

assign m_axi_input_matrix_WDATA = 32'd0;

assign m_axi_input_matrix_WID = 1'd0;

assign m_axi_input_matrix_WLAST = 1'b0;

assign m_axi_input_matrix_WSTRB = 4'd0;

assign m_axi_input_matrix_WUSER = 1'd0;

assign m_axi_input_matrix_WVALID = 1'b0;

assign mnist_data_d0 = input_matrix_addr_6_1_reg_1652;

assign or_ln28_1_fu_1339_p2 = (icmp_ln28_3_fu_1333_p2 | icmp_ln28_2_fu_1327_p2);

assign or_ln28_2_fu_1483_p2 = (icmp_ln28_5_fu_1477_p2 | icmp_ln28_4_fu_1471_p2);

assign or_ln28_3_fu_1501_p2 = (icmp_ln28_7_fu_1495_p2 | icmp_ln28_6_fu_1489_p2);

assign or_ln28_fu_1321_p2 = (icmp_ln28_fu_1309_p2 | icmp_ln28_1_fu_1315_p2);

assign outmlp_0_address0 = outmlp_0_addr_reg_1939;

assign outmlp_0_d0 = storemerge199_reg_831;

assign second_fc_0_d0 = storemerge198_reg_774;

assign second_relu_0_d0 = ((and_ln28_3_fu_1513_p2[0:0] === 1'b1) ? second_fc_0_load_reg_1918 : reg_936);

assign sencond_conv1_d0 = grp_Conv2d2_fu_865_out_matrix_d0;

assign sext_ln74_fu_1194_p1 = $signed(add_ln74_fu_1189_p2);

assign shl_ln1_fu_1565_p3 = {{k_0_i121_reg_844}, {3'd0}};

assign shl_ln74_1_fu_1155_p3 = {{i_0_i_reg_684}, {3'd0}};

assign shl_ln98_1_fu_1573_p3 = {{k_0_i121_reg_844}, {1'd0}};

assign shl_ln_fu_1143_p3 = {{i_0_i_reg_684}, {5'd0}};

assign sub_ln74_fu_1167_p2 = (zext_ln74_1_fu_1151_p1 - zext_ln74_2_fu_1163_p1);

assign tmp_1_fu_1277_p4 = {{bitcast_ln28_fu_1274_p1[30:23]}};

assign tmp_2_fu_1295_p4 = {{bitcast_ln28_1_fu_1291_p1[30:23]}};

assign tmp_4_fu_1439_p4 = {{bitcast_ln28_2_fu_1436_p1[30:23]}};

assign tmp_5_fu_1457_p4 = {{bitcast_ln28_3_fu_1453_p1[30:23]}};

assign trunc_ln28_1_fu_1305_p1 = bitcast_ln28_1_fu_1291_p1[22:0];

assign trunc_ln28_2_fu_1449_p1 = bitcast_ln28_2_fu_1436_p1[22:0];

assign trunc_ln28_3_fu_1467_p1 = bitcast_ln28_3_fu_1453_p1[22:0];

assign trunc_ln28_fu_1287_p1 = bitcast_ln28_fu_1274_p1[22:0];

assign zext_ln308_1_fu_962_p1 = fc2_offset;

assign zext_ln308_2_fu_972_p1 = fc1_offset;

assign zext_ln308_3_fu_982_p1 = conv3_offset;

assign zext_ln308_4_fu_992_p1 = conv2_offset;

assign zext_ln308_5_fu_1002_p1 = conv1_offset;

assign zext_ln308_6_fu_941_p1 = input_matrix_offset;

assign zext_ln308_fu_952_p1 = fc3_offset;

assign zext_ln309_fu_1024_p1 = phi_ln309_reg_600_pp0_iter1_reg;

assign zext_ln310_fu_1041_p1 = phi_ln310_reg_612_pp1_iter1_reg;

assign zext_ln311_fu_1058_p1 = phi_ln311_reg_624_pp2_iter1_reg;

assign zext_ln312_fu_1075_p1 = phi_ln312_reg_636_pp3_iter1_reg;

assign zext_ln319_fu_1092_p1 = phi_ln319_reg_648_pp4_iter1_reg;

assign zext_ln320_fu_1109_p1 = phi_ln320_reg_660_pp5_iter1_reg;

assign zext_ln321_fu_1126_p1 = phi_ln321_reg_672_pp6_iter1_reg;

assign zext_ln63_fu_1269_p1 = j_0_i92_reg_752;

assign zext_ln68_fu_1431_p1 = j_0_i110_reg_809;

assign zext_ln73_fu_1173_p1 = j_0_i_reg_695;

assign zext_ln74_1_fu_1151_p1 = shl_ln_fu_1143_p3;

assign zext_ln74_2_fu_1163_p1 = shl_ln74_1_fu_1155_p3;

assign zext_ln74_fu_1198_p1 = $unsigned(sext_ln74_fu_1194_p1);

assign zext_ln79_fu_1203_p1 = j_0_i89_reg_706;

assign zext_ln80_fu_1219_p1 = j_0_i89_reg_706;

assign zext_ln82_1_fu_1252_p1 = add_ln82_fu_1247_p2;

assign zext_ln82_fu_1236_p1 = k_0_i_reg_730;

assign zext_ln87_fu_1365_p1 = j_0_i99_reg_763;

assign zext_ln88_fu_1381_p1 = j_0_i99_reg_763;

assign zext_ln90_1_fu_1414_p1 = add_ln90_fu_1409_p2;

assign zext_ln90_fu_1398_p1 = k_0_i101_reg_787;

assign zext_ln95_fu_1527_p1 = j_0_i119_reg_820;

assign zext_ln96_fu_1543_p1 = j_0_i119_reg_820;

assign zext_ln98_1_fu_1596_p1 = add_ln98_1_fu_1590_p2;

assign zext_ln98_2_fu_1586_p1 = add_ln98_fu_1581_p2;

assign zext_ln98_fu_1560_p1 = k_0_i121_reg_844;

always @ (posedge ap_clk) begin
    input_matrix_addr_reg_1607[31:30] <= 2'b00;
    input_matrix_addr_1_reg_1613[31:30] <= 2'b00;
    input_matrix_addr_2_reg_1619[31:30] <= 2'b00;
    input_matrix_addr_3_reg_1625[31:30] <= 2'b00;
    input_matrix_addr_4_reg_1631[31:30] <= 2'b00;
    input_matrix_addr_5_reg_1637[31:30] <= 2'b00;
    sub_ln74_reg_1749[2:0] <= 3'b000;
    zext_ln74_reg_1762[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln79_reg_1772[16:8] <= 9'b000000000;
    zext_ln63_reg_1831[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln87_reg_1849[12:6] <= 7'b0000000;
    zext_ln68_reg_1908[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln95_reg_1926[6:4] <= 3'b000;
end

endmodule //forward
