-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forw_back is
generic (
    C_M_AXI_DATA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of forw_back is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "forw_back,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=419,HLS_SYN_DSP=135,HLS_SYN_FF=22405,HLS_SYN_LUT=36603,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (78 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (78 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (78 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (78 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (78 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (78 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (78 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (78 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (78 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal flag : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal label_r : STD_LOGIC_VECTOR (31 downto 0);
    signal lr : STD_LOGIC_VECTOR (31 downto 0);
    signal mnist_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mnist_data_ce0 : STD_LOGIC;
    signal mnist_data_we0 : STD_LOGIC;
    signal mnist_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mnist_data_ce1 : STD_LOGIC;
    signal mnist_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_kernel1_ce0 : STD_LOGIC;
    signal conv_kernel1_we0 : STD_LOGIC;
    signal conv_kernel1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_kernel2_ce0 : STD_LOGIC;
    signal conv_kernel2_we0 : STD_LOGIC;
    signal conv_kernel2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_kernel3_ce0 : STD_LOGIC;
    signal conv_kernel3_we0 : STD_LOGIC;
    signal conv_kernel3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal first_conv1_ce0 : STD_LOGIC;
    signal first_conv1_we0 : STD_LOGIC;
    signal first_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_conv1_ce1 : STD_LOGIC;
    signal first_conv1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sencond_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sencond_conv1_ce0 : STD_LOGIC;
    signal sencond_conv1_we0 : STD_LOGIC;
    signal sencond_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sencond_conv1_ce1 : STD_LOGIC;
    signal sencond_conv1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc_hidden_layer1_ce0 : STD_LOGIC;
    signal fc_hidden_layer1_we0 : STD_LOGIC;
    signal fc_hidden_layer1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal fc_hidden_layer2_ce0 : STD_LOGIC;
    signal fc_hidden_layer2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal fc_hidden_layer2_ce1 : STD_LOGIC;
    signal fc_hidden_layer2_we1 : STD_LOGIC;
    signal fc_hidden_layer2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fc_hidden_layer3_ce0 : STD_LOGIC;
    signal fc_hidden_layer3_we0 : STD_LOGIC;
    signal fc_hidden_layer3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flatten_conv_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal flatten_conv_0_ce0 : STD_LOGIC;
    signal flatten_conv_0_we0 : STD_LOGIC;
    signal flatten_conv_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_fc_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_fc_0_ce0 : STD_LOGIC;
    signal first_fc_0_we0 : STD_LOGIC;
    signal first_fc_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_relu_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_relu_0_ce0 : STD_LOGIC;
    signal first_relu_0_we0 : STD_LOGIC;
    signal first_relu_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal second_fc_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal second_fc_0_ce0 : STD_LOGIC;
    signal second_fc_0_we0 : STD_LOGIC;
    signal second_fc_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal second_relu_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal second_relu_0_ce0 : STD_LOGIC;
    signal second_relu_0_we0 : STD_LOGIC;
    signal second_relu_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outmlp_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal outmlp_0_ce0 : STD_LOGIC;
    signal outmlp_0_we0 : STD_LOGIC;
    signal outmlp_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln354_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln356_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_785_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln364_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln367_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_766_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal data_AWVALID : STD_LOGIC;
    signal data_AWREADY : STD_LOGIC;
    signal data_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_WVALID : STD_LOGIC;
    signal data_WREADY : STD_LOGIC;
    signal data_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal data_WLAST : STD_LOGIC;
    signal data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_ARVALID : STD_LOGIC;
    signal data_ARREADY : STD_LOGIC;
    signal data_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RVALID : STD_LOGIC;
    signal data_RREADY : STD_LOGIC;
    signal data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RLAST : STD_LOGIC;
    signal data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BVALID : STD_LOGIC;
    signal data_BREADY : STD_LOGIC;
    signal data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln367_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln356_reg_329 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state76_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state77_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state78_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state78_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal grp_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_467 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal label_read_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal lr1_reg_652 : STD_LOGIC_VECTOR (29 downto 0);
    signal out1_reg_657 : STD_LOGIC_VECTOR (29 downto 0);
    signal fc_reg_662 : STD_LOGIC_VECTOR (29 downto 0);
    signal fc4_reg_668 : STD_LOGIC_VECTOR (29 downto 0);
    signal fc5_reg_674 : STD_LOGIC_VECTOR (29 downto 0);
    signal conv_reg_680 : STD_LOGIC_VECTOR (29 downto 0);
    signal conv4_reg_686 : STD_LOGIC_VECTOR (29 downto 0);
    signal conv5_reg_692 : STD_LOGIC_VECTOR (29 downto 0);
    signal in1_reg_698 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln354_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_addr_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal grp_forward_fu_386_ap_ready : STD_LOGIC;
    signal grp_forward_fu_386_ap_done : STD_LOGIC;
    signal j_fu_585_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_717 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln361_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_727 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_state28_io : BOOLEAN;
    signal i_fu_602_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_741 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln365_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln365_reg_746 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_756 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_445_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_761 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal icmp_ln367_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state68_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state70_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln367_fu_619_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal result_load_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln356_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln356_fu_636_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state68 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state76 : STD_LOGIC;
    signal grp_backward_fu_340_ap_start : STD_LOGIC;
    signal grp_backward_fu_340_ap_done : STD_LOGIC;
    signal grp_backward_fu_340_ap_idle : STD_LOGIC;
    signal grp_backward_fu_340_ap_ready : STD_LOGIC;
    signal grp_backward_fu_340_m_axi_conv1_AWVALID : STD_LOGIC;
    signal grp_backward_fu_340_m_axi_conv1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_WVALID : STD_LOGIC;
    signal grp_backward_fu_340_m_axi_conv1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_WLAST : STD_LOGIC;
    signal grp_backward_fu_340_m_axi_conv1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARVALID : STD_LOGIC;
    signal grp_backward_fu_340_m_axi_conv1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_340_m_axi_conv1_RREADY : STD_LOGIC;
    signal grp_backward_fu_340_m_axi_conv1_BREADY : STD_LOGIC;
    signal grp_backward_fu_340_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_result_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_second_relu_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backward_fu_340_second_relu_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_backward_fu_340_fc_hidden_layer3_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer3_we0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_second_fc_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backward_fu_340_second_fc_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_first_relu_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backward_fu_340_first_relu_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_backward_fu_340_fc_hidden_layer2_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_backward_fu_340_fc_hidden_layer2_ce1 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer2_we1 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_first_fc_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backward_fu_340_first_fc_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_flatten_conv_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_340_flatten_conv_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_backward_fu_340_fc_hidden_layer1_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer1_we0 : STD_LOGIC;
    signal grp_backward_fu_340_fc_hidden_layer1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_sencond_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_340_sencond_conv1_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_sencond_conv1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_340_sencond_conv1_ce1 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_conv_kernel3_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel3_we0 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_first_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_340_first_conv1_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_first_conv1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_340_first_conv1_ce1 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_conv_kernel2_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel2_we0 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_340_mnist_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_340_mnist_data_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_mnist_data_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_340_mnist_data_ce1 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_340_conv_kernel1_ce0 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel1_we0 : STD_LOGIC;
    signal grp_backward_fu_340_conv_kernel1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_ap_start : STD_LOGIC;
    signal grp_forward_fu_386_ap_idle : STD_LOGIC;
    signal grp_forward_fu_386_m_axi_input_matrix_AWVALID : STD_LOGIC;
    signal grp_forward_fu_386_m_axi_input_matrix_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_WVALID : STD_LOGIC;
    signal grp_forward_fu_386_m_axi_input_matrix_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_WLAST : STD_LOGIC;
    signal grp_forward_fu_386_m_axi_input_matrix_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARVALID : STD_LOGIC;
    signal grp_forward_fu_386_m_axi_input_matrix_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_forward_fu_386_m_axi_input_matrix_RREADY : STD_LOGIC;
    signal grp_forward_fu_386_m_axi_input_matrix_BREADY : STD_LOGIC;
    signal grp_forward_fu_386_mnist_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_forward_fu_386_mnist_data_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_mnist_data_we0 : STD_LOGIC;
    signal grp_forward_fu_386_mnist_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_conv_kernel1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_conv_kernel1_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_conv_kernel1_we0 : STD_LOGIC;
    signal grp_forward_fu_386_conv_kernel1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_conv_kernel2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_conv_kernel2_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_conv_kernel2_we0 : STD_LOGIC;
    signal grp_forward_fu_386_conv_kernel2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_conv_kernel3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_conv_kernel3_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_conv_kernel3_we0 : STD_LOGIC;
    signal grp_forward_fu_386_conv_kernel3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_first_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_forward_fu_386_first_conv1_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_first_conv1_we0 : STD_LOGIC;
    signal grp_forward_fu_386_first_conv1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_sencond_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_forward_fu_386_sencond_conv1_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_sencond_conv1_we0 : STD_LOGIC;
    signal grp_forward_fu_386_sencond_conv1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_fc_hidden_layer1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_forward_fu_386_fc_hidden_layer1_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_fc_hidden_layer1_we0 : STD_LOGIC;
    signal grp_forward_fu_386_fc_hidden_layer1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_fc_hidden_layer2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_forward_fu_386_fc_hidden_layer2_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_fc_hidden_layer2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_forward_fu_386_fc_hidden_layer2_ce1 : STD_LOGIC;
    signal grp_forward_fu_386_fc_hidden_layer2_we1 : STD_LOGIC;
    signal grp_forward_fu_386_fc_hidden_layer2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_fc_hidden_layer3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_forward_fu_386_fc_hidden_layer3_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_fc_hidden_layer3_we0 : STD_LOGIC;
    signal grp_forward_fu_386_fc_hidden_layer3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_flatten_conv_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_forward_fu_386_flatten_conv_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_flatten_conv_0_we0 : STD_LOGIC;
    signal grp_forward_fu_386_flatten_conv_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_first_fc_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_forward_fu_386_first_fc_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_first_fc_0_we0 : STD_LOGIC;
    signal grp_forward_fu_386_first_fc_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_first_relu_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_forward_fu_386_first_relu_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_first_relu_0_we0 : STD_LOGIC;
    signal grp_forward_fu_386_first_relu_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_second_fc_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_forward_fu_386_second_fc_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_second_fc_0_we0 : STD_LOGIC;
    signal grp_forward_fu_386_second_fc_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_second_relu_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_forward_fu_386_second_relu_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_second_relu_0_we0 : STD_LOGIC;
    signal grp_forward_fu_386_second_relu_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_386_outmlp_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_386_outmlp_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_386_outmlp_0_we0 : STD_LOGIC;
    signal grp_forward_fu_386_outmlp_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_probability_0_phi_fu_288_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal probability_0_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_296 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_backward_fu_340_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_forward_fu_386_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln362_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln356_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state75 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_435_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (78 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component backward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        label_r : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_conv1_AWVALID : OUT STD_LOGIC;
        m_axi_conv1_AWREADY : IN STD_LOGIC;
        m_axi_conv1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_conv1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_conv1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_conv1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_conv1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_conv1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_conv1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_conv1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_conv1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_conv1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_WVALID : OUT STD_LOGIC;
        m_axi_conv1_WREADY : IN STD_LOGIC;
        m_axi_conv1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_conv1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_conv1_WLAST : OUT STD_LOGIC;
        m_axi_conv1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_ARVALID : OUT STD_LOGIC;
        m_axi_conv1_ARREADY : IN STD_LOGIC;
        m_axi_conv1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_conv1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_conv1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_conv1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_conv1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_conv1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_conv1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_conv1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_conv1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_conv1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_RVALID : IN STD_LOGIC;
        m_axi_conv1_RREADY : OUT STD_LOGIC;
        m_axi_conv1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_conv1_RLAST : IN STD_LOGIC;
        m_axi_conv1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_conv1_BVALID : IN STD_LOGIC;
        m_axi_conv1_BREADY : OUT STD_LOGIC;
        m_axi_conv1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_conv1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_conv1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        conv2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        conv3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        fc1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        fc2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        fc3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        lr_in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        second_relu_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        second_relu_0_ce0 : OUT STD_LOGIC;
        second_relu_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fc_hidden_layer3_ce0 : OUT STD_LOGIC;
        fc_hidden_layer3_we0 : OUT STD_LOGIC;
        fc_hidden_layer3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        second_fc_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        second_fc_0_ce0 : OUT STD_LOGIC;
        second_fc_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        first_relu_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        first_relu_0_ce0 : OUT STD_LOGIC;
        first_relu_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        fc_hidden_layer2_ce0 : OUT STD_LOGIC;
        fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer2_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        fc_hidden_layer2_ce1 : OUT STD_LOGIC;
        fc_hidden_layer2_we1 : OUT STD_LOGIC;
        fc_hidden_layer2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        first_fc_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        first_fc_0_ce0 : OUT STD_LOGIC;
        first_fc_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        flatten_conv_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        flatten_conv_0_ce0 : OUT STD_LOGIC;
        flatten_conv_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        fc_hidden_layer1_ce0 : OUT STD_LOGIC;
        fc_hidden_layer1_we0 : OUT STD_LOGIC;
        fc_hidden_layer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sencond_conv1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sencond_conv1_ce0 : OUT STD_LOGIC;
        sencond_conv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sencond_conv1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sencond_conv1_ce1 : OUT STD_LOGIC;
        sencond_conv1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel3_ce0 : OUT STD_LOGIC;
        conv_kernel3_we0 : OUT STD_LOGIC;
        conv_kernel3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        first_conv1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        first_conv1_ce0 : OUT STD_LOGIC;
        first_conv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        first_conv1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        first_conv1_ce1 : OUT STD_LOGIC;
        first_conv1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel2_ce0 : OUT STD_LOGIC;
        conv_kernel2_we0 : OUT STD_LOGIC;
        conv_kernel2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mnist_data_ce0 : OUT STD_LOGIC;
        mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mnist_data_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mnist_data_ce1 : OUT STD_LOGIC;
        mnist_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel1_ce0 : OUT STD_LOGIC;
        conv_kernel1_we0 : OUT STD_LOGIC;
        conv_kernel1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_matrix_AWVALID : OUT STD_LOGIC;
        m_axi_input_matrix_AWREADY : IN STD_LOGIC;
        m_axi_input_matrix_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_matrix_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_matrix_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_matrix_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_matrix_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_matrix_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_matrix_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_matrix_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_matrix_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_matrix_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_WVALID : OUT STD_LOGIC;
        m_axi_input_matrix_WREADY : IN STD_LOGIC;
        m_axi_input_matrix_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_matrix_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_matrix_WLAST : OUT STD_LOGIC;
        m_axi_input_matrix_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_ARVALID : OUT STD_LOGIC;
        m_axi_input_matrix_ARREADY : IN STD_LOGIC;
        m_axi_input_matrix_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_matrix_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_matrix_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_matrix_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_matrix_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_matrix_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_matrix_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_matrix_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_matrix_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_matrix_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_RVALID : IN STD_LOGIC;
        m_axi_input_matrix_RREADY : OUT STD_LOGIC;
        m_axi_input_matrix_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_matrix_RLAST : IN STD_LOGIC;
        m_axi_input_matrix_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_matrix_BVALID : IN STD_LOGIC;
        m_axi_input_matrix_BREADY : OUT STD_LOGIC;
        m_axi_input_matrix_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_matrix_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_matrix_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_matrix_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        conv1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        conv2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        conv3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        fc1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        fc2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        fc3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mnist_data_ce0 : OUT STD_LOGIC;
        mnist_data_we0 : OUT STD_LOGIC;
        mnist_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel1_ce0 : OUT STD_LOGIC;
        conv_kernel1_we0 : OUT STD_LOGIC;
        conv_kernel1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel2_ce0 : OUT STD_LOGIC;
        conv_kernel2_we0 : OUT STD_LOGIC;
        conv_kernel2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel3_ce0 : OUT STD_LOGIC;
        conv_kernel3_we0 : OUT STD_LOGIC;
        conv_kernel3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        first_conv1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        first_conv1_ce0 : OUT STD_LOGIC;
        first_conv1_we0 : OUT STD_LOGIC;
        first_conv1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        first_conv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sencond_conv1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sencond_conv1_ce0 : OUT STD_LOGIC;
        sencond_conv1_we0 : OUT STD_LOGIC;
        sencond_conv1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sencond_conv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        fc_hidden_layer1_ce0 : OUT STD_LOGIC;
        fc_hidden_layer1_we0 : OUT STD_LOGIC;
        fc_hidden_layer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        fc_hidden_layer2_ce0 : OUT STD_LOGIC;
        fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer2_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        fc_hidden_layer2_ce1 : OUT STD_LOGIC;
        fc_hidden_layer2_we1 : OUT STD_LOGIC;
        fc_hidden_layer2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fc_hidden_layer3_ce0 : OUT STD_LOGIC;
        fc_hidden_layer3_we0 : OUT STD_LOGIC;
        fc_hidden_layer3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        flatten_conv_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        flatten_conv_0_ce0 : OUT STD_LOGIC;
        flatten_conv_0_we0 : OUT STD_LOGIC;
        flatten_conv_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        flatten_conv_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        first_fc_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        first_fc_0_ce0 : OUT STD_LOGIC;
        first_fc_0_we0 : OUT STD_LOGIC;
        first_fc_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        first_fc_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        first_relu_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        first_relu_0_ce0 : OUT STD_LOGIC;
        first_relu_0_we0 : OUT STD_LOGIC;
        first_relu_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        first_relu_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        second_fc_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        second_fc_0_ce0 : OUT STD_LOGIC;
        second_fc_0_we0 : OUT STD_LOGIC;
        second_fc_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        second_fc_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        second_relu_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        second_relu_0_ce0 : OUT STD_LOGIC;
        second_relu_0_we0 : OUT STD_LOGIC;
        second_relu_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        second_relu_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outmlp_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        outmlp_0_ce0 : OUT STD_LOGIC;
        outmlp_0_we0 : OUT STD_LOGIC;
        outmlp_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fptrunceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fpext_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_dadd_64OgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_ddiv_64PgM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_dexp_64QgW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_mnist_dAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_conv_keBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_first_cEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_sencondFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fc_hiddGfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fc_hiddHfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fc_hiddIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_third_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_first_fKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_second_Mgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_out_grad IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        flag : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        label_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        lr : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mnist_data_U : component forw_back_mnist_dAem
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mnist_data_address0,
        ce0 => mnist_data_ce0,
        we0 => mnist_data_we0,
        d0 => grp_forward_fu_386_mnist_data_d0,
        q0 => mnist_data_q0,
        address1 => grp_backward_fu_340_mnist_data_address1,
        ce1 => mnist_data_ce1,
        q1 => mnist_data_q1);

    conv_kernel1_U : component forw_back_conv_keBew
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_kernel1_address0,
        ce0 => conv_kernel1_ce0,
        we0 => conv_kernel1_we0,
        d0 => conv_kernel1_d0,
        q0 => conv_kernel1_q0);

    conv_kernel2_U : component forw_back_conv_keBew
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_kernel2_address0,
        ce0 => conv_kernel2_ce0,
        we0 => conv_kernel2_we0,
        d0 => conv_kernel2_d0,
        q0 => conv_kernel2_q0);

    conv_kernel3_U : component forw_back_conv_keBew
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_kernel3_address0,
        ce0 => conv_kernel3_ce0,
        we0 => conv_kernel3_we0,
        d0 => conv_kernel3_d0,
        q0 => conv_kernel3_q0);

    first_conv1_U : component forw_back_first_cEe0
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => first_conv1_address0,
        ce0 => first_conv1_ce0,
        we0 => first_conv1_we0,
        d0 => grp_forward_fu_386_first_conv1_d0,
        q0 => first_conv1_q0,
        address1 => grp_backward_fu_340_first_conv1_address1,
        ce1 => first_conv1_ce1,
        q1 => first_conv1_q1);

    sencond_conv1_U : component forw_back_sencondFfa
    generic map (
        DataWidth => 32,
        AddressRange => 676,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sencond_conv1_address0,
        ce0 => sencond_conv1_ce0,
        we0 => sencond_conv1_we0,
        d0 => grp_forward_fu_386_sencond_conv1_d0,
        q0 => sencond_conv1_q0,
        address1 => grp_backward_fu_340_sencond_conv1_address1,
        ce1 => sencond_conv1_ce1,
        q1 => sencond_conv1_q1);

    fc_hidden_layer1_U : component forw_back_fc_hiddGfk
    generic map (
        DataWidth => 32,
        AddressRange => 103680,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_hidden_layer1_address0,
        ce0 => fc_hidden_layer1_ce0,
        we0 => fc_hidden_layer1_we0,
        d0 => fc_hidden_layer1_d0,
        q0 => fc_hidden_layer1_q0);

    fc_hidden_layer2_U : component forw_back_fc_hiddHfu
    generic map (
        DataWidth => 32,
        AddressRange => 8100,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_hidden_layer2_address0,
        ce0 => fc_hidden_layer2_ce0,
        q0 => fc_hidden_layer2_q0,
        address1 => fc_hidden_layer2_address1,
        ce1 => fc_hidden_layer2_ce1,
        we1 => fc_hidden_layer2_we1,
        d1 => fc_hidden_layer2_d1);

    fc_hidden_layer3_U : component forw_back_fc_hiddIfE
    generic map (
        DataWidth => 32,
        AddressRange => 450,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_hidden_layer3_address0,
        ce0 => fc_hidden_layer3_ce0,
        we0 => fc_hidden_layer3_we0,
        d0 => fc_hidden_layer3_d0,
        q0 => fc_hidden_layer3_q0);

    flatten_conv_0_U : component forward_third_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flatten_conv_0_address0,
        ce0 => flatten_conv_0_ce0,
        we0 => flatten_conv_0_we0,
        d0 => grp_forward_fu_386_flatten_conv_0_d0,
        q0 => flatten_conv_0_q0);

    first_fc_0_U : component forw_back_first_fKfY
    generic map (
        DataWidth => 32,
        AddressRange => 180,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => first_fc_0_address0,
        ce0 => first_fc_0_ce0,
        we0 => first_fc_0_we0,
        d0 => grp_forward_fu_386_first_fc_0_d0,
        q0 => first_fc_0_q0);

    first_relu_0_U : component forw_back_first_fKfY
    generic map (
        DataWidth => 32,
        AddressRange => 180,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => first_relu_0_address0,
        ce0 => first_relu_0_ce0,
        we0 => first_relu_0_we0,
        d0 => grp_forward_fu_386_first_relu_0_d0,
        q0 => first_relu_0_q0);

    second_fc_0_U : component forw_back_second_Mgi
    generic map (
        DataWidth => 32,
        AddressRange => 45,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => second_fc_0_address0,
        ce0 => second_fc_0_ce0,
        we0 => second_fc_0_we0,
        d0 => grp_forward_fu_386_second_fc_0_d0,
        q0 => second_fc_0_q0);

    second_relu_0_U : component forw_back_second_Mgi
    generic map (
        DataWidth => 32,
        AddressRange => 45,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => second_relu_0_address0,
        ce0 => second_relu_0_ce0,
        we0 => second_relu_0_we0,
        d0 => grp_forward_fu_386_second_relu_0_d0,
        q0 => second_relu_0_q0);

    outmlp_0_U : component backward_out_grad
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => outmlp_0_address0,
        ce0 => outmlp_0_ce0,
        we0 => outmlp_0_we0,
        d0 => grp_forward_fu_386_outmlp_0_d0,
        q0 => outmlp_0_q0);

    result_U : component backward_out_grad
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => grp_fu_431_p1,
        q0 => result_q0);

    forw_back_ctrl_s_axi_U : component forw_back_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        flag => flag,
        in_r => in_r,
        conv1 => conv1,
        conv2 => conv2,
        conv3 => conv3,
        fc1 => fc1,
        fc2 => fc2,
        fc3 => fc3,
        out_r => out_r,
        label_r => label_r,
        lr => lr);

    forw_back_data_m_axi_U : component forw_back_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_AWVALID,
        AWREADY => m_axi_data_AWREADY,
        AWADDR => m_axi_data_AWADDR,
        AWID => m_axi_data_AWID,
        AWLEN => m_axi_data_AWLEN,
        AWSIZE => m_axi_data_AWSIZE,
        AWBURST => m_axi_data_AWBURST,
        AWLOCK => m_axi_data_AWLOCK,
        AWCACHE => m_axi_data_AWCACHE,
        AWPROT => m_axi_data_AWPROT,
        AWQOS => m_axi_data_AWQOS,
        AWREGION => m_axi_data_AWREGION,
        AWUSER => m_axi_data_AWUSER,
        WVALID => m_axi_data_WVALID,
        WREADY => m_axi_data_WREADY,
        WDATA => m_axi_data_WDATA,
        WSTRB => m_axi_data_WSTRB,
        WLAST => m_axi_data_WLAST,
        WID => m_axi_data_WID,
        WUSER => m_axi_data_WUSER,
        ARVALID => m_axi_data_ARVALID,
        ARREADY => m_axi_data_ARREADY,
        ARADDR => m_axi_data_ARADDR,
        ARID => m_axi_data_ARID,
        ARLEN => m_axi_data_ARLEN,
        ARSIZE => m_axi_data_ARSIZE,
        ARBURST => m_axi_data_ARBURST,
        ARLOCK => m_axi_data_ARLOCK,
        ARCACHE => m_axi_data_ARCACHE,
        ARPROT => m_axi_data_ARPROT,
        ARQOS => m_axi_data_ARQOS,
        ARREGION => m_axi_data_ARREGION,
        ARUSER => m_axi_data_ARUSER,
        RVALID => m_axi_data_RVALID,
        RREADY => m_axi_data_RREADY,
        RDATA => m_axi_data_RDATA,
        RLAST => m_axi_data_RLAST,
        RID => m_axi_data_RID,
        RUSER => m_axi_data_RUSER,
        RRESP => m_axi_data_RRESP,
        BVALID => m_axi_data_BVALID,
        BREADY => m_axi_data_BREADY,
        BRESP => m_axi_data_BRESP,
        BID => m_axi_data_BID,
        BUSER => m_axi_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data_ARVALID,
        I_ARREADY => data_ARREADY,
        I_ARADDR => data_ARADDR,
        I_ARID => data_ARID,
        I_ARLEN => data_ARLEN,
        I_ARSIZE => data_ARSIZE,
        I_ARLOCK => data_ARLOCK,
        I_ARCACHE => data_ARCACHE,
        I_ARQOS => data_ARQOS,
        I_ARPROT => data_ARPROT,
        I_ARUSER => data_ARUSER,
        I_ARBURST => data_ARBURST,
        I_ARREGION => data_ARREGION,
        I_RVALID => data_RVALID,
        I_RREADY => data_RREADY,
        I_RDATA => data_RDATA,
        I_RID => data_RID,
        I_RUSER => data_RUSER,
        I_RRESP => data_RRESP,
        I_RLAST => data_RLAST,
        I_AWVALID => data_AWVALID,
        I_AWREADY => data_AWREADY,
        I_AWADDR => data_AWADDR,
        I_AWID => data_AWID,
        I_AWLEN => data_AWLEN,
        I_AWSIZE => data_AWSIZE,
        I_AWLOCK => data_AWLOCK,
        I_AWCACHE => data_AWCACHE,
        I_AWQOS => data_AWQOS,
        I_AWPROT => data_AWPROT,
        I_AWUSER => data_AWUSER,
        I_AWBURST => data_AWBURST,
        I_AWREGION => data_AWREGION,
        I_WVALID => data_WVALID,
        I_WREADY => data_WREADY,
        I_WDATA => data_WDATA,
        I_WID => data_WID,
        I_WUSER => data_WUSER,
        I_WLAST => data_WLAST,
        I_WSTRB => data_WSTRB,
        I_BVALID => data_BVALID,
        I_BREADY => data_BREADY,
        I_BRESP => data_BRESP,
        I_BID => data_BID,
        I_BUSER => data_BUSER);

    grp_backward_fu_340 : component backward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_backward_fu_340_ap_start,
        ap_done => grp_backward_fu_340_ap_done,
        ap_idle => grp_backward_fu_340_ap_idle,
        ap_ready => grp_backward_fu_340_ap_ready,
        label_r => label_read_reg_647,
        m_axi_conv1_AWVALID => grp_backward_fu_340_m_axi_conv1_AWVALID,
        m_axi_conv1_AWREADY => data_AWREADY,
        m_axi_conv1_AWADDR => grp_backward_fu_340_m_axi_conv1_AWADDR,
        m_axi_conv1_AWID => grp_backward_fu_340_m_axi_conv1_AWID,
        m_axi_conv1_AWLEN => grp_backward_fu_340_m_axi_conv1_AWLEN,
        m_axi_conv1_AWSIZE => grp_backward_fu_340_m_axi_conv1_AWSIZE,
        m_axi_conv1_AWBURST => grp_backward_fu_340_m_axi_conv1_AWBURST,
        m_axi_conv1_AWLOCK => grp_backward_fu_340_m_axi_conv1_AWLOCK,
        m_axi_conv1_AWCACHE => grp_backward_fu_340_m_axi_conv1_AWCACHE,
        m_axi_conv1_AWPROT => grp_backward_fu_340_m_axi_conv1_AWPROT,
        m_axi_conv1_AWQOS => grp_backward_fu_340_m_axi_conv1_AWQOS,
        m_axi_conv1_AWREGION => grp_backward_fu_340_m_axi_conv1_AWREGION,
        m_axi_conv1_AWUSER => grp_backward_fu_340_m_axi_conv1_AWUSER,
        m_axi_conv1_WVALID => grp_backward_fu_340_m_axi_conv1_WVALID,
        m_axi_conv1_WREADY => data_WREADY,
        m_axi_conv1_WDATA => grp_backward_fu_340_m_axi_conv1_WDATA,
        m_axi_conv1_WSTRB => grp_backward_fu_340_m_axi_conv1_WSTRB,
        m_axi_conv1_WLAST => grp_backward_fu_340_m_axi_conv1_WLAST,
        m_axi_conv1_WID => grp_backward_fu_340_m_axi_conv1_WID,
        m_axi_conv1_WUSER => grp_backward_fu_340_m_axi_conv1_WUSER,
        m_axi_conv1_ARVALID => grp_backward_fu_340_m_axi_conv1_ARVALID,
        m_axi_conv1_ARREADY => data_ARREADY,
        m_axi_conv1_ARADDR => grp_backward_fu_340_m_axi_conv1_ARADDR,
        m_axi_conv1_ARID => grp_backward_fu_340_m_axi_conv1_ARID,
        m_axi_conv1_ARLEN => grp_backward_fu_340_m_axi_conv1_ARLEN,
        m_axi_conv1_ARSIZE => grp_backward_fu_340_m_axi_conv1_ARSIZE,
        m_axi_conv1_ARBURST => grp_backward_fu_340_m_axi_conv1_ARBURST,
        m_axi_conv1_ARLOCK => grp_backward_fu_340_m_axi_conv1_ARLOCK,
        m_axi_conv1_ARCACHE => grp_backward_fu_340_m_axi_conv1_ARCACHE,
        m_axi_conv1_ARPROT => grp_backward_fu_340_m_axi_conv1_ARPROT,
        m_axi_conv1_ARQOS => grp_backward_fu_340_m_axi_conv1_ARQOS,
        m_axi_conv1_ARREGION => grp_backward_fu_340_m_axi_conv1_ARREGION,
        m_axi_conv1_ARUSER => grp_backward_fu_340_m_axi_conv1_ARUSER,
        m_axi_conv1_RVALID => data_RVALID,
        m_axi_conv1_RREADY => grp_backward_fu_340_m_axi_conv1_RREADY,
        m_axi_conv1_RDATA => data_RDATA,
        m_axi_conv1_RLAST => data_RLAST,
        m_axi_conv1_RID => data_RID,
        m_axi_conv1_RUSER => data_RUSER,
        m_axi_conv1_RRESP => data_RRESP,
        m_axi_conv1_BVALID => data_BVALID,
        m_axi_conv1_BREADY => grp_backward_fu_340_m_axi_conv1_BREADY,
        m_axi_conv1_BRESP => data_BRESP,
        m_axi_conv1_BID => data_BID,
        m_axi_conv1_BUSER => data_BUSER,
        conv1_offset => conv5_reg_692,
        conv2_offset => conv4_reg_686,
        conv3_offset => conv_reg_680,
        fc1_offset => fc5_reg_674,
        fc2_offset => fc4_reg_668,
        fc3_offset => fc_reg_662,
        lr_in_offset => lr1_reg_652,
        result_address0 => grp_backward_fu_340_result_address0,
        result_ce0 => grp_backward_fu_340_result_ce0,
        result_q0 => result_q0,
        second_relu_0_address0 => grp_backward_fu_340_second_relu_0_address0,
        second_relu_0_ce0 => grp_backward_fu_340_second_relu_0_ce0,
        second_relu_0_q0 => second_relu_0_q0,
        fc_hidden_layer3_address0 => grp_backward_fu_340_fc_hidden_layer3_address0,
        fc_hidden_layer3_ce0 => grp_backward_fu_340_fc_hidden_layer3_ce0,
        fc_hidden_layer3_we0 => grp_backward_fu_340_fc_hidden_layer3_we0,
        fc_hidden_layer3_d0 => grp_backward_fu_340_fc_hidden_layer3_d0,
        fc_hidden_layer3_q0 => fc_hidden_layer3_q0,
        second_fc_0_address0 => grp_backward_fu_340_second_fc_0_address0,
        second_fc_0_ce0 => grp_backward_fu_340_second_fc_0_ce0,
        second_fc_0_q0 => second_fc_0_q0,
        first_relu_0_address0 => grp_backward_fu_340_first_relu_0_address0,
        first_relu_0_ce0 => grp_backward_fu_340_first_relu_0_ce0,
        first_relu_0_q0 => first_relu_0_q0,
        fc_hidden_layer2_address0 => grp_backward_fu_340_fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0 => grp_backward_fu_340_fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0 => fc_hidden_layer2_q0,
        fc_hidden_layer2_address1 => grp_backward_fu_340_fc_hidden_layer2_address1,
        fc_hidden_layer2_ce1 => grp_backward_fu_340_fc_hidden_layer2_ce1,
        fc_hidden_layer2_we1 => grp_backward_fu_340_fc_hidden_layer2_we1,
        fc_hidden_layer2_d1 => grp_backward_fu_340_fc_hidden_layer2_d1,
        first_fc_0_address0 => grp_backward_fu_340_first_fc_0_address0,
        first_fc_0_ce0 => grp_backward_fu_340_first_fc_0_ce0,
        first_fc_0_q0 => first_fc_0_q0,
        flatten_conv_0_address0 => grp_backward_fu_340_flatten_conv_0_address0,
        flatten_conv_0_ce0 => grp_backward_fu_340_flatten_conv_0_ce0,
        flatten_conv_0_q0 => flatten_conv_0_q0,
        fc_hidden_layer1_address0 => grp_backward_fu_340_fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0 => grp_backward_fu_340_fc_hidden_layer1_ce0,
        fc_hidden_layer1_we0 => grp_backward_fu_340_fc_hidden_layer1_we0,
        fc_hidden_layer1_d0 => grp_backward_fu_340_fc_hidden_layer1_d0,
        fc_hidden_layer1_q0 => fc_hidden_layer1_q0,
        sencond_conv1_address0 => grp_backward_fu_340_sencond_conv1_address0,
        sencond_conv1_ce0 => grp_backward_fu_340_sencond_conv1_ce0,
        sencond_conv1_q0 => sencond_conv1_q0,
        sencond_conv1_address1 => grp_backward_fu_340_sencond_conv1_address1,
        sencond_conv1_ce1 => grp_backward_fu_340_sencond_conv1_ce1,
        sencond_conv1_q1 => sencond_conv1_q1,
        conv_kernel3_address0 => grp_backward_fu_340_conv_kernel3_address0,
        conv_kernel3_ce0 => grp_backward_fu_340_conv_kernel3_ce0,
        conv_kernel3_we0 => grp_backward_fu_340_conv_kernel3_we0,
        conv_kernel3_d0 => grp_backward_fu_340_conv_kernel3_d0,
        conv_kernel3_q0 => conv_kernel3_q0,
        first_conv1_address0 => grp_backward_fu_340_first_conv1_address0,
        first_conv1_ce0 => grp_backward_fu_340_first_conv1_ce0,
        first_conv1_q0 => first_conv1_q0,
        first_conv1_address1 => grp_backward_fu_340_first_conv1_address1,
        first_conv1_ce1 => grp_backward_fu_340_first_conv1_ce1,
        first_conv1_q1 => first_conv1_q1,
        conv_kernel2_address0 => grp_backward_fu_340_conv_kernel2_address0,
        conv_kernel2_ce0 => grp_backward_fu_340_conv_kernel2_ce0,
        conv_kernel2_we0 => grp_backward_fu_340_conv_kernel2_we0,
        conv_kernel2_d0 => grp_backward_fu_340_conv_kernel2_d0,
        conv_kernel2_q0 => conv_kernel2_q0,
        mnist_data_address0 => grp_backward_fu_340_mnist_data_address0,
        mnist_data_ce0 => grp_backward_fu_340_mnist_data_ce0,
        mnist_data_q0 => mnist_data_q0,
        mnist_data_address1 => grp_backward_fu_340_mnist_data_address1,
        mnist_data_ce1 => grp_backward_fu_340_mnist_data_ce1,
        mnist_data_q1 => mnist_data_q1,
        conv_kernel1_address0 => grp_backward_fu_340_conv_kernel1_address0,
        conv_kernel1_ce0 => grp_backward_fu_340_conv_kernel1_ce0,
        conv_kernel1_we0 => grp_backward_fu_340_conv_kernel1_we0,
        conv_kernel1_d0 => grp_backward_fu_340_conv_kernel1_d0,
        conv_kernel1_q0 => conv_kernel1_q0);

    grp_forward_fu_386 : component forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_forward_fu_386_ap_start,
        ap_done => grp_forward_fu_386_ap_done,
        ap_idle => grp_forward_fu_386_ap_idle,
        ap_ready => grp_forward_fu_386_ap_ready,
        m_axi_input_matrix_AWVALID => grp_forward_fu_386_m_axi_input_matrix_AWVALID,
        m_axi_input_matrix_AWREADY => ap_const_logic_0,
        m_axi_input_matrix_AWADDR => grp_forward_fu_386_m_axi_input_matrix_AWADDR,
        m_axi_input_matrix_AWID => grp_forward_fu_386_m_axi_input_matrix_AWID,
        m_axi_input_matrix_AWLEN => grp_forward_fu_386_m_axi_input_matrix_AWLEN,
        m_axi_input_matrix_AWSIZE => grp_forward_fu_386_m_axi_input_matrix_AWSIZE,
        m_axi_input_matrix_AWBURST => grp_forward_fu_386_m_axi_input_matrix_AWBURST,
        m_axi_input_matrix_AWLOCK => grp_forward_fu_386_m_axi_input_matrix_AWLOCK,
        m_axi_input_matrix_AWCACHE => grp_forward_fu_386_m_axi_input_matrix_AWCACHE,
        m_axi_input_matrix_AWPROT => grp_forward_fu_386_m_axi_input_matrix_AWPROT,
        m_axi_input_matrix_AWQOS => grp_forward_fu_386_m_axi_input_matrix_AWQOS,
        m_axi_input_matrix_AWREGION => grp_forward_fu_386_m_axi_input_matrix_AWREGION,
        m_axi_input_matrix_AWUSER => grp_forward_fu_386_m_axi_input_matrix_AWUSER,
        m_axi_input_matrix_WVALID => grp_forward_fu_386_m_axi_input_matrix_WVALID,
        m_axi_input_matrix_WREADY => ap_const_logic_0,
        m_axi_input_matrix_WDATA => grp_forward_fu_386_m_axi_input_matrix_WDATA,
        m_axi_input_matrix_WSTRB => grp_forward_fu_386_m_axi_input_matrix_WSTRB,
        m_axi_input_matrix_WLAST => grp_forward_fu_386_m_axi_input_matrix_WLAST,
        m_axi_input_matrix_WID => grp_forward_fu_386_m_axi_input_matrix_WID,
        m_axi_input_matrix_WUSER => grp_forward_fu_386_m_axi_input_matrix_WUSER,
        m_axi_input_matrix_ARVALID => grp_forward_fu_386_m_axi_input_matrix_ARVALID,
        m_axi_input_matrix_ARREADY => data_ARREADY,
        m_axi_input_matrix_ARADDR => grp_forward_fu_386_m_axi_input_matrix_ARADDR,
        m_axi_input_matrix_ARID => grp_forward_fu_386_m_axi_input_matrix_ARID,
        m_axi_input_matrix_ARLEN => grp_forward_fu_386_m_axi_input_matrix_ARLEN,
        m_axi_input_matrix_ARSIZE => grp_forward_fu_386_m_axi_input_matrix_ARSIZE,
        m_axi_input_matrix_ARBURST => grp_forward_fu_386_m_axi_input_matrix_ARBURST,
        m_axi_input_matrix_ARLOCK => grp_forward_fu_386_m_axi_input_matrix_ARLOCK,
        m_axi_input_matrix_ARCACHE => grp_forward_fu_386_m_axi_input_matrix_ARCACHE,
        m_axi_input_matrix_ARPROT => grp_forward_fu_386_m_axi_input_matrix_ARPROT,
        m_axi_input_matrix_ARQOS => grp_forward_fu_386_m_axi_input_matrix_ARQOS,
        m_axi_input_matrix_ARREGION => grp_forward_fu_386_m_axi_input_matrix_ARREGION,
        m_axi_input_matrix_ARUSER => grp_forward_fu_386_m_axi_input_matrix_ARUSER,
        m_axi_input_matrix_RVALID => data_RVALID,
        m_axi_input_matrix_RREADY => grp_forward_fu_386_m_axi_input_matrix_RREADY,
        m_axi_input_matrix_RDATA => data_RDATA,
        m_axi_input_matrix_RLAST => data_RLAST,
        m_axi_input_matrix_RID => data_RID,
        m_axi_input_matrix_RUSER => data_RUSER,
        m_axi_input_matrix_RRESP => data_RRESP,
        m_axi_input_matrix_BVALID => ap_const_logic_0,
        m_axi_input_matrix_BREADY => grp_forward_fu_386_m_axi_input_matrix_BREADY,
        m_axi_input_matrix_BRESP => ap_const_lv2_0,
        m_axi_input_matrix_BID => ap_const_lv1_0,
        m_axi_input_matrix_BUSER => ap_const_lv1_0,
        input_matrix_offset => in1_reg_698,
        conv1_offset => conv5_reg_692,
        conv2_offset => conv4_reg_686,
        conv3_offset => conv_reg_680,
        fc1_offset => fc5_reg_674,
        fc2_offset => fc4_reg_668,
        fc3_offset => fc_reg_662,
        mnist_data_address0 => grp_forward_fu_386_mnist_data_address0,
        mnist_data_ce0 => grp_forward_fu_386_mnist_data_ce0,
        mnist_data_we0 => grp_forward_fu_386_mnist_data_we0,
        mnist_data_d0 => grp_forward_fu_386_mnist_data_d0,
        mnist_data_q0 => mnist_data_q0,
        conv_kernel1_address0 => grp_forward_fu_386_conv_kernel1_address0,
        conv_kernel1_ce0 => grp_forward_fu_386_conv_kernel1_ce0,
        conv_kernel1_we0 => grp_forward_fu_386_conv_kernel1_we0,
        conv_kernel1_d0 => grp_forward_fu_386_conv_kernel1_d0,
        conv_kernel1_q0 => conv_kernel1_q0,
        conv_kernel2_address0 => grp_forward_fu_386_conv_kernel2_address0,
        conv_kernel2_ce0 => grp_forward_fu_386_conv_kernel2_ce0,
        conv_kernel2_we0 => grp_forward_fu_386_conv_kernel2_we0,
        conv_kernel2_d0 => grp_forward_fu_386_conv_kernel2_d0,
        conv_kernel2_q0 => conv_kernel2_q0,
        conv_kernel3_address0 => grp_forward_fu_386_conv_kernel3_address0,
        conv_kernel3_ce0 => grp_forward_fu_386_conv_kernel3_ce0,
        conv_kernel3_we0 => grp_forward_fu_386_conv_kernel3_we0,
        conv_kernel3_d0 => grp_forward_fu_386_conv_kernel3_d0,
        conv_kernel3_q0 => conv_kernel3_q0,
        first_conv1_address0 => grp_forward_fu_386_first_conv1_address0,
        first_conv1_ce0 => grp_forward_fu_386_first_conv1_ce0,
        first_conv1_we0 => grp_forward_fu_386_first_conv1_we0,
        first_conv1_d0 => grp_forward_fu_386_first_conv1_d0,
        first_conv1_q0 => first_conv1_q0,
        sencond_conv1_address0 => grp_forward_fu_386_sencond_conv1_address0,
        sencond_conv1_ce0 => grp_forward_fu_386_sencond_conv1_ce0,
        sencond_conv1_we0 => grp_forward_fu_386_sencond_conv1_we0,
        sencond_conv1_d0 => grp_forward_fu_386_sencond_conv1_d0,
        sencond_conv1_q0 => sencond_conv1_q0,
        fc_hidden_layer1_address0 => grp_forward_fu_386_fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0 => grp_forward_fu_386_fc_hidden_layer1_ce0,
        fc_hidden_layer1_we0 => grp_forward_fu_386_fc_hidden_layer1_we0,
        fc_hidden_layer1_d0 => grp_forward_fu_386_fc_hidden_layer1_d0,
        fc_hidden_layer1_q0 => fc_hidden_layer1_q0,
        fc_hidden_layer2_address0 => grp_forward_fu_386_fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0 => grp_forward_fu_386_fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0 => fc_hidden_layer2_q0,
        fc_hidden_layer2_address1 => grp_forward_fu_386_fc_hidden_layer2_address1,
        fc_hidden_layer2_ce1 => grp_forward_fu_386_fc_hidden_layer2_ce1,
        fc_hidden_layer2_we1 => grp_forward_fu_386_fc_hidden_layer2_we1,
        fc_hidden_layer2_d1 => grp_forward_fu_386_fc_hidden_layer2_d1,
        fc_hidden_layer3_address0 => grp_forward_fu_386_fc_hidden_layer3_address0,
        fc_hidden_layer3_ce0 => grp_forward_fu_386_fc_hidden_layer3_ce0,
        fc_hidden_layer3_we0 => grp_forward_fu_386_fc_hidden_layer3_we0,
        fc_hidden_layer3_d0 => grp_forward_fu_386_fc_hidden_layer3_d0,
        fc_hidden_layer3_q0 => fc_hidden_layer3_q0,
        flatten_conv_0_address0 => grp_forward_fu_386_flatten_conv_0_address0,
        flatten_conv_0_ce0 => grp_forward_fu_386_flatten_conv_0_ce0,
        flatten_conv_0_we0 => grp_forward_fu_386_flatten_conv_0_we0,
        flatten_conv_0_d0 => grp_forward_fu_386_flatten_conv_0_d0,
        flatten_conv_0_q0 => flatten_conv_0_q0,
        first_fc_0_address0 => grp_forward_fu_386_first_fc_0_address0,
        first_fc_0_ce0 => grp_forward_fu_386_first_fc_0_ce0,
        first_fc_0_we0 => grp_forward_fu_386_first_fc_0_we0,
        first_fc_0_d0 => grp_forward_fu_386_first_fc_0_d0,
        first_fc_0_q0 => first_fc_0_q0,
        first_relu_0_address0 => grp_forward_fu_386_first_relu_0_address0,
        first_relu_0_ce0 => grp_forward_fu_386_first_relu_0_ce0,
        first_relu_0_we0 => grp_forward_fu_386_first_relu_0_we0,
        first_relu_0_d0 => grp_forward_fu_386_first_relu_0_d0,
        first_relu_0_q0 => first_relu_0_q0,
        second_fc_0_address0 => grp_forward_fu_386_second_fc_0_address0,
        second_fc_0_ce0 => grp_forward_fu_386_second_fc_0_ce0,
        second_fc_0_we0 => grp_forward_fu_386_second_fc_0_we0,
        second_fc_0_d0 => grp_forward_fu_386_second_fc_0_d0,
        second_fc_0_q0 => second_fc_0_q0,
        second_relu_0_address0 => grp_forward_fu_386_second_relu_0_address0,
        second_relu_0_ce0 => grp_forward_fu_386_second_relu_0_ce0,
        second_relu_0_we0 => grp_forward_fu_386_second_relu_0_we0,
        second_relu_0_d0 => grp_forward_fu_386_second_relu_0_d0,
        second_relu_0_q0 => second_relu_0_q0,
        outmlp_0_address0 => grp_forward_fu_386_outmlp_0_address0,
        outmlp_0_ce0 => grp_forward_fu_386_outmlp_0_ce0,
        outmlp_0_we0 => grp_forward_fu_386_outmlp_0_we0,
        outmlp_0_d0 => grp_forward_fu_386_outmlp_0_d0);

    forw_back_fptrunceOg_U130 : component forw_back_fptrunceOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p1);

    forw_back_fpext_3fYi_U131 : component forw_back_fpext_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_435_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_435_p1);

    forw_back_dadd_64OgC_U132 : component forw_back_dadd_64OgC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_460,
        din1 => reg_467,
        ce => ap_const_logic_1,
        dout => grp_fu_441_p2);

    forw_back_ddiv_64PgM_U133 : component forw_back_ddiv_64PgM
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_467,
        din1 => reg_460,
        ce => ap_const_logic_1,
        dout => grp_fu_445_p2);

    forw_back_dexp_64QgW_U134 : component forw_back_dexp_64QgW
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => grp_fu_449_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state68) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state68)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state68);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state76) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state76)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state76);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_backward_fu_340_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_backward_fu_340_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                    grp_backward_fu_340_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_backward_fu_340_ap_ready = ap_const_logic_1)) then 
                    grp_backward_fu_340_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_forward_fu_386_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_forward_fu_386_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_forward_fu_386_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_forward_fu_386_ap_ready = ap_const_logic_1)) then 
                    grp_forward_fu_386_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_0_reg_307 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                i_0_reg_307 <= i_reg_741;
            end if; 
        end if;
    end process;

    j_0_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_296 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_0_reg_296 <= j_reg_717;
            end if; 
        end if;
    end process;

    phi_ln356_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln356_reg_329 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln356_fu_630_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                phi_ln356_reg_329 <= add_ln356_fu_636_p2;
            end if; 
        end if;
    end process;

    phi_ln367_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                phi_ln367_reg_318 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln367_fu_613_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln367_reg_318 <= add_ln367_fu_619_p2;
            end if; 
        end if;
    end process;

    probability_0_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                probability_0_reg_284 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                probability_0_reg_284 <= grp_fu_431_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                conv4_reg_686 <= conv2(31 downto 2);
                conv5_reg_692 <= conv1(31 downto 2);
                conv_reg_680 <= conv3(31 downto 2);
                fc4_reg_668 <= fc2(31 downto 2);
                fc5_reg_674 <= fc1(31 downto 2);
                fc_reg_662 <= fc3(31 downto 2);
                icmp_ln354_reg_703 <= icmp_ln354_fu_563_p2;
                in1_reg_698 <= in_r(31 downto 2);
                label_read_reg_647 <= label_r;
                lr1_reg_652 <= lr(31 downto 2);
                out1_reg_657 <= out_r(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    data_addr_reg_707(29 downto 0) <= empty_fu_569_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                i_reg_741 <= i_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln356_reg_785 <= icmp_ln356_fu_630_p2;
                icmp_ln356_reg_785_pp1_iter1_reg <= icmp_ln356_reg_785;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln367_reg_766 <= icmp_ln367_fu_613_p2;
                icmp_ln367_reg_766_pp0_iter1_reg <= icmp_ln367_reg_766;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_717 <= j_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln356_reg_785 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                reg_454 <= outmlp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_460 <= grp_fu_435_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_467 <= grp_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln367_reg_766 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                result_load_reg_780 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_4_reg_727 <= grp_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_6_reg_756 <= grp_fu_435_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                tmp_8_reg_761 <= grp_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    zext_ln365_reg_746(3 downto 0) <= zext_ln365_fu_608_p1(3 downto 0);
            end if;
        end if;
    end process;
    data_addr_reg_707(31 downto 30) <= "00";
    zext_ln365_reg_746(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln354_reg_703, ap_enable_reg_pp1_iter2, ap_CS_fsm_state28, icmp_ln364_fu_596_p2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state75, ap_CS_fsm_state83, data_BVALID, ap_enable_reg_pp1_iter1, ap_block_state3_io, grp_forward_fu_386_ap_done, ap_CS_fsm_state4, icmp_ln361_fu_579_p2, ap_block_state28_io, icmp_ln367_fu_613_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln356_fu_630_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, grp_backward_fu_340_ap_done, ap_CS_fsm_state72)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln361_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln367_fu_613_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln367_fu_613_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((grp_backward_fu_340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if ((not(((icmp_ln354_reg_703 = ap_const_lv1_0) and (data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln356_fu_630_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln356_fu_630_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln356_fu_636_p2 <= std_logic_vector(unsigned(phi_ln356_reg_329) + unsigned(ap_const_lv4_1));
    add_ln367_fu_619_p2 <= std_logic_vector(unsigned(phi_ln367_reg_318) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(67);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(73);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(68);
    ap_CS_fsm_state72 <= ap_CS_fsm(69);
    ap_CS_fsm_state75 <= ap_CS_fsm(72);
    ap_CS_fsm_state83 <= ap_CS_fsm(78);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state70_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state70_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state78_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state78_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state78_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state78_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_state28_io_assign_proc : process(icmp_ln364_fu_596_p2, data_AWREADY)
    begin
                ap_block_state28_io <= ((icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (data_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln354_reg_703, data_AWREADY)
    begin
                ap_block_state3_io <= ((icmp_ln354_reg_703 = ap_const_lv1_1) and (data_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state68_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state70_io_assign_proc : process(icmp_ln367_reg_766_pp0_iter1_reg, data_WREADY)
    begin
                ap_block_state70_io <= ((icmp_ln367_reg_766_pp0_iter1_reg = ap_const_lv1_0) and (data_WREADY = ap_const_logic_0));
    end process;

        ap_block_state70_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_assign_proc : process(icmp_ln354_reg_703, data_BVALID)
    begin
                ap_block_state75 <= ((icmp_ln354_reg_703 = ap_const_lv1_0) and (data_BVALID = ap_const_logic_0));
    end process;

        ap_block_state76_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state78_io_assign_proc : process(icmp_ln356_reg_785_pp1_iter1_reg, data_WREADY)
    begin
                ap_block_state78_io <= ((icmp_ln356_reg_785_pp1_iter1_reg = ap_const_lv1_0) and (data_WREADY = ap_const_logic_0));
    end process;

        ap_block_state78_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state68_assign_proc : process(icmp_ln367_fu_613_p2)
    begin
        if ((icmp_ln367_fu_613_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state68 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state76_assign_proc : process(icmp_ln356_fu_630_p2)
    begin
        if ((icmp_ln356_fu_630_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state76 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln354_reg_703, ap_CS_fsm_state75, data_BVALID)
    begin
        if ((not(((icmp_ln354_reg_703 = ap_const_lv1_0) and (data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_probability_0_phi_fu_288_p4 <= probability_0_reg_284;

    ap_ready_assign_proc : process(icmp_ln354_reg_703, ap_CS_fsm_state75, data_BVALID)
    begin
        if ((not(((icmp_ln354_reg_703 = ap_const_lv1_0) and (data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    conv_kernel1_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel1_address0, grp_forward_fu_386_conv_kernel1_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel1_address0 <= grp_forward_fu_386_conv_kernel1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel1_address0 <= grp_backward_fu_340_conv_kernel1_address0;
        else 
            conv_kernel1_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel1_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel1_ce0, grp_forward_fu_386_conv_kernel1_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel1_ce0 <= grp_forward_fu_386_conv_kernel1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel1_ce0 <= grp_backward_fu_340_conv_kernel1_ce0;
        else 
            conv_kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel1_d0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel1_d0, grp_forward_fu_386_conv_kernel1_d0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel1_d0 <= grp_forward_fu_386_conv_kernel1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel1_d0 <= grp_backward_fu_340_conv_kernel1_d0;
        else 
            conv_kernel1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_kernel1_we0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel1_we0, grp_forward_fu_386_conv_kernel1_we0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel1_we0 <= grp_forward_fu_386_conv_kernel1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel1_we0 <= grp_backward_fu_340_conv_kernel1_we0;
        else 
            conv_kernel1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel2_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel2_address0, grp_forward_fu_386_conv_kernel2_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel2_address0 <= grp_forward_fu_386_conv_kernel2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel2_address0 <= grp_backward_fu_340_conv_kernel2_address0;
        else 
            conv_kernel2_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel2_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel2_ce0, grp_forward_fu_386_conv_kernel2_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel2_ce0 <= grp_forward_fu_386_conv_kernel2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel2_ce0 <= grp_backward_fu_340_conv_kernel2_ce0;
        else 
            conv_kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel2_d0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel2_d0, grp_forward_fu_386_conv_kernel2_d0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel2_d0 <= grp_forward_fu_386_conv_kernel2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel2_d0 <= grp_backward_fu_340_conv_kernel2_d0;
        else 
            conv_kernel2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_kernel2_we0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel2_we0, grp_forward_fu_386_conv_kernel2_we0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel2_we0 <= grp_forward_fu_386_conv_kernel2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel2_we0 <= grp_backward_fu_340_conv_kernel2_we0;
        else 
            conv_kernel2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel3_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel3_address0, grp_forward_fu_386_conv_kernel3_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel3_address0 <= grp_forward_fu_386_conv_kernel3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel3_address0 <= grp_backward_fu_340_conv_kernel3_address0;
        else 
            conv_kernel3_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel3_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel3_ce0, grp_forward_fu_386_conv_kernel3_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel3_ce0 <= grp_forward_fu_386_conv_kernel3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel3_ce0 <= grp_backward_fu_340_conv_kernel3_ce0;
        else 
            conv_kernel3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel3_d0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel3_d0, grp_forward_fu_386_conv_kernel3_d0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel3_d0 <= grp_forward_fu_386_conv_kernel3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel3_d0 <= grp_backward_fu_340_conv_kernel3_d0;
        else 
            conv_kernel3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_kernel3_we0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_conv_kernel3_we0, grp_forward_fu_386_conv_kernel3_we0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_kernel3_we0 <= grp_forward_fu_386_conv_kernel3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            conv_kernel3_we0 <= grp_backward_fu_340_conv_kernel3_we0;
        else 
            conv_kernel3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ARADDR_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARADDR, grp_forward_fu_386_m_axi_input_matrix_ARADDR, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARADDR <= grp_forward_fu_386_m_axi_input_matrix_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARADDR <= grp_backward_fu_340_m_axi_conv1_ARADDR;
        else 
            data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ARBURST_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARBURST, grp_forward_fu_386_m_axi_input_matrix_ARBURST, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARBURST <= grp_forward_fu_386_m_axi_input_matrix_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARBURST <= grp_backward_fu_340_m_axi_conv1_ARBURST;
        else 
            data_ARBURST <= "XX";
        end if; 
    end process;


    data_ARCACHE_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARCACHE, grp_forward_fu_386_m_axi_input_matrix_ARCACHE, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARCACHE <= grp_forward_fu_386_m_axi_input_matrix_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARCACHE <= grp_backward_fu_340_m_axi_conv1_ARCACHE;
        else 
            data_ARCACHE <= "XXXX";
        end if; 
    end process;


    data_ARID_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARID, grp_forward_fu_386_m_axi_input_matrix_ARID, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARID <= grp_forward_fu_386_m_axi_input_matrix_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARID <= grp_backward_fu_340_m_axi_conv1_ARID;
        else 
            data_ARID <= "X";
        end if; 
    end process;


    data_ARLEN_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARLEN, grp_forward_fu_386_m_axi_input_matrix_ARLEN, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARLEN <= grp_forward_fu_386_m_axi_input_matrix_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARLEN <= grp_backward_fu_340_m_axi_conv1_ARLEN;
        else 
            data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ARLOCK_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARLOCK, grp_forward_fu_386_m_axi_input_matrix_ARLOCK, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARLOCK <= grp_forward_fu_386_m_axi_input_matrix_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARLOCK <= grp_backward_fu_340_m_axi_conv1_ARLOCK;
        else 
            data_ARLOCK <= "XX";
        end if; 
    end process;


    data_ARPROT_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARPROT, grp_forward_fu_386_m_axi_input_matrix_ARPROT, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARPROT <= grp_forward_fu_386_m_axi_input_matrix_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARPROT <= grp_backward_fu_340_m_axi_conv1_ARPROT;
        else 
            data_ARPROT <= "XXX";
        end if; 
    end process;


    data_ARQOS_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARQOS, grp_forward_fu_386_m_axi_input_matrix_ARQOS, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARQOS <= grp_forward_fu_386_m_axi_input_matrix_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARQOS <= grp_backward_fu_340_m_axi_conv1_ARQOS;
        else 
            data_ARQOS <= "XXXX";
        end if; 
    end process;


    data_ARREGION_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARREGION, grp_forward_fu_386_m_axi_input_matrix_ARREGION, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARREGION <= grp_forward_fu_386_m_axi_input_matrix_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARREGION <= grp_backward_fu_340_m_axi_conv1_ARREGION;
        else 
            data_ARREGION <= "XXXX";
        end if; 
    end process;


    data_ARSIZE_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARSIZE, grp_forward_fu_386_m_axi_input_matrix_ARSIZE, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARSIZE <= grp_forward_fu_386_m_axi_input_matrix_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARSIZE <= grp_backward_fu_340_m_axi_conv1_ARSIZE;
        else 
            data_ARSIZE <= "XXX";
        end if; 
    end process;


    data_ARUSER_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARUSER, grp_forward_fu_386_m_axi_input_matrix_ARUSER, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARUSER <= grp_forward_fu_386_m_axi_input_matrix_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARUSER <= grp_backward_fu_340_m_axi_conv1_ARUSER;
        else 
            data_ARUSER <= "X";
        end if; 
    end process;


    data_ARVALID_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_ARVALID, grp_forward_fu_386_m_axi_input_matrix_ARVALID, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ARVALID <= grp_forward_fu_386_m_axi_input_matrix_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_ARVALID <= grp_backward_fu_340_m_axi_conv1_ARVALID;
        else 
            data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_AWADDR_assign_proc : process(ap_CS_fsm_state3, icmp_ln354_reg_703, ap_CS_fsm_state28, icmp_ln364_fu_596_p2, data_addr_reg_707, ap_block_state3_io, grp_forward_fu_386_ap_done, ap_block_state28_io, grp_backward_fu_340_m_axi_conv1_AWADDR, ap_CS_fsm_state71, ap_CS_fsm_state72, empty_fu_569_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            data_AWADDR <= data_addr_reg_707;
        elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_AWADDR <= empty_fu_569_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWADDR <= grp_backward_fu_340_m_axi_conv1_AWADDR;
        else 
            data_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_AWBURST_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWBURST, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWBURST <= grp_backward_fu_340_m_axi_conv1_AWBURST;
        else 
            data_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    data_AWCACHE_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWCACHE, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWCACHE <= grp_backward_fu_340_m_axi_conv1_AWCACHE;
        else 
            data_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    data_AWID_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWID, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWID <= grp_backward_fu_340_m_axi_conv1_AWID;
        else 
            data_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    data_AWLEN_assign_proc : process(ap_CS_fsm_state3, icmp_ln354_reg_703, ap_CS_fsm_state28, icmp_ln364_fu_596_p2, ap_block_state3_io, grp_forward_fu_386_ap_done, ap_block_state28_io, grp_backward_fu_340_m_axi_conv1_AWLEN, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if ((((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data_AWLEN <= ap_const_lv32_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWLEN <= grp_backward_fu_340_m_axi_conv1_AWLEN;
        else 
            data_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_AWLOCK_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWLOCK, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWLOCK <= grp_backward_fu_340_m_axi_conv1_AWLOCK;
        else 
            data_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    data_AWPROT_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWPROT, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWPROT <= grp_backward_fu_340_m_axi_conv1_AWPROT;
        else 
            data_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    data_AWQOS_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWQOS, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWQOS <= grp_backward_fu_340_m_axi_conv1_AWQOS;
        else 
            data_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    data_AWREGION_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWREGION, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWREGION <= grp_backward_fu_340_m_axi_conv1_AWREGION;
        else 
            data_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    data_AWSIZE_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWSIZE, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWSIZE <= grp_backward_fu_340_m_axi_conv1_AWSIZE;
        else 
            data_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    data_AWUSER_assign_proc : process(grp_backward_fu_340_m_axi_conv1_AWUSER, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWUSER <= grp_backward_fu_340_m_axi_conv1_AWUSER;
        else 
            data_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    data_AWVALID_assign_proc : process(ap_CS_fsm_state3, icmp_ln354_reg_703, ap_CS_fsm_state28, icmp_ln364_fu_596_p2, ap_block_state3_io, grp_forward_fu_386_ap_done, ap_block_state28_io, grp_backward_fu_340_m_axi_conv1_AWVALID, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if ((((ap_const_boolean_0 = ap_block_state28_io) and (icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state3_io) or (grp_forward_fu_386_ap_done = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_AWVALID <= grp_backward_fu_340_m_axi_conv1_AWVALID;
        else 
            data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_BREADY_assign_proc : process(icmp_ln354_reg_703, ap_CS_fsm_state75, ap_CS_fsm_state83, data_BVALID, grp_backward_fu_340_m_axi_conv1_BREADY, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if ((((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or (not(((icmp_ln354_reg_703 = ap_const_lv1_0) and (data_BVALID = ap_const_logic_0))) and (icmp_ln354_reg_703 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            data_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_BREADY <= grp_backward_fu_340_m_axi_conv1_BREADY;
        else 
            data_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_RREADY_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_m_axi_conv1_RREADY, grp_forward_fu_386_m_axi_input_matrix_RREADY, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_RREADY <= grp_forward_fu_386_m_axi_input_matrix_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_RREADY <= grp_backward_fu_340_m_axi_conv1_RREADY;
        else 
            data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_WDATA_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln356_reg_785_pp1_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln367_reg_766_pp0_iter1_reg, reg_454, result_load_reg_780, grp_backward_fu_340_m_axi_conv1_WDATA, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001)
    begin
        if (((icmp_ln356_reg_785_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
            data_WDATA <= reg_454;
        elsif (((icmp_ln367_reg_766_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            data_WDATA <= result_load_reg_780;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_WDATA <= grp_backward_fu_340_m_axi_conv1_WDATA;
        else 
            data_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_WID_assign_proc : process(grp_backward_fu_340_m_axi_conv1_WID, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_WID <= grp_backward_fu_340_m_axi_conv1_WID;
        else 
            data_WID <= ap_const_lv1_0;
        end if; 
    end process;


    data_WLAST_assign_proc : process(grp_backward_fu_340_m_axi_conv1_WLAST, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_WLAST <= grp_backward_fu_340_m_axi_conv1_WLAST;
        else 
            data_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    data_WSTRB_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln356_reg_785_pp1_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln367_reg_766_pp0_iter1_reg, grp_backward_fu_340_m_axi_conv1_WSTRB, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001)
    begin
        if ((((icmp_ln367_reg_766_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)) or ((icmp_ln356_reg_785_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001)))) then 
            data_WSTRB <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_WSTRB <= grp_backward_fu_340_m_axi_conv1_WSTRB;
        else 
            data_WSTRB <= "XXXX";
        end if; 
    end process;


    data_WUSER_assign_proc : process(grp_backward_fu_340_m_axi_conv1_WUSER, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_WUSER <= grp_backward_fu_340_m_axi_conv1_WUSER;
        else 
            data_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    data_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln356_reg_785_pp1_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln367_reg_766_pp0_iter1_reg, ap_block_pp1_stage0_11001, ap_block_pp0_stage0_11001, grp_backward_fu_340_m_axi_conv1_WVALID, ap_CS_fsm_state71, ap_CS_fsm_state72)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln367_reg_766_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln356_reg_785_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            data_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            data_WVALID <= grp_backward_fu_340_m_axi_conv1_WVALID;
        else 
            data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_AW_assign_proc : process(m_axi_data_AWREADY, ap_CS_fsm_state3, icmp_ln354_reg_703, ap_CS_fsm_state28, icmp_ln364_fu_596_p2)
    begin
        if ((((icmp_ln364_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((icmp_ln354_reg_703 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data_blk_n_AW <= m_axi_data_AWREADY;
        else 
            data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_B_assign_proc : process(m_axi_data_BVALID, icmp_ln354_reg_703, ap_CS_fsm_state75, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or ((icmp_ln354_reg_703 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            data_blk_n_B <= m_axi_data_BVALID;
        else 
            data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_W_assign_proc : process(m_axi_data_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln356_reg_785_pp1_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln367_reg_766_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln367_reg_766_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln356_reg_785_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            data_blk_n_W <= m_axi_data_WREADY;
        else 
            data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out1_reg_657),64));

    fc_hidden_layer1_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer1_address0, grp_forward_fu_386_fc_hidden_layer1_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer1_address0 <= grp_forward_fu_386_fc_hidden_layer1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer1_address0 <= grp_backward_fu_340_fc_hidden_layer1_address0;
        else 
            fc_hidden_layer1_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer1_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer1_ce0, grp_forward_fu_386_fc_hidden_layer1_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer1_ce0 <= grp_forward_fu_386_fc_hidden_layer1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer1_ce0 <= grp_backward_fu_340_fc_hidden_layer1_ce0;
        else 
            fc_hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer1_d0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer1_d0, grp_forward_fu_386_fc_hidden_layer1_d0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer1_d0 <= grp_forward_fu_386_fc_hidden_layer1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer1_d0 <= grp_backward_fu_340_fc_hidden_layer1_d0;
        else 
            fc_hidden_layer1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer1_we0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer1_we0, grp_forward_fu_386_fc_hidden_layer1_we0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer1_we0 <= grp_forward_fu_386_fc_hidden_layer1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer1_we0 <= grp_backward_fu_340_fc_hidden_layer1_we0;
        else 
            fc_hidden_layer1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer2_address0, grp_forward_fu_386_fc_hidden_layer2_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer2_address0 <= grp_forward_fu_386_fc_hidden_layer2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer2_address0 <= grp_backward_fu_340_fc_hidden_layer2_address0;
        else 
            fc_hidden_layer2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer2_address1_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer2_address1, grp_forward_fu_386_fc_hidden_layer2_address1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer2_address1 <= grp_forward_fu_386_fc_hidden_layer2_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer2_address1 <= grp_backward_fu_340_fc_hidden_layer2_address1;
        else 
            fc_hidden_layer2_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer2_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer2_ce0, grp_forward_fu_386_fc_hidden_layer2_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer2_ce0 <= grp_forward_fu_386_fc_hidden_layer2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer2_ce0 <= grp_backward_fu_340_fc_hidden_layer2_ce0;
        else 
            fc_hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_ce1_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer2_ce1, grp_forward_fu_386_fc_hidden_layer2_ce1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer2_ce1 <= grp_forward_fu_386_fc_hidden_layer2_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer2_ce1 <= grp_backward_fu_340_fc_hidden_layer2_ce1;
        else 
            fc_hidden_layer2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_d1_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer2_d1, grp_forward_fu_386_fc_hidden_layer2_d1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer2_d1 <= grp_forward_fu_386_fc_hidden_layer2_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer2_d1 <= grp_backward_fu_340_fc_hidden_layer2_d1;
        else 
            fc_hidden_layer2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer2_we1_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer2_we1, grp_forward_fu_386_fc_hidden_layer2_we1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer2_we1 <= grp_forward_fu_386_fc_hidden_layer2_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer2_we1 <= grp_backward_fu_340_fc_hidden_layer2_we1;
        else 
            fc_hidden_layer2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer3_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer3_address0, grp_forward_fu_386_fc_hidden_layer3_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer3_address0 <= grp_forward_fu_386_fc_hidden_layer3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer3_address0 <= grp_backward_fu_340_fc_hidden_layer3_address0;
        else 
            fc_hidden_layer3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer3_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer3_ce0, grp_forward_fu_386_fc_hidden_layer3_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer3_ce0 <= grp_forward_fu_386_fc_hidden_layer3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer3_ce0 <= grp_backward_fu_340_fc_hidden_layer3_ce0;
        else 
            fc_hidden_layer3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer3_d0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer3_d0, grp_forward_fu_386_fc_hidden_layer3_d0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer3_d0 <= grp_forward_fu_386_fc_hidden_layer3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer3_d0 <= grp_backward_fu_340_fc_hidden_layer3_d0;
        else 
            fc_hidden_layer3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer3_we0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_fc_hidden_layer3_we0, grp_forward_fu_386_fc_hidden_layer3_we0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_hidden_layer3_we0 <= grp_forward_fu_386_fc_hidden_layer3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fc_hidden_layer3_we0 <= grp_backward_fu_340_fc_hidden_layer3_we0;
        else 
            fc_hidden_layer3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    first_conv1_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_first_conv1_address0, grp_forward_fu_386_first_conv1_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_conv1_address0 <= grp_forward_fu_386_first_conv1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            first_conv1_address0 <= grp_backward_fu_340_first_conv1_address0;
        else 
            first_conv1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    first_conv1_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_first_conv1_ce0, grp_forward_fu_386_first_conv1_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_conv1_ce0 <= grp_forward_fu_386_first_conv1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            first_conv1_ce0 <= grp_backward_fu_340_first_conv1_ce0;
        else 
            first_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    first_conv1_ce1_assign_proc : process(grp_backward_fu_340_first_conv1_ce1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            first_conv1_ce1 <= grp_backward_fu_340_first_conv1_ce1;
        else 
            first_conv1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    first_conv1_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_first_conv1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_conv1_we0 <= grp_forward_fu_386_first_conv1_we0;
        else 
            first_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    first_fc_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_first_fc_0_address0, grp_forward_fu_386_first_fc_0_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_fc_0_address0 <= grp_forward_fu_386_first_fc_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            first_fc_0_address0 <= grp_backward_fu_340_first_fc_0_address0;
        else 
            first_fc_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    first_fc_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_first_fc_0_ce0, grp_forward_fu_386_first_fc_0_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_fc_0_ce0 <= grp_forward_fu_386_first_fc_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            first_fc_0_ce0 <= grp_backward_fu_340_first_fc_0_ce0;
        else 
            first_fc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    first_fc_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_first_fc_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_fc_0_we0 <= grp_forward_fu_386_first_fc_0_we0;
        else 
            first_fc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    first_relu_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_first_relu_0_address0, grp_forward_fu_386_first_relu_0_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_relu_0_address0 <= grp_forward_fu_386_first_relu_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            first_relu_0_address0 <= grp_backward_fu_340_first_relu_0_address0;
        else 
            first_relu_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    first_relu_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_first_relu_0_ce0, grp_forward_fu_386_first_relu_0_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_relu_0_ce0 <= grp_forward_fu_386_first_relu_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            first_relu_0_ce0 <= grp_backward_fu_340_first_relu_0_ce0;
        else 
            first_relu_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    first_relu_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_first_relu_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            first_relu_0_we0 <= grp_forward_fu_386_first_relu_0_we0;
        else 
            first_relu_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_conv_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_flatten_conv_0_address0, grp_forward_fu_386_flatten_conv_0_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten_conv_0_address0 <= grp_forward_fu_386_flatten_conv_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            flatten_conv_0_address0 <= grp_backward_fu_340_flatten_conv_0_address0;
        else 
            flatten_conv_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    flatten_conv_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_flatten_conv_0_ce0, grp_forward_fu_386_flatten_conv_0_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten_conv_0_ce0 <= grp_forward_fu_386_flatten_conv_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            flatten_conv_0_ce0 <= grp_backward_fu_340_flatten_conv_0_ce0;
        else 
            flatten_conv_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_conv_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_flatten_conv_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten_conv_0_we0 <= grp_forward_fu_386_flatten_conv_0_we0;
        else 
            flatten_conv_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_backward_fu_340_ap_start <= grp_backward_fu_340_ap_start_reg;
    grp_forward_fu_386_ap_start <= grp_forward_fu_386_ap_start_reg;

    grp_fu_431_p0_assign_proc : process(tmp_4_reg_727, tmp_8_reg_761, ap_CS_fsm_state25, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_431_p0 <= tmp_8_reg_761;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_431_p0 <= tmp_4_reg_727;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_435_p0_assign_proc : process(outmlp_0_q0, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state4, ap_phi_mux_probability_0_phi_fu_288_p4, probability_0_reg_284, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_435_p0 <= probability_0_reg_284;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_435_p0 <= outmlp_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_435_p0 <= ap_phi_mux_probability_0_phi_fu_288_p4;
        else 
            grp_fu_435_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_449_p1_assign_proc : process(reg_460, tmp_6_reg_756, ap_CS_fsm_state7, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_449_p1 <= tmp_6_reg_756;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_449_p1 <= reg_460;
        else 
            grp_fu_449_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_602_p2 <= std_logic_vector(unsigned(i_0_reg_307) + unsigned(ap_const_lv4_1));
    icmp_ln354_fu_563_p2 <= "1" when (flag = ap_const_lv32_0) else "0";
    icmp_ln356_fu_630_p2 <= "1" when (phi_ln356_reg_329 = ap_const_lv4_A) else "0";
    icmp_ln361_fu_579_p2 <= "1" when (j_0_reg_296 = ap_const_lv4_A) else "0";
    icmp_ln364_fu_596_p2 <= "1" when (i_0_reg_307 = ap_const_lv4_A) else "0";
    icmp_ln367_fu_613_p2 <= "1" when (phi_ln367_reg_318 = ap_const_lv4_A) else "0";
    j_fu_585_p2 <= std_logic_vector(unsigned(j_0_reg_296) + unsigned(ap_const_lv4_1));

    mnist_data_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_mnist_data_address0, grp_forward_fu_386_mnist_data_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mnist_data_address0 <= grp_forward_fu_386_mnist_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            mnist_data_address0 <= grp_backward_fu_340_mnist_data_address0;
        else 
            mnist_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mnist_data_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_mnist_data_ce0, grp_forward_fu_386_mnist_data_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mnist_data_ce0 <= grp_forward_fu_386_mnist_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            mnist_data_ce0 <= grp_backward_fu_340_mnist_data_ce0;
        else 
            mnist_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mnist_data_ce1_assign_proc : process(grp_backward_fu_340_mnist_data_ce1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            mnist_data_ce1 <= grp_backward_fu_340_mnist_data_ce1;
        else 
            mnist_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mnist_data_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_mnist_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mnist_data_we0 <= grp_forward_fu_386_mnist_data_we0;
        else 
            mnist_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    outmlp_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_block_pp1_stage0, ap_CS_fsm_state28, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state4, zext_ln365_fu_608_p1, ap_enable_reg_pp1_iter0, grp_forward_fu_386_outmlp_0_address0, zext_ln362_fu_591_p1, zext_ln356_fu_642_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            outmlp_0_address0 <= zext_ln356_fu_642_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            outmlp_0_address0 <= zext_ln365_fu_608_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outmlp_0_address0 <= zext_ln362_fu_591_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outmlp_0_address0 <= grp_forward_fu_386_outmlp_0_address0;
        else 
            outmlp_0_address0 <= "XXXX";
        end if; 
    end process;


    outmlp_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state28, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state4, ap_block_state28_io, ap_enable_reg_pp1_iter0, grp_forward_fu_386_outmlp_0_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_state28_io) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            outmlp_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outmlp_0_ce0 <= grp_forward_fu_386_outmlp_0_ce0;
        else 
            outmlp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outmlp_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_outmlp_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outmlp_0_we0 <= grp_forward_fu_386_outmlp_0_we0;
        else 
            outmlp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_address0_assign_proc : process(ap_block_pp0_stage0, zext_ln365_reg_746, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_backward_fu_340_result_address0, ap_CS_fsm_state67, ap_CS_fsm_state72, zext_ln367_fu_625_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_address0 <= zext_ln367_fu_625_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            result_address0 <= zext_ln365_reg_746(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            result_address0 <= grp_backward_fu_340_result_address0;
        else 
            result_address0 <= "XXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_backward_fu_340_result_ce0, ap_CS_fsm_state67, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            result_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            result_ce0 <= grp_backward_fu_340_result_ce0;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    second_fc_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_second_fc_0_address0, grp_forward_fu_386_second_fc_0_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_fc_0_address0 <= grp_forward_fu_386_second_fc_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            second_fc_0_address0 <= grp_backward_fu_340_second_fc_0_address0;
        else 
            second_fc_0_address0 <= "XXXXXX";
        end if; 
    end process;


    second_fc_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_second_fc_0_ce0, grp_forward_fu_386_second_fc_0_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_fc_0_ce0 <= grp_forward_fu_386_second_fc_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            second_fc_0_ce0 <= grp_backward_fu_340_second_fc_0_ce0;
        else 
            second_fc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    second_fc_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_second_fc_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_fc_0_we0 <= grp_forward_fu_386_second_fc_0_we0;
        else 
            second_fc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    second_relu_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_second_relu_0_address0, grp_forward_fu_386_second_relu_0_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_relu_0_address0 <= grp_forward_fu_386_second_relu_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            second_relu_0_address0 <= grp_backward_fu_340_second_relu_0_address0;
        else 
            second_relu_0_address0 <= "XXXXXX";
        end if; 
    end process;


    second_relu_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_second_relu_0_ce0, grp_forward_fu_386_second_relu_0_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_relu_0_ce0 <= grp_forward_fu_386_second_relu_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            second_relu_0_ce0 <= grp_backward_fu_340_second_relu_0_ce0;
        else 
            second_relu_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    second_relu_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_second_relu_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            second_relu_0_we0 <= grp_forward_fu_386_second_relu_0_we0;
        else 
            second_relu_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sencond_conv1_address0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_sencond_conv1_address0, grp_forward_fu_386_sencond_conv1_address0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sencond_conv1_address0 <= grp_forward_fu_386_sencond_conv1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            sencond_conv1_address0 <= grp_backward_fu_340_sencond_conv1_address0;
        else 
            sencond_conv1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sencond_conv1_ce0_assign_proc : process(ap_CS_fsm_state3, grp_backward_fu_340_sencond_conv1_ce0, grp_forward_fu_386_sencond_conv1_ce0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sencond_conv1_ce0 <= grp_forward_fu_386_sencond_conv1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            sencond_conv1_ce0 <= grp_backward_fu_340_sencond_conv1_ce0;
        else 
            sencond_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sencond_conv1_ce1_assign_proc : process(grp_backward_fu_340_sencond_conv1_ce1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            sencond_conv1_ce1 <= grp_backward_fu_340_sencond_conv1_ce1;
        else 
            sencond_conv1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sencond_conv1_we0_assign_proc : process(ap_CS_fsm_state3, grp_forward_fu_386_sencond_conv1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sencond_conv1_we0 <= grp_forward_fu_386_sencond_conv1_we0;
        else 
            sencond_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln356_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln356_reg_329),64));
    zext_ln362_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_296),64));
    zext_ln365_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_307),64));
    zext_ln367_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln367_reg_318),64));
end behav;
