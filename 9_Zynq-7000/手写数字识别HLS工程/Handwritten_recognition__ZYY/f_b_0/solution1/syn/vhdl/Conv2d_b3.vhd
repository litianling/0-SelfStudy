-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2d_b3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_matrix_ce0 : OUT STD_LOGIC;
    out_matrix_we0 : OUT STD_LOGIC;
    out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    first_conv1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    first_conv1_ce0 : OUT STD_LOGIC;
    first_conv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    first_conv1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    first_conv1_ce1 : OUT STD_LOGIC;
    first_conv1_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv2d_b3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_0_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state11_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal icmp_ln123_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln120_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln120_1_fu_281_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln120_1_reg_572 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln121_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_fu_305_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_reg_582 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_1_fu_313_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln120_1_reg_587 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln120_1_fu_321_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln120_3_fu_329_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln120_3_reg_597 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln120_3_fu_359_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_3_reg_602 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln121_fu_367_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln121_reg_608 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_matrix_addr_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_390_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_618 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln123_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_624_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln125_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln125_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_fu_526_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln125_reg_653 : STD_LOGIC_VECTOR (9 downto 0);
    signal first_conv1_load_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal kernel_load_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_conv1_load_1_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_1_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_conv1_load_2_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal kernel_load_2_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_1_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_2_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state9_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal row_4_fu_549_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_4_reg_713 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state14_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal select_ln121_fu_561_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal indvar_flatten_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv1_reg_171 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_reg_193 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_reg_205 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_row_0_phi_fu_231_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln122_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln125_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_1_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln125_1_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_2_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln125_2_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal grp_fu_244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal shl_ln_fu_257_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln122_1_fu_265_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln120_fu_253_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_287_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln122_mid1_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln122_2_fu_341_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln120_2_fu_325_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln122_1_fu_345_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln122_fu_269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln120_fu_293_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln120_2_fu_351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln121_1_fu_371_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln122_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln122_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln8_fu_405_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln125_1_fu_417_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln125_3_fu_413_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln125_4_fu_425_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_fu_401_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln125_fu_435_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln125_fu_444_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln125_fu_444_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln125_1_fu_429_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_458_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln_fu_468_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln125_5_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_1_fu_489_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln125_6_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln125_4_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_1_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln125_7_fu_522_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln125_8_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_2_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal add_ln121_fu_555_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state12_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_state13_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    forw_back_fadd_32bkb_U67 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    forw_back_fmul_32cud_U68 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_244_p0,
        din1 => grp_fu_244_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln120_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln120_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                col_reg_205 <= j_reg_618;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_reg_205 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    empty_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_624_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                empty_reg_216 <= grp_fu_238_p2;
            elsif (((icmp_ln120_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_216 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar_flatten_reg_160 <= add_ln120_1_reg_572;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_160 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvars_iv1_reg_171 <= select_ln120_3_reg_602;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv1_reg_171 <= ap_const_lv3_3;
            end if; 
        end if;
    end process;

    indvars_iv_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvars_iv_reg_193 <= select_ln121_fu_561_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_reg_193 <= ap_const_lv3_3;
            end if; 
        end if;
    end process;

    row_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                row_0_reg_228 <= row_4_reg_713;
            elsif (((icmp_ln120_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_0_reg_228 <= zext_ln120_1_fu_321_p1;
            end if; 
        end if;
    end process;

    row_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                row_reg_182 <= select_ln120_1_reg_587;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_182 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln120_1_reg_572 <= add_ln120_1_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln123_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln125_reg_653 <= add_ln125_fu_526_p2;
                trunc_ln125_reg_628 <= trunc_ln125_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                first_conv1_load_1_reg_668 <= first_conv1_q1;
                first_conv1_load_reg_658 <= first_conv1_q0;
                kernel_load_1_reg_673 <= kernel_q1;
                kernel_load_reg_663 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                first_conv1_load_2_reg_688 <= first_conv1_q0;
                kernel_load_2_reg_693 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln121_reg_577 <= icmp_ln121_fu_299_p2;
                j_reg_618 <= j_fu_390_p2;
                out_matrix_addr_reg_613 <= zext_ln122_fu_385_p1(4 - 1 downto 0);
                select_ln120_1_reg_587 <= select_ln120_1_fu_313_p3;
                select_ln120_3_reg_602 <= select_ln120_3_fu_359_p3;
                select_ln120_reg_582 <= select_ln120_fu_305_p3;
                    zext_ln120_3_reg_597(1 downto 0) <= zext_ln120_3_fu_329_p1(1 downto 0);
                    zext_ln121_reg_608(1 downto 0) <= zext_ln121_fu_367_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln123_reg_624 <= icmp_ln123_fu_396_p2;
                icmp_ln123_reg_624_pp0_iter1_reg <= icmp_ln123_reg_624;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then
                reg_248 <= grp_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                row_4_reg_713 <= row_4_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp3_reg_698 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_1_reg_703 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                tmp_2_reg_708 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    zext_ln120_3_reg_597(3 downto 2) <= "00";
    zext_ln121_reg_608(9 downto 2) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln120_fu_275_p2, ap_CS_fsm_state2, icmp_ln123_fu_396_p2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_275_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln123_fu_396_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln123_fu_396_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln120_1_fu_281_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_160) + unsigned(ap_const_lv4_1));
    add_ln120_fu_293_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_171) + unsigned(ap_const_lv3_1));
    add_ln121_fu_555_p2 <= std_logic_vector(unsigned(indvars_iv_reg_193) + unsigned(ap_const_lv3_1));
    add_ln122_fu_375_p2 <= std_logic_vector(unsigned(select_ln120_2_fu_351_p3) + unsigned(zext_ln121_1_fu_371_p1));
    add_ln125_1_fu_489_p3 <= (tmp_16_fu_458_p4 & j_reg_618);
    add_ln125_2_fu_539_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(trunc_ln125_reg_628));
    add_ln125_fu_526_p2 <= std_logic_vector(signed(sext_ln125_7_fu_522_p1) + signed(zext_ln121_reg_608));
    add_ln_fu_468_p3 <= (tmp_16_fu_458_p4 & select_ln120_reg_582);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln123_fu_396_p2)
    begin
        if ((icmp_ln123_fu_396_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln120_fu_275_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_275_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_231_p4_assign_proc : process(row_0_reg_228, icmp_ln123_reg_624, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, row_4_reg_713, ap_block_pp0_stage0)
    begin
        if (((icmp_ln123_reg_624 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_row_0_phi_fu_231_p4 <= row_4_reg_713;
        else 
            ap_phi_mux_row_0_phi_fu_231_p4 <= row_0_reg_228;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln120_fu_275_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_275_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    first_conv1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln125_fu_479_p1, zext_ln125_2_fu_534_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                first_conv1_address0 <= zext_ln125_2_fu_534_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                first_conv1_address0 <= zext_ln125_fu_479_p1(10 - 1 downto 0);
            else 
                first_conv1_address0 <= "XXXXXXXXXX";
            end if;
        else 
            first_conv1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    first_conv1_address1 <= zext_ln125_1_fu_500_p1(10 - 1 downto 0);

    first_conv1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            first_conv1_ce0 <= ap_const_logic_1;
        else 
            first_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    first_conv1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            first_conv1_ce1 <= ap_const_logic_1;
        else 
            first_conv1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_238_p0_assign_proc : process(empty_reg_216, reg_248, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            grp_fu_238_p0 <= reg_248;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_238_p0 <= empty_reg_216;
        else 
            grp_fu_238_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_238_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tmp3_reg_698, tmp_1_reg_703, ap_CS_fsm_pp0_stage5, tmp_2_reg_708, ap_block_pp0_stage1, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_238_p1 <= tmp_2_reg_708;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_238_p1 <= tmp_1_reg_703;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_238_p1 <= tmp3_reg_698;
        else 
            grp_fu_238_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_244_p0_assign_proc : process(ap_enable_reg_pp0_iter0, first_conv1_load_reg_658, first_conv1_load_1_reg_668, first_conv1_load_2_reg_688, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_244_p0 <= first_conv1_load_2_reg_688;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_244_p0 <= first_conv1_load_1_reg_668;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_244_p0 <= first_conv1_load_reg_658;
            else 
                grp_fu_244_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_244_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_244_p1_assign_proc : process(ap_enable_reg_pp0_iter0, kernel_load_reg_663, kernel_load_1_reg_673, ap_CS_fsm_pp0_stage2, kernel_load_2_reg_693, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_244_p1 <= kernel_load_2_reg_693;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_244_p1 <= kernel_load_1_reg_673;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_244_p1 <= kernel_load_reg_663;
            else 
                grp_fu_244_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_244_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_287_p2 <= std_logic_vector(unsigned(row_reg_182) + unsigned(ap_const_lv2_1));
    icmp_ln120_fu_275_p2 <= "1" when (indvar_flatten_reg_160 = ap_const_lv4_9) else "0";
    icmp_ln121_fu_299_p2 <= "1" when (indvars_iv_reg_193 = ap_const_lv3_6) else "0";
    icmp_ln123_fu_396_p2 <= "1" when (ap_phi_mux_row_0_phi_fu_231_p4 = select_ln120_3_reg_602) else "0";
    j_fu_390_p2 <= std_logic_vector(unsigned(select_ln120_fu_305_p3) + unsigned(ap_const_lv2_1));

    kernel_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, sext_ln125_fu_484_p1, ap_block_pp0_stage1, sext_ln125_2_fu_544_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= sext_ln125_2_fu_544_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= sext_ln125_fu_484_p1(10 - 1 downto 0);
            else 
                kernel_address0 <= "XXXXXXXXXX";
            end if;
        else 
            kernel_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    kernel_address1 <= sext_ln125_1_fu_511_p1(10 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln125_fu_444_p1 <= sub_ln125_fu_435_p2;
    mul_ln125_fu_444_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv10_1A) * signed(mul_ln125_fu_444_p1))), 10));
    or_ln125_1_fu_516_p2 <= (sub_ln125_1_fu_429_p2 or ap_const_lv9_2);
    or_ln125_fu_505_p2 <= (sext_ln125_4_fu_450_p1 or ap_const_lv32_1);

    out_matrix_address0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, out_matrix_addr_reg_613, ap_CS_fsm_pp0_stage4, zext_ln122_fu_385_p1, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            out_matrix_address0 <= out_matrix_addr_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_address0 <= zext_ln122_fu_385_p1(4 - 1 downto 0);
        else 
            out_matrix_address0 <= "XXXX";
        end if; 
    end process;


    out_matrix_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            out_matrix_ce0 <= ap_const_logic_1;
        else 
            out_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_matrix_d0_assign_proc : process(grp_fu_238_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            out_matrix_d0 <= grp_fu_238_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_d0 <= ap_const_lv32_0;
        else 
            out_matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_matrix_we0_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln120_fu_275_p2, ap_CS_fsm_state2, icmp_ln123_reg_624_pp0_iter1_reg, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((icmp_ln123_reg_624_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln120_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_matrix_we0 <= ap_const_logic_1;
        else 
            out_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_4_fu_549_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(row_0_reg_228));
    select_ln120_1_fu_313_p3 <= 
        i_fu_287_p2 when (icmp_ln121_fu_299_p2(0) = '1') else 
        row_reg_182;
    select_ln120_2_fu_351_p3 <= 
        sub_ln122_1_fu_345_p2 when (icmp_ln121_fu_299_p2(0) = '1') else 
        sub_ln122_fu_269_p2;
    select_ln120_3_fu_359_p3 <= 
        add_ln120_fu_293_p2 when (icmp_ln121_fu_299_p2(0) = '1') else 
        indvars_iv1_reg_171;
    select_ln120_fu_305_p3 <= 
        ap_const_lv2_0 when (icmp_ln121_fu_299_p2(0) = '1') else 
        col_reg_205;
    select_ln121_fu_561_p3 <= 
        ap_const_lv3_4 when (icmp_ln121_reg_577(0) = '1') else 
        add_ln121_fu_555_p2;
        sext_ln122_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln122_fu_375_p2),32));

        sext_ln125_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln125_fu_505_p2),64));

        sext_ln125_2_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln125_2_fu_539_p2),64));

        sext_ln125_4_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln125_fu_444_p2),32));

        sext_ln125_5_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln_fu_468_p3),32));

        sext_ln125_6_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln125_1_fu_489_p3),32));

        sext_ln125_7_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln125_1_fu_516_p2),10));

        sext_ln125_8_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln125_reg_653),32));

        sext_ln125_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln125_fu_444_p2),64));

    shl_ln122_mid1_fu_333_p3 <= (i_fu_287_p2 & ap_const_lv2_0);
    shl_ln125_1_fu_417_p3 <= (ap_phi_mux_row_0_phi_fu_231_p4 & ap_const_lv2_0);
    shl_ln8_fu_405_p3 <= (ap_phi_mux_row_0_phi_fu_231_p4 & ap_const_lv5_0);
    shl_ln_fu_257_p3 <= (row_reg_182 & ap_const_lv2_0);
    sub_ln122_1_fu_345_p2 <= std_logic_vector(unsigned(zext_ln122_2_fu_341_p1) - unsigned(zext_ln120_2_fu_325_p1));
    sub_ln122_fu_269_p2 <= std_logic_vector(unsigned(zext_ln122_1_fu_265_p1) - unsigned(zext_ln120_fu_253_p1));
    sub_ln125_1_fu_429_p2 <= std_logic_vector(unsigned(zext_ln125_3_fu_413_p1) - unsigned(zext_ln125_4_fu_425_p1));
    sub_ln125_fu_435_p2 <= std_logic_vector(unsigned(zext_ln123_fu_401_p1) - unsigned(zext_ln120_3_reg_597));
    tmp_16_fu_458_p4 <= sub_ln125_1_fu_429_p2(8 downto 2);
    trunc_ln125_fu_454_p1 <= mul_ln125_fu_444_p2(8 - 1 downto 0);
    zext_ln120_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_1_fu_313_p3),3));
    zext_ln120_2_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_287_p2),5));
    zext_ln120_3_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_1_fu_313_p3),4));
    zext_ln120_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_182),5));
    zext_ln121_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_fu_305_p3),5));
    zext_ln121_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_fu_305_p3),10));
    zext_ln122_1_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_257_p3),5));
    zext_ln122_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln122_mid1_fu_333_p3),5));
    zext_ln122_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln122_fu_381_p1),64));
    zext_ln123_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_row_0_phi_fu_231_p4),4));
    zext_ln125_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln125_6_fu_496_p1),64));
    zext_ln125_2_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln125_8_fu_531_p1),64));
    zext_ln125_3_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_405_p3),9));
    zext_ln125_4_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln125_1_fu_417_p3),9));
    zext_ln125_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln125_5_fu_475_p1),64));
end behav;
