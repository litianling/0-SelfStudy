// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="forw_back,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=419,HLS_SYN_DSP=135,HLS_SYN_FF=22405,HLS_SYN_LUT=36603,HLS_VERSION=2019_1}" *)

module forw_back (
        ap_clk,
        ap_rst_n,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 79'd1;
parameter    ap_ST_fsm_state2 = 79'd2;
parameter    ap_ST_fsm_state3 = 79'd4;
parameter    ap_ST_fsm_state4 = 79'd8;
parameter    ap_ST_fsm_state5 = 79'd16;
parameter    ap_ST_fsm_state6 = 79'd32;
parameter    ap_ST_fsm_state7 = 79'd64;
parameter    ap_ST_fsm_state8 = 79'd128;
parameter    ap_ST_fsm_state9 = 79'd256;
parameter    ap_ST_fsm_state10 = 79'd512;
parameter    ap_ST_fsm_state11 = 79'd1024;
parameter    ap_ST_fsm_state12 = 79'd2048;
parameter    ap_ST_fsm_state13 = 79'd4096;
parameter    ap_ST_fsm_state14 = 79'd8192;
parameter    ap_ST_fsm_state15 = 79'd16384;
parameter    ap_ST_fsm_state16 = 79'd32768;
parameter    ap_ST_fsm_state17 = 79'd65536;
parameter    ap_ST_fsm_state18 = 79'd131072;
parameter    ap_ST_fsm_state19 = 79'd262144;
parameter    ap_ST_fsm_state20 = 79'd524288;
parameter    ap_ST_fsm_state21 = 79'd1048576;
parameter    ap_ST_fsm_state22 = 79'd2097152;
parameter    ap_ST_fsm_state23 = 79'd4194304;
parameter    ap_ST_fsm_state24 = 79'd8388608;
parameter    ap_ST_fsm_state25 = 79'd16777216;
parameter    ap_ST_fsm_state26 = 79'd33554432;
parameter    ap_ST_fsm_state27 = 79'd67108864;
parameter    ap_ST_fsm_state28 = 79'd134217728;
parameter    ap_ST_fsm_state29 = 79'd268435456;
parameter    ap_ST_fsm_state30 = 79'd536870912;
parameter    ap_ST_fsm_state31 = 79'd1073741824;
parameter    ap_ST_fsm_state32 = 79'd2147483648;
parameter    ap_ST_fsm_state33 = 79'd4294967296;
parameter    ap_ST_fsm_state34 = 79'd8589934592;
parameter    ap_ST_fsm_state35 = 79'd17179869184;
parameter    ap_ST_fsm_state36 = 79'd34359738368;
parameter    ap_ST_fsm_state37 = 79'd68719476736;
parameter    ap_ST_fsm_state38 = 79'd137438953472;
parameter    ap_ST_fsm_state39 = 79'd274877906944;
parameter    ap_ST_fsm_state40 = 79'd549755813888;
parameter    ap_ST_fsm_state41 = 79'd1099511627776;
parameter    ap_ST_fsm_state42 = 79'd2199023255552;
parameter    ap_ST_fsm_state43 = 79'd4398046511104;
parameter    ap_ST_fsm_state44 = 79'd8796093022208;
parameter    ap_ST_fsm_state45 = 79'd17592186044416;
parameter    ap_ST_fsm_state46 = 79'd35184372088832;
parameter    ap_ST_fsm_state47 = 79'd70368744177664;
parameter    ap_ST_fsm_state48 = 79'd140737488355328;
parameter    ap_ST_fsm_state49 = 79'd281474976710656;
parameter    ap_ST_fsm_state50 = 79'd562949953421312;
parameter    ap_ST_fsm_state51 = 79'd1125899906842624;
parameter    ap_ST_fsm_state52 = 79'd2251799813685248;
parameter    ap_ST_fsm_state53 = 79'd4503599627370496;
parameter    ap_ST_fsm_state54 = 79'd9007199254740992;
parameter    ap_ST_fsm_state55 = 79'd18014398509481984;
parameter    ap_ST_fsm_state56 = 79'd36028797018963968;
parameter    ap_ST_fsm_state57 = 79'd72057594037927936;
parameter    ap_ST_fsm_state58 = 79'd144115188075855872;
parameter    ap_ST_fsm_state59 = 79'd288230376151711744;
parameter    ap_ST_fsm_state60 = 79'd576460752303423488;
parameter    ap_ST_fsm_state61 = 79'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 79'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 79'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 79'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 79'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 79'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 79'd73786976294838206464;
parameter    ap_ST_fsm_pp0_stage0 = 79'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 79'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 79'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 79'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 79'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 79'd4722366482869645213696;
parameter    ap_ST_fsm_pp1_stage0 = 79'd9444732965739290427392;
parameter    ap_ST_fsm_state79 = 79'd18889465931478580854784;
parameter    ap_ST_fsm_state80 = 79'd37778931862957161709568;
parameter    ap_ST_fsm_state81 = 79'd75557863725914323419136;
parameter    ap_ST_fsm_state82 = 79'd151115727451828646838272;
parameter    ap_ST_fsm_state83 = 79'd302231454903657293676544;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_AWADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_AWID;
output  [7:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [C_M_AXI_DATA_AWUSER_WIDTH - 1:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_WDATA;
output  [C_M_AXI_DATA_WSTRB_WIDTH - 1:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_WID;
output  [C_M_AXI_DATA_WUSER_WIDTH - 1:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_ARADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_ARID;
output  [7:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [C_M_AXI_DATA_ARUSER_WIDTH - 1:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_RID;
input  [C_M_AXI_DATA_RUSER_WIDTH - 1:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_BID;
input  [C_M_AXI_DATA_BUSER_WIDTH - 1:0] m_axi_data_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [78:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] flag;
wire   [31:0] in_r;
wire   [31:0] conv1;
wire   [31:0] conv2;
wire   [31:0] conv3;
wire   [31:0] fc1;
wire   [31:0] fc2;
wire   [31:0] fc3;
wire   [31:0] out_r;
wire   [31:0] label_r;
wire   [31:0] lr;
reg   [9:0] mnist_data_address0;
reg    mnist_data_ce0;
reg    mnist_data_we0;
wire   [31:0] mnist_data_q0;
reg    mnist_data_ce1;
wire   [31:0] mnist_data_q1;
reg   [3:0] conv_kernel1_address0;
reg    conv_kernel1_ce0;
reg    conv_kernel1_we0;
reg   [31:0] conv_kernel1_d0;
wire   [31:0] conv_kernel1_q0;
reg   [3:0] conv_kernel2_address0;
reg    conv_kernel2_ce0;
reg    conv_kernel2_we0;
reg   [31:0] conv_kernel2_d0;
wire   [31:0] conv_kernel2_q0;
reg   [3:0] conv_kernel3_address0;
reg    conv_kernel3_ce0;
reg    conv_kernel3_we0;
reg   [31:0] conv_kernel3_d0;
wire   [31:0] conv_kernel3_q0;
reg   [9:0] first_conv1_address0;
reg    first_conv1_ce0;
reg    first_conv1_we0;
wire   [31:0] first_conv1_q0;
reg    first_conv1_ce1;
wire   [31:0] first_conv1_q1;
reg   [9:0] sencond_conv1_address0;
reg    sencond_conv1_ce0;
reg    sencond_conv1_we0;
wire   [31:0] sencond_conv1_q0;
reg    sencond_conv1_ce1;
wire   [31:0] sencond_conv1_q1;
reg   [16:0] fc_hidden_layer1_address0;
reg    fc_hidden_layer1_ce0;
reg    fc_hidden_layer1_we0;
reg   [31:0] fc_hidden_layer1_d0;
wire   [31:0] fc_hidden_layer1_q0;
reg   [12:0] fc_hidden_layer2_address0;
reg    fc_hidden_layer2_ce0;
wire   [31:0] fc_hidden_layer2_q0;
reg   [12:0] fc_hidden_layer2_address1;
reg    fc_hidden_layer2_ce1;
reg    fc_hidden_layer2_we1;
reg   [31:0] fc_hidden_layer2_d1;
reg   [8:0] fc_hidden_layer3_address0;
reg    fc_hidden_layer3_ce0;
reg    fc_hidden_layer3_we0;
reg   [31:0] fc_hidden_layer3_d0;
wire   [31:0] fc_hidden_layer3_q0;
reg   [9:0] flatten_conv_0_address0;
reg    flatten_conv_0_ce0;
reg    flatten_conv_0_we0;
wire   [31:0] flatten_conv_0_q0;
reg   [7:0] first_fc_0_address0;
reg    first_fc_0_ce0;
reg    first_fc_0_we0;
wire   [31:0] first_fc_0_q0;
reg   [7:0] first_relu_0_address0;
reg    first_relu_0_ce0;
reg    first_relu_0_we0;
wire   [31:0] first_relu_0_q0;
reg   [5:0] second_fc_0_address0;
reg    second_fc_0_ce0;
reg    second_fc_0_we0;
wire   [31:0] second_fc_0_q0;
reg   [5:0] second_relu_0_address0;
reg    second_relu_0_ce0;
reg    second_relu_0_we0;
wire   [31:0] second_relu_0_q0;
reg   [3:0] outmlp_0_address0;
reg    outmlp_0_ce0;
reg    outmlp_0_we0;
wire   [31:0] outmlp_0_q0;
reg   [3:0] result_address0;
reg    result_ce0;
reg    result_we0;
wire   [31:0] result_q0;
reg    data_blk_n_AW;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln354_reg_703;
reg    data_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln356_reg_785;
reg   [0:0] icmp_ln356_reg_785_pp1_iter1_reg;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln364_fu_596_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln367_reg_766;
reg   [0:0] icmp_ln367_reg_766_pp0_iter1_reg;
reg    data_blk_n_B;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state83;
reg    data_AWVALID;
wire    data_AWREADY;
reg   [31:0] data_AWADDR;
reg   [0:0] data_AWID;
reg   [31:0] data_AWLEN;
reg   [2:0] data_AWSIZE;
reg   [1:0] data_AWBURST;
reg   [1:0] data_AWLOCK;
reg   [3:0] data_AWCACHE;
reg   [2:0] data_AWPROT;
reg   [3:0] data_AWQOS;
reg   [3:0] data_AWREGION;
reg   [0:0] data_AWUSER;
reg    data_WVALID;
wire    data_WREADY;
reg   [31:0] data_WDATA;
reg   [3:0] data_WSTRB;
reg    data_WLAST;
reg   [0:0] data_WID;
reg   [0:0] data_WUSER;
reg    data_ARVALID;
wire    data_ARREADY;
reg   [31:0] data_ARADDR;
reg   [0:0] data_ARID;
reg   [31:0] data_ARLEN;
reg   [2:0] data_ARSIZE;
reg   [1:0] data_ARBURST;
reg   [1:0] data_ARLOCK;
reg   [3:0] data_ARCACHE;
reg   [2:0] data_ARPROT;
reg   [3:0] data_ARQOS;
reg   [3:0] data_ARREGION;
reg   [0:0] data_ARUSER;
wire    data_RVALID;
reg    data_RREADY;
wire   [31:0] data_RDATA;
wire    data_RLAST;
wire   [0:0] data_RID;
wire   [0:0] data_RUSER;
wire   [1:0] data_RRESP;
wire    data_BVALID;
reg    data_BREADY;
wire   [1:0] data_BRESP;
wire   [0:0] data_BID;
wire   [0:0] data_BUSER;
reg   [3:0] phi_ln367_reg_318;
reg   [3:0] phi_ln356_reg_329;
reg   [31:0] reg_454;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state76_pp1_stage0_iter0;
wire    ap_block_state77_pp1_stage0_iter1;
wire    ap_block_state78_pp1_stage0_iter2;
reg    ap_block_state78_io;
reg    ap_block_pp1_stage0_11001;
wire   [63:0] grp_fu_435_p1;
reg   [63:0] reg_460;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state27;
wire   [63:0] grp_fu_449_p2;
reg   [63:0] reg_467;
wire    ap_CS_fsm_state43;
reg   [31:0] label_read_reg_647;
reg   [29:0] lr1_reg_652;
reg   [29:0] out1_reg_657;
reg   [29:0] fc_reg_662;
reg   [29:0] fc4_reg_668;
reg   [29:0] fc5_reg_674;
reg   [29:0] conv_reg_680;
reg   [29:0] conv4_reg_686;
reg   [29:0] conv5_reg_692;
reg   [29:0] in1_reg_698;
wire   [0:0] icmp_ln354_fu_563_p2;
reg   [31:0] data_addr_reg_707;
reg    ap_block_state3_io;
wire    grp_forward_fu_386_ap_ready;
wire    grp_forward_fu_386_ap_done;
wire   [3:0] j_fu_585_p2;
reg   [3:0] j_reg_717;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln361_fu_579_p2;
wire   [63:0] grp_fu_441_p2;
reg   [63:0] tmp_4_reg_727;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_431_p1;
wire    ap_CS_fsm_state26;
reg    ap_block_state28_io;
wire   [3:0] i_fu_602_p2;
reg   [3:0] i_reg_741;
wire   [63:0] zext_ln365_fu_608_p1;
reg   [63:0] zext_ln365_reg_746;
reg   [63:0] tmp_6_reg_756;
wire    ap_CS_fsm_state30;
wire   [63:0] grp_fu_445_p2;
reg   [63:0] tmp_8_reg_761;
wire    ap_CS_fsm_state65;
wire   [0:0] icmp_ln367_fu_613_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state68_pp0_stage0_iter0;
wire    ap_block_state69_pp0_stage0_iter1;
wire    ap_block_state70_pp0_stage0_iter2;
reg    ap_block_state70_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln367_fu_619_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] result_load_reg_780;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] icmp_ln356_fu_630_p2;
wire   [3:0] add_ln356_fu_636_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state68;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state76;
wire    grp_backward_fu_340_ap_start;
wire    grp_backward_fu_340_ap_done;
wire    grp_backward_fu_340_ap_idle;
wire    grp_backward_fu_340_ap_ready;
wire    grp_backward_fu_340_m_axi_conv1_AWVALID;
wire   [31:0] grp_backward_fu_340_m_axi_conv1_AWADDR;
wire   [0:0] grp_backward_fu_340_m_axi_conv1_AWID;
wire   [31:0] grp_backward_fu_340_m_axi_conv1_AWLEN;
wire   [2:0] grp_backward_fu_340_m_axi_conv1_AWSIZE;
wire   [1:0] grp_backward_fu_340_m_axi_conv1_AWBURST;
wire   [1:0] grp_backward_fu_340_m_axi_conv1_AWLOCK;
wire   [3:0] grp_backward_fu_340_m_axi_conv1_AWCACHE;
wire   [2:0] grp_backward_fu_340_m_axi_conv1_AWPROT;
wire   [3:0] grp_backward_fu_340_m_axi_conv1_AWQOS;
wire   [3:0] grp_backward_fu_340_m_axi_conv1_AWREGION;
wire   [0:0] grp_backward_fu_340_m_axi_conv1_AWUSER;
wire    grp_backward_fu_340_m_axi_conv1_WVALID;
wire   [31:0] grp_backward_fu_340_m_axi_conv1_WDATA;
wire   [3:0] grp_backward_fu_340_m_axi_conv1_WSTRB;
wire    grp_backward_fu_340_m_axi_conv1_WLAST;
wire   [0:0] grp_backward_fu_340_m_axi_conv1_WID;
wire   [0:0] grp_backward_fu_340_m_axi_conv1_WUSER;
wire    grp_backward_fu_340_m_axi_conv1_ARVALID;
wire   [31:0] grp_backward_fu_340_m_axi_conv1_ARADDR;
wire   [0:0] grp_backward_fu_340_m_axi_conv1_ARID;
wire   [31:0] grp_backward_fu_340_m_axi_conv1_ARLEN;
wire   [2:0] grp_backward_fu_340_m_axi_conv1_ARSIZE;
wire   [1:0] grp_backward_fu_340_m_axi_conv1_ARBURST;
wire   [1:0] grp_backward_fu_340_m_axi_conv1_ARLOCK;
wire   [3:0] grp_backward_fu_340_m_axi_conv1_ARCACHE;
wire   [2:0] grp_backward_fu_340_m_axi_conv1_ARPROT;
wire   [3:0] grp_backward_fu_340_m_axi_conv1_ARQOS;
wire   [3:0] grp_backward_fu_340_m_axi_conv1_ARREGION;
wire   [0:0] grp_backward_fu_340_m_axi_conv1_ARUSER;
wire    grp_backward_fu_340_m_axi_conv1_RREADY;
wire    grp_backward_fu_340_m_axi_conv1_BREADY;
wire   [3:0] grp_backward_fu_340_result_address0;
wire    grp_backward_fu_340_result_ce0;
wire   [5:0] grp_backward_fu_340_second_relu_0_address0;
wire    grp_backward_fu_340_second_relu_0_ce0;
wire   [8:0] grp_backward_fu_340_fc_hidden_layer3_address0;
wire    grp_backward_fu_340_fc_hidden_layer3_ce0;
wire    grp_backward_fu_340_fc_hidden_layer3_we0;
wire   [31:0] grp_backward_fu_340_fc_hidden_layer3_d0;
wire   [5:0] grp_backward_fu_340_second_fc_0_address0;
wire    grp_backward_fu_340_second_fc_0_ce0;
wire   [7:0] grp_backward_fu_340_first_relu_0_address0;
wire    grp_backward_fu_340_first_relu_0_ce0;
wire   [12:0] grp_backward_fu_340_fc_hidden_layer2_address0;
wire    grp_backward_fu_340_fc_hidden_layer2_ce0;
wire   [12:0] grp_backward_fu_340_fc_hidden_layer2_address1;
wire    grp_backward_fu_340_fc_hidden_layer2_ce1;
wire    grp_backward_fu_340_fc_hidden_layer2_we1;
wire   [31:0] grp_backward_fu_340_fc_hidden_layer2_d1;
wire   [7:0] grp_backward_fu_340_first_fc_0_address0;
wire    grp_backward_fu_340_first_fc_0_ce0;
wire   [9:0] grp_backward_fu_340_flatten_conv_0_address0;
wire    grp_backward_fu_340_flatten_conv_0_ce0;
wire   [16:0] grp_backward_fu_340_fc_hidden_layer1_address0;
wire    grp_backward_fu_340_fc_hidden_layer1_ce0;
wire    grp_backward_fu_340_fc_hidden_layer1_we0;
wire   [31:0] grp_backward_fu_340_fc_hidden_layer1_d0;
wire   [9:0] grp_backward_fu_340_sencond_conv1_address0;
wire    grp_backward_fu_340_sencond_conv1_ce0;
wire   [9:0] grp_backward_fu_340_sencond_conv1_address1;
wire    grp_backward_fu_340_sencond_conv1_ce1;
wire   [3:0] grp_backward_fu_340_conv_kernel3_address0;
wire    grp_backward_fu_340_conv_kernel3_ce0;
wire    grp_backward_fu_340_conv_kernel3_we0;
wire   [31:0] grp_backward_fu_340_conv_kernel3_d0;
wire   [9:0] grp_backward_fu_340_first_conv1_address0;
wire    grp_backward_fu_340_first_conv1_ce0;
wire   [9:0] grp_backward_fu_340_first_conv1_address1;
wire    grp_backward_fu_340_first_conv1_ce1;
wire   [3:0] grp_backward_fu_340_conv_kernel2_address0;
wire    grp_backward_fu_340_conv_kernel2_ce0;
wire    grp_backward_fu_340_conv_kernel2_we0;
wire   [31:0] grp_backward_fu_340_conv_kernel2_d0;
wire   [9:0] grp_backward_fu_340_mnist_data_address0;
wire    grp_backward_fu_340_mnist_data_ce0;
wire   [9:0] grp_backward_fu_340_mnist_data_address1;
wire    grp_backward_fu_340_mnist_data_ce1;
wire   [3:0] grp_backward_fu_340_conv_kernel1_address0;
wire    grp_backward_fu_340_conv_kernel1_ce0;
wire    grp_backward_fu_340_conv_kernel1_we0;
wire   [31:0] grp_backward_fu_340_conv_kernel1_d0;
wire    grp_forward_fu_386_ap_start;
wire    grp_forward_fu_386_ap_idle;
wire    grp_forward_fu_386_m_axi_input_matrix_AWVALID;
wire   [31:0] grp_forward_fu_386_m_axi_input_matrix_AWADDR;
wire   [0:0] grp_forward_fu_386_m_axi_input_matrix_AWID;
wire   [31:0] grp_forward_fu_386_m_axi_input_matrix_AWLEN;
wire   [2:0] grp_forward_fu_386_m_axi_input_matrix_AWSIZE;
wire   [1:0] grp_forward_fu_386_m_axi_input_matrix_AWBURST;
wire   [1:0] grp_forward_fu_386_m_axi_input_matrix_AWLOCK;
wire   [3:0] grp_forward_fu_386_m_axi_input_matrix_AWCACHE;
wire   [2:0] grp_forward_fu_386_m_axi_input_matrix_AWPROT;
wire   [3:0] grp_forward_fu_386_m_axi_input_matrix_AWQOS;
wire   [3:0] grp_forward_fu_386_m_axi_input_matrix_AWREGION;
wire   [0:0] grp_forward_fu_386_m_axi_input_matrix_AWUSER;
wire    grp_forward_fu_386_m_axi_input_matrix_WVALID;
wire   [31:0] grp_forward_fu_386_m_axi_input_matrix_WDATA;
wire   [3:0] grp_forward_fu_386_m_axi_input_matrix_WSTRB;
wire    grp_forward_fu_386_m_axi_input_matrix_WLAST;
wire   [0:0] grp_forward_fu_386_m_axi_input_matrix_WID;
wire   [0:0] grp_forward_fu_386_m_axi_input_matrix_WUSER;
wire    grp_forward_fu_386_m_axi_input_matrix_ARVALID;
wire   [31:0] grp_forward_fu_386_m_axi_input_matrix_ARADDR;
wire   [0:0] grp_forward_fu_386_m_axi_input_matrix_ARID;
wire   [31:0] grp_forward_fu_386_m_axi_input_matrix_ARLEN;
wire   [2:0] grp_forward_fu_386_m_axi_input_matrix_ARSIZE;
wire   [1:0] grp_forward_fu_386_m_axi_input_matrix_ARBURST;
wire   [1:0] grp_forward_fu_386_m_axi_input_matrix_ARLOCK;
wire   [3:0] grp_forward_fu_386_m_axi_input_matrix_ARCACHE;
wire   [2:0] grp_forward_fu_386_m_axi_input_matrix_ARPROT;
wire   [3:0] grp_forward_fu_386_m_axi_input_matrix_ARQOS;
wire   [3:0] grp_forward_fu_386_m_axi_input_matrix_ARREGION;
wire   [0:0] grp_forward_fu_386_m_axi_input_matrix_ARUSER;
wire    grp_forward_fu_386_m_axi_input_matrix_RREADY;
wire    grp_forward_fu_386_m_axi_input_matrix_BREADY;
wire   [9:0] grp_forward_fu_386_mnist_data_address0;
wire    grp_forward_fu_386_mnist_data_ce0;
wire    grp_forward_fu_386_mnist_data_we0;
wire   [31:0] grp_forward_fu_386_mnist_data_d0;
wire   [3:0] grp_forward_fu_386_conv_kernel1_address0;
wire    grp_forward_fu_386_conv_kernel1_ce0;
wire    grp_forward_fu_386_conv_kernel1_we0;
wire   [31:0] grp_forward_fu_386_conv_kernel1_d0;
wire   [3:0] grp_forward_fu_386_conv_kernel2_address0;
wire    grp_forward_fu_386_conv_kernel2_ce0;
wire    grp_forward_fu_386_conv_kernel2_we0;
wire   [31:0] grp_forward_fu_386_conv_kernel2_d0;
wire   [3:0] grp_forward_fu_386_conv_kernel3_address0;
wire    grp_forward_fu_386_conv_kernel3_ce0;
wire    grp_forward_fu_386_conv_kernel3_we0;
wire   [31:0] grp_forward_fu_386_conv_kernel3_d0;
wire   [9:0] grp_forward_fu_386_first_conv1_address0;
wire    grp_forward_fu_386_first_conv1_ce0;
wire    grp_forward_fu_386_first_conv1_we0;
wire   [31:0] grp_forward_fu_386_first_conv1_d0;
wire   [9:0] grp_forward_fu_386_sencond_conv1_address0;
wire    grp_forward_fu_386_sencond_conv1_ce0;
wire    grp_forward_fu_386_sencond_conv1_we0;
wire   [31:0] grp_forward_fu_386_sencond_conv1_d0;
wire   [16:0] grp_forward_fu_386_fc_hidden_layer1_address0;
wire    grp_forward_fu_386_fc_hidden_layer1_ce0;
wire    grp_forward_fu_386_fc_hidden_layer1_we0;
wire   [31:0] grp_forward_fu_386_fc_hidden_layer1_d0;
wire   [12:0] grp_forward_fu_386_fc_hidden_layer2_address0;
wire    grp_forward_fu_386_fc_hidden_layer2_ce0;
wire   [12:0] grp_forward_fu_386_fc_hidden_layer2_address1;
wire    grp_forward_fu_386_fc_hidden_layer2_ce1;
wire    grp_forward_fu_386_fc_hidden_layer2_we1;
wire   [31:0] grp_forward_fu_386_fc_hidden_layer2_d1;
wire   [8:0] grp_forward_fu_386_fc_hidden_layer3_address0;
wire    grp_forward_fu_386_fc_hidden_layer3_ce0;
wire    grp_forward_fu_386_fc_hidden_layer3_we0;
wire   [31:0] grp_forward_fu_386_fc_hidden_layer3_d0;
wire   [9:0] grp_forward_fu_386_flatten_conv_0_address0;
wire    grp_forward_fu_386_flatten_conv_0_ce0;
wire    grp_forward_fu_386_flatten_conv_0_we0;
wire   [31:0] grp_forward_fu_386_flatten_conv_0_d0;
wire   [7:0] grp_forward_fu_386_first_fc_0_address0;
wire    grp_forward_fu_386_first_fc_0_ce0;
wire    grp_forward_fu_386_first_fc_0_we0;
wire   [31:0] grp_forward_fu_386_first_fc_0_d0;
wire   [7:0] grp_forward_fu_386_first_relu_0_address0;
wire    grp_forward_fu_386_first_relu_0_ce0;
wire    grp_forward_fu_386_first_relu_0_we0;
wire   [31:0] grp_forward_fu_386_first_relu_0_d0;
wire   [5:0] grp_forward_fu_386_second_fc_0_address0;
wire    grp_forward_fu_386_second_fc_0_ce0;
wire    grp_forward_fu_386_second_fc_0_we0;
wire   [31:0] grp_forward_fu_386_second_fc_0_d0;
wire   [5:0] grp_forward_fu_386_second_relu_0_address0;
wire    grp_forward_fu_386_second_relu_0_ce0;
wire    grp_forward_fu_386_second_relu_0_we0;
wire   [31:0] grp_forward_fu_386_second_relu_0_d0;
wire   [3:0] grp_forward_fu_386_outmlp_0_address0;
wire    grp_forward_fu_386_outmlp_0_ce0;
wire    grp_forward_fu_386_outmlp_0_we0;
wire   [31:0] grp_forward_fu_386_outmlp_0_d0;
wire   [31:0] ap_phi_mux_probability_0_phi_fu_288_p4;
reg   [31:0] probability_0_reg_284;
reg   [3:0] j_0_reg_296;
reg   [3:0] i_0_reg_307;
wire    ap_CS_fsm_state67;
reg    grp_backward_fu_340_ap_start_reg;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
reg    grp_forward_fu_386_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln362_fu_591_p1;
wire   [63:0] zext_ln367_fu_625_p1;
wire   [63:0] zext_ln356_fu_642_p1;
wire   [63:0] empty_fu_569_p1;
reg    ap_block_state75;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp1_stage0_01001;
reg   [63:0] grp_fu_431_p0;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state66;
reg   [31:0] grp_fu_435_p0;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state44;
reg   [63:0] grp_fu_449_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state31;
reg   [78:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 79'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 grp_backward_fu_340_ap_start_reg = 1'b0;
#0 grp_forward_fu_386_ap_start_reg = 1'b0;
end

forw_back_mnist_dAem #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
mnist_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mnist_data_address0),
    .ce0(mnist_data_ce0),
    .we0(mnist_data_we0),
    .d0(grp_forward_fu_386_mnist_data_d0),
    .q0(mnist_data_q0),
    .address1(grp_backward_fu_340_mnist_data_address1),
    .ce1(mnist_data_ce1),
    .q1(mnist_data_q1)
);

forw_back_conv_keBew #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_kernel1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_kernel1_address0),
    .ce0(conv_kernel1_ce0),
    .we0(conv_kernel1_we0),
    .d0(conv_kernel1_d0),
    .q0(conv_kernel1_q0)
);

forw_back_conv_keBew #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_kernel2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_kernel2_address0),
    .ce0(conv_kernel2_ce0),
    .we0(conv_kernel2_we0),
    .d0(conv_kernel2_d0),
    .q0(conv_kernel2_q0)
);

forw_back_conv_keBew #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_kernel3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_kernel3_address0),
    .ce0(conv_kernel3_ce0),
    .we0(conv_kernel3_we0),
    .d0(conv_kernel3_d0),
    .q0(conv_kernel3_q0)
);

forw_back_first_cEe0 #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
first_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(first_conv1_address0),
    .ce0(first_conv1_ce0),
    .we0(first_conv1_we0),
    .d0(grp_forward_fu_386_first_conv1_d0),
    .q0(first_conv1_q0),
    .address1(grp_backward_fu_340_first_conv1_address1),
    .ce1(first_conv1_ce1),
    .q1(first_conv1_q1)
);

forw_back_sencondFfa #(
    .DataWidth( 32 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
sencond_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sencond_conv1_address0),
    .ce0(sencond_conv1_ce0),
    .we0(sencond_conv1_we0),
    .d0(grp_forward_fu_386_sencond_conv1_d0),
    .q0(sencond_conv1_q0),
    .address1(grp_backward_fu_340_sencond_conv1_address1),
    .ce1(sencond_conv1_ce1),
    .q1(sencond_conv1_q1)
);

forw_back_fc_hiddGfk #(
    .DataWidth( 32 ),
    .AddressRange( 103680 ),
    .AddressWidth( 17 ))
fc_hidden_layer1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_hidden_layer1_address0),
    .ce0(fc_hidden_layer1_ce0),
    .we0(fc_hidden_layer1_we0),
    .d0(fc_hidden_layer1_d0),
    .q0(fc_hidden_layer1_q0)
);

forw_back_fc_hiddHfu #(
    .DataWidth( 32 ),
    .AddressRange( 8100 ),
    .AddressWidth( 13 ))
fc_hidden_layer2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_hidden_layer2_address0),
    .ce0(fc_hidden_layer2_ce0),
    .q0(fc_hidden_layer2_q0),
    .address1(fc_hidden_layer2_address1),
    .ce1(fc_hidden_layer2_ce1),
    .we1(fc_hidden_layer2_we1),
    .d1(fc_hidden_layer2_d1)
);

forw_back_fc_hiddIfE #(
    .DataWidth( 32 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
fc_hidden_layer3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_hidden_layer3_address0),
    .ce0(fc_hidden_layer3_ce0),
    .we0(fc_hidden_layer3_we0),
    .d0(fc_hidden_layer3_d0),
    .q0(fc_hidden_layer3_q0)
);

forward_third_conv1 #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
flatten_conv_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(flatten_conv_0_address0),
    .ce0(flatten_conv_0_ce0),
    .we0(flatten_conv_0_we0),
    .d0(grp_forward_fu_386_flatten_conv_0_d0),
    .q0(flatten_conv_0_q0)
);

forw_back_first_fKfY #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
first_fc_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(first_fc_0_address0),
    .ce0(first_fc_0_ce0),
    .we0(first_fc_0_we0),
    .d0(grp_forward_fu_386_first_fc_0_d0),
    .q0(first_fc_0_q0)
);

forw_back_first_fKfY #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
first_relu_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(first_relu_0_address0),
    .ce0(first_relu_0_ce0),
    .we0(first_relu_0_we0),
    .d0(grp_forward_fu_386_first_relu_0_d0),
    .q0(first_relu_0_q0)
);

forw_back_second_Mgi #(
    .DataWidth( 32 ),
    .AddressRange( 45 ),
    .AddressWidth( 6 ))
second_fc_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(second_fc_0_address0),
    .ce0(second_fc_0_ce0),
    .we0(second_fc_0_we0),
    .d0(grp_forward_fu_386_second_fc_0_d0),
    .q0(second_fc_0_q0)
);

forw_back_second_Mgi #(
    .DataWidth( 32 ),
    .AddressRange( 45 ),
    .AddressWidth( 6 ))
second_relu_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(second_relu_0_address0),
    .ce0(second_relu_0_ce0),
    .we0(second_relu_0_we0),
    .d0(grp_forward_fu_386_second_relu_0_d0),
    .q0(second_relu_0_q0)
);

backward_out_grad #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
outmlp_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outmlp_0_address0),
    .ce0(outmlp_0_ce0),
    .we0(outmlp_0_we0),
    .d0(grp_forward_fu_386_outmlp_0_d0),
    .q0(outmlp_0_q0)
);

backward_out_grad #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
result_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_address0),
    .ce0(result_ce0),
    .we0(result_we0),
    .d0(grp_fu_431_p1),
    .q0(result_q0)
);

forw_back_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
forw_back_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .flag(flag),
    .in_r(in_r),
    .conv1(conv1),
    .conv2(conv2),
    .conv3(conv3),
    .fc1(fc1),
    .fc2(fc2),
    .fc3(fc3),
    .out_r(out_r),
    .label_r(label_r),
    .lr(lr)
);

forw_back_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_CACHE_VALUE ))
forw_back_data_m_axi_U(
    .AWVALID(m_axi_data_AWVALID),
    .AWREADY(m_axi_data_AWREADY),
    .AWADDR(m_axi_data_AWADDR),
    .AWID(m_axi_data_AWID),
    .AWLEN(m_axi_data_AWLEN),
    .AWSIZE(m_axi_data_AWSIZE),
    .AWBURST(m_axi_data_AWBURST),
    .AWLOCK(m_axi_data_AWLOCK),
    .AWCACHE(m_axi_data_AWCACHE),
    .AWPROT(m_axi_data_AWPROT),
    .AWQOS(m_axi_data_AWQOS),
    .AWREGION(m_axi_data_AWREGION),
    .AWUSER(m_axi_data_AWUSER),
    .WVALID(m_axi_data_WVALID),
    .WREADY(m_axi_data_WREADY),
    .WDATA(m_axi_data_WDATA),
    .WSTRB(m_axi_data_WSTRB),
    .WLAST(m_axi_data_WLAST),
    .WID(m_axi_data_WID),
    .WUSER(m_axi_data_WUSER),
    .ARVALID(m_axi_data_ARVALID),
    .ARREADY(m_axi_data_ARREADY),
    .ARADDR(m_axi_data_ARADDR),
    .ARID(m_axi_data_ARID),
    .ARLEN(m_axi_data_ARLEN),
    .ARSIZE(m_axi_data_ARSIZE),
    .ARBURST(m_axi_data_ARBURST),
    .ARLOCK(m_axi_data_ARLOCK),
    .ARCACHE(m_axi_data_ARCACHE),
    .ARPROT(m_axi_data_ARPROT),
    .ARQOS(m_axi_data_ARQOS),
    .ARREGION(m_axi_data_ARREGION),
    .ARUSER(m_axi_data_ARUSER),
    .RVALID(m_axi_data_RVALID),
    .RREADY(m_axi_data_RREADY),
    .RDATA(m_axi_data_RDATA),
    .RLAST(m_axi_data_RLAST),
    .RID(m_axi_data_RID),
    .RUSER(m_axi_data_RUSER),
    .RRESP(m_axi_data_RRESP),
    .BVALID(m_axi_data_BVALID),
    .BREADY(m_axi_data_BREADY),
    .BRESP(m_axi_data_BRESP),
    .BID(m_axi_data_BID),
    .BUSER(m_axi_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_ARVALID),
    .I_ARREADY(data_ARREADY),
    .I_ARADDR(data_ARADDR),
    .I_ARID(data_ARID),
    .I_ARLEN(data_ARLEN),
    .I_ARSIZE(data_ARSIZE),
    .I_ARLOCK(data_ARLOCK),
    .I_ARCACHE(data_ARCACHE),
    .I_ARQOS(data_ARQOS),
    .I_ARPROT(data_ARPROT),
    .I_ARUSER(data_ARUSER),
    .I_ARBURST(data_ARBURST),
    .I_ARREGION(data_ARREGION),
    .I_RVALID(data_RVALID),
    .I_RREADY(data_RREADY),
    .I_RDATA(data_RDATA),
    .I_RID(data_RID),
    .I_RUSER(data_RUSER),
    .I_RRESP(data_RRESP),
    .I_RLAST(data_RLAST),
    .I_AWVALID(data_AWVALID),
    .I_AWREADY(data_AWREADY),
    .I_AWADDR(data_AWADDR),
    .I_AWID(data_AWID),
    .I_AWLEN(data_AWLEN),
    .I_AWSIZE(data_AWSIZE),
    .I_AWLOCK(data_AWLOCK),
    .I_AWCACHE(data_AWCACHE),
    .I_AWQOS(data_AWQOS),
    .I_AWPROT(data_AWPROT),
    .I_AWUSER(data_AWUSER),
    .I_AWBURST(data_AWBURST),
    .I_AWREGION(data_AWREGION),
    .I_WVALID(data_WVALID),
    .I_WREADY(data_WREADY),
    .I_WDATA(data_WDATA),
    .I_WID(data_WID),
    .I_WUSER(data_WUSER),
    .I_WLAST(data_WLAST),
    .I_WSTRB(data_WSTRB),
    .I_BVALID(data_BVALID),
    .I_BREADY(data_BREADY),
    .I_BRESP(data_BRESP),
    .I_BID(data_BID),
    .I_BUSER(data_BUSER)
);

backward grp_backward_fu_340(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_backward_fu_340_ap_start),
    .ap_done(grp_backward_fu_340_ap_done),
    .ap_idle(grp_backward_fu_340_ap_idle),
    .ap_ready(grp_backward_fu_340_ap_ready),
    .label_r(label_read_reg_647),
    .m_axi_conv1_AWVALID(grp_backward_fu_340_m_axi_conv1_AWVALID),
    .m_axi_conv1_AWREADY(data_AWREADY),
    .m_axi_conv1_AWADDR(grp_backward_fu_340_m_axi_conv1_AWADDR),
    .m_axi_conv1_AWID(grp_backward_fu_340_m_axi_conv1_AWID),
    .m_axi_conv1_AWLEN(grp_backward_fu_340_m_axi_conv1_AWLEN),
    .m_axi_conv1_AWSIZE(grp_backward_fu_340_m_axi_conv1_AWSIZE),
    .m_axi_conv1_AWBURST(grp_backward_fu_340_m_axi_conv1_AWBURST),
    .m_axi_conv1_AWLOCK(grp_backward_fu_340_m_axi_conv1_AWLOCK),
    .m_axi_conv1_AWCACHE(grp_backward_fu_340_m_axi_conv1_AWCACHE),
    .m_axi_conv1_AWPROT(grp_backward_fu_340_m_axi_conv1_AWPROT),
    .m_axi_conv1_AWQOS(grp_backward_fu_340_m_axi_conv1_AWQOS),
    .m_axi_conv1_AWREGION(grp_backward_fu_340_m_axi_conv1_AWREGION),
    .m_axi_conv1_AWUSER(grp_backward_fu_340_m_axi_conv1_AWUSER),
    .m_axi_conv1_WVALID(grp_backward_fu_340_m_axi_conv1_WVALID),
    .m_axi_conv1_WREADY(data_WREADY),
    .m_axi_conv1_WDATA(grp_backward_fu_340_m_axi_conv1_WDATA),
    .m_axi_conv1_WSTRB(grp_backward_fu_340_m_axi_conv1_WSTRB),
    .m_axi_conv1_WLAST(grp_backward_fu_340_m_axi_conv1_WLAST),
    .m_axi_conv1_WID(grp_backward_fu_340_m_axi_conv1_WID),
    .m_axi_conv1_WUSER(grp_backward_fu_340_m_axi_conv1_WUSER),
    .m_axi_conv1_ARVALID(grp_backward_fu_340_m_axi_conv1_ARVALID),
    .m_axi_conv1_ARREADY(data_ARREADY),
    .m_axi_conv1_ARADDR(grp_backward_fu_340_m_axi_conv1_ARADDR),
    .m_axi_conv1_ARID(grp_backward_fu_340_m_axi_conv1_ARID),
    .m_axi_conv1_ARLEN(grp_backward_fu_340_m_axi_conv1_ARLEN),
    .m_axi_conv1_ARSIZE(grp_backward_fu_340_m_axi_conv1_ARSIZE),
    .m_axi_conv1_ARBURST(grp_backward_fu_340_m_axi_conv1_ARBURST),
    .m_axi_conv1_ARLOCK(grp_backward_fu_340_m_axi_conv1_ARLOCK),
    .m_axi_conv1_ARCACHE(grp_backward_fu_340_m_axi_conv1_ARCACHE),
    .m_axi_conv1_ARPROT(grp_backward_fu_340_m_axi_conv1_ARPROT),
    .m_axi_conv1_ARQOS(grp_backward_fu_340_m_axi_conv1_ARQOS),
    .m_axi_conv1_ARREGION(grp_backward_fu_340_m_axi_conv1_ARREGION),
    .m_axi_conv1_ARUSER(grp_backward_fu_340_m_axi_conv1_ARUSER),
    .m_axi_conv1_RVALID(data_RVALID),
    .m_axi_conv1_RREADY(grp_backward_fu_340_m_axi_conv1_RREADY),
    .m_axi_conv1_RDATA(data_RDATA),
    .m_axi_conv1_RLAST(data_RLAST),
    .m_axi_conv1_RID(data_RID),
    .m_axi_conv1_RUSER(data_RUSER),
    .m_axi_conv1_RRESP(data_RRESP),
    .m_axi_conv1_BVALID(data_BVALID),
    .m_axi_conv1_BREADY(grp_backward_fu_340_m_axi_conv1_BREADY),
    .m_axi_conv1_BRESP(data_BRESP),
    .m_axi_conv1_BID(data_BID),
    .m_axi_conv1_BUSER(data_BUSER),
    .conv1_offset(conv5_reg_692),
    .conv2_offset(conv4_reg_686),
    .conv3_offset(conv_reg_680),
    .fc1_offset(fc5_reg_674),
    .fc2_offset(fc4_reg_668),
    .fc3_offset(fc_reg_662),
    .lr_in_offset(lr1_reg_652),
    .result_address0(grp_backward_fu_340_result_address0),
    .result_ce0(grp_backward_fu_340_result_ce0),
    .result_q0(result_q0),
    .second_relu_0_address0(grp_backward_fu_340_second_relu_0_address0),
    .second_relu_0_ce0(grp_backward_fu_340_second_relu_0_ce0),
    .second_relu_0_q0(second_relu_0_q0),
    .fc_hidden_layer3_address0(grp_backward_fu_340_fc_hidden_layer3_address0),
    .fc_hidden_layer3_ce0(grp_backward_fu_340_fc_hidden_layer3_ce0),
    .fc_hidden_layer3_we0(grp_backward_fu_340_fc_hidden_layer3_we0),
    .fc_hidden_layer3_d0(grp_backward_fu_340_fc_hidden_layer3_d0),
    .fc_hidden_layer3_q0(fc_hidden_layer3_q0),
    .second_fc_0_address0(grp_backward_fu_340_second_fc_0_address0),
    .second_fc_0_ce0(grp_backward_fu_340_second_fc_0_ce0),
    .second_fc_0_q0(second_fc_0_q0),
    .first_relu_0_address0(grp_backward_fu_340_first_relu_0_address0),
    .first_relu_0_ce0(grp_backward_fu_340_first_relu_0_ce0),
    .first_relu_0_q0(first_relu_0_q0),
    .fc_hidden_layer2_address0(grp_backward_fu_340_fc_hidden_layer2_address0),
    .fc_hidden_layer2_ce0(grp_backward_fu_340_fc_hidden_layer2_ce0),
    .fc_hidden_layer2_q0(fc_hidden_layer2_q0),
    .fc_hidden_layer2_address1(grp_backward_fu_340_fc_hidden_layer2_address1),
    .fc_hidden_layer2_ce1(grp_backward_fu_340_fc_hidden_layer2_ce1),
    .fc_hidden_layer2_we1(grp_backward_fu_340_fc_hidden_layer2_we1),
    .fc_hidden_layer2_d1(grp_backward_fu_340_fc_hidden_layer2_d1),
    .first_fc_0_address0(grp_backward_fu_340_first_fc_0_address0),
    .first_fc_0_ce0(grp_backward_fu_340_first_fc_0_ce0),
    .first_fc_0_q0(first_fc_0_q0),
    .flatten_conv_0_address0(grp_backward_fu_340_flatten_conv_0_address0),
    .flatten_conv_0_ce0(grp_backward_fu_340_flatten_conv_0_ce0),
    .flatten_conv_0_q0(flatten_conv_0_q0),
    .fc_hidden_layer1_address0(grp_backward_fu_340_fc_hidden_layer1_address0),
    .fc_hidden_layer1_ce0(grp_backward_fu_340_fc_hidden_layer1_ce0),
    .fc_hidden_layer1_we0(grp_backward_fu_340_fc_hidden_layer1_we0),
    .fc_hidden_layer1_d0(grp_backward_fu_340_fc_hidden_layer1_d0),
    .fc_hidden_layer1_q0(fc_hidden_layer1_q0),
    .sencond_conv1_address0(grp_backward_fu_340_sencond_conv1_address0),
    .sencond_conv1_ce0(grp_backward_fu_340_sencond_conv1_ce0),
    .sencond_conv1_q0(sencond_conv1_q0),
    .sencond_conv1_address1(grp_backward_fu_340_sencond_conv1_address1),
    .sencond_conv1_ce1(grp_backward_fu_340_sencond_conv1_ce1),
    .sencond_conv1_q1(sencond_conv1_q1),
    .conv_kernel3_address0(grp_backward_fu_340_conv_kernel3_address0),
    .conv_kernel3_ce0(grp_backward_fu_340_conv_kernel3_ce0),
    .conv_kernel3_we0(grp_backward_fu_340_conv_kernel3_we0),
    .conv_kernel3_d0(grp_backward_fu_340_conv_kernel3_d0),
    .conv_kernel3_q0(conv_kernel3_q0),
    .first_conv1_address0(grp_backward_fu_340_first_conv1_address0),
    .first_conv1_ce0(grp_backward_fu_340_first_conv1_ce0),
    .first_conv1_q0(first_conv1_q0),
    .first_conv1_address1(grp_backward_fu_340_first_conv1_address1),
    .first_conv1_ce1(grp_backward_fu_340_first_conv1_ce1),
    .first_conv1_q1(first_conv1_q1),
    .conv_kernel2_address0(grp_backward_fu_340_conv_kernel2_address0),
    .conv_kernel2_ce0(grp_backward_fu_340_conv_kernel2_ce0),
    .conv_kernel2_we0(grp_backward_fu_340_conv_kernel2_we0),
    .conv_kernel2_d0(grp_backward_fu_340_conv_kernel2_d0),
    .conv_kernel2_q0(conv_kernel2_q0),
    .mnist_data_address0(grp_backward_fu_340_mnist_data_address0),
    .mnist_data_ce0(grp_backward_fu_340_mnist_data_ce0),
    .mnist_data_q0(mnist_data_q0),
    .mnist_data_address1(grp_backward_fu_340_mnist_data_address1),
    .mnist_data_ce1(grp_backward_fu_340_mnist_data_ce1),
    .mnist_data_q1(mnist_data_q1),
    .conv_kernel1_address0(grp_backward_fu_340_conv_kernel1_address0),
    .conv_kernel1_ce0(grp_backward_fu_340_conv_kernel1_ce0),
    .conv_kernel1_we0(grp_backward_fu_340_conv_kernel1_we0),
    .conv_kernel1_d0(grp_backward_fu_340_conv_kernel1_d0),
    .conv_kernel1_q0(conv_kernel1_q0)
);

forward grp_forward_fu_386(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_forward_fu_386_ap_start),
    .ap_done(grp_forward_fu_386_ap_done),
    .ap_idle(grp_forward_fu_386_ap_idle),
    .ap_ready(grp_forward_fu_386_ap_ready),
    .m_axi_input_matrix_AWVALID(grp_forward_fu_386_m_axi_input_matrix_AWVALID),
    .m_axi_input_matrix_AWREADY(1'b0),
    .m_axi_input_matrix_AWADDR(grp_forward_fu_386_m_axi_input_matrix_AWADDR),
    .m_axi_input_matrix_AWID(grp_forward_fu_386_m_axi_input_matrix_AWID),
    .m_axi_input_matrix_AWLEN(grp_forward_fu_386_m_axi_input_matrix_AWLEN),
    .m_axi_input_matrix_AWSIZE(grp_forward_fu_386_m_axi_input_matrix_AWSIZE),
    .m_axi_input_matrix_AWBURST(grp_forward_fu_386_m_axi_input_matrix_AWBURST),
    .m_axi_input_matrix_AWLOCK(grp_forward_fu_386_m_axi_input_matrix_AWLOCK),
    .m_axi_input_matrix_AWCACHE(grp_forward_fu_386_m_axi_input_matrix_AWCACHE),
    .m_axi_input_matrix_AWPROT(grp_forward_fu_386_m_axi_input_matrix_AWPROT),
    .m_axi_input_matrix_AWQOS(grp_forward_fu_386_m_axi_input_matrix_AWQOS),
    .m_axi_input_matrix_AWREGION(grp_forward_fu_386_m_axi_input_matrix_AWREGION),
    .m_axi_input_matrix_AWUSER(grp_forward_fu_386_m_axi_input_matrix_AWUSER),
    .m_axi_input_matrix_WVALID(grp_forward_fu_386_m_axi_input_matrix_WVALID),
    .m_axi_input_matrix_WREADY(1'b0),
    .m_axi_input_matrix_WDATA(grp_forward_fu_386_m_axi_input_matrix_WDATA),
    .m_axi_input_matrix_WSTRB(grp_forward_fu_386_m_axi_input_matrix_WSTRB),
    .m_axi_input_matrix_WLAST(grp_forward_fu_386_m_axi_input_matrix_WLAST),
    .m_axi_input_matrix_WID(grp_forward_fu_386_m_axi_input_matrix_WID),
    .m_axi_input_matrix_WUSER(grp_forward_fu_386_m_axi_input_matrix_WUSER),
    .m_axi_input_matrix_ARVALID(grp_forward_fu_386_m_axi_input_matrix_ARVALID),
    .m_axi_input_matrix_ARREADY(data_ARREADY),
    .m_axi_input_matrix_ARADDR(grp_forward_fu_386_m_axi_input_matrix_ARADDR),
    .m_axi_input_matrix_ARID(grp_forward_fu_386_m_axi_input_matrix_ARID),
    .m_axi_input_matrix_ARLEN(grp_forward_fu_386_m_axi_input_matrix_ARLEN),
    .m_axi_input_matrix_ARSIZE(grp_forward_fu_386_m_axi_input_matrix_ARSIZE),
    .m_axi_input_matrix_ARBURST(grp_forward_fu_386_m_axi_input_matrix_ARBURST),
    .m_axi_input_matrix_ARLOCK(grp_forward_fu_386_m_axi_input_matrix_ARLOCK),
    .m_axi_input_matrix_ARCACHE(grp_forward_fu_386_m_axi_input_matrix_ARCACHE),
    .m_axi_input_matrix_ARPROT(grp_forward_fu_386_m_axi_input_matrix_ARPROT),
    .m_axi_input_matrix_ARQOS(grp_forward_fu_386_m_axi_input_matrix_ARQOS),
    .m_axi_input_matrix_ARREGION(grp_forward_fu_386_m_axi_input_matrix_ARREGION),
    .m_axi_input_matrix_ARUSER(grp_forward_fu_386_m_axi_input_matrix_ARUSER),
    .m_axi_input_matrix_RVALID(data_RVALID),
    .m_axi_input_matrix_RREADY(grp_forward_fu_386_m_axi_input_matrix_RREADY),
    .m_axi_input_matrix_RDATA(data_RDATA),
    .m_axi_input_matrix_RLAST(data_RLAST),
    .m_axi_input_matrix_RID(data_RID),
    .m_axi_input_matrix_RUSER(data_RUSER),
    .m_axi_input_matrix_RRESP(data_RRESP),
    .m_axi_input_matrix_BVALID(1'b0),
    .m_axi_input_matrix_BREADY(grp_forward_fu_386_m_axi_input_matrix_BREADY),
    .m_axi_input_matrix_BRESP(2'd0),
    .m_axi_input_matrix_BID(1'd0),
    .m_axi_input_matrix_BUSER(1'd0),
    .input_matrix_offset(in1_reg_698),
    .conv1_offset(conv5_reg_692),
    .conv2_offset(conv4_reg_686),
    .conv3_offset(conv_reg_680),
    .fc1_offset(fc5_reg_674),
    .fc2_offset(fc4_reg_668),
    .fc3_offset(fc_reg_662),
    .mnist_data_address0(grp_forward_fu_386_mnist_data_address0),
    .mnist_data_ce0(grp_forward_fu_386_mnist_data_ce0),
    .mnist_data_we0(grp_forward_fu_386_mnist_data_we0),
    .mnist_data_d0(grp_forward_fu_386_mnist_data_d0),
    .mnist_data_q0(mnist_data_q0),
    .conv_kernel1_address0(grp_forward_fu_386_conv_kernel1_address0),
    .conv_kernel1_ce0(grp_forward_fu_386_conv_kernel1_ce0),
    .conv_kernel1_we0(grp_forward_fu_386_conv_kernel1_we0),
    .conv_kernel1_d0(grp_forward_fu_386_conv_kernel1_d0),
    .conv_kernel1_q0(conv_kernel1_q0),
    .conv_kernel2_address0(grp_forward_fu_386_conv_kernel2_address0),
    .conv_kernel2_ce0(grp_forward_fu_386_conv_kernel2_ce0),
    .conv_kernel2_we0(grp_forward_fu_386_conv_kernel2_we0),
    .conv_kernel2_d0(grp_forward_fu_386_conv_kernel2_d0),
    .conv_kernel2_q0(conv_kernel2_q0),
    .conv_kernel3_address0(grp_forward_fu_386_conv_kernel3_address0),
    .conv_kernel3_ce0(grp_forward_fu_386_conv_kernel3_ce0),
    .conv_kernel3_we0(grp_forward_fu_386_conv_kernel3_we0),
    .conv_kernel3_d0(grp_forward_fu_386_conv_kernel3_d0),
    .conv_kernel3_q0(conv_kernel3_q0),
    .first_conv1_address0(grp_forward_fu_386_first_conv1_address0),
    .first_conv1_ce0(grp_forward_fu_386_first_conv1_ce0),
    .first_conv1_we0(grp_forward_fu_386_first_conv1_we0),
    .first_conv1_d0(grp_forward_fu_386_first_conv1_d0),
    .first_conv1_q0(first_conv1_q0),
    .sencond_conv1_address0(grp_forward_fu_386_sencond_conv1_address0),
    .sencond_conv1_ce0(grp_forward_fu_386_sencond_conv1_ce0),
    .sencond_conv1_we0(grp_forward_fu_386_sencond_conv1_we0),
    .sencond_conv1_d0(grp_forward_fu_386_sencond_conv1_d0),
    .sencond_conv1_q0(sencond_conv1_q0),
    .fc_hidden_layer1_address0(grp_forward_fu_386_fc_hidden_layer1_address0),
    .fc_hidden_layer1_ce0(grp_forward_fu_386_fc_hidden_layer1_ce0),
    .fc_hidden_layer1_we0(grp_forward_fu_386_fc_hidden_layer1_we0),
    .fc_hidden_layer1_d0(grp_forward_fu_386_fc_hidden_layer1_d0),
    .fc_hidden_layer1_q0(fc_hidden_layer1_q0),
    .fc_hidden_layer2_address0(grp_forward_fu_386_fc_hidden_layer2_address0),
    .fc_hidden_layer2_ce0(grp_forward_fu_386_fc_hidden_layer2_ce0),
    .fc_hidden_layer2_q0(fc_hidden_layer2_q0),
    .fc_hidden_layer2_address1(grp_forward_fu_386_fc_hidden_layer2_address1),
    .fc_hidden_layer2_ce1(grp_forward_fu_386_fc_hidden_layer2_ce1),
    .fc_hidden_layer2_we1(grp_forward_fu_386_fc_hidden_layer2_we1),
    .fc_hidden_layer2_d1(grp_forward_fu_386_fc_hidden_layer2_d1),
    .fc_hidden_layer3_address0(grp_forward_fu_386_fc_hidden_layer3_address0),
    .fc_hidden_layer3_ce0(grp_forward_fu_386_fc_hidden_layer3_ce0),
    .fc_hidden_layer3_we0(grp_forward_fu_386_fc_hidden_layer3_we0),
    .fc_hidden_layer3_d0(grp_forward_fu_386_fc_hidden_layer3_d0),
    .fc_hidden_layer3_q0(fc_hidden_layer3_q0),
    .flatten_conv_0_address0(grp_forward_fu_386_flatten_conv_0_address0),
    .flatten_conv_0_ce0(grp_forward_fu_386_flatten_conv_0_ce0),
    .flatten_conv_0_we0(grp_forward_fu_386_flatten_conv_0_we0),
    .flatten_conv_0_d0(grp_forward_fu_386_flatten_conv_0_d0),
    .flatten_conv_0_q0(flatten_conv_0_q0),
    .first_fc_0_address0(grp_forward_fu_386_first_fc_0_address0),
    .first_fc_0_ce0(grp_forward_fu_386_first_fc_0_ce0),
    .first_fc_0_we0(grp_forward_fu_386_first_fc_0_we0),
    .first_fc_0_d0(grp_forward_fu_386_first_fc_0_d0),
    .first_fc_0_q0(first_fc_0_q0),
    .first_relu_0_address0(grp_forward_fu_386_first_relu_0_address0),
    .first_relu_0_ce0(grp_forward_fu_386_first_relu_0_ce0),
    .first_relu_0_we0(grp_forward_fu_386_first_relu_0_we0),
    .first_relu_0_d0(grp_forward_fu_386_first_relu_0_d0),
    .first_relu_0_q0(first_relu_0_q0),
    .second_fc_0_address0(grp_forward_fu_386_second_fc_0_address0),
    .second_fc_0_ce0(grp_forward_fu_386_second_fc_0_ce0),
    .second_fc_0_we0(grp_forward_fu_386_second_fc_0_we0),
    .second_fc_0_d0(grp_forward_fu_386_second_fc_0_d0),
    .second_fc_0_q0(second_fc_0_q0),
    .second_relu_0_address0(grp_forward_fu_386_second_relu_0_address0),
    .second_relu_0_ce0(grp_forward_fu_386_second_relu_0_ce0),
    .second_relu_0_we0(grp_forward_fu_386_second_relu_0_we0),
    .second_relu_0_d0(grp_forward_fu_386_second_relu_0_d0),
    .second_relu_0_q0(second_relu_0_q0),
    .outmlp_0_address0(grp_forward_fu_386_outmlp_0_address0),
    .outmlp_0_ce0(grp_forward_fu_386_outmlp_0_ce0),
    .outmlp_0_we0(grp_forward_fu_386_outmlp_0_we0),
    .outmlp_0_d0(grp_forward_fu_386_outmlp_0_d0)
);

forw_back_fptrunceOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
forw_back_fptrunceOg_U130(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_431_p0),
    .ce(1'b1),
    .dout(grp_fu_431_p1)
);

forw_back_fpext_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
forw_back_fpext_3fYi_U131(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_435_p0),
    .ce(1'b1),
    .dout(grp_fu_435_p1)
);

forw_back_dadd_64OgC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dadd_64OgC_U132(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_460),
    .din1(reg_467),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

forw_back_ddiv_64PgM #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_ddiv_64PgM_U133(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_467),
    .din1(reg_460),
    .ce(1'b1),
    .dout(grp_fu_445_p2)
);

forw_back_dexp_64QgW #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dexp_64QgW_U134(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(grp_fu_449_p1),
    .ce(1'b1),
    .dout(grp_fu_449_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state68) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state68)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state68);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state76) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state76)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state76);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_backward_fu_340_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state71)) begin
            grp_backward_fu_340_ap_start_reg <= 1'b1;
        end else if ((grp_backward_fu_340_ap_ready == 1'b1)) begin
            grp_backward_fu_340_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_forward_fu_386_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_forward_fu_386_ap_start_reg <= 1'b1;
        end else if ((grp_forward_fu_386_ap_ready == 1'b1)) begin
            grp_forward_fu_386_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_0_reg_307 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        i_0_reg_307 <= i_reg_741;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_296 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        j_0_reg_296 <= j_reg_717;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln356_reg_329 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln356_fu_630_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln356_reg_329 <= add_ln356_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        phi_ln367_reg_318 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln367_fu_613_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln367_reg_318 <= add_ln367_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        probability_0_reg_284 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        probability_0_reg_284 <= grp_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv4_reg_686 <= {{conv2[31:2]}};
        conv5_reg_692 <= {{conv1[31:2]}};
        conv_reg_680 <= {{conv3[31:2]}};
        fc4_reg_668 <= {{fc2[31:2]}};
        fc5_reg_674 <= {{fc1[31:2]}};
        fc_reg_662 <= {{fc3[31:2]}};
        icmp_ln354_reg_703 <= icmp_ln354_fu_563_p2;
        in1_reg_698 <= {{in_r[31:2]}};
        label_read_reg_647 <= label_r;
        lr1_reg_652 <= {{lr[31:2]}};
        out1_reg_657 <= {{out_r[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_addr_reg_707[29 : 0] <= empty_fu_569_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28))) begin
        i_reg_741 <= i_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln356_reg_785 <= icmp_ln356_fu_630_p2;
        icmp_ln356_reg_785_pp1_iter1_reg <= icmp_ln356_reg_785;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln367_reg_766 <= icmp_ln367_fu_613_p2;
        icmp_ln367_reg_766_pp0_iter1_reg <= icmp_ln367_reg_766;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_717 <= j_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln356_reg_785 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        reg_454 <= outmlp_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_460 <= grp_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_467 <= grp_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln367_reg_766 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        result_load_reg_780 <= result_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_4_reg_727 <= grp_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_6_reg_756 <= grp_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        tmp_8_reg_761 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        zext_ln365_reg_746[3 : 0] <= zext_ln365_fu_608_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln367_fu_613_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state68 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state68 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln356_fu_630_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state76 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state76 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln354_reg_703 == 1'd0) & (data_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state75))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln354_reg_703 == 1'd0) & (data_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state75))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel1_address0 = grp_forward_fu_386_conv_kernel1_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel1_address0 = grp_backward_fu_340_conv_kernel1_address0;
    end else begin
        conv_kernel1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel1_ce0 = grp_forward_fu_386_conv_kernel1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel1_ce0 = grp_backward_fu_340_conv_kernel1_ce0;
    end else begin
        conv_kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel1_d0 = grp_forward_fu_386_conv_kernel1_d0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel1_d0 = grp_backward_fu_340_conv_kernel1_d0;
    end else begin
        conv_kernel1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel1_we0 = grp_forward_fu_386_conv_kernel1_we0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel1_we0 = grp_backward_fu_340_conv_kernel1_we0;
    end else begin
        conv_kernel1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel2_address0 = grp_forward_fu_386_conv_kernel2_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel2_address0 = grp_backward_fu_340_conv_kernel2_address0;
    end else begin
        conv_kernel2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel2_ce0 = grp_forward_fu_386_conv_kernel2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel2_ce0 = grp_backward_fu_340_conv_kernel2_ce0;
    end else begin
        conv_kernel2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel2_d0 = grp_forward_fu_386_conv_kernel2_d0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel2_d0 = grp_backward_fu_340_conv_kernel2_d0;
    end else begin
        conv_kernel2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel2_we0 = grp_forward_fu_386_conv_kernel2_we0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel2_we0 = grp_backward_fu_340_conv_kernel2_we0;
    end else begin
        conv_kernel2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel3_address0 = grp_forward_fu_386_conv_kernel3_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel3_address0 = grp_backward_fu_340_conv_kernel3_address0;
    end else begin
        conv_kernel3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel3_ce0 = grp_forward_fu_386_conv_kernel3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel3_ce0 = grp_backward_fu_340_conv_kernel3_ce0;
    end else begin
        conv_kernel3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel3_d0 = grp_forward_fu_386_conv_kernel3_d0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel3_d0 = grp_backward_fu_340_conv_kernel3_d0;
    end else begin
        conv_kernel3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_kernel3_we0 = grp_forward_fu_386_conv_kernel3_we0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        conv_kernel3_we0 = grp_backward_fu_340_conv_kernel3_we0;
    end else begin
        conv_kernel3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARADDR = grp_forward_fu_386_m_axi_input_matrix_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARADDR = grp_backward_fu_340_m_axi_conv1_ARADDR;
    end else begin
        data_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARBURST = grp_forward_fu_386_m_axi_input_matrix_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARBURST = grp_backward_fu_340_m_axi_conv1_ARBURST;
    end else begin
        data_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARCACHE = grp_forward_fu_386_m_axi_input_matrix_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARCACHE = grp_backward_fu_340_m_axi_conv1_ARCACHE;
    end else begin
        data_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARID = grp_forward_fu_386_m_axi_input_matrix_ARID;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARID = grp_backward_fu_340_m_axi_conv1_ARID;
    end else begin
        data_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARLEN = grp_forward_fu_386_m_axi_input_matrix_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARLEN = grp_backward_fu_340_m_axi_conv1_ARLEN;
    end else begin
        data_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARLOCK = grp_forward_fu_386_m_axi_input_matrix_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARLOCK = grp_backward_fu_340_m_axi_conv1_ARLOCK;
    end else begin
        data_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARPROT = grp_forward_fu_386_m_axi_input_matrix_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARPROT = grp_backward_fu_340_m_axi_conv1_ARPROT;
    end else begin
        data_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARQOS = grp_forward_fu_386_m_axi_input_matrix_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARQOS = grp_backward_fu_340_m_axi_conv1_ARQOS;
    end else begin
        data_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARREGION = grp_forward_fu_386_m_axi_input_matrix_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARREGION = grp_backward_fu_340_m_axi_conv1_ARREGION;
    end else begin
        data_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARSIZE = grp_forward_fu_386_m_axi_input_matrix_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARSIZE = grp_backward_fu_340_m_axi_conv1_ARSIZE;
    end else begin
        data_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARUSER = grp_forward_fu_386_m_axi_input_matrix_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARUSER = grp_backward_fu_340_m_axi_conv1_ARUSER;
    end else begin
        data_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ARVALID = grp_forward_fu_386_m_axi_input_matrix_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_ARVALID = grp_backward_fu_340_m_axi_conv1_ARVALID;
    end else begin
        data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        data_AWADDR = data_addr_reg_707;
    end else if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_AWADDR = empty_fu_569_p1;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWADDR = grp_backward_fu_340_m_axi_conv1_AWADDR;
    end else begin
        data_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWBURST = grp_backward_fu_340_m_axi_conv1_AWBURST;
    end else begin
        data_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWCACHE = grp_backward_fu_340_m_axi_conv1_AWCACHE;
    end else begin
        data_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWID = grp_backward_fu_340_m_axi_conv1_AWID;
    end else begin
        data_AWID = 1'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_AWLEN = 32'd10;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWLEN = grp_backward_fu_340_m_axi_conv1_AWLEN;
    end else begin
        data_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWLOCK = grp_backward_fu_340_m_axi_conv1_AWLOCK;
    end else begin
        data_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWPROT = grp_backward_fu_340_m_axi_conv1_AWPROT;
    end else begin
        data_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWQOS = grp_backward_fu_340_m_axi_conv1_AWQOS;
    end else begin
        data_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWREGION = grp_backward_fu_340_m_axi_conv1_AWREGION;
    end else begin
        data_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWSIZE = grp_backward_fu_340_m_axi_conv1_AWSIZE;
    end else begin
        data_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWUSER = grp_backward_fu_340_m_axi_conv1_AWUSER;
    end else begin
        data_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_AWVALID = grp_backward_fu_340_m_axi_conv1_AWVALID;
    end else begin
        data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83)) | (~((icmp_ln354_reg_703 == 1'd0) & (data_BVALID == 1'b0)) & (icmp_ln354_reg_703 == 1'd0) & (1'b1 == ap_CS_fsm_state75)))) begin
        data_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_BREADY = grp_backward_fu_340_m_axi_conv1_BREADY;
    end else begin
        data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_RREADY = grp_forward_fu_386_m_axi_input_matrix_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_RREADY = grp_backward_fu_340_m_axi_conv1_RREADY;
    end else begin
        data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln356_reg_785_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        data_WDATA = reg_454;
    end else if (((icmp_ln367_reg_766_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        data_WDATA = result_load_reg_780;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_WDATA = grp_backward_fu_340_m_axi_conv1_WDATA;
    end else begin
        data_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_WID = grp_backward_fu_340_m_axi_conv1_WID;
    end else begin
        data_WID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_WLAST = grp_backward_fu_340_m_axi_conv1_WLAST;
    end else begin
        data_WLAST = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln367_reg_766_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001)) | ((icmp_ln356_reg_785_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001)))) begin
        data_WSTRB = 4'd15;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_WSTRB = grp_backward_fu_340_m_axi_conv1_WSTRB;
    end else begin
        data_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_WUSER = grp_backward_fu_340_m_axi_conv1_WUSER;
    end else begin
        data_WUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln367_reg_766_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln356_reg_785_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        data_WVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        data_WVALID = grp_backward_fu_340_m_axi_conv1_WVALID;
    end else begin
        data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)) | ((icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_blk_n_AW = m_axi_data_AWREADY;
    end else begin
        data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | ((icmp_ln354_reg_703 == 1'd0) & (1'b1 == ap_CS_fsm_state75)))) begin
        data_blk_n_B = m_axi_data_BVALID;
    end else begin
        data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln367_reg_766_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln356_reg_785_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        data_blk_n_W = m_axi_data_WREADY;
    end else begin
        data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer1_address0 = grp_forward_fu_386_fc_hidden_layer1_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer1_address0 = grp_backward_fu_340_fc_hidden_layer1_address0;
    end else begin
        fc_hidden_layer1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer1_ce0 = grp_forward_fu_386_fc_hidden_layer1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer1_ce0 = grp_backward_fu_340_fc_hidden_layer1_ce0;
    end else begin
        fc_hidden_layer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer1_d0 = grp_forward_fu_386_fc_hidden_layer1_d0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer1_d0 = grp_backward_fu_340_fc_hidden_layer1_d0;
    end else begin
        fc_hidden_layer1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer1_we0 = grp_forward_fu_386_fc_hidden_layer1_we0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer1_we0 = grp_backward_fu_340_fc_hidden_layer1_we0;
    end else begin
        fc_hidden_layer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer2_address0 = grp_forward_fu_386_fc_hidden_layer2_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer2_address0 = grp_backward_fu_340_fc_hidden_layer2_address0;
    end else begin
        fc_hidden_layer2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer2_address1 = grp_forward_fu_386_fc_hidden_layer2_address1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer2_address1 = grp_backward_fu_340_fc_hidden_layer2_address1;
    end else begin
        fc_hidden_layer2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer2_ce0 = grp_forward_fu_386_fc_hidden_layer2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer2_ce0 = grp_backward_fu_340_fc_hidden_layer2_ce0;
    end else begin
        fc_hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer2_ce1 = grp_forward_fu_386_fc_hidden_layer2_ce1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer2_ce1 = grp_backward_fu_340_fc_hidden_layer2_ce1;
    end else begin
        fc_hidden_layer2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer2_d1 = grp_forward_fu_386_fc_hidden_layer2_d1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer2_d1 = grp_backward_fu_340_fc_hidden_layer2_d1;
    end else begin
        fc_hidden_layer2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer2_we1 = grp_forward_fu_386_fc_hidden_layer2_we1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer2_we1 = grp_backward_fu_340_fc_hidden_layer2_we1;
    end else begin
        fc_hidden_layer2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer3_address0 = grp_forward_fu_386_fc_hidden_layer3_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer3_address0 = grp_backward_fu_340_fc_hidden_layer3_address0;
    end else begin
        fc_hidden_layer3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer3_ce0 = grp_forward_fu_386_fc_hidden_layer3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer3_ce0 = grp_backward_fu_340_fc_hidden_layer3_ce0;
    end else begin
        fc_hidden_layer3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer3_d0 = grp_forward_fu_386_fc_hidden_layer3_d0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer3_d0 = grp_backward_fu_340_fc_hidden_layer3_d0;
    end else begin
        fc_hidden_layer3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_hidden_layer3_we0 = grp_forward_fu_386_fc_hidden_layer3_we0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        fc_hidden_layer3_we0 = grp_backward_fu_340_fc_hidden_layer3_we0;
    end else begin
        fc_hidden_layer3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_conv1_address0 = grp_forward_fu_386_first_conv1_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        first_conv1_address0 = grp_backward_fu_340_first_conv1_address0;
    end else begin
        first_conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_conv1_ce0 = grp_forward_fu_386_first_conv1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        first_conv1_ce0 = grp_backward_fu_340_first_conv1_ce0;
    end else begin
        first_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        first_conv1_ce1 = grp_backward_fu_340_first_conv1_ce1;
    end else begin
        first_conv1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_conv1_we0 = grp_forward_fu_386_first_conv1_we0;
    end else begin
        first_conv1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_fc_0_address0 = grp_forward_fu_386_first_fc_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        first_fc_0_address0 = grp_backward_fu_340_first_fc_0_address0;
    end else begin
        first_fc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_fc_0_ce0 = grp_forward_fu_386_first_fc_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        first_fc_0_ce0 = grp_backward_fu_340_first_fc_0_ce0;
    end else begin
        first_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_fc_0_we0 = grp_forward_fu_386_first_fc_0_we0;
    end else begin
        first_fc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_relu_0_address0 = grp_forward_fu_386_first_relu_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        first_relu_0_address0 = grp_backward_fu_340_first_relu_0_address0;
    end else begin
        first_relu_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_relu_0_ce0 = grp_forward_fu_386_first_relu_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        first_relu_0_ce0 = grp_backward_fu_340_first_relu_0_ce0;
    end else begin
        first_relu_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        first_relu_0_we0 = grp_forward_fu_386_first_relu_0_we0;
    end else begin
        first_relu_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        flatten_conv_0_address0 = grp_forward_fu_386_flatten_conv_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        flatten_conv_0_address0 = grp_backward_fu_340_flatten_conv_0_address0;
    end else begin
        flatten_conv_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        flatten_conv_0_ce0 = grp_forward_fu_386_flatten_conv_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        flatten_conv_0_ce0 = grp_backward_fu_340_flatten_conv_0_ce0;
    end else begin
        flatten_conv_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        flatten_conv_0_we0 = grp_forward_fu_386_flatten_conv_0_we0;
    end else begin
        flatten_conv_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_431_p0 = tmp_8_reg_761;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_431_p0 = tmp_4_reg_727;
    end else begin
        grp_fu_431_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_435_p0 = probability_0_reg_284;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_435_p0 = outmlp_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_435_p0 = ap_phi_mux_probability_0_phi_fu_288_p4;
    end else begin
        grp_fu_435_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_449_p1 = tmp_6_reg_756;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_449_p1 = reg_460;
    end else begin
        grp_fu_449_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mnist_data_address0 = grp_forward_fu_386_mnist_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        mnist_data_address0 = grp_backward_fu_340_mnist_data_address0;
    end else begin
        mnist_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mnist_data_ce0 = grp_forward_fu_386_mnist_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        mnist_data_ce0 = grp_backward_fu_340_mnist_data_ce0;
    end else begin
        mnist_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        mnist_data_ce1 = grp_backward_fu_340_mnist_data_ce1;
    end else begin
        mnist_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mnist_data_we0 = grp_forward_fu_386_mnist_data_we0;
    end else begin
        mnist_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        outmlp_0_address0 = zext_ln356_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        outmlp_0_address0 = zext_ln365_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outmlp_0_address0 = zext_ln362_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        outmlp_0_address0 = grp_forward_fu_386_outmlp_0_address0;
    end else begin
        outmlp_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_state28_io) & (1'b1 == ap_CS_fsm_state28)))) begin
        outmlp_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        outmlp_0_ce0 = grp_forward_fu_386_outmlp_0_ce0;
    end else begin
        outmlp_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outmlp_0_we0 = grp_forward_fu_386_outmlp_0_we0;
    end else begin
        outmlp_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        result_address0 = zext_ln367_fu_625_p1;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        result_address0 = zext_ln365_reg_746;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        result_address0 = grp_backward_fu_340_result_address0;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        result_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        result_ce0 = grp_backward_fu_340_result_ce0;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        second_fc_0_address0 = grp_forward_fu_386_second_fc_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        second_fc_0_address0 = grp_backward_fu_340_second_fc_0_address0;
    end else begin
        second_fc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        second_fc_0_ce0 = grp_forward_fu_386_second_fc_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        second_fc_0_ce0 = grp_backward_fu_340_second_fc_0_ce0;
    end else begin
        second_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        second_fc_0_we0 = grp_forward_fu_386_second_fc_0_we0;
    end else begin
        second_fc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        second_relu_0_address0 = grp_forward_fu_386_second_relu_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        second_relu_0_address0 = grp_backward_fu_340_second_relu_0_address0;
    end else begin
        second_relu_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        second_relu_0_ce0 = grp_forward_fu_386_second_relu_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        second_relu_0_ce0 = grp_backward_fu_340_second_relu_0_ce0;
    end else begin
        second_relu_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        second_relu_0_we0 = grp_forward_fu_386_second_relu_0_we0;
    end else begin
        second_relu_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sencond_conv1_address0 = grp_forward_fu_386_sencond_conv1_address0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        sencond_conv1_address0 = grp_backward_fu_340_sencond_conv1_address0;
    end else begin
        sencond_conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sencond_conv1_ce0 = grp_forward_fu_386_sencond_conv1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        sencond_conv1_ce0 = grp_backward_fu_340_sencond_conv1_ce0;
    end else begin
        sencond_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        sencond_conv1_ce1 = grp_backward_fu_340_sencond_conv1_ce1;
    end else begin
        sencond_conv1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sencond_conv1_we0 = grp_forward_fu_386_sencond_conv1_we0;
    end else begin
        sencond_conv1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((~((1'b1 == ap_block_state3_io) | (grp_forward_fu_386_ap_done == 1'b0)) & (icmp_ln354_reg_703 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln361_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_state28_io) & (icmp_ln364_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln367_fu_613_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln367_fu_613_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((grp_backward_fu_340_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if ((~((icmp_ln354_reg_703 == 1'd0) & (data_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln356_fu_630_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln356_fu_630_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln356_fu_636_p2 = (phi_ln356_reg_329 + 4'd1);

assign add_ln367_fu_619_p2 = (phi_ln367_reg_318 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd78];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state78_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state78_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state28_io = ((icmp_ln364_fu_596_p2 == 1'd1) & (data_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln354_reg_703 == 1'd1) & (data_AWREADY == 1'b0));
end

assign ap_block_state68_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state70_io = ((icmp_ln367_reg_766_pp0_iter1_reg == 1'd0) & (data_WREADY == 1'b0));
end

assign ap_block_state70_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75 = ((icmp_ln354_reg_703 == 1'd0) & (data_BVALID == 1'b0));
end

assign ap_block_state76_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state78_io = ((icmp_ln356_reg_785_pp1_iter1_reg == 1'd0) & (data_WREADY == 1'b0));
end

assign ap_block_state78_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_probability_0_phi_fu_288_p4 = probability_0_reg_284;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_569_p1 = out1_reg_657;

assign grp_backward_fu_340_ap_start = grp_backward_fu_340_ap_start_reg;

assign grp_forward_fu_386_ap_start = grp_forward_fu_386_ap_start_reg;

assign i_fu_602_p2 = (i_0_reg_307 + 4'd1);

assign icmp_ln354_fu_563_p2 = ((flag == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln356_fu_630_p2 = ((phi_ln356_reg_329 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln361_fu_579_p2 = ((j_0_reg_296 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln364_fu_596_p2 = ((i_0_reg_307 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln367_fu_613_p2 = ((phi_ln367_reg_318 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_585_p2 = (j_0_reg_296 + 4'd1);

assign zext_ln356_fu_642_p1 = phi_ln356_reg_329;

assign zext_ln362_fu_591_p1 = j_0_reg_296;

assign zext_ln365_fu_608_p1 = i_0_reg_307;

assign zext_ln367_fu_625_p1 = phi_ln367_reg_318;

always @ (posedge ap_clk) begin
    data_addr_reg_707[31:30] <= 2'b00;
    zext_ln365_reg_746[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //forw_back
