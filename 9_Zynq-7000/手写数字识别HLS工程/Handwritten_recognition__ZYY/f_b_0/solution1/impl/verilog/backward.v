// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module backward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        label_r,
        m_axi_conv1_AWVALID,
        m_axi_conv1_AWREADY,
        m_axi_conv1_AWADDR,
        m_axi_conv1_AWID,
        m_axi_conv1_AWLEN,
        m_axi_conv1_AWSIZE,
        m_axi_conv1_AWBURST,
        m_axi_conv1_AWLOCK,
        m_axi_conv1_AWCACHE,
        m_axi_conv1_AWPROT,
        m_axi_conv1_AWQOS,
        m_axi_conv1_AWREGION,
        m_axi_conv1_AWUSER,
        m_axi_conv1_WVALID,
        m_axi_conv1_WREADY,
        m_axi_conv1_WDATA,
        m_axi_conv1_WSTRB,
        m_axi_conv1_WLAST,
        m_axi_conv1_WID,
        m_axi_conv1_WUSER,
        m_axi_conv1_ARVALID,
        m_axi_conv1_ARREADY,
        m_axi_conv1_ARADDR,
        m_axi_conv1_ARID,
        m_axi_conv1_ARLEN,
        m_axi_conv1_ARSIZE,
        m_axi_conv1_ARBURST,
        m_axi_conv1_ARLOCK,
        m_axi_conv1_ARCACHE,
        m_axi_conv1_ARPROT,
        m_axi_conv1_ARQOS,
        m_axi_conv1_ARREGION,
        m_axi_conv1_ARUSER,
        m_axi_conv1_RVALID,
        m_axi_conv1_RREADY,
        m_axi_conv1_RDATA,
        m_axi_conv1_RLAST,
        m_axi_conv1_RID,
        m_axi_conv1_RUSER,
        m_axi_conv1_RRESP,
        m_axi_conv1_BVALID,
        m_axi_conv1_BREADY,
        m_axi_conv1_BRESP,
        m_axi_conv1_BID,
        m_axi_conv1_BUSER,
        conv1_offset,
        conv2_offset,
        conv3_offset,
        fc1_offset,
        fc2_offset,
        fc3_offset,
        lr_in_offset,
        result_address0,
        result_ce0,
        result_q0,
        second_relu_0_address0,
        second_relu_0_ce0,
        second_relu_0_q0,
        fc_hidden_layer3_address0,
        fc_hidden_layer3_ce0,
        fc_hidden_layer3_we0,
        fc_hidden_layer3_d0,
        fc_hidden_layer3_q0,
        second_fc_0_address0,
        second_fc_0_ce0,
        second_fc_0_q0,
        first_relu_0_address0,
        first_relu_0_ce0,
        first_relu_0_q0,
        fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0,
        fc_hidden_layer2_address1,
        fc_hidden_layer2_ce1,
        fc_hidden_layer2_we1,
        fc_hidden_layer2_d1,
        first_fc_0_address0,
        first_fc_0_ce0,
        first_fc_0_q0,
        flatten_conv_0_address0,
        flatten_conv_0_ce0,
        flatten_conv_0_q0,
        fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0,
        fc_hidden_layer1_we0,
        fc_hidden_layer1_d0,
        fc_hidden_layer1_q0,
        sencond_conv1_address0,
        sencond_conv1_ce0,
        sencond_conv1_q0,
        sencond_conv1_address1,
        sencond_conv1_ce1,
        sencond_conv1_q1,
        conv_kernel3_address0,
        conv_kernel3_ce0,
        conv_kernel3_we0,
        conv_kernel3_d0,
        conv_kernel3_q0,
        first_conv1_address0,
        first_conv1_ce0,
        first_conv1_q0,
        first_conv1_address1,
        first_conv1_ce1,
        first_conv1_q1,
        conv_kernel2_address0,
        conv_kernel2_ce0,
        conv_kernel2_we0,
        conv_kernel2_d0,
        conv_kernel2_q0,
        mnist_data_address0,
        mnist_data_ce0,
        mnist_data_q0,
        mnist_data_address1,
        mnist_data_ce1,
        mnist_data_q1,
        conv_kernel1_address0,
        conv_kernel1_ce0,
        conv_kernel1_we0,
        conv_kernel1_d0,
        conv_kernel1_q0
);

parameter    ap_ST_fsm_state1 = 177'd1;
parameter    ap_ST_fsm_state2 = 177'd2;
parameter    ap_ST_fsm_state3 = 177'd4;
parameter    ap_ST_fsm_state4 = 177'd8;
parameter    ap_ST_fsm_state5 = 177'd16;
parameter    ap_ST_fsm_state6 = 177'd32;
parameter    ap_ST_fsm_state7 = 177'd64;
parameter    ap_ST_fsm_state8 = 177'd128;
parameter    ap_ST_fsm_state9 = 177'd256;
parameter    ap_ST_fsm_state10 = 177'd512;
parameter    ap_ST_fsm_state11 = 177'd1024;
parameter    ap_ST_fsm_state12 = 177'd2048;
parameter    ap_ST_fsm_state13 = 177'd4096;
parameter    ap_ST_fsm_state14 = 177'd8192;
parameter    ap_ST_fsm_state15 = 177'd16384;
parameter    ap_ST_fsm_state16 = 177'd32768;
parameter    ap_ST_fsm_state17 = 177'd65536;
parameter    ap_ST_fsm_state18 = 177'd131072;
parameter    ap_ST_fsm_state19 = 177'd262144;
parameter    ap_ST_fsm_state20 = 177'd524288;
parameter    ap_ST_fsm_state21 = 177'd1048576;
parameter    ap_ST_fsm_state22 = 177'd2097152;
parameter    ap_ST_fsm_state23 = 177'd4194304;
parameter    ap_ST_fsm_state24 = 177'd8388608;
parameter    ap_ST_fsm_state25 = 177'd16777216;
parameter    ap_ST_fsm_state26 = 177'd33554432;
parameter    ap_ST_fsm_state27 = 177'd67108864;
parameter    ap_ST_fsm_state28 = 177'd134217728;
parameter    ap_ST_fsm_state29 = 177'd268435456;
parameter    ap_ST_fsm_state30 = 177'd536870912;
parameter    ap_ST_fsm_state31 = 177'd1073741824;
parameter    ap_ST_fsm_state32 = 177'd2147483648;
parameter    ap_ST_fsm_state33 = 177'd4294967296;
parameter    ap_ST_fsm_state34 = 177'd8589934592;
parameter    ap_ST_fsm_state35 = 177'd17179869184;
parameter    ap_ST_fsm_state36 = 177'd34359738368;
parameter    ap_ST_fsm_state37 = 177'd68719476736;
parameter    ap_ST_fsm_state38 = 177'd137438953472;
parameter    ap_ST_fsm_state39 = 177'd274877906944;
parameter    ap_ST_fsm_state40 = 177'd549755813888;
parameter    ap_ST_fsm_state41 = 177'd1099511627776;
parameter    ap_ST_fsm_state42 = 177'd2199023255552;
parameter    ap_ST_fsm_state43 = 177'd4398046511104;
parameter    ap_ST_fsm_state44 = 177'd8796093022208;
parameter    ap_ST_fsm_state45 = 177'd17592186044416;
parameter    ap_ST_fsm_state46 = 177'd35184372088832;
parameter    ap_ST_fsm_state47 = 177'd70368744177664;
parameter    ap_ST_fsm_state48 = 177'd140737488355328;
parameter    ap_ST_fsm_state49 = 177'd281474976710656;
parameter    ap_ST_fsm_state50 = 177'd562949953421312;
parameter    ap_ST_fsm_state51 = 177'd1125899906842624;
parameter    ap_ST_fsm_state52 = 177'd2251799813685248;
parameter    ap_ST_fsm_state53 = 177'd4503599627370496;
parameter    ap_ST_fsm_state54 = 177'd9007199254740992;
parameter    ap_ST_fsm_state55 = 177'd18014398509481984;
parameter    ap_ST_fsm_state56 = 177'd36028797018963968;
parameter    ap_ST_fsm_state57 = 177'd72057594037927936;
parameter    ap_ST_fsm_state58 = 177'd144115188075855872;
parameter    ap_ST_fsm_state59 = 177'd288230376151711744;
parameter    ap_ST_fsm_state60 = 177'd576460752303423488;
parameter    ap_ST_fsm_state61 = 177'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 177'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 177'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 177'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 177'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 177'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 177'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 177'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 177'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 177'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 177'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 177'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 177'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 177'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 177'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 177'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 177'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 177'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 177'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 177'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 177'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 177'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 177'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 177'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 177'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 177'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 177'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 177'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 177'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 177'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 177'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 177'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 177'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 177'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 177'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 177'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 177'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 177'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 177'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 177'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 177'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 177'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 177'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 177'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 177'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 177'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 177'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 177'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 177'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 177'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 177'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 177'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 177'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 177'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 177'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 177'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 177'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 177'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 177'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 177'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 177'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 177'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 177'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 177'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 177'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 177'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 177'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 177'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 177'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 177'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 177'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 177'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 177'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 177'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 177'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 177'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 177'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 177'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 177'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 177'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 177'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_pp0_stage0 = 177'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 177'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 177'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 177'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 177'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 177'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_pp1_stage0 = 177'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state153 = 177'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state154 = 177'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state155 = 177'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state156 = 177'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state157 = 177'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_pp2_stage0 = 177'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state161 = 177'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state162 = 177'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state163 = 177'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state164 = 177'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state165 = 177'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_pp3_stage0 = 177'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state169 = 177'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state170 = 177'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state171 = 177'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state172 = 177'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state173 = 177'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_pp4_stage0 = 177'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state177 = 177'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state178 = 177'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state179 = 177'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state180 = 177'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state181 = 177'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_pp5_stage0 = 177'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state185 = 177'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state186 = 177'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state187 = 177'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state188 = 177'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state189 = 177'd95780971304118053647396689196894323976171195136475136;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] label_r;
output   m_axi_conv1_AWVALID;
input   m_axi_conv1_AWREADY;
output  [31:0] m_axi_conv1_AWADDR;
output  [0:0] m_axi_conv1_AWID;
output  [31:0] m_axi_conv1_AWLEN;
output  [2:0] m_axi_conv1_AWSIZE;
output  [1:0] m_axi_conv1_AWBURST;
output  [1:0] m_axi_conv1_AWLOCK;
output  [3:0] m_axi_conv1_AWCACHE;
output  [2:0] m_axi_conv1_AWPROT;
output  [3:0] m_axi_conv1_AWQOS;
output  [3:0] m_axi_conv1_AWREGION;
output  [0:0] m_axi_conv1_AWUSER;
output   m_axi_conv1_WVALID;
input   m_axi_conv1_WREADY;
output  [31:0] m_axi_conv1_WDATA;
output  [3:0] m_axi_conv1_WSTRB;
output   m_axi_conv1_WLAST;
output  [0:0] m_axi_conv1_WID;
output  [0:0] m_axi_conv1_WUSER;
output   m_axi_conv1_ARVALID;
input   m_axi_conv1_ARREADY;
output  [31:0] m_axi_conv1_ARADDR;
output  [0:0] m_axi_conv1_ARID;
output  [31:0] m_axi_conv1_ARLEN;
output  [2:0] m_axi_conv1_ARSIZE;
output  [1:0] m_axi_conv1_ARBURST;
output  [1:0] m_axi_conv1_ARLOCK;
output  [3:0] m_axi_conv1_ARCACHE;
output  [2:0] m_axi_conv1_ARPROT;
output  [3:0] m_axi_conv1_ARQOS;
output  [3:0] m_axi_conv1_ARREGION;
output  [0:0] m_axi_conv1_ARUSER;
input   m_axi_conv1_RVALID;
output   m_axi_conv1_RREADY;
input  [31:0] m_axi_conv1_RDATA;
input   m_axi_conv1_RLAST;
input  [0:0] m_axi_conv1_RID;
input  [0:0] m_axi_conv1_RUSER;
input  [1:0] m_axi_conv1_RRESP;
input   m_axi_conv1_BVALID;
output   m_axi_conv1_BREADY;
input  [1:0] m_axi_conv1_BRESP;
input  [0:0] m_axi_conv1_BID;
input  [0:0] m_axi_conv1_BUSER;
input  [29:0] conv1_offset;
input  [29:0] conv2_offset;
input  [29:0] conv3_offset;
input  [29:0] fc1_offset;
input  [29:0] fc2_offset;
input  [29:0] fc3_offset;
input  [29:0] lr_in_offset;
output  [3:0] result_address0;
output   result_ce0;
input  [31:0] result_q0;
output  [5:0] second_relu_0_address0;
output   second_relu_0_ce0;
input  [31:0] second_relu_0_q0;
output  [8:0] fc_hidden_layer3_address0;
output   fc_hidden_layer3_ce0;
output   fc_hidden_layer3_we0;
output  [31:0] fc_hidden_layer3_d0;
input  [31:0] fc_hidden_layer3_q0;
output  [5:0] second_fc_0_address0;
output   second_fc_0_ce0;
input  [31:0] second_fc_0_q0;
output  [7:0] first_relu_0_address0;
output   first_relu_0_ce0;
input  [31:0] first_relu_0_q0;
output  [12:0] fc_hidden_layer2_address0;
output   fc_hidden_layer2_ce0;
input  [31:0] fc_hidden_layer2_q0;
output  [12:0] fc_hidden_layer2_address1;
output   fc_hidden_layer2_ce1;
output   fc_hidden_layer2_we1;
output  [31:0] fc_hidden_layer2_d1;
output  [7:0] first_fc_0_address0;
output   first_fc_0_ce0;
input  [31:0] first_fc_0_q0;
output  [9:0] flatten_conv_0_address0;
output   flatten_conv_0_ce0;
input  [31:0] flatten_conv_0_q0;
output  [16:0] fc_hidden_layer1_address0;
output   fc_hidden_layer1_ce0;
output   fc_hidden_layer1_we0;
output  [31:0] fc_hidden_layer1_d0;
input  [31:0] fc_hidden_layer1_q0;
output  [9:0] sencond_conv1_address0;
output   sencond_conv1_ce0;
input  [31:0] sencond_conv1_q0;
output  [9:0] sencond_conv1_address1;
output   sencond_conv1_ce1;
input  [31:0] sencond_conv1_q1;
output  [3:0] conv_kernel3_address0;
output   conv_kernel3_ce0;
output   conv_kernel3_we0;
output  [31:0] conv_kernel3_d0;
input  [31:0] conv_kernel3_q0;
output  [9:0] first_conv1_address0;
output   first_conv1_ce0;
input  [31:0] first_conv1_q0;
output  [9:0] first_conv1_address1;
output   first_conv1_ce1;
input  [31:0] first_conv1_q1;
output  [3:0] conv_kernel2_address0;
output   conv_kernel2_ce0;
output   conv_kernel2_we0;
output  [31:0] conv_kernel2_d0;
input  [31:0] conv_kernel2_q0;
output  [9:0] mnist_data_address0;
output   mnist_data_ce0;
input  [31:0] mnist_data_q0;
output  [9:0] mnist_data_address1;
output   mnist_data_ce1;
input  [31:0] mnist_data_q1;
output  [3:0] conv_kernel1_address0;
output   conv_kernel1_ce0;
output   conv_kernel1_we0;
output  [31:0] conv_kernel1_d0;
input  [31:0] conv_kernel1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_conv1_AWVALID;
reg[31:0] m_axi_conv1_AWADDR;
reg[31:0] m_axi_conv1_AWLEN;
reg m_axi_conv1_WVALID;
reg[31:0] m_axi_conv1_WDATA;
reg m_axi_conv1_ARVALID;
reg m_axi_conv1_RREADY;
reg m_axi_conv1_BREADY;
reg[3:0] result_address0;
reg result_ce0;
reg second_relu_0_ce0;
reg[8:0] fc_hidden_layer3_address0;
reg fc_hidden_layer3_ce0;
reg fc_hidden_layer3_we0;
reg second_fc_0_ce0;
reg first_relu_0_ce0;
reg[12:0] fc_hidden_layer2_address0;
reg fc_hidden_layer2_ce0;
reg fc_hidden_layer2_ce1;
reg fc_hidden_layer2_we1;
reg first_fc_0_ce0;
reg flatten_conv_0_ce0;
reg[16:0] fc_hidden_layer1_address0;
reg fc_hidden_layer1_ce0;
reg fc_hidden_layer1_we0;
reg[3:0] conv_kernel3_address0;
reg conv_kernel3_ce0;
reg conv_kernel3_we0;
reg[3:0] conv_kernel2_address0;
reg conv_kernel2_ce0;
reg conv_kernel2_we0;
reg[3:0] conv_kernel1_address0;
reg conv_kernel1_ce0;
reg conv_kernel1_we0;

(* fsm_encoding = "none" *) reg   [176:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] out_grad_address0;
reg    out_grad_ce0;
reg    out_grad_we0;
reg   [31:0] out_grad_d0;
wire   [31:0] out_grad_q0;
reg    conv1_blk_n_AR;
wire    ap_CS_fsm_state91;
wire   [0:0] icmp_ln212_fu_2355_p2;
reg    conv1_blk_n_R;
wire    ap_CS_fsm_state99;
reg    conv1_blk_n_AW;
wire    ap_CS_fsm_state181;
reg    conv1_blk_n_W;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln305_reg_3568;
reg   [0:0] icmp_ln305_reg_3568_pp5_iter1_reg;
reg    conv1_blk_n_B;
wire    ap_CS_fsm_state189;
wire    ap_CS_fsm_state173;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln304_reg_3554;
reg   [0:0] icmp_ln304_reg_3554_pp4_iter1_reg;
wire    ap_CS_fsm_state165;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln303_reg_3540;
reg   [0:0] icmp_ln303_reg_3540_pp3_iter1_reg;
wire    ap_CS_fsm_state157;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln302_reg_3526;
reg   [0:0] icmp_ln302_reg_3526_pp2_iter1_reg;
wire    ap_CS_fsm_state149;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln301_reg_3512;
reg   [0:0] icmp_ln301_reg_3512_pp1_iter1_reg;
wire    ap_CS_fsm_state131;
wire   [0:0] icmp_ln295_fu_2620_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln300_reg_3498;
reg   [0:0] icmp_ln300_reg_3498_pp0_iter1_reg;
reg   [3:0] phi_ln300_reg_1444;
reg   [3:0] phi_ln301_reg_1455;
reg   [3:0] phi_ln302_reg_1466;
reg   [16:0] phi_ln303_reg_1477;
reg   [12:0] phi_ln304_reg_1488;
reg   [8:0] phi_ln305_reg_1499;
wire   [31:0] grp_fu_1556_p2;
reg   [31:0] reg_1615;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state140;
reg   [31:0] reg_1626;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_1581_p2;
reg   [31:0] reg_1631;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state136;
reg   [31:0] reg_1639;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_state182_pp5_stage0_iter0;
wire    ap_block_state183_pp5_stage0_iter1;
wire    ap_block_state184_pp5_stage0_iter2;
reg    ap_block_state184_io;
reg    ap_block_pp5_stage0_11001;
wire   [63:0] grp_fu_1598_p1;
reg   [63:0] reg_1646;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state59;
wire   [63:0] grp_fu_1610_p2;
reg   [63:0] reg_1651;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state64;
wire   [31:0] second_grad_q0;
reg   [31:0] reg_1656;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state48;
reg   [31:0] reg_1661;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state174_pp4_stage0_iter0;
wire    ap_block_state175_pp4_stage0_iter1;
wire    ap_block_state176_pp4_stage0_iter2;
reg    ap_block_state176_io;
reg    ap_block_pp4_stage0_11001;
wire   [31:0] first_grad_q0;
reg   [31:0] reg_1668;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state77;
reg   [31:0] reg_1673;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state166_pp3_stage0_iter0;
wire    ap_block_state167_pp3_stage0_iter1;
wire    ap_block_state168_pp3_stage0_iter2;
reg    ap_block_state168_io;
reg    ap_block_pp3_stage0_11001;
reg   [31:0] reg_1680;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state142_pp0_stage0_iter0;
wire    ap_block_state143_pp0_stage0_iter1;
wire    ap_block_state144_pp0_stage0_iter2;
reg    ap_block_state144_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] reg_1686;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state150_pp1_stage0_iter0;
wire    ap_block_state151_pp1_stage0_iter1;
wire    ap_block_state152_pp1_stage0_iter2;
reg    ap_block_state152_io;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] reg_1692;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state158_pp2_stage0_iter0;
wire    ap_block_state159_pp2_stage0_iter1;
wire    ap_block_state160_pp2_stage0_iter2;
reg    ap_block_state160_io;
reg    ap_block_pp2_stage0_11001;
reg   [3:0] out_grad_addr_reg_2815;
wire    ap_CS_fsm_state2;
reg   [31:0] conv1_addr_reg_2825;
reg   [31:0] conv1_addr_1_reg_2831;
reg   [31:0] conv1_addr_2_reg_2837;
reg   [31:0] conv1_addr_3_reg_2843;
reg   [31:0] conv1_addr_4_reg_2849;
reg   [31:0] conv1_addr_5_reg_2855;
reg   [31:0] conv1_addr_6_reg_2861;
wire   [3:0] i_1_fu_1784_p2;
reg   [3:0] i_1_reg_2870;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln231_fu_1790_p2;
reg   [0:0] icmp_ln231_reg_2875;
wire   [0:0] icmp_ln230_fu_1778_p2;
wire   [63:0] zext_ln232_fu_1795_p1;
reg   [63:0] zext_ln232_reg_2879;
wire   [5:0] i_fu_1806_p2;
reg   [5:0] i_reg_2892;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln148_fu_1800_p2;
wire   [8:0] shl_ln_fu_1817_p3;
reg   [8:0] shl_ln_reg_2902;
wire    ap_CS_fsm_state9;
wire   [6:0] shl_ln150_1_fu_1825_p3;
reg   [6:0] shl_ln150_1_reg_2907;
reg   [31:0] second_relu_0_load_reg_2912;
wire   [3:0] j_fu_1843_p2;
reg   [3:0] j_reg_2920;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln149_fu_1837_p2;
wire   [8:0] add_ln150_1_fu_1863_p2;
reg   [8:0] add_ln150_1_reg_2930;
wire   [5:0] i_2_fu_1878_p2;
reg   [5:0] i_2_reg_2938;
wire    ap_CS_fsm_state16;
reg   [5:0] second_rgrad_addr_reg_2943;
wire   [0:0] icmp_ln169_fu_1872_p2;
wire   [8:0] shl_ln2_fu_1889_p3;
reg   [8:0] shl_ln2_reg_2948;
wire   [6:0] shl_ln172_1_fu_1897_p3;
reg   [6:0] shl_ln172_1_reg_2953;
wire   [3:0] j_13_fu_1915_p2;
reg   [3:0] j_13_reg_2961;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln171_fu_1909_p2;
wire   [5:0] i_4_fu_1951_p2;
reg   [5:0] i_4_reg_2979;
wire    ap_CS_fsm_state27;
wire   [63:0] zext_ln195_fu_1957_p1;
reg   [63:0] zext_ln195_reg_2984;
wire   [0:0] icmp_ln194_fu_1945_p2;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln195_fu_1980_p2;
reg   [0:0] icmp_ln195_reg_3001;
wire   [0:0] icmp_ln195_1_fu_1986_p2;
reg   [0:0] icmp_ln195_1_reg_3006;
wire   [0:0] and_ln195_fu_1996_p2;
reg   [0:0] and_ln195_reg_3016;
wire    ap_CS_fsm_state29;
wire   [31:0] second_rgrad_q0;
wire   [12:0] add_ln157_1_fu_2002_p2;
reg   [12:0] add_ln157_1_reg_3025;
wire    ap_CS_fsm_state38;
wire   [7:0] i_3_fu_2014_p2;
reg   [7:0] i_3_reg_3033;
wire   [0:0] icmp_ln155_fu_2008_p2;
reg   [31:0] first_relu_0_load_reg_3043;
wire    ap_CS_fsm_state39;
wire   [5:0] j_14_fu_2035_p2;
reg   [5:0] j_14_reg_3051;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln156_fu_2029_p2;
wire   [12:0] add_ln157_fu_2046_p2;
reg   [12:0] add_ln157_reg_3061;
wire   [12:0] add_ln180_1_fu_2056_p2;
reg   [12:0] add_ln180_1_reg_3066;
wire    ap_CS_fsm_state46;
wire   [7:0] i_5_fu_2068_p2;
reg   [7:0] i_5_reg_3074;
reg   [7:0] first_rgrad_addr_reg_3079;
wire   [0:0] icmp_ln177_fu_2062_p2;
wire   [5:0] j_15_fu_2089_p2;
reg   [5:0] j_15_reg_3087;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln179_fu_2083_p2;
wire   [7:0] i_7_fu_2117_p2;
reg   [7:0] i_7_reg_3105;
wire    ap_CS_fsm_state56;
wire   [63:0] zext_ln201_fu_2123_p1;
reg   [63:0] zext_ln201_reg_3110;
wire   [0:0] icmp_ln200_fu_2111_p2;
wire    ap_CS_fsm_state57;
wire   [0:0] icmp_ln201_fu_2146_p2;
reg   [0:0] icmp_ln201_reg_3127;
wire   [0:0] icmp_ln201_1_fu_2152_p2;
reg   [0:0] icmp_ln201_1_reg_3132;
wire   [0:0] and_ln201_fu_2162_p2;
reg   [0:0] and_ln201_reg_3142;
wire    ap_CS_fsm_state58;
wire   [31:0] first_rgrad_q0;
wire   [16:0] add_ln164_1_fu_2168_p2;
reg   [16:0] add_ln164_1_reg_3151;
wire    ap_CS_fsm_state67;
wire   [9:0] i_6_fu_2180_p2;
reg   [9:0] i_6_reg_3159;
wire   [0:0] icmp_ln162_fu_2174_p2;
reg   [31:0] flatten_conv_0_load_reg_3169;
wire    ap_CS_fsm_state68;
wire   [7:0] j_16_fu_2201_p2;
reg   [7:0] j_16_reg_3177;
wire    ap_CS_fsm_state69;
wire   [0:0] icmp_ln163_fu_2195_p2;
wire   [16:0] add_ln164_fu_2212_p2;
reg   [16:0] add_ln164_reg_3187;
wire   [16:0] add_ln188_1_fu_2222_p2;
reg   [16:0] add_ln188_1_reg_3192;
wire    ap_CS_fsm_state75;
wire   [9:0] i_8_fu_2234_p2;
reg   [9:0] i_8_reg_3200;
reg   [9:0] third_conv_grad1_add_reg_3205;
wire   [0:0] icmp_ln185_fu_2228_p2;
wire   [7:0] j_17_fu_2255_p2;
reg   [7:0] j_17_reg_3213;
wire    ap_CS_fsm_state76;
wire   [0:0] icmp_ln187_fu_2249_p2;
wire   [4:0] i_9_fu_2283_p2;
reg   [4:0] i_9_reg_3231;
wire    ap_CS_fsm_state86;
wire   [10:0] sub_ln209_fu_2313_p2;
reg   [10:0] sub_ln209_reg_3236;
wire   [0:0] icmp_ln207_fu_2277_p2;
wire   [4:0] j_18_fu_2329_p2;
wire    ap_CS_fsm_state87;
wire   [9:0] add_ln214_1_fu_2349_p2;
reg   [9:0] add_ln214_1_reg_3249;
reg    ap_block_state91_io;
wire   [4:0] i_10_fu_2361_p2;
reg   [4:0] i_10_reg_3257;
wire   [4:0] j_19_fu_2377_p2;
wire    ap_CS_fsm_state92;
reg   [31:0] conv1_addr_read_reg_3270;
wire    grp_Conv2d_b5_fu_1524_ap_ready;
wire    grp_Conv2d_b5_fu_1524_ap_done;
wire   [1:0] m_fu_2404_p2;
reg   [1:0] m_reg_3280;
wire    ap_CS_fsm_state100;
wire   [4:0] sub_ln280_fu_2422_p2;
reg   [4:0] sub_ln280_reg_3285;
wire   [0:0] icmp_ln278_fu_2398_p2;
wire   [1:0] n_fu_2438_p2;
reg   [1:0] n_reg_3293;
wire    ap_CS_fsm_state101;
wire  signed [4:0] add_ln280_fu_2444_p2;
reg  signed [4:0] add_ln280_reg_3298;
wire   [0:0] icmp_ln279_fu_2432_p2;
wire   [31:0] first_kernel_grad_q0;
reg   [31:0] first_kernel_grad_lo_reg_3318;
wire    ap_CS_fsm_state102;
wire   [31:0] second_kernel_grad_q0;
reg   [31:0] second_kernel_grad_l_reg_3323;
wire   [31:0] third_kernel_grad_q0;
reg   [31:0] third_kernel_grad_lo_reg_3328;
reg   [3:0] conv_kernel1_addr_reg_3333;
reg   [3:0] conv_kernel2_addr_reg_3338;
reg   [3:0] conv_kernel3_addr_reg_3343;
wire   [31:0] grp_fu_1585_p2;
reg   [31:0] tmp_2_reg_3348;
wire   [31:0] grp_fu_1589_p2;
reg   [31:0] tmp_4_reg_3353;
wire   [16:0] add_ln285_fu_2466_p2;
reg   [16:0] add_ln285_reg_3358;
wire    ap_CS_fsm_state110;
wire   [9:0] m_4_fu_2478_p2;
reg   [9:0] m_4_reg_3366;
wire   [18:0] shl_ln5_fu_2484_p3;
reg   [18:0] shl_ln5_reg_3371;
wire   [0:0] icmp_ln285_fu_2472_p2;
wire   [15:0] shl_ln287_1_fu_2492_p3;
reg   [15:0] shl_ln287_1_reg_3376;
wire   [7:0] n_4_fu_2510_p2;
reg   [7:0] n_4_reg_3384;
wire    ap_CS_fsm_state111;
wire   [0:0] icmp_ln286_fu_2504_p2;
wire   [16:0] add_ln287_2_fu_2539_p2;
reg   [16:0] add_ln287_2_reg_3394;
wire   [31:0] first_wgrad_q0;
reg   [31:0] first_wgrad_load_reg_3399;
wire    ap_CS_fsm_state112;
reg   [16:0] fc_hidden_layer1_add_2_reg_3404;
wire    ap_CS_fsm_state114;
wire   [12:0] add_ln292_2_fu_2549_p2;
reg   [12:0] add_ln292_2_reg_3409;
wire    ap_CS_fsm_state121;
wire   [14:0] add_ln292_3_fu_2555_p2;
reg   [14:0] add_ln292_3_reg_3414;
wire   [7:0] m_5_fu_2567_p2;
reg   [7:0] m_5_reg_3422;
wire   [5:0] n_5_fu_2583_p2;
reg   [5:0] n_5_reg_3430;
wire    ap_CS_fsm_state122;
wire   [0:0] icmp_ln291_fu_2577_p2;
wire   [12:0] add_ln292_1_fu_2604_p2;
reg   [12:0] add_ln292_1_reg_3440;
wire   [31:0] rgrad_assign_1_q0;
reg   [31:0] rgrad_assign_1_load_reg_3445;
wire    ap_CS_fsm_state123;
reg   [12:0] fc_hidden_layer2_add_2_reg_3450;
wire   [10:0] add_ln297_3_fu_2614_p2;
reg   [10:0] add_ln297_3_reg_3456;
reg    ap_block_state131_io;
wire   [5:0] m_6_fu_2626_p2;
reg   [5:0] m_6_reg_3465;
wire   [9:0] add_ln297_1_fu_2656_p2;
reg   [9:0] add_ln297_1_reg_3470;
wire   [3:0] n_6_fu_2672_p2;
reg   [3:0] n_6_reg_3478;
wire    ap_CS_fsm_state132;
wire   [0:0] icmp_ln296_fu_2666_p2;
reg   [8:0] fc_hidden_layer3_add_2_reg_3488;
wire   [31:0] rgrad_assign_q0;
reg   [31:0] rgrad_assign_load_reg_3493;
wire    ap_CS_fsm_state133;
wire   [0:0] icmp_ln300_fu_2703_p2;
wire   [3:0] add_ln300_fu_2709_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln301_fu_2720_p2;
wire   [3:0] add_ln301_fu_2726_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln302_fu_2737_p2;
wire   [3:0] add_ln302_fu_2743_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln303_fu_2754_p2;
wire   [16:0] add_ln303_fu_2760_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln304_fu_2771_p2;
wire   [12:0] add_ln304_fu_2777_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln305_fu_2788_p2;
wire   [8:0] add_ln305_fu_2794_p2;
reg    ap_enable_reg_pp5_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state142;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state150;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state158;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state166;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state174;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state182;
reg   [8:0] rgrad_assign_address0;
reg    rgrad_assign_ce0;
reg    rgrad_assign_we0;
reg   [5:0] second_rgrad_address0;
reg    second_rgrad_ce0;
reg    second_rgrad_we0;
reg   [31:0] second_rgrad_d0;
reg   [7:0] second_grad_address0;
reg    second_grad_ce0;
reg    second_grad_we0;
reg   [31:0] second_grad_d0;
reg   [12:0] rgrad_assign_1_address0;
reg    rgrad_assign_1_ce0;
reg    rgrad_assign_1_we0;
reg   [7:0] first_rgrad_address0;
reg    first_rgrad_ce0;
reg    first_rgrad_we0;
reg   [7:0] first_grad_address0;
reg    first_grad_ce0;
reg    first_grad_we0;
reg   [31:0] first_grad_d0;
reg   [16:0] first_wgrad_address0;
reg    first_wgrad_ce0;
reg    first_wgrad_we0;
reg   [9:0] third_conv_grad1_address0;
reg    third_conv_grad1_ce0;
reg    third_conv_grad1_we0;
wire   [31:0] third_conv_grad1_q0;
reg    third_conv_grad1_ce1;
wire   [31:0] third_conv_grad1_q1;
reg   [3:0] third_kernel_grad_address0;
reg    third_kernel_grad_ce0;
reg    third_kernel_grad_we0;
reg   [9:0] second_conv_grad1_address0;
reg    second_conv_grad1_ce0;
reg    second_conv_grad1_we0;
wire   [31:0] second_conv_grad1_q0;
reg    second_conv_grad1_ce1;
wire   [31:0] second_conv_grad1_q1;
reg   [3:0] third_kernel_overtur_address0;
reg    third_kernel_overtur_ce0;
reg    third_kernel_overtur_we0;
wire   [31:0] third_kernel_overtur_q0;
reg   [9:0] third_conv_grad_padd_address0;
reg    third_conv_grad_padd_ce0;
reg    third_conv_grad_padd_we0;
wire   [31:0] third_conv_grad_padd_q0;
reg   [3:0] second_kernel_grad_address0;
reg    second_kernel_grad_ce0;
reg    second_kernel_grad_we0;
reg   [9:0] first_conv_grad_address0;
reg    first_conv_grad_ce0;
reg    first_conv_grad_we0;
wire   [31:0] first_conv_grad_q0;
reg    first_conv_grad_ce1;
wire   [31:0] first_conv_grad_q1;
reg   [3:0] second_kernel_overtu_address0;
reg    second_kernel_overtu_ce0;
reg    second_kernel_overtu_we0;
wire   [31:0] second_kernel_overtu_q0;
reg   [9:0] second_conv_grad_pad_address0;
reg    second_conv_grad_pad_ce0;
reg    second_conv_grad_pad_we0;
wire   [31:0] second_conv_grad_pad_q0;
reg   [3:0] first_kernel_grad_address0;
reg    first_kernel_grad_ce0;
reg    first_kernel_grad_we0;
wire    grp_Conv2d_b4_fu_1510_ap_start;
wire    grp_Conv2d_b4_fu_1510_ap_done;
wire    grp_Conv2d_b4_fu_1510_ap_idle;
wire    grp_Conv2d_b4_fu_1510_ap_ready;
wire   [9:0] grp_Conv2d_b4_fu_1510_input_matrix_address0;
wire    grp_Conv2d_b4_fu_1510_input_matrix_ce0;
wire   [3:0] grp_Conv2d_b4_fu_1510_kernel_address0;
wire    grp_Conv2d_b4_fu_1510_kernel_ce0;
wire   [9:0] grp_Conv2d_b4_fu_1510_out_matrix_address0;
wire    grp_Conv2d_b4_fu_1510_out_matrix_ce0;
wire    grp_Conv2d_b4_fu_1510_out_matrix_we0;
wire   [31:0] grp_Conv2d_b4_fu_1510_out_matrix_d0;
wire    grp_Conv2d_b2_fu_1517_ap_start;
wire    grp_Conv2d_b2_fu_1517_ap_done;
wire    grp_Conv2d_b2_fu_1517_ap_idle;
wire    grp_Conv2d_b2_fu_1517_ap_ready;
wire   [9:0] grp_Conv2d_b2_fu_1517_input_matrix_address0;
wire    grp_Conv2d_b2_fu_1517_input_matrix_ce0;
wire   [3:0] grp_Conv2d_b2_fu_1517_kernel_address0;
wire    grp_Conv2d_b2_fu_1517_kernel_ce0;
wire   [9:0] grp_Conv2d_b2_fu_1517_out_matrix_address0;
wire    grp_Conv2d_b2_fu_1517_out_matrix_ce0;
wire    grp_Conv2d_b2_fu_1517_out_matrix_we0;
wire   [31:0] grp_Conv2d_b2_fu_1517_out_matrix_d0;
wire    grp_Conv2d_b5_fu_1524_ap_start;
wire    grp_Conv2d_b5_fu_1524_ap_idle;
wire   [9:0] grp_Conv2d_b5_fu_1524_input_matrix_address0;
wire    grp_Conv2d_b5_fu_1524_input_matrix_ce0;
wire   [9:0] grp_Conv2d_b5_fu_1524_input_matrix_address1;
wire    grp_Conv2d_b5_fu_1524_input_matrix_ce1;
wire   [9:0] grp_Conv2d_b5_fu_1524_kernel_address0;
wire    grp_Conv2d_b5_fu_1524_kernel_ce0;
wire   [9:0] grp_Conv2d_b5_fu_1524_kernel_address1;
wire    grp_Conv2d_b5_fu_1524_kernel_ce1;
wire   [3:0] grp_Conv2d_b5_fu_1524_out_matrix_address0;
wire    grp_Conv2d_b5_fu_1524_out_matrix_ce0;
wire    grp_Conv2d_b5_fu_1524_out_matrix_we0;
wire   [31:0] grp_Conv2d_b5_fu_1524_out_matrix_d0;
wire    grp_Conv2d_b1_fu_1532_ap_start;
wire    grp_Conv2d_b1_fu_1532_ap_done;
wire    grp_Conv2d_b1_fu_1532_ap_idle;
wire    grp_Conv2d_b1_fu_1532_ap_ready;
wire   [9:0] grp_Conv2d_b1_fu_1532_kernel_address0;
wire    grp_Conv2d_b1_fu_1532_kernel_ce0;
wire   [9:0] grp_Conv2d_b1_fu_1532_kernel_address1;
wire    grp_Conv2d_b1_fu_1532_kernel_ce1;
wire   [3:0] grp_Conv2d_b1_fu_1532_out_matrix_address0;
wire    grp_Conv2d_b1_fu_1532_out_matrix_ce0;
wire    grp_Conv2d_b1_fu_1532_out_matrix_we0;
wire   [31:0] grp_Conv2d_b1_fu_1532_out_matrix_d0;
wire   [9:0] grp_Conv2d_b1_fu_1532_sencond_conv1_address0;
wire    grp_Conv2d_b1_fu_1532_sencond_conv1_ce0;
wire   [9:0] grp_Conv2d_b1_fu_1532_sencond_conv1_address1;
wire    grp_Conv2d_b1_fu_1532_sencond_conv1_ce1;
wire    grp_Conv2d_b3_fu_1540_ap_start;
wire    grp_Conv2d_b3_fu_1540_ap_done;
wire    grp_Conv2d_b3_fu_1540_ap_idle;
wire    grp_Conv2d_b3_fu_1540_ap_ready;
wire   [9:0] grp_Conv2d_b3_fu_1540_kernel_address0;
wire    grp_Conv2d_b3_fu_1540_kernel_ce0;
wire   [9:0] grp_Conv2d_b3_fu_1540_kernel_address1;
wire    grp_Conv2d_b3_fu_1540_kernel_ce1;
wire   [3:0] grp_Conv2d_b3_fu_1540_out_matrix_address0;
wire    grp_Conv2d_b3_fu_1540_out_matrix_ce0;
wire    grp_Conv2d_b3_fu_1540_out_matrix_we0;
wire   [31:0] grp_Conv2d_b3_fu_1540_out_matrix_d0;
wire   [9:0] grp_Conv2d_b3_fu_1540_first_conv1_address0;
wire    grp_Conv2d_b3_fu_1540_first_conv1_ce0;
wire   [9:0] grp_Conv2d_b3_fu_1540_first_conv1_address1;
wire    grp_Conv2d_b3_fu_1540_first_conv1_ce1;
wire    grp_OverturnKernel_fu_1548_ap_start;
wire    grp_OverturnKernel_fu_1548_ap_done;
wire    grp_OverturnKernel_fu_1548_ap_idle;
wire    grp_OverturnKernel_fu_1548_ap_ready;
wire   [3:0] grp_OverturnKernel_fu_1548_input_matrix_address0;
wire    grp_OverturnKernel_fu_1548_input_matrix_ce0;
reg   [31:0] grp_OverturnKernel_fu_1548_input_matrix_q0;
wire   [3:0] grp_OverturnKernel_fu_1548_output_matrix_address0;
wire    grp_OverturnKernel_fu_1548_output_matrix_ce0;
wire    grp_OverturnKernel_fu_1548_output_matrix_we0;
wire   [31:0] grp_OverturnKernel_fu_1548_output_matrix_d0;
reg   [3:0] i_0_reg_1000;
wire    ap_CS_fsm_state7;
reg   [5:0] i_0_i_reg_1011;
reg   [3:0] j_0_i_reg_1023;
wire    ap_CS_fsm_state15;
reg   [5:0] i_0_i136_reg_1034;
reg   [31:0] empty_35_reg_1045;
wire    ap_CS_fsm_state26;
reg   [3:0] j_0_i137_reg_1057;
reg   [5:0] i_0_i143_reg_1068;
wire    ap_CS_fsm_state37;
reg   [7:0] i_0_i150_reg_1079;
reg   [12:0] phi_mul_reg_1090;
reg   [5:0] j_0_i152_reg_1102;
wire    ap_CS_fsm_state45;
reg   [7:0] i_0_i160_reg_1113;
reg   [12:0] phi_mul360_reg_1124;
reg   [31:0] storemerge_reg_1136;
reg   [5:0] j_0_i162_reg_1149;
reg   [7:0] i_0_i171_reg_1160;
wire    ap_CS_fsm_state66;
reg   [9:0] i_0_i178_reg_1171;
reg   [16:0] phi_mul362_reg_1182;
reg   [7:0] j_0_i180_reg_1194;
wire    ap_CS_fsm_state74;
reg   [9:0] i_0_i188_reg_1205;
reg   [16:0] phi_mul364_reg_1216;
reg   [31:0] storemerge376_reg_1228;
reg   [7:0] j_0_i190_reg_1241;
reg   [4:0] i_0_i199_reg_1252;
wire    ap_CS_fsm_state85;
reg    ap_block_state85_on_subcall_done;
wire   [0:0] icmp_ln208_fu_2323_p2;
reg   [4:0] j_0_i201_reg_1263;
reg   [4:0] i_0_i206_reg_1274;
wire    ap_CS_fsm_state90;
wire   [0:0] icmp_ln213_fu_2371_p2;
reg   [9:0] phi_mul366_reg_1285;
reg   [4:0] j_0_i208_reg_1297;
reg   [1:0] m_0_reg_1308;
reg   [1:0] n_0_reg_1319;
wire    ap_CS_fsm_state109;
reg   [9:0] m_1_reg_1330;
reg   [16:0] phi_mul368_reg_1341;
reg   [7:0] n_1_reg_1353;
wire    ap_CS_fsm_state120;
reg   [7:0] m_2_reg_1364;
reg   [14:0] phi_mul370_reg_1375;
reg   [12:0] phi_mul372_reg_1387;
reg   [5:0] n_2_reg_1399;
wire    ap_CS_fsm_state130;
wire   [0:0] icmp_ln290_fu_2561_p2;
reg   [5:0] m_3_reg_1410;
reg   [10:0] phi_mul374_reg_1421;
reg   [3:0] n_3_reg_1433;
wire    ap_CS_fsm_state141;
reg    grp_Conv2d_b4_fu_1510_ap_start_reg;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
reg    grp_Conv2d_b2_fu_1517_ap_start_reg;
wire    ap_CS_fsm_state88;
reg    grp_Conv2d_b5_fu_1524_ap_start_reg;
wire    ap_CS_fsm_state98;
reg    grp_Conv2d_b1_fu_1532_ap_start_reg;
reg    grp_Conv2d_b3_fu_1540_ap_start_reg;
wire    ap_CS_fsm_state89;
reg    grp_OverturnKernel_fu_1548_ap_start_reg;
wire   [63:0] zext_ln231_fu_1698_p1;
wire   [63:0] zext_ln150_fu_1812_p1;
wire   [63:0] zext_ln150_1_fu_1849_p1;
wire   [63:0] zext_ln150_2_fu_1868_p1;
wire   [63:0] zext_ln170_fu_1884_p1;
wire   [63:0] zext_ln172_fu_1935_p1;
wire   [63:0] zext_ln172_1_fu_1940_p1;
wire   [7:0] second_grad_addr_1_gep_fu_630_p3;
wire   [63:0] zext_ln157_fu_2020_p1;
wire   [63:0] zext_ln157_1_fu_2041_p1;
wire   [63:0] zext_ln157_2_fu_2052_p1;
wire   [63:0] zext_ln178_fu_2074_p1;
wire   [63:0] zext_ln180_fu_2101_p1;
wire   [63:0] zext_ln180_1_fu_2106_p1;
wire   [7:0] first_grad_addr_1_gep_fu_733_p3;
wire   [63:0] zext_ln164_fu_2186_p1;
wire   [63:0] zext_ln164_1_fu_2207_p1;
wire   [63:0] zext_ln164_2_fu_2218_p1;
wire   [63:0] zext_ln186_fu_2240_p1;
wire   [63:0] zext_ln188_fu_2267_p1;
wire   [63:0] zext_ln188_1_fu_2272_p1;
wire   [63:0] zext_ln209_fu_2344_p1;
wire   [63:0] zext_ln214_fu_2389_p1;
wire   [63:0] zext_ln280_1_fu_2453_p1;
wire  signed [63:0] sext_ln280_1_fu_2460_p1;
wire   [63:0] zext_ln287_1_fu_2530_p1;
wire   [63:0] zext_ln287_3_fu_2545_p1;
wire   [63:0] zext_ln292_fu_2595_p1;
wire   [63:0] zext_ln292_2_fu_2610_p1;
wire   [63:0] zext_ln297_1_fu_2684_p1;
wire   [63:0] zext_ln297_4_fu_2698_p1;
wire   [63:0] zext_ln300_fu_2715_p1;
wire   [63:0] zext_ln301_fu_2732_p1;
wire   [63:0] zext_ln302_fu_2749_p1;
wire   [63:0] zext_ln303_fu_2766_p1;
wire   [63:0] zext_ln304_fu_2783_p1;
wire   [63:0] zext_ln305_fu_2800_p1;
wire   [63:0] zext_ln229_fu_1704_p1;
wire   [63:0] zext_ln229_1_fu_1714_p1;
wire   [63:0] zext_ln229_2_fu_1724_p1;
wire   [63:0] zext_ln229_3_fu_1734_p1;
wire   [63:0] zext_ln229_4_fu_1744_p1;
wire   [63:0] zext_ln229_5_fu_1754_p1;
wire   [63:0] zext_ln229_6_fu_1764_p1;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp1_stage0_01001;
wire    ap_block_pp2_stage0_01001;
wire    ap_block_pp3_stage0_01001;
wire    ap_block_pp4_stage0_01001;
wire    ap_block_pp5_stage0_01001;
wire    ap_CS_fsm_state135;
wire   [31:0] grp_fu_1593_p1;
wire   [31:0] grp_fu_1567_p2;
wire   [31:0] grp_fu_1573_p2;
reg   [31:0] grp_fu_1556_p0;
reg   [31:0] grp_fu_1556_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state137;
reg   [31:0] grp_fu_1581_p0;
reg   [31:0] grp_fu_1581_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state65;
reg   [31:0] grp_fu_1598_p0;
reg   [31:0] grp_fu_1603_p0;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state60;
wire   [31:0] zext_ln230_fu_1774_p1;
wire   [6:0] zext_ln149_fu_1833_p1;
wire   [6:0] add_ln150_fu_1854_p2;
wire   [8:0] zext_ln150_3_fu_1859_p1;
wire   [6:0] zext_ln171_fu_1905_p1;
wire   [6:0] add_ln172_fu_1921_p2;
wire   [8:0] zext_ln172_2_fu_1926_p1;
wire   [8:0] add_ln172_1_fu_1930_p2;
wire   [31:0] bitcast_ln195_fu_1962_p1;
wire   [7:0] tmp_12_fu_1966_p4;
wire   [22:0] trunc_ln195_fu_1976_p1;
wire   [0:0] or_ln195_fu_1992_p2;
wire   [0:0] grp_fu_1603_p2;
wire   [12:0] zext_ln156_fu_2025_p1;
wire   [12:0] zext_ln179_fu_2079_p1;
wire   [12:0] add_ln180_fu_2095_p2;
wire   [31:0] bitcast_ln201_fu_2128_p1;
wire   [7:0] tmp_14_fu_2132_p4;
wire   [22:0] trunc_ln201_fu_2142_p1;
wire   [0:0] or_ln201_fu_2158_p2;
wire   [16:0] zext_ln163_fu_2191_p1;
wire   [16:0] zext_ln187_fu_2245_p1;
wire   [16:0] add_ln188_fu_2261_p2;
wire   [9:0] shl_ln3_fu_2289_p3;
wire   [6:0] shl_ln209_1_fu_2301_p3;
wire   [10:0] zext_ln209_1_fu_2297_p1;
wire   [10:0] zext_ln209_2_fu_2309_p1;
wire   [10:0] zext_ln208_fu_2319_p1;
wire   [10:0] add_ln209_fu_2335_p2;
wire  signed [31:0] sext_ln209_fu_2340_p1;
wire   [9:0] zext_ln213_fu_2367_p1;
wire   [9:0] add_ln214_fu_2383_p2;
wire   [3:0] shl_ln4_fu_2410_p3;
wire   [4:0] zext_ln280_fu_2418_p1;
wire   [4:0] zext_ln278_fu_2394_p1;
wire   [4:0] zext_ln279_fu_2428_p1;
wire  signed [31:0] sext_ln280_fu_2449_p1;
wire   [15:0] zext_ln286_fu_2500_p1;
wire   [15:0] add_ln287_1_fu_2516_p2;
wire   [18:0] zext_ln287_fu_2521_p1;
wire   [18:0] add_ln287_fu_2525_p2;
wire   [16:0] zext_ln287_2_fu_2535_p1;
wire   [14:0] zext_ln291_fu_2573_p1;
wire   [14:0] add_ln292_fu_2589_p2;
wire   [12:0] zext_ln292_1_fu_2600_p1;
wire   [8:0] tmp_16_fu_2632_p3;
wire   [6:0] tmp_17_fu_2644_p3;
wire   [9:0] zext_ln297_2_fu_2652_p1;
wire   [9:0] zext_ln297_fu_2640_p1;
wire   [10:0] zext_ln296_fu_2662_p1;
wire   [10:0] add_ln297_fu_2678_p2;
wire   [9:0] zext_ln297_3_fu_2689_p1;
wire   [9:0] add_ln297_2_fu_2693_p2;
reg   [1:0] grp_fu_1556_opcode;
reg   [176:0] ap_NS_fsm;
reg    ap_block_state88_on_subcall_done;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;

// power-on initialization
initial begin
#0 ap_CS_fsm = 177'd1;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 grp_Conv2d_b4_fu_1510_ap_start_reg = 1'b0;
#0 grp_Conv2d_b2_fu_1517_ap_start_reg = 1'b0;
#0 grp_Conv2d_b5_fu_1524_ap_start_reg = 1'b0;
#0 grp_Conv2d_b1_fu_1532_ap_start_reg = 1'b0;
#0 grp_Conv2d_b3_fu_1540_ap_start_reg = 1'b0;
#0 grp_OverturnKernel_fu_1548_ap_start_reg = 1'b0;
end

backward_out_grad #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
out_grad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_grad_address0),
    .ce0(out_grad_ce0),
    .we0(out_grad_we0),
    .d0(out_grad_d0),
    .q0(out_grad_q0)
);

backward_rgrad_asibs #(
    .DataWidth( 32 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
rgrad_assign_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rgrad_assign_address0),
    .ce0(rgrad_assign_ce0),
    .we0(rgrad_assign_we0),
    .d0(reg_1631),
    .q0(rgrad_assign_q0)
);

backward_second_rjbC #(
    .DataWidth( 32 ),
    .AddressRange( 45 ),
    .AddressWidth( 6 ))
second_rgrad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_rgrad_address0),
    .ce0(second_rgrad_ce0),
    .we0(second_rgrad_we0),
    .d0(second_rgrad_d0),
    .q0(second_rgrad_q0)
);

backward_second_gkbM #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
second_grad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_grad_address0),
    .ce0(second_grad_ce0),
    .we0(second_grad_we0),
    .d0(second_grad_d0),
    .q0(second_grad_q0)
);

backward_rgrad_aslbW #(
    .DataWidth( 32 ),
    .AddressRange( 8100 ),
    .AddressWidth( 13 ))
rgrad_assign_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rgrad_assign_1_address0),
    .ce0(rgrad_assign_1_ce0),
    .we0(rgrad_assign_1_we0),
    .d0(reg_1631),
    .q0(rgrad_assign_1_q0)
);

backward_second_gkbM #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
first_rgrad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_rgrad_address0),
    .ce0(first_rgrad_ce0),
    .we0(first_rgrad_we0),
    .d0(storemerge_reg_1136),
    .q0(first_rgrad_q0)
);

backward_second_gkbM #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
first_grad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_grad_address0),
    .ce0(first_grad_ce0),
    .we0(first_grad_we0),
    .d0(first_grad_d0),
    .q0(first_grad_q0)
);

backward_first_wgncg #(
    .DataWidth( 32 ),
    .AddressRange( 103680 ),
    .AddressWidth( 17 ))
first_wgrad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_wgrad_address0),
    .ce0(first_wgrad_ce0),
    .we0(first_wgrad_we0),
    .d0(reg_1631),
    .q0(first_wgrad_q0)
);

backward_third_coocq #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
third_conv_grad1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(third_conv_grad1_address0),
    .ce0(third_conv_grad1_ce0),
    .we0(third_conv_grad1_we0),
    .d0(storemerge376_reg_1228),
    .q0(third_conv_grad1_q0),
    .address1(grp_Conv2d_b1_fu_1532_kernel_address1),
    .ce1(third_conv_grad1_ce1),
    .q1(third_conv_grad1_q1)
);

backward_third_kepcA #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
third_kernel_grad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(third_kernel_grad_address0),
    .ce0(third_kernel_grad_ce0),
    .we0(third_kernel_grad_we0),
    .d0(grp_Conv2d_b1_fu_1532_out_matrix_d0),
    .q0(third_kernel_grad_q0)
);

backward_second_cqcK #(
    .DataWidth( 32 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
second_conv_grad1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_conv_grad1_address0),
    .ce0(second_conv_grad1_ce0),
    .we0(second_conv_grad1_we0),
    .d0(grp_Conv2d_b2_fu_1517_out_matrix_d0),
    .q0(second_conv_grad1_q0),
    .address1(grp_Conv2d_b3_fu_1540_kernel_address1),
    .ce1(second_conv_grad1_ce1),
    .q1(second_conv_grad1_q1)
);

backward_third_kepcA #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
third_kernel_overtur_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(third_kernel_overtur_address0),
    .ce0(third_kernel_overtur_ce0),
    .we0(third_kernel_overtur_we0),
    .d0(grp_OverturnKernel_fu_1548_output_matrix_d0),
    .q0(third_kernel_overtur_q0)
);

backward_third_cosc4 #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
third_conv_grad_padd_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(third_conv_grad_padd_address0),
    .ce0(third_conv_grad_padd_ce0),
    .we0(third_conv_grad_padd_we0),
    .d0(32'd0),
    .q0(third_conv_grad_padd_q0)
);

backward_third_kepcA #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
second_kernel_grad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_kernel_grad_address0),
    .ce0(second_kernel_grad_ce0),
    .we0(second_kernel_grad_we0),
    .d0(grp_Conv2d_b3_fu_1540_out_matrix_d0),
    .q0(second_kernel_grad_q0)
);

backward_first_coudo #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
first_conv_grad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_conv_grad_address0),
    .ce0(first_conv_grad_ce0),
    .we0(first_conv_grad_we0),
    .d0(grp_Conv2d_b4_fu_1510_out_matrix_d0),
    .q0(first_conv_grad_q0),
    .address1(grp_Conv2d_b5_fu_1524_kernel_address1),
    .ce1(first_conv_grad_ce1),
    .q1(first_conv_grad_q1)
);

backward_third_kepcA #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
second_kernel_overtu_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_kernel_overtu_address0),
    .ce0(second_kernel_overtu_ce0),
    .we0(second_kernel_overtu_we0),
    .d0(grp_OverturnKernel_fu_1548_output_matrix_d0),
    .q0(second_kernel_overtu_q0)
);

backward_second_cwdI #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
second_conv_grad_pad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(second_conv_grad_pad_address0),
    .ce0(second_conv_grad_pad_ce0),
    .we0(second_conv_grad_pad_we0),
    .d0(32'd0),
    .q0(second_conv_grad_pad_q0)
);

backward_third_kepcA #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
first_kernel_grad_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(first_kernel_grad_address0),
    .ce0(first_kernel_grad_ce0),
    .we0(first_kernel_grad_we0),
    .d0(grp_Conv2d_b5_fu_1524_out_matrix_d0),
    .q0(first_kernel_grad_q0)
);

Conv2d_b4 grp_Conv2d_b4_fu_1510(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_b4_fu_1510_ap_start),
    .ap_done(grp_Conv2d_b4_fu_1510_ap_done),
    .ap_idle(grp_Conv2d_b4_fu_1510_ap_idle),
    .ap_ready(grp_Conv2d_b4_fu_1510_ap_ready),
    .input_matrix_address0(grp_Conv2d_b4_fu_1510_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_b4_fu_1510_input_matrix_ce0),
    .input_matrix_q0(second_conv_grad_pad_q0),
    .kernel_address0(grp_Conv2d_b4_fu_1510_kernel_address0),
    .kernel_ce0(grp_Conv2d_b4_fu_1510_kernel_ce0),
    .kernel_q0(second_kernel_overtu_q0),
    .out_matrix_address0(grp_Conv2d_b4_fu_1510_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_b4_fu_1510_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_b4_fu_1510_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_b4_fu_1510_out_matrix_d0)
);

Conv2d_b2 grp_Conv2d_b2_fu_1517(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_b2_fu_1517_ap_start),
    .ap_done(grp_Conv2d_b2_fu_1517_ap_done),
    .ap_idle(grp_Conv2d_b2_fu_1517_ap_idle),
    .ap_ready(grp_Conv2d_b2_fu_1517_ap_ready),
    .input_matrix_address0(grp_Conv2d_b2_fu_1517_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_b2_fu_1517_input_matrix_ce0),
    .input_matrix_q0(third_conv_grad_padd_q0),
    .kernel_address0(grp_Conv2d_b2_fu_1517_kernel_address0),
    .kernel_ce0(grp_Conv2d_b2_fu_1517_kernel_ce0),
    .kernel_q0(third_kernel_overtur_q0),
    .out_matrix_address0(grp_Conv2d_b2_fu_1517_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_b2_fu_1517_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_b2_fu_1517_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_b2_fu_1517_out_matrix_d0)
);

Conv2d_b5 grp_Conv2d_b5_fu_1524(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_b5_fu_1524_ap_start),
    .ap_done(grp_Conv2d_b5_fu_1524_ap_done),
    .ap_idle(grp_Conv2d_b5_fu_1524_ap_idle),
    .ap_ready(grp_Conv2d_b5_fu_1524_ap_ready),
    .input_matrix_address0(grp_Conv2d_b5_fu_1524_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_b5_fu_1524_input_matrix_ce0),
    .input_matrix_q0(mnist_data_q0),
    .input_matrix_address1(grp_Conv2d_b5_fu_1524_input_matrix_address1),
    .input_matrix_ce1(grp_Conv2d_b5_fu_1524_input_matrix_ce1),
    .input_matrix_q1(mnist_data_q1),
    .kernel_address0(grp_Conv2d_b5_fu_1524_kernel_address0),
    .kernel_ce0(grp_Conv2d_b5_fu_1524_kernel_ce0),
    .kernel_q0(first_conv_grad_q0),
    .kernel_address1(grp_Conv2d_b5_fu_1524_kernel_address1),
    .kernel_ce1(grp_Conv2d_b5_fu_1524_kernel_ce1),
    .kernel_q1(first_conv_grad_q1),
    .out_matrix_address0(grp_Conv2d_b5_fu_1524_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_b5_fu_1524_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_b5_fu_1524_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_b5_fu_1524_out_matrix_d0)
);

Conv2d_b1 grp_Conv2d_b1_fu_1532(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_b1_fu_1532_ap_start),
    .ap_done(grp_Conv2d_b1_fu_1532_ap_done),
    .ap_idle(grp_Conv2d_b1_fu_1532_ap_idle),
    .ap_ready(grp_Conv2d_b1_fu_1532_ap_ready),
    .kernel_address0(grp_Conv2d_b1_fu_1532_kernel_address0),
    .kernel_ce0(grp_Conv2d_b1_fu_1532_kernel_ce0),
    .kernel_q0(third_conv_grad1_q0),
    .kernel_address1(grp_Conv2d_b1_fu_1532_kernel_address1),
    .kernel_ce1(grp_Conv2d_b1_fu_1532_kernel_ce1),
    .kernel_q1(third_conv_grad1_q1),
    .out_matrix_address0(grp_Conv2d_b1_fu_1532_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_b1_fu_1532_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_b1_fu_1532_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_b1_fu_1532_out_matrix_d0),
    .sencond_conv1_address0(grp_Conv2d_b1_fu_1532_sencond_conv1_address0),
    .sencond_conv1_ce0(grp_Conv2d_b1_fu_1532_sencond_conv1_ce0),
    .sencond_conv1_q0(sencond_conv1_q0),
    .sencond_conv1_address1(grp_Conv2d_b1_fu_1532_sencond_conv1_address1),
    .sencond_conv1_ce1(grp_Conv2d_b1_fu_1532_sencond_conv1_ce1),
    .sencond_conv1_q1(sencond_conv1_q1)
);

Conv2d_b3 grp_Conv2d_b3_fu_1540(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_b3_fu_1540_ap_start),
    .ap_done(grp_Conv2d_b3_fu_1540_ap_done),
    .ap_idle(grp_Conv2d_b3_fu_1540_ap_idle),
    .ap_ready(grp_Conv2d_b3_fu_1540_ap_ready),
    .kernel_address0(grp_Conv2d_b3_fu_1540_kernel_address0),
    .kernel_ce0(grp_Conv2d_b3_fu_1540_kernel_ce0),
    .kernel_q0(second_conv_grad1_q0),
    .kernel_address1(grp_Conv2d_b3_fu_1540_kernel_address1),
    .kernel_ce1(grp_Conv2d_b3_fu_1540_kernel_ce1),
    .kernel_q1(second_conv_grad1_q1),
    .out_matrix_address0(grp_Conv2d_b3_fu_1540_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_b3_fu_1540_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_b3_fu_1540_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_b3_fu_1540_out_matrix_d0),
    .first_conv1_address0(grp_Conv2d_b3_fu_1540_first_conv1_address0),
    .first_conv1_ce0(grp_Conv2d_b3_fu_1540_first_conv1_ce0),
    .first_conv1_q0(first_conv1_q0),
    .first_conv1_address1(grp_Conv2d_b3_fu_1540_first_conv1_address1),
    .first_conv1_ce1(grp_Conv2d_b3_fu_1540_first_conv1_ce1),
    .first_conv1_q1(first_conv1_q1)
);

OverturnKernel grp_OverturnKernel_fu_1548(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_OverturnKernel_fu_1548_ap_start),
    .ap_done(grp_OverturnKernel_fu_1548_ap_done),
    .ap_idle(grp_OverturnKernel_fu_1548_ap_idle),
    .ap_ready(grp_OverturnKernel_fu_1548_ap_ready),
    .input_matrix_address0(grp_OverturnKernel_fu_1548_input_matrix_address0),
    .input_matrix_ce0(grp_OverturnKernel_fu_1548_input_matrix_ce0),
    .input_matrix_q0(grp_OverturnKernel_fu_1548_input_matrix_q0),
    .output_matrix_address0(grp_OverturnKernel_fu_1548_output_matrix_address0),
    .output_matrix_ce0(grp_OverturnKernel_fu_1548_output_matrix_ce0),
    .output_matrix_we0(grp_OverturnKernel_fu_1548_output_matrix_we0),
    .output_matrix_d0(grp_OverturnKernel_fu_1548_output_matrix_d0)
);

forw_back_faddfsuyd2 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_faddfsuyd2_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1556_p0),
    .din1(grp_fu_1556_p1),
    .opcode(grp_fu_1556_opcode),
    .ce(1'b1),
    .dout(grp_fu_1556_p2)
);

forw_back_fsub_32zec #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fsub_32zec_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_kernel2_q0),
    .din1(tmp_2_reg_3348),
    .ce(1'b1),
    .dout(grp_fu_1567_p2)
);

forw_back_fsub_32zec #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fsub_32zec_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_kernel3_q0),
    .din1(tmp_4_reg_3353),
    .ce(1'b1),
    .dout(grp_fu_1573_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1581_p0),
    .din1(grp_fu_1581_p1),
    .ce(1'b1),
    .dout(grp_fu_1581_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv1_addr_read_reg_3270),
    .din1(second_kernel_grad_l_reg_3323),
    .ce(1'b1),
    .dout(grp_fu_1585_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv1_addr_read_reg_3270),
    .din1(third_kernel_grad_lo_reg_3328),
    .ce(1'b1),
    .dout(grp_fu_1589_p2)
);

forw_back_fptrunceOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
forw_back_fptrunceOg_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1651),
    .ce(1'b1),
    .dout(grp_fu_1593_p1)
);

forw_back_fpext_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
forw_back_fpext_3fYi_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1598_p0),
    .ce(1'b1),
    .dout(grp_fu_1598_p1)
);

forw_back_fcmp_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
forw_back_fcmp_32g8j_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1603_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_1603_p2)
);

forw_back_dmul_64hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dmul_64hbi_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1646),
    .din1(64'd4587366580439587226),
    .ce(1'b1),
    .dout(grp_fu_1610_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state142) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state142)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state142);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state150) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state150)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state150);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state158) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state158)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state158);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state166) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state166)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state166);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state174) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state174)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state174);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state182) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state182)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state182);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_b1_fu_1532_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln185_fu_2228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
            grp_Conv2d_b1_fu_1532_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_b1_fu_1532_ap_ready == 1'b1)) begin
            grp_Conv2d_b1_fu_1532_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_b2_fu_1517_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln207_fu_2277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
            grp_Conv2d_b2_fu_1517_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_b2_fu_1517_ap_ready == 1'b1)) begin
            grp_Conv2d_b2_fu_1517_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_b3_fu_1540_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state89)) begin
            grp_Conv2d_b3_fu_1540_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_b3_fu_1540_ap_ready == 1'b1)) begin
            grp_Conv2d_b3_fu_1540_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_b4_fu_1510_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state96)) begin
            grp_Conv2d_b4_fu_1510_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_b4_fu_1510_ap_ready == 1'b1)) begin
            grp_Conv2d_b4_fu_1510_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_b5_fu_1524_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state98)) begin
            grp_Conv2d_b5_fu_1524_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_b5_fu_1524_ap_ready == 1'b1)) begin
            grp_Conv2d_b5_fu_1524_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_OverturnKernel_fu_1548_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln207_fu_2277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86)) | ((icmp_ln185_fu_2228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75)))) begin
            grp_OverturnKernel_fu_1548_ap_start_reg <= 1'b1;
        end else if ((grp_OverturnKernel_fu_1548_ap_ready == 1'b1)) begin
            grp_OverturnKernel_fu_1548_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        empty_35_reg_1045 <= reg_1615;
    end else if (((icmp_ln169_fu_1872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        empty_35_reg_1045 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln171_fu_1909_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_0_i136_reg_1034 <= i_2_reg_2938;
    end else if (((icmp_ln148_fu_1800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_i136_reg_1034 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_0_i143_reg_1068 <= i_4_reg_2979;
    end else if (((icmp_ln169_fu_1872_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_0_i143_reg_1068 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_2029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        i_0_i150_reg_1079 <= i_3_reg_3033;
    end else if (((icmp_ln194_fu_1945_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        i_0_i150_reg_1079 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_fu_2083_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        i_0_i160_reg_1113 <= i_5_reg_3074;
    end else if (((icmp_ln155_fu_2008_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        i_0_i160_reg_1113 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        i_0_i171_reg_1160 <= i_7_reg_3105;
    end else if (((icmp_ln177_fu_2062_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        i_0_i171_reg_1160 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln163_fu_2195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
        i_0_i178_reg_1171 <= i_6_reg_3159;
    end else if (((icmp_ln200_fu_2111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        i_0_i178_reg_1171 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln187_fu_2249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        i_0_i188_reg_1205 <= i_8_reg_3200;
    end else if (((icmp_ln162_fu_2174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        i_0_i188_reg_1205 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln208_fu_2323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        i_0_i199_reg_1252 <= i_9_reg_3231;
    end else if (((1'b1 == ap_CS_fsm_state85) & (1'b0 == ap_block_state85_on_subcall_done))) begin
        i_0_i199_reg_1252 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_fu_2371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state92))) begin
        i_0_i206_reg_1274 <= i_10_reg_3257;
    end else if (((1'b1 == ap_CS_fsm_state90) & (grp_Conv2d_b3_fu_1540_ap_done == 1'b1))) begin
        i_0_i206_reg_1274 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln149_fu_1837_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_0_i_reg_1011 <= i_reg_2892;
    end else if (((icmp_ln230_fu_1778_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_i_reg_1011 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_1000 <= i_1_reg_2870;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_1000 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        j_0_i137_reg_1057 <= j_13_reg_2961;
    end else if (((icmp_ln169_fu_1872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        j_0_i137_reg_1057 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        j_0_i152_reg_1102 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        j_0_i152_reg_1102 <= j_14_reg_3051;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        j_0_i162_reg_1149 <= j_15_reg_3087;
    end else if (((icmp_ln177_fu_2062_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        j_0_i162_reg_1149 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        j_0_i180_reg_1194 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        j_0_i180_reg_1194 <= j_16_reg_3177;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        j_0_i190_reg_1241 <= j_17_reg_3213;
    end else if (((icmp_ln185_fu_2228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        j_0_i190_reg_1241 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln207_fu_2277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        j_0_i201_reg_1263 <= 5'd0;
    end else if (((icmp_ln208_fu_2323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
        j_0_i201_reg_1263 <= j_18_fu_2329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln212_fu_2355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state91) & (1'b0 == ap_block_state91_io))) begin
        j_0_i208_reg_1297 <= 5'd0;
    end else if (((icmp_ln213_fu_2371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state92))) begin
        j_0_i208_reg_1297 <= j_19_fu_2377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_i_reg_1023 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_i_reg_1023 <= j_reg_2920;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_2432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        m_0_reg_1308 <= m_reg_3280;
    end else if ((~((m_axi_conv1_RVALID == 1'b0) | (grp_Conv2d_b5_fu_1524_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state99))) begin
        m_0_reg_1308 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln278_fu_2398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state100))) begin
        m_1_reg_1330 <= 10'd0;
    end else if (((icmp_ln286_fu_2504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state111))) begin
        m_1_reg_1330 <= m_4_reg_3366;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_2472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
        m_2_reg_1364 <= 8'd0;
    end else if (((icmp_ln291_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
        m_2_reg_1364 <= m_5_reg_3422;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln290_fu_2561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state121))) begin
        m_3_reg_1410 <= 6'd0;
    end else if (((icmp_ln296_fu_2666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state132))) begin
        m_3_reg_1410 <= m_6_reg_3465;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln278_fu_2398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state100))) begin
        n_0_reg_1319 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        n_0_reg_1319 <= n_reg_3293;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_2472_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state110))) begin
        n_1_reg_1353 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        n_1_reg_1353 <= n_4_reg_3384;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln290_fu_2561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state121))) begin
        n_2_reg_1399 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        n_2_reg_1399 <= n_5_reg_3430;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln295_fu_2620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
        n_3_reg_1433 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state141)) begin
        n_3_reg_1433 <= n_6_reg_3478;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
        phi_ln300_reg_1444 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln300_fu_2703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        phi_ln300_reg_1444 <= add_ln300_fu_2709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149))) begin
        phi_ln301_reg_1455 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln301_fu_2720_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        phi_ln301_reg_1455 <= add_ln301_fu_2726_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157))) begin
        phi_ln302_reg_1466 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln302_fu_2737_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        phi_ln302_reg_1466 <= add_ln302_fu_2743_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165))) begin
        phi_ln303_reg_1477 <= 17'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln303_fu_2754_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        phi_ln303_reg_1477 <= add_ln303_fu_2760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173))) begin
        phi_ln304_reg_1488 <= 13'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln304_fu_2771_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        phi_ln304_reg_1488 <= add_ln304_fu_2777_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181))) begin
        phi_ln305_reg_1499 <= 9'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln305_fu_2788_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        phi_ln305_reg_1499 <= add_ln305_fu_2794_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_fu_2083_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        phi_mul360_reg_1124 <= add_ln180_1_reg_3066;
    end else if (((icmp_ln155_fu_2008_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        phi_mul360_reg_1124 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln163_fu_2195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
        phi_mul362_reg_1182 <= add_ln164_1_reg_3151;
    end else if (((icmp_ln200_fu_2111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        phi_mul362_reg_1182 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln187_fu_2249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        phi_mul364_reg_1216 <= add_ln188_1_reg_3192;
    end else if (((icmp_ln162_fu_2174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        phi_mul364_reg_1216 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_fu_2371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state92))) begin
        phi_mul366_reg_1285 <= add_ln214_1_reg_3249;
    end else if (((1'b1 == ap_CS_fsm_state90) & (grp_Conv2d_b3_fu_1540_ap_done == 1'b1))) begin
        phi_mul366_reg_1285 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln278_fu_2398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state100))) begin
        phi_mul368_reg_1341 <= 17'd0;
    end else if (((icmp_ln286_fu_2504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state111))) begin
        phi_mul368_reg_1341 <= add_ln285_reg_3358;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_2472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
        phi_mul370_reg_1375 <= 15'd0;
    end else if (((icmp_ln291_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
        phi_mul370_reg_1375 <= add_ln292_3_reg_3414;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_2472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
        phi_mul372_reg_1387 <= 13'd0;
    end else if (((icmp_ln291_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
        phi_mul372_reg_1387 <= add_ln292_2_reg_3409;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln290_fu_2561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state121))) begin
        phi_mul374_reg_1421 <= 11'd0;
    end else if (((icmp_ln296_fu_2666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state132))) begin
        phi_mul374_reg_1421 <= add_ln297_3_reg_3456;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_2029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        phi_mul_reg_1090 <= add_ln157_1_reg_3025;
    end else if (((icmp_ln194_fu_1945_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        phi_mul_reg_1090 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        storemerge376_reg_1228 <= grp_fu_1556_p2;
    end else if (((icmp_ln185_fu_2228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        storemerge376_reg_1228 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        storemerge_reg_1136 <= grp_fu_1556_p2;
    end else if (((icmp_ln177_fu_2062_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        storemerge_reg_1136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln149_fu_1837_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln150_1_reg_2930 <= add_ln150_1_fu_1863_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        add_ln157_1_reg_3025 <= add_ln157_1_fu_2002_p2;
        i_3_reg_3033 <= i_3_fu_2014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_2029_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        add_ln157_reg_3061 <= add_ln157_fu_2046_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        add_ln164_1_reg_3151 <= add_ln164_1_fu_2168_p2;
        i_6_reg_3159 <= i_6_fu_2180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln163_fu_2195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        add_ln164_reg_3187 <= add_ln164_fu_2212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_ln180_1_reg_3066 <= add_ln180_1_fu_2056_p2;
        i_5_reg_3074 <= i_5_fu_2068_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        add_ln188_1_reg_3192 <= add_ln188_1_fu_2222_p2;
        i_8_reg_3200 <= i_8_fu_2234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state91) & (1'b0 == ap_block_state91_io))) begin
        add_ln214_1_reg_3249 <= add_ln214_1_fu_2349_p2;
        i_10_reg_3257 <= i_10_fu_2361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_2432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state101))) begin
        add_ln280_reg_3298 <= add_ln280_fu_2444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        add_ln285_reg_3358 <= add_ln285_fu_2466_p2;
        m_4_reg_3366 <= m_4_fu_2478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln286_fu_2504_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state111))) begin
        add_ln287_2_reg_3394 <= add_ln287_2_fu_2539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_fu_2577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state122))) begin
        add_ln292_1_reg_3440 <= add_ln292_1_fu_2604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        add_ln292_2_reg_3409 <= add_ln292_2_fu_2549_p2;
        add_ln292_3_reg_3414 <= add_ln292_3_fu_2555_p2;
        m_5_reg_3422 <= m_5_fu_2567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln295_fu_2620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
        add_ln297_1_reg_3470[9 : 1] <= add_ln297_1_fu_2656_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
        add_ln297_3_reg_3456 <= add_ln297_3_fu_2614_p2;
        m_6_reg_3465 <= m_6_fu_2626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        and_ln195_reg_3016 <= and_ln195_fu_1996_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        and_ln201_reg_3142 <= and_ln201_fu_2162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv1_addr_1_reg_2831[29 : 0] <= zext_ln229_1_fu_1714_p1[29 : 0];
        conv1_addr_2_reg_2837[29 : 0] <= zext_ln229_2_fu_1724_p1[29 : 0];
        conv1_addr_3_reg_2843[29 : 0] <= zext_ln229_3_fu_1734_p1[29 : 0];
        conv1_addr_4_reg_2849[29 : 0] <= zext_ln229_4_fu_1744_p1[29 : 0];
        conv1_addr_5_reg_2855[29 : 0] <= zext_ln229_5_fu_1754_p1[29 : 0];
        conv1_addr_6_reg_2861[29 : 0] <= zext_ln229_6_fu_1764_p1[29 : 0];
        conv1_addr_reg_2825[29 : 0] <= zext_ln229_fu_1704_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_conv1_RVALID == 1'b0) | (grp_Conv2d_b5_fu_1524_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state99))) begin
        conv1_addr_read_reg_3270 <= m_axi_conv1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        conv_kernel1_addr_reg_3333 <= sext_ln280_1_fu_2460_p1;
        conv_kernel2_addr_reg_3338 <= sext_ln280_1_fu_2460_p1;
        conv_kernel3_addr_reg_3343 <= sext_ln280_1_fu_2460_p1;
        tmp_2_reg_3348 <= grp_fu_1585_p2;
        tmp_4_reg_3353 <= grp_fu_1589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        fc_hidden_layer1_add_2_reg_3404 <= zext_ln287_3_fu_2545_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        fc_hidden_layer2_add_2_reg_3450 <= zext_ln292_2_fu_2610_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln296_fu_2666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state132))) begin
        fc_hidden_layer3_add_2_reg_3488 <= zext_ln297_4_fu_2698_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        first_kernel_grad_lo_reg_3318 <= first_kernel_grad_q0;
        second_kernel_grad_l_reg_3323 <= second_kernel_grad_q0;
        third_kernel_grad_lo_reg_3328 <= third_kernel_grad_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        first_relu_0_load_reg_3043 <= first_relu_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_2062_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        first_rgrad_addr_reg_3079 <= zext_ln178_fu_2074_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        first_wgrad_load_reg_3399 <= first_wgrad_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        flatten_conv_0_load_reg_3169 <= flatten_conv_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_2870 <= i_1_fu_1784_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_2_reg_2938 <= i_2_fu_1878_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_4_reg_2979 <= i_4_fu_1951_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_7_reg_3105 <= i_7_fu_2117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        i_9_reg_3231 <= i_9_fu_2283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_2892 <= i_fu_1806_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        icmp_ln195_1_reg_3006 <= icmp_ln195_1_fu_1986_p2;
        icmp_ln195_reg_3001 <= icmp_ln195_fu_1980_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        icmp_ln201_1_reg_3132 <= icmp_ln201_1_fu_2152_p2;
        icmp_ln201_reg_3127 <= icmp_ln201_fu_2146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln230_fu_1778_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln231_reg_2875 <= icmp_ln231_fu_1790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln300_reg_3498 <= icmp_ln300_fu_2703_p2;
        icmp_ln300_reg_3498_pp0_iter1_reg <= icmp_ln300_reg_3498;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln301_reg_3512 <= icmp_ln301_fu_2720_p2;
        icmp_ln301_reg_3512_pp1_iter1_reg <= icmp_ln301_reg_3512;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln302_reg_3526 <= icmp_ln302_fu_2737_p2;
        icmp_ln302_reg_3526_pp2_iter1_reg <= icmp_ln302_reg_3526;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln303_reg_3540 <= icmp_ln303_fu_2754_p2;
        icmp_ln303_reg_3540_pp3_iter1_reg <= icmp_ln303_reg_3540;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln304_reg_3554 <= icmp_ln304_fu_2771_p2;
        icmp_ln304_reg_3554_pp4_iter1_reg <= icmp_ln304_reg_3554;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln305_reg_3568 <= icmp_ln305_fu_2788_p2;
        icmp_ln305_reg_3568_pp5_iter1_reg <= icmp_ln305_reg_3568;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_13_reg_2961 <= j_13_fu_1915_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        j_14_reg_3051 <= j_14_fu_2035_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        j_15_reg_3087 <= j_15_fu_2089_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        j_16_reg_3177 <= j_16_fu_2201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        j_17_reg_3213 <= j_17_fu_2255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_2920 <= j_fu_1843_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        m_reg_3280 <= m_fu_2404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        n_4_reg_3384 <= n_4_fu_2510_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        n_5_reg_3430 <= n_5_fu_2583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        n_6_reg_3478 <= n_6_fu_2672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        n_reg_3293 <= n_fu_2438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_grad_addr_reg_2815 <= zext_ln231_fu_1698_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_1615 <= grp_fu_1556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_1626 <= out_grad_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_1631 <= grp_fu_1581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state18) | ((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln305_reg_3568 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        reg_1639 <= fc_hidden_layer3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_1646 <= grp_fu_1598_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_1651 <= grp_fu_1610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_1656 <= second_grad_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state48) | ((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln304_reg_3554 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        reg_1661 <= fc_hidden_layer2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state70))) begin
        reg_1668 <= first_grad_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state115) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln303_reg_3540 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        reg_1673 <= fc_hidden_layer1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state106) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln300_reg_3498 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_1680 <= conv_kernel1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state106) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln301_reg_3512 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        reg_1686 <= conv_kernel2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state106) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln302_reg_3526 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reg_1692 <= conv_kernel3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        rgrad_assign_1_load_reg_3445 <= rgrad_assign_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        rgrad_assign_load_reg_3493 <= rgrad_assign_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        second_relu_0_load_reg_2912 <= second_relu_0_q0;
        shl_ln150_1_reg_2907[6 : 1] <= shl_ln150_1_fu_1825_p3[6 : 1];
        shl_ln_reg_2902[8 : 3] <= shl_ln_fu_1817_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln169_fu_1872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        second_rgrad_addr_reg_2943 <= zext_ln170_fu_1884_p1;
        shl_ln172_1_reg_2953[6 : 1] <= shl_ln172_1_fu_1897_p3[6 : 1];
        shl_ln2_reg_2948[8 : 3] <= shl_ln2_fu_1889_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln285_fu_2472_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state110))) begin
        shl_ln287_1_reg_3376[15 : 6] <= shl_ln287_1_fu_2492_p3[15 : 6];
        shl_ln5_reg_3371[18 : 9] <= shl_ln5_fu_2484_p3[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln207_fu_2277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        sub_ln209_reg_3236[10 : 2] <= sub_ln209_fu_2313_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln278_fu_2398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state100))) begin
        sub_ln280_reg_3285 <= sub_ln280_fu_2422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_2228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        third_conv_grad1_add_reg_3205 <= zext_ln186_fu_2240_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln194_fu_1945_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        zext_ln195_reg_2984[5 : 0] <= zext_ln195_fu_1957_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln200_fu_2111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
        zext_ln201_reg_3110[7 : 0] <= zext_ln201_fu_2123_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln230_fu_1778_p2 == 1'd0) & (icmp_ln231_fu_1790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln232_reg_2879[3 : 0] <= zext_ln232_fu_1795_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln300_fu_2703_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state142 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state142 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln301_fu_2720_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state150 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state150 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln302_fu_2737_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state158 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state158 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln303_fu_2754_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state166 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state166 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln304_fu_2771_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state174 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state174 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln305_fu_2788_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state182 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state182 = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_conv1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state189)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_conv1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state189))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_fu_2355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state91))) begin
        conv1_blk_n_AR = m_axi_conv1_ARREADY;
    end else begin
        conv1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state181) | ((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131)))) begin
        conv1_blk_n_AW = m_axi_conv1_AWREADY;
    end else begin
        conv1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state189) | (1'b1 == ap_CS_fsm_state181))) begin
        conv1_blk_n_B = m_axi_conv1_BVALID;
    end else begin
        conv1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        conv1_blk_n_R = m_axi_conv1_RVALID;
    end else begin
        conv1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln300_reg_3498_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln301_reg_3512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln302_reg_3526_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln303_reg_3540_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (icmp_ln304_reg_3554_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((icmp_ln305_reg_3568_pp5_iter1_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
        conv1_blk_n_W = m_axi_conv1_WREADY;
    end else begin
        conv1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_kernel1_address0 = zext_ln300_fu_2715_p1;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        conv_kernel1_address0 = conv_kernel1_addr_reg_3333;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv_kernel1_address0 = sext_ln280_1_fu_2460_p1;
    end else begin
        conv_kernel1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state109) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        conv_kernel1_ce0 = 1'b1;
    end else begin
        conv_kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        conv_kernel1_we0 = 1'b1;
    end else begin
        conv_kernel1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        conv_kernel2_address0 = zext_ln301_fu_2732_p1;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        conv_kernel2_address0 = conv_kernel2_addr_reg_3338;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv_kernel2_address0 = sext_ln280_1_fu_2460_p1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        conv_kernel2_address0 = grp_OverturnKernel_fu_1548_input_matrix_address0;
    end else begin
        conv_kernel2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state109) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        conv_kernel2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        conv_kernel2_ce0 = grp_OverturnKernel_fu_1548_input_matrix_ce0;
    end else begin
        conv_kernel2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        conv_kernel2_we0 = 1'b1;
    end else begin
        conv_kernel2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        conv_kernel3_address0 = zext_ln302_fu_2749_p1;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        conv_kernel3_address0 = conv_kernel3_addr_reg_3343;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv_kernel3_address0 = sext_ln280_1_fu_2460_p1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        conv_kernel3_address0 = grp_OverturnKernel_fu_1548_input_matrix_address0;
    end else begin
        conv_kernel3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state109) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        conv_kernel3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        conv_kernel3_ce0 = grp_OverturnKernel_fu_1548_input_matrix_ce0;
    end else begin
        conv_kernel3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        conv_kernel3_we0 = 1'b1;
    end else begin
        conv_kernel3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        fc_hidden_layer1_address0 = zext_ln303_fu_2766_p1;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        fc_hidden_layer1_address0 = fc_hidden_layer1_add_2_reg_3404;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        fc_hidden_layer1_address0 = zext_ln287_3_fu_2545_p1;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        fc_hidden_layer1_address0 = zext_ln188_fu_2267_p1;
    end else begin
        fc_hidden_layer1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state76) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        fc_hidden_layer1_ce0 = 1'b1;
    end else begin
        fc_hidden_layer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        fc_hidden_layer1_we0 = 1'b1;
    end else begin
        fc_hidden_layer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        fc_hidden_layer2_address0 = zext_ln304_fu_2783_p1;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        fc_hidden_layer2_address0 = zext_ln292_2_fu_2610_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        fc_hidden_layer2_address0 = zext_ln180_fu_2101_p1;
    end else begin
        fc_hidden_layer2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state47) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        fc_hidden_layer2_ce0 = 1'b1;
    end else begin
        fc_hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        fc_hidden_layer2_ce1 = 1'b1;
    end else begin
        fc_hidden_layer2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        fc_hidden_layer2_we1 = 1'b1;
    end else begin
        fc_hidden_layer2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        fc_hidden_layer3_address0 = zext_ln305_fu_2800_p1;
    end else if (((1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state141))) begin
        fc_hidden_layer3_address0 = fc_hidden_layer3_add_2_reg_3488;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        fc_hidden_layer3_address0 = zext_ln172_fu_1935_p1;
    end else begin
        fc_hidden_layer3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state141) | ((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
        fc_hidden_layer3_ce0 = 1'b1;
    end else begin
        fc_hidden_layer3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        fc_hidden_layer3_we0 = 1'b1;
    end else begin
        fc_hidden_layer3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        first_conv_grad_address0 = grp_Conv2d_b5_fu_1524_kernel_address0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        first_conv_grad_address0 = grp_Conv2d_b4_fu_1510_out_matrix_address0;
    end else begin
        first_conv_grad_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        first_conv_grad_ce0 = grp_Conv2d_b5_fu_1524_kernel_ce0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        first_conv_grad_ce0 = grp_Conv2d_b4_fu_1510_out_matrix_ce0;
    end else begin
        first_conv_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        first_conv_grad_ce1 = grp_Conv2d_b5_fu_1524_kernel_ce1;
    end else begin
        first_conv_grad_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        first_conv_grad_we0 = grp_Conv2d_b4_fu_1510_out_matrix_we0;
    end else begin
        first_conv_grad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        first_fc_0_ce0 = 1'b1;
    end else begin
        first_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        first_grad_address0 = zext_ln188_1_fu_2272_p1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        first_grad_address0 = zext_ln164_1_fu_2207_p1;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        first_grad_address0 = first_grad_addr_1_gep_fu_733_p3;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        first_grad_address0 = zext_ln201_reg_3110;
    end else begin
        first_grad_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state58))) begin
        first_grad_ce0 = 1'b1;
    end else begin
        first_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        first_grad_d0 = grp_fu_1593_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        first_grad_d0 = first_rgrad_q0;
    end else begin
        first_grad_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln201_reg_3142) & (1'b1 == ap_CS_fsm_state66)) | ((1'd1 == and_ln201_fu_2162_p2) & (1'b1 == ap_CS_fsm_state58)))) begin
        first_grad_we0 = 1'b1;
    end else begin
        first_grad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        first_kernel_grad_address0 = zext_ln280_1_fu_2453_p1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        first_kernel_grad_address0 = grp_Conv2d_b5_fu_1524_out_matrix_address0;
    end else begin
        first_kernel_grad_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        first_kernel_grad_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        first_kernel_grad_ce0 = grp_Conv2d_b5_fu_1524_out_matrix_ce0;
    end else begin
        first_kernel_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        first_kernel_grad_we0 = grp_Conv2d_b5_fu_1524_out_matrix_we0;
    end else begin
        first_kernel_grad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        first_relu_0_ce0 = 1'b1;
    end else begin
        first_relu_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        first_rgrad_address0 = zext_ln201_reg_3110;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        first_rgrad_address0 = first_rgrad_addr_reg_3079;
    end else begin
        first_rgrad_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state47))) begin
        first_rgrad_ce0 = 1'b1;
    end else begin
        first_rgrad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        first_rgrad_we0 = 1'b1;
    end else begin
        first_rgrad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        first_wgrad_address0 = zext_ln287_1_fu_2530_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        first_wgrad_address0 = zext_ln164_2_fu_2218_p1;
    end else begin
        first_wgrad_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state111))) begin
        first_wgrad_ce0 = 1'b1;
    end else begin
        first_wgrad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        first_wgrad_we0 = 1'b1;
    end else begin
        first_wgrad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        flatten_conv_0_ce0 = 1'b1;
    end else begin
        flatten_conv_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_OverturnKernel_fu_1548_input_matrix_q0 = conv_kernel2_q0;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_OverturnKernel_fu_1548_input_matrix_q0 = conv_kernel3_q0;
    end else begin
        grp_OverturnKernel_fu_1548_input_matrix_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state116))) begin
        grp_fu_1556_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_1556_opcode = 2'd0;
    end else begin
        grp_fu_1556_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_fu_1556_p0 = reg_1639;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        grp_fu_1556_p0 = fc_hidden_layer2_q0;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_1556_p0 = reg_1673;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_1556_p0 = conv_kernel1_q0;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_1556_p0 = storemerge376_reg_1228;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_1556_p0 = storemerge_reg_1136;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_1556_p0 = empty_35_reg_1045;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_1556_p0 = result_q0;
    end else begin
        grp_fu_1556_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_1556_p1 = reg_1631;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_1556_p1 = 32'd3212836864;
    end else begin
        grp_fu_1556_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state103))) begin
        grp_fu_1581_p0 = conv1_addr_read_reg_3270;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_1581_p0 = reg_1673;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_1581_p0 = flatten_conv_0_load_reg_3169;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_1581_p0 = reg_1661;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_1581_p0 = first_relu_0_load_reg_3043;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_1581_p0 = reg_1639;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_1581_p0 = second_relu_0_load_reg_2912;
    end else begin
        grp_fu_1581_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_fu_1581_p1 = rgrad_assign_load_reg_3493;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        grp_fu_1581_p1 = rgrad_assign_1_load_reg_3445;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_fu_1581_p1 = first_wgrad_load_reg_3399;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_1581_p1 = first_kernel_grad_lo_reg_3318;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state71))) begin
        grp_fu_1581_p1 = reg_1668;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_1581_p1 = reg_1656;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_1581_p1 = reg_1626;
    end else begin
        grp_fu_1581_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_1598_p0 = first_rgrad_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_1598_p0 = second_rgrad_q0;
    end else begin
        grp_fu_1598_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_1603_p0 = first_fc_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_1603_p0 = second_fc_0_q0;
    end else begin
        grp_fu_1603_p0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln212_fu_2355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state91) & (1'b0 == ap_block_state91_io))) begin
        m_axi_conv1_ARVALID = 1'b1;
    end else begin
        m_axi_conv1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181))) begin
        m_axi_conv1_AWADDR = conv1_addr_1_reg_2831;
    end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173))) begin
        m_axi_conv1_AWADDR = conv1_addr_2_reg_2837;
    end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165))) begin
        m_axi_conv1_AWADDR = conv1_addr_3_reg_2843;
    end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157))) begin
        m_axi_conv1_AWADDR = conv1_addr_4_reg_2849;
    end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149))) begin
        m_axi_conv1_AWADDR = conv1_addr_5_reg_2855;
    end else if (((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
        m_axi_conv1_AWADDR = conv1_addr_6_reg_2861;
    end else begin
        m_axi_conv1_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181))) begin
        m_axi_conv1_AWLEN = 32'd450;
    end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173))) begin
        m_axi_conv1_AWLEN = 32'd8100;
    end else if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165))) begin
        m_axi_conv1_AWLEN = 32'd103680;
    end else if ((((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157)))) begin
        m_axi_conv1_AWLEN = 32'd9;
    end else begin
        m_axi_conv1_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181)))) begin
        m_axi_conv1_AWVALID = 1'b1;
    end else begin
        m_axi_conv1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173)) | ((m_axi_conv1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state189)) | (~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181)))) begin
        m_axi_conv1_BREADY = 1'b1;
    end else begin
        m_axi_conv1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_conv1_RVALID == 1'b0) | (grp_Conv2d_b5_fu_1524_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state99))) begin
        m_axi_conv1_RREADY = 1'b1;
    end else begin
        m_axi_conv1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln305_reg_3568_pp5_iter1_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_01001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        m_axi_conv1_WDATA = reg_1639;
    end else if (((icmp_ln304_reg_3554_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_01001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        m_axi_conv1_WDATA = reg_1661;
    end else if (((icmp_ln303_reg_3540_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        m_axi_conv1_WDATA = reg_1673;
    end else if (((icmp_ln302_reg_3526_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        m_axi_conv1_WDATA = reg_1692;
    end else if (((icmp_ln301_reg_3512_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        m_axi_conv1_WDATA = reg_1686;
    end else if (((icmp_ln300_reg_3498_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_conv1_WDATA = reg_1680;
    end else begin
        m_axi_conv1_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln300_reg_3498_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln301_reg_3512_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln302_reg_3526_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln303_reg_3540_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln304_reg_3554_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln305_reg_3568_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
        m_axi_conv1_WVALID = 1'b1;
    end else begin
        m_axi_conv1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_grad_address0 = zext_ln172_1_fu_1940_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_grad_address0 = zext_ln150_1_fu_1849_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        out_grad_address0 = zext_ln232_reg_2879;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_grad_address0 = out_grad_addr_reg_2815;
    end else begin
        out_grad_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        out_grad_ce0 = 1'b1;
    end else begin
        out_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_grad_d0 = result_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_grad_d0 = reg_1615;
    end else begin
        out_grad_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln230_fu_1778_p2 == 1'd0) & (icmp_ln231_fu_1790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln231_reg_2875 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        out_grad_we0 = 1'b1;
    end else begin
        out_grad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_address0 = zext_ln232_fu_1795_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        result_address0 = zext_ln231_fu_1698_p1;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        rgrad_assign_1_address0 = zext_ln292_fu_2595_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        rgrad_assign_1_address0 = zext_ln157_2_fu_2052_p1;
    end else begin
        rgrad_assign_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state122))) begin
        rgrad_assign_1_ce0 = 1'b1;
    end else begin
        rgrad_assign_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        rgrad_assign_1_we0 = 1'b1;
    end else begin
        rgrad_assign_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        rgrad_assign_address0 = zext_ln297_1_fu_2684_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        rgrad_assign_address0 = zext_ln150_2_fu_1868_p1;
    end else begin
        rgrad_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state132))) begin
        rgrad_assign_ce0 = 1'b1;
    end else begin
        rgrad_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        rgrad_assign_we0 = 1'b1;
    end else begin
        rgrad_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        second_conv_grad1_address0 = grp_Conv2d_b3_fu_1540_kernel_address0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        second_conv_grad1_address0 = grp_Conv2d_b2_fu_1517_out_matrix_address0;
    end else begin
        second_conv_grad1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        second_conv_grad1_ce0 = grp_Conv2d_b3_fu_1540_kernel_ce0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        second_conv_grad1_ce0 = grp_Conv2d_b2_fu_1517_out_matrix_ce0;
    end else begin
        second_conv_grad1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        second_conv_grad1_ce1 = grp_Conv2d_b3_fu_1540_kernel_ce1;
    end else begin
        second_conv_grad1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        second_conv_grad1_we0 = grp_Conv2d_b2_fu_1517_out_matrix_we0;
    end else begin
        second_conv_grad1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        second_conv_grad_pad_address0 = zext_ln214_fu_2389_p1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        second_conv_grad_pad_address0 = grp_Conv2d_b4_fu_1510_input_matrix_address0;
    end else begin
        second_conv_grad_pad_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        second_conv_grad_pad_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        second_conv_grad_pad_ce0 = grp_Conv2d_b4_fu_1510_input_matrix_ce0;
    end else begin
        second_conv_grad_pad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln213_fu_2371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state92))) begin
        second_conv_grad_pad_we0 = 1'b1;
    end else begin
        second_conv_grad_pad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        second_fc_0_ce0 = 1'b1;
    end else begin
        second_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        second_grad_address0 = zext_ln180_1_fu_2106_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        second_grad_address0 = zext_ln157_1_fu_2041_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        second_grad_address0 = second_grad_addr_1_gep_fu_630_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        second_grad_address0 = zext_ln195_reg_2984;
    end else begin
        second_grad_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state40))) begin
        second_grad_ce0 = 1'b1;
    end else begin
        second_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        second_grad_d0 = grp_fu_1593_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        second_grad_d0 = second_rgrad_q0;
    end else begin
        second_grad_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln195_fu_1996_p2) & (1'b1 == ap_CS_fsm_state29)) | ((1'd0 == and_ln195_reg_3016) & (1'b1 == ap_CS_fsm_state37)))) begin
        second_grad_we0 = 1'b1;
    end else begin
        second_grad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        second_kernel_grad_address0 = zext_ln280_1_fu_2453_p1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        second_kernel_grad_address0 = grp_Conv2d_b3_fu_1540_out_matrix_address0;
    end else begin
        second_kernel_grad_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        second_kernel_grad_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        second_kernel_grad_ce0 = grp_Conv2d_b3_fu_1540_out_matrix_ce0;
    end else begin
        second_kernel_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        second_kernel_grad_we0 = grp_Conv2d_b3_fu_1540_out_matrix_we0;
    end else begin
        second_kernel_grad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        second_kernel_overtu_address0 = grp_OverturnKernel_fu_1548_output_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        second_kernel_overtu_address0 = grp_Conv2d_b4_fu_1510_kernel_address0;
    end else begin
        second_kernel_overtu_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        second_kernel_overtu_ce0 = grp_OverturnKernel_fu_1548_output_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        second_kernel_overtu_ce0 = grp_Conv2d_b4_fu_1510_kernel_ce0;
    end else begin
        second_kernel_overtu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        second_kernel_overtu_we0 = grp_OverturnKernel_fu_1548_output_matrix_we0;
    end else begin
        second_kernel_overtu_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        second_relu_0_ce0 = 1'b1;
    end else begin
        second_relu_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        second_rgrad_address0 = zext_ln195_reg_2984;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        second_rgrad_address0 = second_rgrad_addr_reg_2943;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        second_rgrad_address0 = zext_ln170_fu_1884_p1;
    end else begin
        second_rgrad_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state26))) begin
        second_rgrad_ce0 = 1'b1;
    end else begin
        second_rgrad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        second_rgrad_d0 = reg_1615;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        second_rgrad_d0 = 32'd0;
    end else begin
        second_rgrad_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((icmp_ln169_fu_1872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)))) begin
        second_rgrad_we0 = 1'b1;
    end else begin
        second_rgrad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        third_conv_grad1_address0 = third_conv_grad1_add_reg_3205;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        third_conv_grad1_address0 = grp_Conv2d_b1_fu_1532_kernel_address0;
    end else begin
        third_conv_grad1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        third_conv_grad1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        third_conv_grad1_ce0 = grp_Conv2d_b1_fu_1532_kernel_ce0;
    end else begin
        third_conv_grad1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        third_conv_grad1_ce1 = grp_Conv2d_b1_fu_1532_kernel_ce1;
    end else begin
        third_conv_grad1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        third_conv_grad1_we0 = 1'b1;
    end else begin
        third_conv_grad1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        third_conv_grad_padd_address0 = zext_ln209_fu_2344_p1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        third_conv_grad_padd_address0 = grp_Conv2d_b2_fu_1517_input_matrix_address0;
    end else begin
        third_conv_grad_padd_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        third_conv_grad_padd_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        third_conv_grad_padd_ce0 = grp_Conv2d_b2_fu_1517_input_matrix_ce0;
    end else begin
        third_conv_grad_padd_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln208_fu_2323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
        third_conv_grad_padd_we0 = 1'b1;
    end else begin
        third_conv_grad_padd_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        third_kernel_grad_address0 = zext_ln280_1_fu_2453_p1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        third_kernel_grad_address0 = grp_Conv2d_b1_fu_1532_out_matrix_address0;
    end else begin
        third_kernel_grad_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        third_kernel_grad_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        third_kernel_grad_ce0 = grp_Conv2d_b1_fu_1532_out_matrix_ce0;
    end else begin
        third_kernel_grad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        third_kernel_grad_we0 = grp_Conv2d_b1_fu_1532_out_matrix_we0;
    end else begin
        third_kernel_grad_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        third_kernel_overtur_address0 = grp_OverturnKernel_fu_1548_output_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        third_kernel_overtur_address0 = grp_Conv2d_b2_fu_1517_kernel_address0;
    end else begin
        third_kernel_overtur_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        third_kernel_overtur_ce0 = grp_OverturnKernel_fu_1548_output_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        third_kernel_overtur_ce0 = grp_Conv2d_b2_fu_1517_kernel_ce0;
    end else begin
        third_kernel_overtur_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        third_kernel_overtur_we0 = grp_OverturnKernel_fu_1548_output_matrix_we0;
    end else begin
        third_kernel_overtur_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln230_fu_1778_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln148_fu_1800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln149_fu_1837_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln169_fu_1872_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln171_fu_1909_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln194_fu_1945_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((1'd1 == and_ln195_fu_1996_p2) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln155_fu_2008_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((icmp_ln156_fu_2029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln177_fu_2062_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln179_fu_2083_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state56 : begin
            if (((icmp_ln200_fu_2111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'd1 == and_ln201_fu_2162_p2) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state67 : begin
            if (((icmp_ln162_fu_2174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((icmp_ln163_fu_2195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln185_fu_2228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln187_fu_2249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state85 : begin
            if (((1'b1 == ap_CS_fsm_state85) & (1'b0 == ap_block_state85_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln207_fu_2277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((icmp_ln208_fu_2323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            if (((1'b0 == ap_block_state88_on_subcall_done) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((1'b1 == ap_CS_fsm_state90) & (grp_Conv2d_b3_fu_1540_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            if (((icmp_ln212_fu_2355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state91) & (1'b0 == ap_block_state91_io))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else if (((icmp_ln212_fu_2355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state91) & (1'b0 == ap_block_state91_io))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            if (((icmp_ln213_fu_2371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if (((1'b1 == ap_CS_fsm_state97) & (grp_Conv2d_b4_fu_1510_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            if ((~((m_axi_conv1_RVALID == 1'b0) | (grp_Conv2d_b5_fu_1524_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state100 : begin
            if (((icmp_ln278_fu_2398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state100))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state101 : begin
            if (((icmp_ln279_fu_2432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state110 : begin
            if (((icmp_ln285_fu_2472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state111 : begin
            if (((icmp_ln286_fu_2504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state121 : begin
            if (((icmp_ln290_fu_2561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state121))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end
        end
        ap_ST_fsm_state122 : begin
            if (((icmp_ln291_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state131 : begin
            if (((icmp_ln295_fu_2620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln295_fu_2620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state131) & (1'b0 == ap_block_state131_io))) begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end
        end
        ap_ST_fsm_state132 : begin
            if (((icmp_ln296_fu_2666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state132))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln300_fu_2703_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln300_fu_2703_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state149))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln301_fu_2720_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln301_fu_2720_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state157))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state157;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln302_fu_2737_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln302_fu_2737_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state165))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln303_fu_2754_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln303_fu_2754_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state173))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state173;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln304_fu_2771_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln304_fu_2771_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state177;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            if ((~((m_axi_conv1_BVALID == 1'b0) | (m_axi_conv1_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state181))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state181;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln305_fu_2788_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln305_fu_2788_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state185;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            if (((m_axi_conv1_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state189))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state189;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln150_1_fu_1863_p2 = (zext_ln150_3_fu_1859_p1 + shl_ln_reg_2902);

assign add_ln150_fu_1854_p2 = (shl_ln150_1_reg_2907 + zext_ln149_fu_1833_p1);

assign add_ln157_1_fu_2002_p2 = (phi_mul_reg_1090 + 13'd45);

assign add_ln157_fu_2046_p2 = (phi_mul_reg_1090 + zext_ln156_fu_2025_p1);

assign add_ln164_1_fu_2168_p2 = (phi_mul362_reg_1182 + 17'd180);

assign add_ln164_fu_2212_p2 = (phi_mul362_reg_1182 + zext_ln163_fu_2191_p1);

assign add_ln172_1_fu_1930_p2 = (zext_ln172_2_fu_1926_p1 + shl_ln2_reg_2948);

assign add_ln172_fu_1921_p2 = (shl_ln172_1_reg_2953 + zext_ln171_fu_1905_p1);

assign add_ln180_1_fu_2056_p2 = (phi_mul360_reg_1124 + 13'd45);

assign add_ln180_fu_2095_p2 = (phi_mul360_reg_1124 + zext_ln179_fu_2079_p1);

assign add_ln188_1_fu_2222_p2 = (phi_mul364_reg_1216 + 17'd180);

assign add_ln188_fu_2261_p2 = (phi_mul364_reg_1216 + zext_ln187_fu_2245_p1);

assign add_ln209_fu_2335_p2 = (sub_ln209_reg_3236 + zext_ln208_fu_2319_p1);

assign add_ln214_1_fu_2349_p2 = (phi_mul366_reg_1285 + 10'd26);

assign add_ln214_fu_2383_p2 = (phi_mul366_reg_1285 + zext_ln213_fu_2367_p1);

assign add_ln280_fu_2444_p2 = (zext_ln279_fu_2428_p1 + sub_ln280_reg_3285);

assign add_ln285_fu_2466_p2 = (phi_mul368_reg_1341 + 17'd180);

assign add_ln287_1_fu_2516_p2 = (zext_ln286_fu_2500_p1 + shl_ln287_1_reg_3376);

assign add_ln287_2_fu_2539_p2 = (phi_mul368_reg_1341 + zext_ln287_2_fu_2535_p1);

assign add_ln287_fu_2525_p2 = (shl_ln5_reg_3371 + zext_ln287_fu_2521_p1);

assign add_ln292_1_fu_2604_p2 = (phi_mul372_reg_1387 + zext_ln292_1_fu_2600_p1);

assign add_ln292_2_fu_2549_p2 = (phi_mul372_reg_1387 + 13'd45);

assign add_ln292_3_fu_2555_p2 = (phi_mul370_reg_1375 + 15'd180);

assign add_ln292_fu_2589_p2 = (zext_ln291_fu_2573_p1 + phi_mul370_reg_1375);

assign add_ln297_1_fu_2656_p2 = (zext_ln297_2_fu_2652_p1 + zext_ln297_fu_2640_p1);

assign add_ln297_2_fu_2693_p2 = (add_ln297_1_reg_3470 + zext_ln297_3_fu_2689_p1);

assign add_ln297_3_fu_2614_p2 = (phi_mul374_reg_1421 + 11'd45);

assign add_ln297_fu_2678_p2 = (zext_ln296_fu_2662_p1 + phi_mul374_reg_1421);

assign add_ln300_fu_2709_p2 = (phi_ln300_reg_1444 + 4'd1);

assign add_ln301_fu_2726_p2 = (phi_ln301_reg_1455 + 4'd1);

assign add_ln302_fu_2743_p2 = (phi_ln302_reg_1466 + 4'd1);

assign add_ln303_fu_2760_p2 = (phi_ln303_reg_1477 + 17'd1);

assign add_ln304_fu_2777_p2 = (phi_ln304_reg_1488 + 13'd1);

assign add_ln305_fu_2794_p2 = (phi_ln305_reg_1499 + 9'd1);

assign and_ln195_fu_1996_p2 = (or_ln195_fu_1992_p2 & grp_fu_1603_p2);

assign and_ln201_fu_2162_p2 = (or_ln201_fu_2158_p2 & grp_fu_1603_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state181 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state189 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state144_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state144_io));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_block_state152_io));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_block_state152_io));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_block_state160_io));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_block_state160_io));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_block_state168_io));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_block_state168_io));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state176_io));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state176_io));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b1 == ap_block_state184_io));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b1 == ap_block_state184_io));
end

always @ (*) begin
    ap_block_state131_io = ((icmp_ln295_fu_2620_p2 == 1'd1) & (m_axi_conv1_AWREADY == 1'b0));
end

assign ap_block_state142_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state144_io = ((icmp_ln300_reg_3498_pp0_iter1_reg == 1'd0) & (m_axi_conv1_WREADY == 1'b0));
end

assign ap_block_state144_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state151_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state152_io = ((icmp_ln301_reg_3512_pp1_iter1_reg == 1'd0) & (m_axi_conv1_WREADY == 1'b0));
end

assign ap_block_state152_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state160_io = ((icmp_ln302_reg_3526_pp2_iter1_reg == 1'd0) & (m_axi_conv1_WREADY == 1'b0));
end

assign ap_block_state160_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state166_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state167_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state168_io = ((icmp_ln303_reg_3540_pp3_iter1_reg == 1'd0) & (m_axi_conv1_WREADY == 1'b0));
end

assign ap_block_state168_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state174_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state175_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state176_io = ((icmp_ln304_reg_3554_pp4_iter1_reg == 1'd0) & (m_axi_conv1_WREADY == 1'b0));
end

assign ap_block_state176_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state182_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state183_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state184_io = ((icmp_ln305_reg_3568_pp5_iter1_reg == 1'd0) & (m_axi_conv1_WREADY == 1'b0));
end

assign ap_block_state184_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state85_on_subcall_done = ((grp_OverturnKernel_fu_1548_ap_done == 1'b0) | (grp_Conv2d_b1_fu_1532_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state88_on_subcall_done = ((grp_OverturnKernel_fu_1548_ap_done == 1'b0) | (grp_Conv2d_b2_fu_1517_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state91_io = ((icmp_ln212_fu_2355_p2 == 1'd1) & (m_axi_conv1_ARREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign bitcast_ln195_fu_1962_p1 = second_fc_0_q0;

assign bitcast_ln201_fu_2128_p1 = first_fc_0_q0;

assign conv_kernel1_d0 = grp_fu_1556_p2;

assign conv_kernel2_d0 = grp_fu_1567_p2;

assign conv_kernel3_d0 = grp_fu_1573_p2;

assign fc_hidden_layer1_d0 = reg_1615;

assign fc_hidden_layer2_address1 = fc_hidden_layer2_add_2_reg_3450;

assign fc_hidden_layer2_d1 = grp_fu_1556_p2;

assign fc_hidden_layer3_d0 = reg_1615;

assign first_conv1_address0 = grp_Conv2d_b3_fu_1540_first_conv1_address0;

assign first_conv1_address1 = grp_Conv2d_b3_fu_1540_first_conv1_address1;

assign first_conv1_ce0 = grp_Conv2d_b3_fu_1540_first_conv1_ce0;

assign first_conv1_ce1 = grp_Conv2d_b3_fu_1540_first_conv1_ce1;

assign first_fc_0_address0 = zext_ln201_fu_2123_p1;

assign first_grad_addr_1_gep_fu_733_p3 = zext_ln201_reg_3110;

assign first_relu_0_address0 = zext_ln157_fu_2020_p1;

assign flatten_conv_0_address0 = zext_ln164_fu_2186_p1;

assign grp_Conv2d_b1_fu_1532_ap_start = grp_Conv2d_b1_fu_1532_ap_start_reg;

assign grp_Conv2d_b2_fu_1517_ap_start = grp_Conv2d_b2_fu_1517_ap_start_reg;

assign grp_Conv2d_b3_fu_1540_ap_start = grp_Conv2d_b3_fu_1540_ap_start_reg;

assign grp_Conv2d_b4_fu_1510_ap_start = grp_Conv2d_b4_fu_1510_ap_start_reg;

assign grp_Conv2d_b5_fu_1524_ap_start = grp_Conv2d_b5_fu_1524_ap_start_reg;

assign grp_OverturnKernel_fu_1548_ap_start = grp_OverturnKernel_fu_1548_ap_start_reg;

assign i_10_fu_2361_p2 = (i_0_i206_reg_1274 + 5'd1);

assign i_1_fu_1784_p2 = (i_0_reg_1000 + 4'd1);

assign i_2_fu_1878_p2 = (i_0_i136_reg_1034 + 6'd1);

assign i_3_fu_2014_p2 = (i_0_i150_reg_1079 + 8'd1);

assign i_4_fu_1951_p2 = (i_0_i143_reg_1068 + 6'd1);

assign i_5_fu_2068_p2 = (i_0_i160_reg_1113 + 8'd1);

assign i_6_fu_2180_p2 = (i_0_i178_reg_1171 + 10'd1);

assign i_7_fu_2117_p2 = (i_0_i171_reg_1160 + 8'd1);

assign i_8_fu_2234_p2 = (i_0_i188_reg_1205 + 10'd1);

assign i_9_fu_2283_p2 = (i_0_i199_reg_1252 + 5'd1);

assign i_fu_1806_p2 = (i_0_i_reg_1011 + 6'd1);

assign icmp_ln148_fu_1800_p2 = ((i_0_i_reg_1011 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_1837_p2 = ((j_0_i_reg_1023 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln155_fu_2008_p2 = ((i_0_i150_reg_1079 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_2029_p2 = ((j_0_i152_reg_1102 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_2174_p2 = ((i_0_i178_reg_1171 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_2195_p2 = ((j_0_i180_reg_1194 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_1872_p2 = ((i_0_i136_reg_1034 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_1909_p2 = ((j_0_i137_reg_1057 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_2062_p2 = ((i_0_i160_reg_1113 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_2083_p2 = ((j_0_i162_reg_1149 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_2228_p2 = ((i_0_i188_reg_1205 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_2249_p2 = ((j_0_i190_reg_1241 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln194_fu_1945_p2 = ((i_0_i143_reg_1068 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln195_1_fu_1986_p2 = ((trunc_ln195_fu_1976_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_1980_p2 = ((tmp_12_fu_1966_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_2111_p2 = ((i_0_i171_reg_1160 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln201_1_fu_2152_p2 = ((trunc_ln201_fu_2142_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln201_fu_2146_p2 = ((tmp_14_fu_2132_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_2277_p2 = ((i_0_i199_reg_1252 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_2323_p2 = ((j_0_i201_reg_1263 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_2355_p2 = ((i_0_i206_reg_1274 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_2371_p2 = ((j_0_i208_reg_1297 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln230_fu_1778_p2 = ((i_0_reg_1000 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln231_fu_1790_p2 = ((zext_ln230_fu_1774_p1 == label_r) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_2398_p2 = ((m_0_reg_1308 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln279_fu_2432_p2 = ((n_0_reg_1319 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_2472_p2 = ((m_1_reg_1330 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln286_fu_2504_p2 = ((n_1_reg_1353 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln290_fu_2561_p2 = ((m_2_reg_1364 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln291_fu_2577_p2 = ((n_2_reg_1399 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_2620_p2 = ((m_3_reg_1410 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln296_fu_2666_p2 = ((n_3_reg_1433 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln300_fu_2703_p2 = ((phi_ln300_reg_1444 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln301_fu_2720_p2 = ((phi_ln301_reg_1455 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln302_fu_2737_p2 = ((phi_ln302_reg_1466 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln303_fu_2754_p2 = ((phi_ln303_reg_1477 == 17'd103680) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_2771_p2 = ((phi_ln304_reg_1488 == 13'd8100) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_2788_p2 = ((phi_ln305_reg_1499 == 9'd450) ? 1'b1 : 1'b0);

assign j_13_fu_1915_p2 = (j_0_i137_reg_1057 + 4'd1);

assign j_14_fu_2035_p2 = (j_0_i152_reg_1102 + 6'd1);

assign j_15_fu_2089_p2 = (j_0_i162_reg_1149 + 6'd1);

assign j_16_fu_2201_p2 = (j_0_i180_reg_1194 + 8'd1);

assign j_17_fu_2255_p2 = (j_0_i190_reg_1241 + 8'd1);

assign j_18_fu_2329_p2 = (j_0_i201_reg_1263 + 5'd1);

assign j_19_fu_2377_p2 = (j_0_i208_reg_1297 + 5'd1);

assign j_fu_1843_p2 = (j_0_i_reg_1023 + 4'd1);

assign m_4_fu_2478_p2 = (m_1_reg_1330 + 10'd1);

assign m_5_fu_2567_p2 = (m_2_reg_1364 + 8'd1);

assign m_6_fu_2626_p2 = (m_3_reg_1410 + 6'd1);

assign m_axi_conv1_ARADDR = conv1_addr_reg_2825;

assign m_axi_conv1_ARBURST = 2'd0;

assign m_axi_conv1_ARCACHE = 4'd0;

assign m_axi_conv1_ARID = 1'd0;

assign m_axi_conv1_ARLEN = 32'd1;

assign m_axi_conv1_ARLOCK = 2'd0;

assign m_axi_conv1_ARPROT = 3'd0;

assign m_axi_conv1_ARQOS = 4'd0;

assign m_axi_conv1_ARREGION = 4'd0;

assign m_axi_conv1_ARSIZE = 3'd0;

assign m_axi_conv1_ARUSER = 1'd0;

assign m_axi_conv1_AWBURST = 2'd0;

assign m_axi_conv1_AWCACHE = 4'd0;

assign m_axi_conv1_AWID = 1'd0;

assign m_axi_conv1_AWLOCK = 2'd0;

assign m_axi_conv1_AWPROT = 3'd0;

assign m_axi_conv1_AWQOS = 4'd0;

assign m_axi_conv1_AWREGION = 4'd0;

assign m_axi_conv1_AWSIZE = 3'd0;

assign m_axi_conv1_AWUSER = 1'd0;

assign m_axi_conv1_WID = 1'd0;

assign m_axi_conv1_WLAST = 1'b0;

assign m_axi_conv1_WSTRB = 4'd15;

assign m_axi_conv1_WUSER = 1'd0;

assign m_fu_2404_p2 = (m_0_reg_1308 + 2'd1);

assign mnist_data_address0 = grp_Conv2d_b5_fu_1524_input_matrix_address0;

assign mnist_data_address1 = grp_Conv2d_b5_fu_1524_input_matrix_address1;

assign mnist_data_ce0 = grp_Conv2d_b5_fu_1524_input_matrix_ce0;

assign mnist_data_ce1 = grp_Conv2d_b5_fu_1524_input_matrix_ce1;

assign n_4_fu_2510_p2 = (n_1_reg_1353 + 8'd1);

assign n_5_fu_2583_p2 = (n_2_reg_1399 + 6'd1);

assign n_6_fu_2672_p2 = (n_3_reg_1433 + 4'd1);

assign n_fu_2438_p2 = (n_0_reg_1319 + 2'd1);

assign or_ln195_fu_1992_p2 = (icmp_ln195_reg_3001 | icmp_ln195_1_reg_3006);

assign or_ln201_fu_2158_p2 = (icmp_ln201_reg_3127 | icmp_ln201_1_reg_3132);

assign second_fc_0_address0 = zext_ln195_fu_1957_p1;

assign second_grad_addr_1_gep_fu_630_p3 = zext_ln195_reg_2984;

assign second_relu_0_address0 = zext_ln150_fu_1812_p1;

assign sencond_conv1_address0 = grp_Conv2d_b1_fu_1532_sencond_conv1_address0;

assign sencond_conv1_address1 = grp_Conv2d_b1_fu_1532_sencond_conv1_address1;

assign sencond_conv1_ce0 = grp_Conv2d_b1_fu_1532_sencond_conv1_ce0;

assign sencond_conv1_ce1 = grp_Conv2d_b1_fu_1532_sencond_conv1_ce1;

assign sext_ln209_fu_2340_p1 = $signed(add_ln209_fu_2335_p2);

assign sext_ln280_1_fu_2460_p1 = add_ln280_reg_3298;

assign sext_ln280_fu_2449_p1 = add_ln280_fu_2444_p2;

assign shl_ln150_1_fu_1825_p3 = {{i_0_i_reg_1011}, {1'd0}};

assign shl_ln172_1_fu_1897_p3 = {{i_0_i136_reg_1034}, {1'd0}};

assign shl_ln209_1_fu_2301_p3 = {{i_0_i199_reg_1252}, {2'd0}};

assign shl_ln287_1_fu_2492_p3 = {{m_1_reg_1330}, {6'd0}};

assign shl_ln2_fu_1889_p3 = {{i_0_i136_reg_1034}, {3'd0}};

assign shl_ln3_fu_2289_p3 = {{i_0_i199_reg_1252}, {5'd0}};

assign shl_ln4_fu_2410_p3 = {{m_0_reg_1308}, {2'd0}};

assign shl_ln5_fu_2484_p3 = {{m_1_reg_1330}, {9'd0}};

assign shl_ln_fu_1817_p3 = {{i_0_i_reg_1011}, {3'd0}};

assign sub_ln209_fu_2313_p2 = (zext_ln209_1_fu_2297_p1 - zext_ln209_2_fu_2309_p1);

assign sub_ln280_fu_2422_p2 = (zext_ln280_fu_2418_p1 - zext_ln278_fu_2394_p1);

assign tmp_12_fu_1966_p4 = {{bitcast_ln195_fu_1962_p1[30:23]}};

assign tmp_14_fu_2132_p4 = {{bitcast_ln201_fu_2128_p1[30:23]}};

assign tmp_16_fu_2632_p3 = {{m_3_reg_1410}, {3'd0}};

assign tmp_17_fu_2644_p3 = {{m_3_reg_1410}, {1'd0}};

assign trunc_ln195_fu_1976_p1 = bitcast_ln195_fu_1962_p1[22:0];

assign trunc_ln201_fu_2142_p1 = bitcast_ln201_fu_2128_p1[22:0];

assign zext_ln149_fu_1833_p1 = j_0_i_reg_1023;

assign zext_ln150_1_fu_1849_p1 = j_0_i_reg_1023;

assign zext_ln150_2_fu_1868_p1 = add_ln150_1_reg_2930;

assign zext_ln150_3_fu_1859_p1 = add_ln150_fu_1854_p2;

assign zext_ln150_fu_1812_p1 = i_0_i_reg_1011;

assign zext_ln156_fu_2025_p1 = j_0_i152_reg_1102;

assign zext_ln157_1_fu_2041_p1 = j_0_i152_reg_1102;

assign zext_ln157_2_fu_2052_p1 = add_ln157_reg_3061;

assign zext_ln157_fu_2020_p1 = i_0_i150_reg_1079;

assign zext_ln163_fu_2191_p1 = j_0_i180_reg_1194;

assign zext_ln164_1_fu_2207_p1 = j_0_i180_reg_1194;

assign zext_ln164_2_fu_2218_p1 = add_ln164_reg_3187;

assign zext_ln164_fu_2186_p1 = i_0_i178_reg_1171;

assign zext_ln170_fu_1884_p1 = i_0_i136_reg_1034;

assign zext_ln171_fu_1905_p1 = j_0_i137_reg_1057;

assign zext_ln172_1_fu_1940_p1 = j_0_i137_reg_1057;

assign zext_ln172_2_fu_1926_p1 = add_ln172_fu_1921_p2;

assign zext_ln172_fu_1935_p1 = add_ln172_1_fu_1930_p2;

assign zext_ln178_fu_2074_p1 = i_0_i160_reg_1113;

assign zext_ln179_fu_2079_p1 = j_0_i162_reg_1149;

assign zext_ln180_1_fu_2106_p1 = j_0_i162_reg_1149;

assign zext_ln180_fu_2101_p1 = add_ln180_fu_2095_p2;

assign zext_ln186_fu_2240_p1 = i_0_i188_reg_1205;

assign zext_ln187_fu_2245_p1 = j_0_i190_reg_1241;

assign zext_ln188_1_fu_2272_p1 = j_0_i190_reg_1241;

assign zext_ln188_fu_2267_p1 = add_ln188_fu_2261_p2;

assign zext_ln195_fu_1957_p1 = i_0_i143_reg_1068;

assign zext_ln201_fu_2123_p1 = i_0_i171_reg_1160;

assign zext_ln208_fu_2319_p1 = j_0_i201_reg_1263;

assign zext_ln209_1_fu_2297_p1 = shl_ln3_fu_2289_p3;

assign zext_ln209_2_fu_2309_p1 = shl_ln209_1_fu_2301_p3;

assign zext_ln209_fu_2344_p1 = $unsigned(sext_ln209_fu_2340_p1);

assign zext_ln213_fu_2367_p1 = j_0_i208_reg_1297;

assign zext_ln214_fu_2389_p1 = add_ln214_fu_2383_p2;

assign zext_ln229_1_fu_1714_p1 = fc3_offset;

assign zext_ln229_2_fu_1724_p1 = fc2_offset;

assign zext_ln229_3_fu_1734_p1 = fc1_offset;

assign zext_ln229_4_fu_1744_p1 = conv3_offset;

assign zext_ln229_5_fu_1754_p1 = conv2_offset;

assign zext_ln229_6_fu_1764_p1 = conv1_offset;

assign zext_ln229_fu_1704_p1 = lr_in_offset;

assign zext_ln230_fu_1774_p1 = i_0_reg_1000;

assign zext_ln231_fu_1698_p1 = label_r;

assign zext_ln232_fu_1795_p1 = i_0_reg_1000;

assign zext_ln278_fu_2394_p1 = m_0_reg_1308;

assign zext_ln279_fu_2428_p1 = n_0_reg_1319;

assign zext_ln280_1_fu_2453_p1 = $unsigned(sext_ln280_fu_2449_p1);

assign zext_ln280_fu_2418_p1 = shl_ln4_fu_2410_p3;

assign zext_ln286_fu_2500_p1 = n_1_reg_1353;

assign zext_ln287_1_fu_2530_p1 = add_ln287_fu_2525_p2;

assign zext_ln287_2_fu_2535_p1 = n_1_reg_1353;

assign zext_ln287_3_fu_2545_p1 = add_ln287_2_reg_3394;

assign zext_ln287_fu_2521_p1 = add_ln287_1_fu_2516_p2;

assign zext_ln291_fu_2573_p1 = n_2_reg_1399;

assign zext_ln292_1_fu_2600_p1 = n_2_reg_1399;

assign zext_ln292_2_fu_2610_p1 = add_ln292_1_reg_3440;

assign zext_ln292_fu_2595_p1 = add_ln292_fu_2589_p2;

assign zext_ln296_fu_2662_p1 = n_3_reg_1433;

assign zext_ln297_1_fu_2684_p1 = add_ln297_fu_2678_p2;

assign zext_ln297_2_fu_2652_p1 = tmp_17_fu_2644_p3;

assign zext_ln297_3_fu_2689_p1 = n_3_reg_1433;

assign zext_ln297_4_fu_2698_p1 = add_ln297_2_fu_2693_p2;

assign zext_ln297_fu_2640_p1 = tmp_16_fu_2632_p3;

assign zext_ln300_fu_2715_p1 = phi_ln300_reg_1444;

assign zext_ln301_fu_2732_p1 = phi_ln301_reg_1455;

assign zext_ln302_fu_2749_p1 = phi_ln302_reg_1466;

assign zext_ln303_fu_2766_p1 = phi_ln303_reg_1477;

assign zext_ln304_fu_2783_p1 = phi_ln304_reg_1488;

assign zext_ln305_fu_2800_p1 = phi_ln305_reg_1499;

always @ (posedge ap_clk) begin
    conv1_addr_reg_2825[31:30] <= 2'b00;
    conv1_addr_1_reg_2831[31:30] <= 2'b00;
    conv1_addr_2_reg_2837[31:30] <= 2'b00;
    conv1_addr_3_reg_2843[31:30] <= 2'b00;
    conv1_addr_4_reg_2849[31:30] <= 2'b00;
    conv1_addr_5_reg_2855[31:30] <= 2'b00;
    conv1_addr_6_reg_2861[31:30] <= 2'b00;
    zext_ln232_reg_2879[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_2902[2:0] <= 3'b000;
    shl_ln150_1_reg_2907[0] <= 1'b0;
    shl_ln2_reg_2948[2:0] <= 3'b000;
    shl_ln172_1_reg_2953[0] <= 1'b0;
    zext_ln195_reg_2984[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln201_reg_3110[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    sub_ln209_reg_3236[1:0] <= 2'b00;
    shl_ln5_reg_3371[8:0] <= 9'b000000000;
    shl_ln287_1_reg_3376[5:0] <= 6'b000000;
    add_ln297_1_reg_3470[0] <= 1'b0;
end

endmodule //backward
