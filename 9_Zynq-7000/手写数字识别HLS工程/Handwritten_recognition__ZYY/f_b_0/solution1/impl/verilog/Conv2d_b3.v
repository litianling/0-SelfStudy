// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2d_b3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1,
        out_matrix_address0,
        out_matrix_ce0,
        out_matrix_we0,
        out_matrix_d0,
        first_conv1_address0,
        first_conv1_ce0,
        first_conv1_q0,
        first_conv1_address1,
        first_conv1_ce1,
        first_conv1_q1
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_pp0_stage0 = 15'd4;
parameter    ap_ST_fsm_pp0_stage1 = 15'd8;
parameter    ap_ST_fsm_pp0_stage2 = 15'd16;
parameter    ap_ST_fsm_pp0_stage3 = 15'd32;
parameter    ap_ST_fsm_pp0_stage4 = 15'd64;
parameter    ap_ST_fsm_pp0_stage5 = 15'd128;
parameter    ap_ST_fsm_pp0_stage6 = 15'd256;
parameter    ap_ST_fsm_pp0_stage7 = 15'd512;
parameter    ap_ST_fsm_pp0_stage8 = 15'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 15'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 15'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 15'd8192;
parameter    ap_ST_fsm_state20 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [9:0] kernel_address1;
output   kernel_ce1;
input  [31:0] kernel_q1;
output  [3:0] out_matrix_address0;
output   out_matrix_ce0;
output   out_matrix_we0;
output  [31:0] out_matrix_d0;
output  [9:0] first_conv1_address0;
output   first_conv1_ce0;
input  [31:0] first_conv1_q0;
output  [9:0] first_conv1_address1;
output   first_conv1_ce1;
input  [31:0] first_conv1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] kernel_address0;
reg kernel_ce0;
reg kernel_ce1;
reg[3:0] out_matrix_address0;
reg out_matrix_ce0;
reg out_matrix_we0;
reg[31:0] out_matrix_d0;
reg[9:0] first_conv1_address0;
reg first_conv1_ce0;
reg first_conv1_ce1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] empty_reg_216;
reg   [2:0] row_0_reg_228;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] reg_248;
wire    ap_CS_fsm_pp0_stage8;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [0:0] icmp_ln123_reg_624;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln120_fu_275_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln120_1_fu_281_p2;
reg   [3:0] add_ln120_1_reg_572;
wire   [0:0] icmp_ln121_fu_299_p2;
reg   [0:0] icmp_ln121_reg_577;
wire   [1:0] select_ln120_fu_305_p3;
reg   [1:0] select_ln120_reg_582;
wire   [1:0] select_ln120_1_fu_313_p3;
reg   [1:0] select_ln120_1_reg_587;
wire   [2:0] zext_ln120_1_fu_321_p1;
wire   [3:0] zext_ln120_3_fu_329_p1;
reg   [3:0] zext_ln120_3_reg_597;
wire   [2:0] select_ln120_3_fu_359_p3;
reg   [2:0] select_ln120_3_reg_602;
wire   [9:0] zext_ln121_fu_367_p1;
reg   [9:0] zext_ln121_reg_608;
reg   [3:0] out_matrix_addr_reg_613;
wire   [1:0] j_fu_390_p2;
reg   [1:0] j_reg_618;
wire   [0:0] icmp_ln123_fu_396_p2;
reg   [0:0] icmp_ln123_reg_624_pp0_iter1_reg;
wire   [7:0] trunc_ln125_fu_454_p1;
reg   [7:0] trunc_ln125_reg_628;
wire   [9:0] add_ln125_fu_526_p2;
reg   [9:0] add_ln125_reg_653;
reg   [31:0] first_conv1_load_reg_658;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state16_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] kernel_load_reg_663;
reg   [31:0] first_conv1_load_1_reg_668;
reg   [31:0] kernel_load_1_reg_673;
reg   [31:0] first_conv1_load_2_reg_688;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state17_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] kernel_load_2_reg_693;
wire   [31:0] grp_fu_244_p2;
reg   [31:0] tmp3_reg_698;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state19_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] tmp_1_reg_703;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] tmp_2_reg_708;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [2:0] row_4_fu_549_p2;
reg   [2:0] row_4_reg_713;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state14_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [2:0] select_ln121_fu_561_p3;
wire    ap_CS_fsm_state20;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage4_subdone;
reg   [3:0] indvar_flatten_reg_160;
reg   [2:0] indvars_iv1_reg_171;
reg   [1:0] row_reg_182;
reg   [2:0] indvars_iv_reg_193;
reg   [1:0] col_reg_205;
reg   [2:0] ap_phi_mux_row_0_phi_fu_231_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln122_fu_385_p1;
wire   [63:0] zext_ln125_fu_479_p1;
wire  signed [63:0] sext_ln125_fu_484_p1;
wire   [63:0] zext_ln125_1_fu_500_p1;
wire  signed [63:0] sext_ln125_1_fu_511_p1;
wire   [63:0] zext_ln125_2_fu_534_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln125_2_fu_544_p1;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_238_p0;
reg   [31:0] grp_fu_238_p1;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
reg   [31:0] grp_fu_244_p0;
reg   [31:0] grp_fu_244_p1;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire   [3:0] shl_ln_fu_257_p3;
wire   [4:0] zext_ln122_1_fu_265_p1;
wire   [4:0] zext_ln120_fu_253_p1;
wire   [1:0] i_fu_287_p2;
wire   [3:0] shl_ln122_mid1_fu_333_p3;
wire   [4:0] zext_ln122_2_fu_341_p1;
wire   [4:0] zext_ln120_2_fu_325_p1;
wire   [4:0] sub_ln122_1_fu_345_p2;
wire   [4:0] sub_ln122_fu_269_p2;
wire   [2:0] add_ln120_fu_293_p2;
wire   [4:0] select_ln120_2_fu_351_p3;
wire   [4:0] zext_ln121_1_fu_371_p1;
wire   [4:0] add_ln122_fu_375_p2;
wire  signed [31:0] sext_ln122_fu_381_p1;
wire   [7:0] shl_ln8_fu_405_p3;
wire   [4:0] shl_ln125_1_fu_417_p3;
wire   [8:0] zext_ln125_3_fu_413_p1;
wire   [8:0] zext_ln125_4_fu_425_p1;
wire   [3:0] zext_ln123_fu_401_p1;
wire   [3:0] sub_ln125_fu_435_p2;
wire  signed [3:0] mul_ln125_fu_444_p1;
wire  signed [9:0] mul_ln125_fu_444_p2;
wire   [8:0] sub_ln125_1_fu_429_p2;
wire   [6:0] tmp_16_fu_458_p4;
wire   [8:0] add_ln_fu_468_p3;
wire  signed [31:0] sext_ln125_5_fu_475_p1;
wire   [8:0] add_ln125_1_fu_489_p3;
wire  signed [31:0] sext_ln125_6_fu_496_p1;
wire  signed [31:0] sext_ln125_4_fu_450_p1;
wire   [31:0] or_ln125_fu_505_p2;
wire   [8:0] or_ln125_1_fu_516_p2;
wire  signed [9:0] sext_ln125_7_fu_522_p1;
wire  signed [31:0] sext_ln125_8_fu_531_p1;
wire   [7:0] add_ln125_2_fu_539_p2;
wire    ap_block_pp0_stage11;
wire   [2:0] add_ln121_fu_555_p2;
reg   [14:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state18_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state13_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(grp_fu_238_p1),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_244_p0),
    .din1(grp_fu_244_p1),
    .ce(1'b1),
    .dout(grp_fu_244_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln120_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln120_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        col_reg_205 <= j_reg_618;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_reg_205 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_624_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        empty_reg_216 <= grp_fu_238_p2;
    end else if (((icmp_ln120_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_216 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten_reg_160 <= add_ln120_1_reg_572;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_160 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvars_iv1_reg_171 <= select_ln120_3_reg_602;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv1_reg_171 <= 3'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvars_iv_reg_193 <= select_ln121_fu_561_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv_reg_193 <= 3'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln123_reg_624 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_0_reg_228 <= row_4_reg_713;
    end else if (((icmp_ln120_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_228 <= zext_ln120_1_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        row_reg_182 <= select_ln120_1_reg_587;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_182 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln120_1_reg_572 <= add_ln120_1_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln123_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln125_reg_653 <= add_ln125_fu_526_p2;
        trunc_ln125_reg_628 <= trunc_ln125_fu_454_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_624 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        first_conv1_load_1_reg_668 <= first_conv1_q1;
        first_conv1_load_reg_658 <= first_conv1_q0;
        kernel_load_1_reg_673 <= kernel_q1;
        kernel_load_reg_663 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_624 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        first_conv1_load_2_reg_688 <= first_conv1_q0;
        kernel_load_2_reg_693 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln121_reg_577 <= icmp_ln121_fu_299_p2;
        j_reg_618 <= j_fu_390_p2;
        out_matrix_addr_reg_613 <= zext_ln122_fu_385_p1;
        select_ln120_1_reg_587 <= select_ln120_1_fu_313_p3;
        select_ln120_3_reg_602 <= select_ln120_3_fu_359_p3;
        select_ln120_reg_582 <= select_ln120_fu_305_p3;
        zext_ln120_3_reg_597[1 : 0] <= zext_ln120_3_fu_329_p1[1 : 0];
        zext_ln121_reg_608[1 : 0] <= zext_ln121_fu_367_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln123_reg_624 <= icmp_ln123_fu_396_p2;
        icmp_ln123_reg_624_pp0_iter1_reg <= icmp_ln123_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln123_reg_624 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln123_reg_624 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        reg_248 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_624 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        row_4_reg_713 <= row_4_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_624 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp3_reg_698 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_624 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_1_reg_703 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_624 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_2_reg_708 <= grp_fu_244_p2;
    end
end

always @ (*) begin
    if ((icmp_ln123_fu_396_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_275_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_624 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row_0_phi_fu_231_p4 = row_4_reg_713;
    end else begin
        ap_phi_mux_row_0_phi_fu_231_p4 = row_0_reg_228;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_275_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            first_conv1_address0 = zext_ln125_2_fu_534_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            first_conv1_address0 = zext_ln125_fu_479_p1;
        end else begin
            first_conv1_address0 = 'bx;
        end
    end else begin
        first_conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        first_conv1_ce0 = 1'b1;
    end else begin
        first_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        first_conv1_ce1 = 1'b1;
    end else begin
        first_conv1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        grp_fu_238_p0 = reg_248;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_238_p0 = empty_reg_216;
    end else begin
        grp_fu_238_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_238_p1 = tmp_2_reg_708;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_238_p1 = tmp_1_reg_703;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_238_p1 = tmp3_reg_698;
    end else begin
        grp_fu_238_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_244_p0 = first_conv1_load_2_reg_688;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_244_p0 = first_conv1_load_1_reg_668;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_244_p0 = first_conv1_load_reg_658;
        end else begin
            grp_fu_244_p0 = 'bx;
        end
    end else begin
        grp_fu_244_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_244_p1 = kernel_load_2_reg_693;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_244_p1 = kernel_load_1_reg_673;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_244_p1 = kernel_load_reg_663;
        end else begin
            grp_fu_244_p1 = 'bx;
        end
    end else begin
        grp_fu_244_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address0 = sext_ln125_2_fu_544_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = sext_ln125_fu_484_p1;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        out_matrix_address0 = out_matrix_addr_reg_613;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_address0 = zext_ln122_fu_385_p1;
    end else begin
        out_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        out_matrix_ce0 = 1'b1;
    end else begin
        out_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        out_matrix_d0 = grp_fu_238_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_d0 = 32'd0;
    end else begin
        out_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln123_reg_624_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln120_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_matrix_we0 = 1'b1;
    end else begin
        out_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln123_fu_396_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln123_fu_396_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_1_fu_281_p2 = (indvar_flatten_reg_160 + 4'd1);

assign add_ln120_fu_293_p2 = (indvars_iv1_reg_171 + 3'd1);

assign add_ln121_fu_555_p2 = (indvars_iv_reg_193 + 3'd1);

assign add_ln122_fu_375_p2 = (select_ln120_2_fu_351_p3 + zext_ln121_1_fu_371_p1);

assign add_ln125_1_fu_489_p3 = {{tmp_16_fu_458_p4}, {j_reg_618}};

assign add_ln125_2_fu_539_p2 = (8'd2 + trunc_ln125_reg_628);

assign add_ln125_fu_526_p2 = ($signed(sext_ln125_7_fu_522_p1) + $signed(zext_ln121_reg_608));

assign add_ln_fu_468_p3 = {{tmp_16_fu_458_p4}, {select_ln120_reg_582}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd14];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign first_conv1_address1 = zext_ln125_1_fu_500_p1;

assign i_fu_287_p2 = (row_reg_182 + 2'd1);

assign icmp_ln120_fu_275_p2 = ((indvar_flatten_reg_160 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_299_p2 = ((indvars_iv_reg_193 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_396_p2 = ((ap_phi_mux_row_0_phi_fu_231_p4 == select_ln120_3_reg_602) ? 1'b1 : 1'b0);

assign j_fu_390_p2 = (select_ln120_fu_305_p3 + 2'd1);

assign kernel_address1 = sext_ln125_1_fu_511_p1;

assign mul_ln125_fu_444_p1 = sub_ln125_fu_435_p2;

assign mul_ln125_fu_444_p2 = ($signed({{1'b0}, {10'd26}}) * $signed(mul_ln125_fu_444_p1));

assign or_ln125_1_fu_516_p2 = (sub_ln125_1_fu_429_p2 | 9'd2);

assign or_ln125_fu_505_p2 = (sext_ln125_4_fu_450_p1 | 32'd1);

assign row_4_fu_549_p2 = (3'd1 + row_0_reg_228);

assign select_ln120_1_fu_313_p3 = ((icmp_ln121_fu_299_p2[0:0] === 1'b1) ? i_fu_287_p2 : row_reg_182);

assign select_ln120_2_fu_351_p3 = ((icmp_ln121_fu_299_p2[0:0] === 1'b1) ? sub_ln122_1_fu_345_p2 : sub_ln122_fu_269_p2);

assign select_ln120_3_fu_359_p3 = ((icmp_ln121_fu_299_p2[0:0] === 1'b1) ? add_ln120_fu_293_p2 : indvars_iv1_reg_171);

assign select_ln120_fu_305_p3 = ((icmp_ln121_fu_299_p2[0:0] === 1'b1) ? 2'd0 : col_reg_205);

assign select_ln121_fu_561_p3 = ((icmp_ln121_reg_577[0:0] === 1'b1) ? 3'd4 : add_ln121_fu_555_p2);

assign sext_ln122_fu_381_p1 = $signed(add_ln122_fu_375_p2);

assign sext_ln125_1_fu_511_p1 = $signed(or_ln125_fu_505_p2);

assign sext_ln125_2_fu_544_p1 = $signed(add_ln125_2_fu_539_p2);

assign sext_ln125_4_fu_450_p1 = mul_ln125_fu_444_p2;

assign sext_ln125_5_fu_475_p1 = $signed(add_ln_fu_468_p3);

assign sext_ln125_6_fu_496_p1 = $signed(add_ln125_1_fu_489_p3);

assign sext_ln125_7_fu_522_p1 = $signed(or_ln125_1_fu_516_p2);

assign sext_ln125_8_fu_531_p1 = $signed(add_ln125_reg_653);

assign sext_ln125_fu_484_p1 = mul_ln125_fu_444_p2;

assign shl_ln122_mid1_fu_333_p3 = {{i_fu_287_p2}, {2'd0}};

assign shl_ln125_1_fu_417_p3 = {{ap_phi_mux_row_0_phi_fu_231_p4}, {2'd0}};

assign shl_ln8_fu_405_p3 = {{ap_phi_mux_row_0_phi_fu_231_p4}, {5'd0}};

assign shl_ln_fu_257_p3 = {{row_reg_182}, {2'd0}};

assign sub_ln122_1_fu_345_p2 = (zext_ln122_2_fu_341_p1 - zext_ln120_2_fu_325_p1);

assign sub_ln122_fu_269_p2 = (zext_ln122_1_fu_265_p1 - zext_ln120_fu_253_p1);

assign sub_ln125_1_fu_429_p2 = (zext_ln125_3_fu_413_p1 - zext_ln125_4_fu_425_p1);

assign sub_ln125_fu_435_p2 = (zext_ln123_fu_401_p1 - zext_ln120_3_reg_597);

assign tmp_16_fu_458_p4 = {{sub_ln125_1_fu_429_p2[8:2]}};

assign trunc_ln125_fu_454_p1 = mul_ln125_fu_444_p2[7:0];

assign zext_ln120_1_fu_321_p1 = select_ln120_1_fu_313_p3;

assign zext_ln120_2_fu_325_p1 = i_fu_287_p2;

assign zext_ln120_3_fu_329_p1 = select_ln120_1_fu_313_p3;

assign zext_ln120_fu_253_p1 = row_reg_182;

assign zext_ln121_1_fu_371_p1 = select_ln120_fu_305_p3;

assign zext_ln121_fu_367_p1 = select_ln120_fu_305_p3;

assign zext_ln122_1_fu_265_p1 = shl_ln_fu_257_p3;

assign zext_ln122_2_fu_341_p1 = shl_ln122_mid1_fu_333_p3;

assign zext_ln122_fu_385_p1 = $unsigned(sext_ln122_fu_381_p1);

assign zext_ln123_fu_401_p1 = ap_phi_mux_row_0_phi_fu_231_p4;

assign zext_ln125_1_fu_500_p1 = $unsigned(sext_ln125_6_fu_496_p1);

assign zext_ln125_2_fu_534_p1 = $unsigned(sext_ln125_8_fu_531_p1);

assign zext_ln125_3_fu_413_p1 = shl_ln8_fu_405_p3;

assign zext_ln125_4_fu_425_p1 = shl_ln125_1_fu_417_p3;

assign zext_ln125_fu_479_p1 = $unsigned(sext_ln125_5_fu_475_p1);

always @ (posedge ap_clk) begin
    zext_ln120_3_reg_597[3:2] <= 2'b00;
    zext_ln121_reg_608[9:2] <= 8'b00000000;
end

endmodule //Conv2d_b3
