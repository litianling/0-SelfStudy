-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_matrix_AWVALID : OUT STD_LOGIC;
    m_axi_input_matrix_AWREADY : IN STD_LOGIC;
    m_axi_input_matrix_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_matrix_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_matrix_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_matrix_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_matrix_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_matrix_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_matrix_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_matrix_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_matrix_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_matrix_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_WVALID : OUT STD_LOGIC;
    m_axi_input_matrix_WREADY : IN STD_LOGIC;
    m_axi_input_matrix_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_matrix_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_matrix_WLAST : OUT STD_LOGIC;
    m_axi_input_matrix_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_ARVALID : OUT STD_LOGIC;
    m_axi_input_matrix_ARREADY : IN STD_LOGIC;
    m_axi_input_matrix_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_matrix_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_matrix_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_matrix_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_matrix_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_matrix_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_matrix_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_matrix_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_matrix_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_matrix_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_RVALID : IN STD_LOGIC;
    m_axi_input_matrix_RREADY : OUT STD_LOGIC;
    m_axi_input_matrix_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_matrix_RLAST : IN STD_LOGIC;
    m_axi_input_matrix_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_matrix_BVALID : IN STD_LOGIC;
    m_axi_input_matrix_BREADY : OUT STD_LOGIC;
    m_axi_input_matrix_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_matrix_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_matrix_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_matrix_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    conv1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    conv2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    conv3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    fc1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    fc2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    fc3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mnist_data_ce0 : OUT STD_LOGIC;
    mnist_data_we0 : OUT STD_LOGIC;
    mnist_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel1_ce0 : OUT STD_LOGIC;
    conv_kernel1_we0 : OUT STD_LOGIC;
    conv_kernel1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel2_ce0 : OUT STD_LOGIC;
    conv_kernel2_we0 : OUT STD_LOGIC;
    conv_kernel2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel3_ce0 : OUT STD_LOGIC;
    conv_kernel3_we0 : OUT STD_LOGIC;
    conv_kernel3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    first_conv1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    first_conv1_ce0 : OUT STD_LOGIC;
    first_conv1_we0 : OUT STD_LOGIC;
    first_conv1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    first_conv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sencond_conv1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sencond_conv1_ce0 : OUT STD_LOGIC;
    sencond_conv1_we0 : OUT STD_LOGIC;
    sencond_conv1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sencond_conv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    fc_hidden_layer1_ce0 : OUT STD_LOGIC;
    fc_hidden_layer1_we0 : OUT STD_LOGIC;
    fc_hidden_layer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    fc_hidden_layer2_ce0 : OUT STD_LOGIC;
    fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    fc_hidden_layer2_ce1 : OUT STD_LOGIC;
    fc_hidden_layer2_we1 : OUT STD_LOGIC;
    fc_hidden_layer2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fc_hidden_layer3_ce0 : OUT STD_LOGIC;
    fc_hidden_layer3_we0 : OUT STD_LOGIC;
    fc_hidden_layer3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    flatten_conv_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    flatten_conv_0_ce0 : OUT STD_LOGIC;
    flatten_conv_0_we0 : OUT STD_LOGIC;
    flatten_conv_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    flatten_conv_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    first_fc_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    first_fc_0_ce0 : OUT STD_LOGIC;
    first_fc_0_we0 : OUT STD_LOGIC;
    first_fc_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    first_fc_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    first_relu_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    first_relu_0_ce0 : OUT STD_LOGIC;
    first_relu_0_we0 : OUT STD_LOGIC;
    first_relu_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    first_relu_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    second_fc_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    second_fc_0_ce0 : OUT STD_LOGIC;
    second_fc_0_we0 : OUT STD_LOGIC;
    second_fc_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    second_fc_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    second_relu_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    second_relu_0_ce0 : OUT STD_LOGIC;
    second_relu_0_we0 : OUT STD_LOGIC;
    second_relu_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    second_relu_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outmlp_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outmlp_0_ce0 : OUT STD_LOGIC;
    outmlp_0_we0 : OUT STD_LOGIC;
    outmlp_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of forward is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (111 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (111 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (111 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (111 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (111 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (111 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (111 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (111 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (111 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (111 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_384 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011001010100000000";
    constant ap_const_lv32_1FA4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111110100100";
    constant ap_const_lv32_1C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv64_3FA999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv17_19500 : STD_LOGIC_VECTOR (16 downto 0) := "11001010100000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv13_1FA4 : STD_LOGIC_VECTOR (12 downto 0) := "1111110100100";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv9_1C2 : STD_LOGIC_VECTOR (8 downto 0) := "111000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv17_B4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010110100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_2D : STD_LOGIC_VECTOR (12 downto 0) := "0000000101101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal third_conv1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal third_conv1_ce0 : STD_LOGIC;
    signal third_conv1_we0 : STD_LOGIC;
    signal third_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal input_matrix_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln321_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln320_reg_1713 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln319_reg_1699 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln312_reg_1685 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln311_reg_1671 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln310_reg_1657 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln309_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln309_reg_600 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln309_reg_600_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal phi_ln310_reg_612 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln310_reg_612_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal phi_ln311_reg_624 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln311_reg_624_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state28_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal phi_ln312_reg_636 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln312_reg_636_pp3_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state38_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal phi_ln319_reg_648 : STD_LOGIC_VECTOR (16 downto 0);
    signal phi_ln319_reg_648_pp4_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state48_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal phi_ln320_reg_660 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln320_reg_660_pp5_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state58_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state59_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state60_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal phi_ln321_reg_672 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_ln321_reg_672_pp6_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state68_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state69_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state70_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal grp_fu_892_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal grp_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal grp_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_926 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_fu_909_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_931 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal grp_fu_896_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal input_matrix_addr_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_matrix_addr_1_reg_1613 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_addr_2_reg_1619 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_addr_3_reg_1625 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_addr_4_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_addr_5_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln309_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_1643_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln309_fu_1018_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln309_reg_1647 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal input_matrix_addr_6_1_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln310_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln310_reg_1657_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln310_fu_1035_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln310_reg_1661 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal input_matrix_addr_5_1_reg_1666 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln311_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_reg_1671_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln311_fu_1052_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln311_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal input_matrix_addr_4_1_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln312_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln312_reg_1685_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln312_fu_1069_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln312_reg_1689 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal input_matrix_addr_3_1_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln319_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_1699_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln319_fu_1086_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln319_reg_1703 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal input_matrix_addr_2_1_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln320_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln320_reg_1713_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln320_fu_1103_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln320_reg_1717 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal input_matrix_addr_1_1_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln321_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln321_reg_1727_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln321_fu_1120_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_reg_1731 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal input_matrix_addr_re_reg_1736 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_1137_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1744 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal sub_ln74_fu_1167_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln74_reg_1749 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln72_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_1183_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1757 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal zext_ln74_fu_1198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_reg_1762 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln73_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln79_fu_1203_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln79_reg_1772 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal j_2_fu_1213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_reg_1780 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_fc_0_addr_reg_1785 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln79_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_1230_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_1793 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal icmp_ln81_fu_1224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln82_1_fu_1241_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln82_1_reg_1803 : STD_LOGIC_VECTOR (16 downto 0);
    signal flatten_conv_0_load_reg_1813 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal fc_hidden_layer1_loa_reg_1818 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_6_fu_1263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_6_reg_1826 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal zext_ln63_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_reg_1831 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln62_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_fc_0_load_reg_1841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal zext_ln87_fu_1365_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln87_reg_1849 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal j_7_fu_1375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_7_reg_1857 : STD_LOGIC_VECTOR (5 downto 0);
    signal second_fc_0_addr_reg_1862 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln87_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_1392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_1870 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal icmp_ln89_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln90_1_fu_1403_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln90_1_reg_1880 : STD_LOGIC_VECTOR (12 downto 0);
    signal first_relu_0_load_reg_1890 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal fc_hidden_layer2_loa_reg_1895 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_8_fu_1425_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_8_reg_1903 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal zext_ln68_fu_1431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1908 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln67_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal second_fc_0_load_reg_1918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal zext_ln95_fu_1527_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln95_reg_1926 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal j_9_fu_1537_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_9_reg_1934 : STD_LOGIC_VECTOR (3 downto 0);
    signal outmlp_0_addr_reg_1939 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln95_fu_1531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_1554_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_reg_1947 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal icmp_ln97_fu_1548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal second_relu_0_load_reg_1962 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal fc_hidden_layer3_loa_reg_1967 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state38 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_Conv2d3_fu_875_ap_ready : STD_LOGIC;
    signal grp_Conv2d3_fu_875_ap_done : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state48 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state58 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state68 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal grp_Conv2d1_fu_855_ap_start : STD_LOGIC;
    signal grp_Conv2d1_fu_855_ap_done : STD_LOGIC;
    signal grp_Conv2d1_fu_855_ap_idle : STD_LOGIC;
    signal grp_Conv2d1_fu_855_ap_ready : STD_LOGIC;
    signal grp_Conv2d1_fu_855_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d1_fu_855_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d1_fu_855_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d1_fu_855_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d1_fu_855_out_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d1_fu_855_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d1_fu_855_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d1_fu_855_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d2_fu_865_ap_start : STD_LOGIC;
    signal grp_Conv2d2_fu_865_ap_done : STD_LOGIC;
    signal grp_Conv2d2_fu_865_ap_idle : STD_LOGIC;
    signal grp_Conv2d2_fu_865_ap_ready : STD_LOGIC;
    signal grp_Conv2d2_fu_865_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d2_fu_865_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d2_fu_865_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d2_fu_865_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d2_fu_865_out_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d2_fu_865_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d2_fu_865_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d2_fu_865_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d3_fu_875_ap_start : STD_LOGIC;
    signal grp_Conv2d3_fu_875_ap_idle : STD_LOGIC;
    signal grp_Conv2d3_fu_875_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d3_fu_875_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d3_fu_875_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d3_fu_875_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d3_fu_875_out_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d3_fu_875_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d3_fu_875_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d3_fu_875_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln309_phi_fu_604_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_phi_ln310_phi_fu_616_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_phi_ln311_phi_fu_628_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_phi_ln312_phi_fu_640_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_phi_ln319_phi_fu_652_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_phi_ln320_phi_fu_664_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_phi_ln321_phi_fu_676_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_i_reg_684 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal j_0_i_reg_695 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal j_0_i89_reg_706 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_i_reg_730 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_741 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_0_i92_reg_752 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal j_0_i99_reg_763 : STD_LOGIC_VECTOR (5 downto 0);
    signal storemerge198_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_i101_reg_787 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul196_reg_798 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_i110_reg_809 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal j_0_i119_reg_820 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge199_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_i121_reg_844 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Conv2d1_fu_855_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_Conv2d2_fu_865_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_Conv2d3_fu_875_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln309_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln310_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln311_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln312_fu_1075_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln319_fu_1092_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln320_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_fu_1219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_1_fu_1252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_1381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_fu_1398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_1_fu_1414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_fu_1543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_1560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_fu_1596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln308_6_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln308_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln308_1_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln308_2_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln308_3_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln308_4_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln308_5_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_885_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal grp_fu_892_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_892_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal grp_fu_899_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_904_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal shl_ln_fu_1143_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln74_1_fu_1155_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln74_1_fu_1151_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln74_2_fu_1163_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_fu_1173_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln74_fu_1189_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln74_fu_1194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln82_fu_1247_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal bitcast_ln28_fu_1274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_1291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1277_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_1287_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_1309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1295_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_1305_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln90_fu_1409_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln28_2_fu_1436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_1453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1439_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_1449_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_1477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_1471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1457_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_1467_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_1495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_1489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_1483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_1501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_1507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_1513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln98_1_fu_1573_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln98_fu_1581_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_fu_1565_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln98_2_fu_1586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln98_1_fu_1590_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;

    component Conv2d1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fptrunceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fpext_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_fcmp_32g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component forw_back_dmul_64hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forward_third_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    third_conv1_U : component forward_third_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => third_conv1_address0,
        ce0 => third_conv1_ce0,
        we0 => third_conv1_we0,
        d0 => grp_Conv2d3_fu_875_out_matrix_d0,
        q0 => third_conv1_q0);

    grp_Conv2d1_fu_855 : component Conv2d1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d1_fu_855_ap_start,
        ap_done => grp_Conv2d1_fu_855_ap_done,
        ap_idle => grp_Conv2d1_fu_855_ap_idle,
        ap_ready => grp_Conv2d1_fu_855_ap_ready,
        input_matrix_address0 => grp_Conv2d1_fu_855_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d1_fu_855_input_matrix_ce0,
        input_matrix_q0 => mnist_data_q0,
        kernel_address0 => grp_Conv2d1_fu_855_kernel_address0,
        kernel_ce0 => grp_Conv2d1_fu_855_kernel_ce0,
        kernel_q0 => conv_kernel1_q0,
        out_matrix_address0 => grp_Conv2d1_fu_855_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d1_fu_855_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d1_fu_855_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d1_fu_855_out_matrix_d0);

    grp_Conv2d2_fu_865 : component Conv2d2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d2_fu_865_ap_start,
        ap_done => grp_Conv2d2_fu_865_ap_done,
        ap_idle => grp_Conv2d2_fu_865_ap_idle,
        ap_ready => grp_Conv2d2_fu_865_ap_ready,
        input_matrix_address0 => grp_Conv2d2_fu_865_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d2_fu_865_input_matrix_ce0,
        input_matrix_q0 => first_conv1_q0,
        kernel_address0 => grp_Conv2d2_fu_865_kernel_address0,
        kernel_ce0 => grp_Conv2d2_fu_865_kernel_ce0,
        kernel_q0 => conv_kernel2_q0,
        out_matrix_address0 => grp_Conv2d2_fu_865_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d2_fu_865_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d2_fu_865_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d2_fu_865_out_matrix_d0);

    grp_Conv2d3_fu_875 : component Conv2d3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d3_fu_875_ap_start,
        ap_done => grp_Conv2d3_fu_875_ap_done,
        ap_idle => grp_Conv2d3_fu_875_ap_idle,
        ap_ready => grp_Conv2d3_fu_875_ap_ready,
        input_matrix_address0 => grp_Conv2d3_fu_875_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d3_fu_875_input_matrix_ce0,
        input_matrix_q0 => sencond_conv1_q0,
        kernel_address0 => grp_Conv2d3_fu_875_kernel_address0,
        kernel_ce0 => grp_Conv2d3_fu_875_kernel_ce0,
        kernel_q0 => conv_kernel3_q0,
        out_matrix_address0 => grp_Conv2d3_fu_875_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d3_fu_875_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d3_fu_875_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d3_fu_875_out_matrix_d0);

    forw_back_fadd_32bkb_U20 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_885_p0,
        din1 => reg_914,
        ce => ap_const_logic_1,
        dout => grp_fu_885_p2);

    forw_back_fmul_32cud_U21 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_892_p0,
        din1 => grp_fu_892_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_892_p2);

    forw_back_fptrunceOg_U22 : component forw_back_fptrunceOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_931,
        ce => ap_const_logic_1,
        dout => grp_fu_896_p1);

    forw_back_fpext_3fYi_U23 : component forw_back_fpext_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_899_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_899_p1);

    forw_back_fcmp_32g8j_U24 : component forw_back_fcmp_32g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_904_p0,
        din1 => grp_fu_896_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_904_p2);

    forw_back_dmul_64hbi_U25 : component forw_back_dmul_64hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_926,
        din1 => ap_const_lv64_3FA999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_909_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state38) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state38)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state38);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((grp_Conv2d3_fu_875_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state48)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state48);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((grp_Conv2d3_fu_875_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state58) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state58)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state58);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state68) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state68)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state68);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d1_fu_855_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d1_fu_855_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    grp_Conv2d1_fu_855_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d1_fu_855_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d1_fu_855_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d2_fu_865_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d2_fu_865_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    grp_Conv2d2_fu_865_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d2_fu_865_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d2_fu_865_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d3_fu_875_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d3_fu_875_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    grp_Conv2d3_fu_875_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d3_fu_875_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d3_fu_875_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_1177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                i_0_i_reg_684 <= i_reg_1744;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                i_0_i_reg_684 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_i110_reg_809_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
                j_0_i110_reg_809 <= j_8_reg_1903;
            elsif (((icmp_ln87_fu_1369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                j_0_i110_reg_809 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i119_reg_820_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_1548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
                j_0_i119_reg_820 <= j_9_reg_1934;
            elsif (((icmp_ln67_fu_1419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then 
                j_0_i119_reg_820 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i89_reg_706_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_1224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                j_0_i89_reg_706 <= j_2_reg_1780;
            elsif (((icmp_ln72_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                j_0_i89_reg_706 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_i92_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                j_0_i92_reg_752 <= j_6_reg_1826;
            elsif (((icmp_ln79_fu_1207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                j_0_i92_reg_752 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_i99_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_1386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                j_0_i99_reg_763 <= j_7_reg_1857;
            elsif (((icmp_ln62_fu_1257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                j_0_i99_reg_763 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) and (icmp_ln72_fu_1131_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_695 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                j_0_i_reg_695 <= j_reg_1757;
            end if; 
        end if;
    end process;

    k_0_i101_reg_787_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
                k_0_i101_reg_787 <= k_1_reg_1870;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state96) and (icmp_ln87_fu_1369_p2 = ap_const_lv1_0))) then 
                k_0_i101_reg_787 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k_0_i121_reg_844_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
                k_0_i121_reg_844 <= k_2_reg_1947;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state117) and (icmp_ln95_fu_1531_p2 = ap_const_lv1_0))) then 
                k_0_i121_reg_844 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_0_i_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                k_0_i_reg_730 <= k_reg_1793;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln79_fu_1207_p2 = ap_const_lv1_0))) then 
                k_0_i_reg_730 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_ln309_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln309_reg_1643 = ap_const_lv1_0))) then 
                phi_ln309_reg_600 <= add_ln309_reg_1647;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_ln309_reg_600 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_ln310_reg_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_ln310_reg_612 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln310_reg_1657 = ap_const_lv1_0))) then 
                phi_ln310_reg_612 <= add_ln310_reg_1661;
            end if; 
        end if;
    end process;

    phi_ln311_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                phi_ln311_reg_624 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln311_reg_1671 = ap_const_lv1_0))) then 
                phi_ln311_reg_624 <= add_ln311_reg_1675;
            end if; 
        end if;
    end process;

    phi_ln312_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                phi_ln312_reg_636 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln312_reg_1685 = ap_const_lv1_0))) then 
                phi_ln312_reg_636 <= add_ln312_reg_1689;
            end if; 
        end if;
    end process;

    phi_ln319_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln319_reg_1699 = ap_const_lv1_0))) then 
                phi_ln319_reg_648 <= add_ln319_reg_1703;
            elsif (((grp_Conv2d3_fu_875_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                phi_ln319_reg_648 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    phi_ln320_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                phi_ln320_reg_660 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln320_reg_1713 = ap_const_lv1_0))) then 
                phi_ln320_reg_660 <= add_ln320_reg_1717;
            end if; 
        end if;
    end process;

    phi_ln321_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                phi_ln321_reg_672 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln321_reg_1727 = ap_const_lv1_0))) then 
                phi_ln321_reg_672 <= add_ln321_reg_1731;
            end if; 
        end if;
    end process;

    phi_mul196_reg_798_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
                phi_mul196_reg_798 <= add_ln90_1_reg_1880;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state96) and (icmp_ln87_fu_1369_p2 = ap_const_lv1_0))) then 
                phi_mul196_reg_798 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                phi_mul_reg_741 <= add_ln82_1_reg_1803;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln79_fu_1207_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_741 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    storemerge198_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
                storemerge198_reg_774 <= grp_fu_885_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state96) and (icmp_ln87_fu_1369_p2 = ap_const_lv1_0))) then 
                storemerge198_reg_774 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge199_reg_831_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
                storemerge199_reg_831 <= grp_fu_885_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state117) and (icmp_ln95_fu_1531_p2 = ap_const_lv1_0))) then 
                storemerge199_reg_831 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_717_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                storemerge_reg_717 <= grp_fu_885_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln79_fu_1207_p2 = ap_const_lv1_0))) then 
                storemerge_reg_717 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln309_reg_1647 <= add_ln309_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln310_reg_1661 <= add_ln310_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln311_reg_1675 <= add_ln311_fu_1052_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln312_reg_1689 <= add_ln312_fu_1069_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                add_ln319_reg_1703 <= add_ln319_fu_1086_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln320_reg_1717 <= add_ln320_fu_1103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln321_reg_1731 <= add_ln321_fu_1120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (icmp_ln81_fu_1224_p2 = ap_const_lv1_0))) then
                add_ln82_1_reg_1803 <= add_ln82_1_fu_1241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state97) and (icmp_ln89_fu_1386_p2 = ap_const_lv1_0))) then
                add_ln90_1_reg_1880 <= add_ln90_1_fu_1403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                fc_hidden_layer1_loa_reg_1818 <= fc_hidden_layer1_q0;
                flatten_conv_0_load_reg_1813 <= flatten_conv_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                fc_hidden_layer2_loa_reg_1895 <= fc_hidden_layer2_q0;
                first_relu_0_load_reg_1890 <= first_relu_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then
                fc_hidden_layer3_loa_reg_1967 <= fc_hidden_layer3_q0;
                second_relu_0_load_reg_1962 <= second_relu_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln79_fu_1207_p2 = ap_const_lv1_0))) then
                first_fc_0_addr_reg_1785 <= zext_ln80_fu_1219_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                first_fc_0_load_reg_1841 <= first_fc_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                i_reg_1744 <= i_fu_1137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln309_reg_1643 <= icmp_ln309_fu_1012_p2;
                icmp_ln309_reg_1643_pp0_iter1_reg <= icmp_ln309_reg_1643;
                phi_ln309_reg_600_pp0_iter1_reg <= phi_ln309_reg_600;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln310_reg_1657 <= icmp_ln310_fu_1029_p2;
                icmp_ln310_reg_1657_pp1_iter1_reg <= icmp_ln310_reg_1657;
                phi_ln310_reg_612_pp1_iter1_reg <= phi_ln310_reg_612;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln311_reg_1671 <= icmp_ln311_fu_1046_p2;
                icmp_ln311_reg_1671_pp2_iter1_reg <= icmp_ln311_reg_1671;
                phi_ln311_reg_624_pp2_iter1_reg <= phi_ln311_reg_624;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln312_reg_1685 <= icmp_ln312_fu_1063_p2;
                icmp_ln312_reg_1685_pp3_iter1_reg <= icmp_ln312_reg_1685;
                phi_ln312_reg_636_pp3_iter1_reg <= phi_ln312_reg_636;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln319_reg_1699 <= icmp_ln319_fu_1080_p2;
                icmp_ln319_reg_1699_pp4_iter1_reg <= icmp_ln319_reg_1699;
                phi_ln319_reg_648_pp4_iter1_reg <= phi_ln319_reg_648;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln320_reg_1713 <= icmp_ln320_fu_1097_p2;
                icmp_ln320_reg_1713_pp5_iter1_reg <= icmp_ln320_reg_1713;
                phi_ln320_reg_660_pp5_iter1_reg <= phi_ln320_reg_660;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln321_reg_1727 <= icmp_ln321_fu_1114_p2;
                icmp_ln321_reg_1727_pp6_iter1_reg <= icmp_ln321_reg_1727;
                phi_ln321_reg_672_pp6_iter1_reg <= phi_ln321_reg_672;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln320_reg_1713 = ap_const_lv1_0))) then
                input_matrix_addr_1_1_reg_1722 <= m_axi_input_matrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    input_matrix_addr_1_reg_1613(29 downto 0) <= zext_ln308_1_fu_962_p1(32 - 1 downto 0)(29 downto 0);
                    input_matrix_addr_2_reg_1619(29 downto 0) <= zext_ln308_2_fu_972_p1(32 - 1 downto 0)(29 downto 0);
                    input_matrix_addr_3_reg_1625(29 downto 0) <= zext_ln308_3_fu_982_p1(32 - 1 downto 0)(29 downto 0);
                    input_matrix_addr_4_reg_1631(29 downto 0) <= zext_ln308_4_fu_992_p1(32 - 1 downto 0)(29 downto 0);
                    input_matrix_addr_5_reg_1637(29 downto 0) <= zext_ln308_5_fu_1002_p1(32 - 1 downto 0)(29 downto 0);
                    input_matrix_addr_reg_1607(29 downto 0) <= zext_ln308_fu_952_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln319_reg_1699 = ap_const_lv1_0))) then
                input_matrix_addr_2_1_reg_1708 <= m_axi_input_matrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln312_reg_1685 = ap_const_lv1_0))) then
                input_matrix_addr_3_1_reg_1694 <= m_axi_input_matrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln311_reg_1671 = ap_const_lv1_0))) then
                input_matrix_addr_4_1_reg_1680 <= m_axi_input_matrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln310_reg_1657 = ap_const_lv1_0))) then
                input_matrix_addr_5_1_reg_1666 <= m_axi_input_matrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln309_reg_1643 = ap_const_lv1_0))) then
                input_matrix_addr_6_1_reg_1652 <= m_axi_input_matrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln321_reg_1727 = ap_const_lv1_0))) then
                input_matrix_addr_re_reg_1736 <= m_axi_input_matrix_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                j_2_reg_1780 <= j_2_fu_1213_p2;
                    zext_ln79_reg_1772(7 downto 0) <= zext_ln79_fu_1203_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                j_6_reg_1826 <= j_6_fu_1263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                j_7_reg_1857 <= j_7_fu_1375_p2;
                    zext_ln87_reg_1849(5 downto 0) <= zext_ln87_fu_1365_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                j_8_reg_1903 <= j_8_fu_1425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                j_9_reg_1934 <= j_9_fu_1537_p2;
                    zext_ln95_reg_1926(3 downto 0) <= zext_ln95_fu_1527_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                j_reg_1757 <= j_fu_1183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                k_1_reg_1870 <= k_1_fu_1392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                k_2_reg_1947 <= k_2_fu_1554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                k_reg_1793 <= k_fu_1230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (icmp_ln95_fu_1531_p2 = ap_const_lv1_0))) then
                outmlp_0_addr_reg_1939 <= zext_ln96_fu_1543_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state80))) then
                reg_914 <= grp_fu_892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state87))) then
                reg_926 <= grp_fu_899_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state92))) then
                reg_931 <= grp_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state94))) then
                reg_936 <= grp_fu_896_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) and (icmp_ln87_fu_1369_p2 = ap_const_lv1_0))) then
                second_fc_0_addr_reg_1862 <= zext_ln88_fu_1381_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                second_fc_0_load_reg_1918 <= second_fc_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) and (icmp_ln72_fu_1131_p2 = ap_const_lv1_0))) then
                    sub_ln74_reg_1749(10 downto 3) <= sub_ln74_fu_1167_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) and (icmp_ln62_fu_1257_p2 = ap_const_lv1_0))) then
                    zext_ln63_reg_1831(7 downto 0) <= zext_ln63_fu_1269_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state106) and (icmp_ln67_fu_1419_p2 = ap_const_lv1_0))) then
                    zext_ln68_reg_1908(5 downto 0) <= zext_ln68_fu_1431_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln73_fu_1177_p2 = ap_const_lv1_0))) then
                    zext_ln74_reg_1762(31 downto 0) <= zext_ln74_fu_1198_p1(31 downto 0);
            end if;
        end if;
    end process;
    input_matrix_addr_reg_1607(31 downto 30) <= "00";
    input_matrix_addr_1_reg_1613(31 downto 30) <= "00";
    input_matrix_addr_2_reg_1619(31 downto 30) <= "00";
    input_matrix_addr_3_reg_1625(31 downto 30) <= "00";
    input_matrix_addr_4_reg_1631(31 downto 30) <= "00";
    input_matrix_addr_5_reg_1637(31 downto 30) <= "00";
    sub_ln74_reg_1749(2 downto 0) <= "000";
    zext_ln74_reg_1762(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln79_reg_1772(16 downto 8) <= "000000000";
    zext_ln63_reg_1831(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln87_reg_1849(12 downto 6) <= "0000000";
    zext_ln68_reg_1908(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln95_reg_1926(6 downto 4) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_input_matrix_ARREADY, ap_CS_fsm_state61, ap_enable_reg_pp6_iter1, ap_CS_fsm_state51, ap_enable_reg_pp5_iter1, ap_CS_fsm_state41, ap_enable_reg_pp4_iter1, ap_CS_fsm_state31, ap_enable_reg_pp3_iter1, ap_CS_fsm_state21, ap_enable_reg_pp2_iter1, ap_CS_fsm_state11, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter1, icmp_ln309_fu_1012_p2, ap_enable_reg_pp0_iter0, icmp_ln310_fu_1029_p2, ap_enable_reg_pp1_iter0, icmp_ln311_fu_1046_p2, ap_enable_reg_pp2_iter0, icmp_ln312_fu_1063_p2, ap_enable_reg_pp3_iter0, icmp_ln319_fu_1080_p2, ap_enable_reg_pp4_iter0, icmp_ln320_fu_1097_p2, ap_enable_reg_pp5_iter0, icmp_ln321_fu_1114_p2, ap_enable_reg_pp6_iter0, ap_CS_fsm_state72, icmp_ln72_fu_1131_p2, ap_CS_fsm_state73, icmp_ln73_fu_1177_p2, ap_CS_fsm_state75, icmp_ln79_fu_1207_p2, ap_CS_fsm_state76, icmp_ln81_fu_1224_p2, ap_CS_fsm_state85, icmp_ln62_fu_1257_p2, ap_CS_fsm_state96, icmp_ln87_fu_1369_p2, ap_CS_fsm_state97, icmp_ln89_fu_1386_p2, ap_CS_fsm_state106, icmp_ln67_fu_1419_p2, ap_CS_fsm_state117, icmp_ln95_fu_1531_p2, ap_CS_fsm_state118, icmp_ln97_fu_1548_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_CS_fsm_state47, grp_Conv2d3_fu_875_ap_done, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter2, grp_Conv2d1_fu_855_ap_done, grp_Conv2d2_fu_865_ap_done, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_input_matrix_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln309_fu_1012_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln309_fu_1012_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln310_fu_1029_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln310_fu_1029_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln311_fu_1046_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln311_fu_1046_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln312_fu_1063_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln312_fu_1063_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_Conv2d1_fu_855_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_Conv2d2_fu_865_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_Conv2d3_fu_875_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln319_fu_1080_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln319_fu_1080_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln320_fu_1097_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((icmp_ln320_fu_1097_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((icmp_ln321_fu_1114_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((icmp_ln321_fu_1114_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((icmp_ln72_fu_1131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state73 => 
                if (((icmp_ln73_fu_1177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state75 => 
                if (((icmp_ln79_fu_1207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                if (((icmp_ln81_fu_1224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state85 => 
                if (((icmp_ln62_fu_1257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state96 => 
                if (((icmp_ln87_fu_1369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state97 => 
                if (((icmp_ln89_fu_1386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state106 => 
                if (((icmp_ln67_fu_1419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state117 => 
                if (((icmp_ln95_fu_1531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when ap_ST_fsm_state118 => 
                if (((icmp_ln97_fu_1548_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln309_fu_1018_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln309_phi_fu_604_p4) + unsigned(ap_const_lv10_1));
    add_ln310_fu_1035_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln310_phi_fu_616_p4) + unsigned(ap_const_lv4_1));
    add_ln311_fu_1052_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln311_phi_fu_628_p4) + unsigned(ap_const_lv4_1));
    add_ln312_fu_1069_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln312_phi_fu_640_p4) + unsigned(ap_const_lv4_1));
    add_ln319_fu_1086_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln319_phi_fu_652_p4) + unsigned(ap_const_lv17_1));
    add_ln320_fu_1103_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln320_phi_fu_664_p4) + unsigned(ap_const_lv13_1));
    add_ln321_fu_1120_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln321_phi_fu_676_p4) + unsigned(ap_const_lv9_1));
    add_ln74_fu_1189_p2 <= std_logic_vector(unsigned(sub_ln74_reg_1749) + unsigned(zext_ln73_fu_1173_p1));
    add_ln82_1_fu_1241_p2 <= std_logic_vector(unsigned(phi_mul_reg_741) + unsigned(ap_const_lv17_B4));
    add_ln82_fu_1247_p2 <= std_logic_vector(unsigned(zext_ln79_reg_1772) + unsigned(phi_mul_reg_741));
    add_ln90_1_fu_1403_p2 <= std_logic_vector(unsigned(phi_mul196_reg_798) + unsigned(ap_const_lv13_2D));
    add_ln90_fu_1409_p2 <= std_logic_vector(unsigned(zext_ln87_reg_1849) + unsigned(phi_mul196_reg_798));
    add_ln98_1_fu_1590_p2 <= std_logic_vector(unsigned(shl_ln1_fu_1565_p3) + unsigned(zext_ln98_2_fu_1586_p1));
    add_ln98_fu_1581_p2 <= std_logic_vector(unsigned(zext_ln95_reg_1926) + unsigned(shl_ln98_1_fu_1573_p3));
    and_ln28_1_fu_1351_p2 <= (grp_fu_904_p2 and and_ln28_fu_1345_p2);
    and_ln28_2_fu_1507_p2 <= (or_ln28_3_fu_1501_p2 and or_ln28_2_fu_1483_p2);
    and_ln28_3_fu_1513_p2 <= (grp_fu_904_p2 and and_ln28_2_fu_1507_p2);
    and_ln28_fu_1345_p2 <= (or_ln28_fu_1321_p2 and or_ln28_1_fu_1339_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(39);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(55);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(86);
    ap_CS_fsm_state102 <= ap_CS_fsm(87);
    ap_CS_fsm_state105 <= ap_CS_fsm(90);
    ap_CS_fsm_state106 <= ap_CS_fsm(91);
    ap_CS_fsm_state107 <= ap_CS_fsm(92);
    ap_CS_fsm_state108 <= ap_CS_fsm(93);
    ap_CS_fsm_state109 <= ap_CS_fsm(94);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state113 <= ap_CS_fsm(98);
    ap_CS_fsm_state114 <= ap_CS_fsm(99);
    ap_CS_fsm_state115 <= ap_CS_fsm(100);
    ap_CS_fsm_state116 <= ap_CS_fsm(101);
    ap_CS_fsm_state117 <= ap_CS_fsm(102);
    ap_CS_fsm_state118 <= ap_CS_fsm(103);
    ap_CS_fsm_state119 <= ap_CS_fsm(104);
    ap_CS_fsm_state120 <= ap_CS_fsm(105);
    ap_CS_fsm_state122 <= ap_CS_fsm(107);
    ap_CS_fsm_state123 <= ap_CS_fsm(108);
    ap_CS_fsm_state126 <= ap_CS_fsm(111);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(16);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state31 <= ap_CS_fsm(24);
    ap_CS_fsm_state37 <= ap_CS_fsm(30);
    ap_CS_fsm_state41 <= ap_CS_fsm(32);
    ap_CS_fsm_state42 <= ap_CS_fsm(33);
    ap_CS_fsm_state43 <= ap_CS_fsm(34);
    ap_CS_fsm_state44 <= ap_CS_fsm(35);
    ap_CS_fsm_state45 <= ap_CS_fsm(36);
    ap_CS_fsm_state46 <= ap_CS_fsm(37);
    ap_CS_fsm_state47 <= ap_CS_fsm(38);
    ap_CS_fsm_state51 <= ap_CS_fsm(40);
    ap_CS_fsm_state57 <= ap_CS_fsm(46);
    ap_CS_fsm_state61 <= ap_CS_fsm(48);
    ap_CS_fsm_state67 <= ap_CS_fsm(54);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(56);
    ap_CS_fsm_state72 <= ap_CS_fsm(57);
    ap_CS_fsm_state73 <= ap_CS_fsm(58);
    ap_CS_fsm_state74 <= ap_CS_fsm(59);
    ap_CS_fsm_state75 <= ap_CS_fsm(60);
    ap_CS_fsm_state76 <= ap_CS_fsm(61);
    ap_CS_fsm_state77 <= ap_CS_fsm(62);
    ap_CS_fsm_state78 <= ap_CS_fsm(63);
    ap_CS_fsm_state80 <= ap_CS_fsm(65);
    ap_CS_fsm_state81 <= ap_CS_fsm(66);
    ap_CS_fsm_state84 <= ap_CS_fsm(69);
    ap_CS_fsm_state85 <= ap_CS_fsm(70);
    ap_CS_fsm_state86 <= ap_CS_fsm(71);
    ap_CS_fsm_state87 <= ap_CS_fsm(72);
    ap_CS_fsm_state88 <= ap_CS_fsm(73);
    ap_CS_fsm_state92 <= ap_CS_fsm(77);
    ap_CS_fsm_state93 <= ap_CS_fsm(78);
    ap_CS_fsm_state94 <= ap_CS_fsm(79);
    ap_CS_fsm_state95 <= ap_CS_fsm(80);
    ap_CS_fsm_state96 <= ap_CS_fsm(81);
    ap_CS_fsm_state97 <= ap_CS_fsm(82);
    ap_CS_fsm_state98 <= ap_CS_fsm(83);
    ap_CS_fsm_state99 <= ap_CS_fsm(84);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp0_iter1, icmp_ln309_reg_1643)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln309_reg_1643 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp0_iter1, icmp_ln309_reg_1643)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln309_reg_1643 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp1_iter1, icmp_ln310_reg_1657)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln310_reg_1657 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp1_iter1, icmp_ln310_reg_1657)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln310_reg_1657 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp2_iter1, icmp_ln311_reg_1671)
    begin
                ap_block_pp2_stage0_11001 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln311_reg_1671 = ap_const_lv1_0));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp2_iter1, icmp_ln311_reg_1671)
    begin
                ap_block_pp2_stage0_subdone <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln311_reg_1671 = ap_const_lv1_0));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp3_iter1, icmp_ln312_reg_1685)
    begin
                ap_block_pp3_stage0_11001 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln312_reg_1685 = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp3_iter1, icmp_ln312_reg_1685)
    begin
                ap_block_pp3_stage0_subdone <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln312_reg_1685 = ap_const_lv1_0));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp4_iter1, icmp_ln319_reg_1699)
    begin
                ap_block_pp4_stage0_11001 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln319_reg_1699 = ap_const_lv1_0));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp4_iter1, icmp_ln319_reg_1699)
    begin
                ap_block_pp4_stage0_subdone <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln319_reg_1699 = ap_const_lv1_0));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp5_iter1, icmp_ln320_reg_1713)
    begin
                ap_block_pp5_stage0_11001 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln320_reg_1713 = ap_const_lv1_0));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp5_iter1, icmp_ln320_reg_1713)
    begin
                ap_block_pp5_stage0_subdone <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln320_reg_1713 = ap_const_lv1_0));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp6_iter1, icmp_ln321_reg_1727)
    begin
                ap_block_pp6_stage0_11001 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln321_reg_1727 = ap_const_lv1_0));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(m_axi_input_matrix_RVALID, ap_enable_reg_pp6_iter1, icmp_ln321_reg_1727)
    begin
                ap_block_pp6_stage0_subdone <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln321_reg_1727 = ap_const_lv1_0));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp1_stage0_iter1_assign_proc : process(m_axi_input_matrix_RVALID, icmp_ln310_reg_1657)
    begin
                ap_block_state19_pp1_stage0_iter1 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (icmp_ln310_reg_1657 = ap_const_lv1_0));
    end process;

        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp2_stage0_iter1_assign_proc : process(m_axi_input_matrix_RVALID, icmp_ln311_reg_1671)
    begin
                ap_block_state29_pp2_stage0_iter1 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (icmp_ln311_reg_1671 = ap_const_lv1_0));
    end process;

        ap_block_state30_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_pp3_stage0_iter1_assign_proc : process(m_axi_input_matrix_RVALID, icmp_ln312_reg_1685)
    begin
                ap_block_state39_pp3_stage0_iter1 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (icmp_ln312_reg_1685 = ap_const_lv1_0));
    end process;

        ap_block_state40_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state49_pp4_stage0_iter1_assign_proc : process(m_axi_input_matrix_RVALID, icmp_ln319_reg_1699)
    begin
                ap_block_state49_pp4_stage0_iter1 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (icmp_ln319_reg_1699 = ap_const_lv1_0));
    end process;

        ap_block_state50_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state59_pp5_stage0_iter1_assign_proc : process(m_axi_input_matrix_RVALID, icmp_ln320_reg_1713)
    begin
                ap_block_state59_pp5_stage0_iter1 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (icmp_ln320_reg_1713 = ap_const_lv1_0));
    end process;

        ap_block_state60_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state69_pp6_stage0_iter1_assign_proc : process(m_axi_input_matrix_RVALID, icmp_ln321_reg_1727)
    begin
                ap_block_state69_pp6_stage0_iter1 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (icmp_ln321_reg_1727 = ap_const_lv1_0));
    end process;

        ap_block_state70_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(m_axi_input_matrix_RVALID, icmp_ln309_reg_1643)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((m_axi_input_matrix_RVALID = ap_const_logic_0) and (icmp_ln309_reg_1643 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln309_fu_1012_p2)
    begin
        if ((icmp_ln309_fu_1012_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(icmp_ln310_fu_1029_p2)
    begin
        if ((icmp_ln310_fu_1029_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state28_assign_proc : process(icmp_ln311_fu_1046_p2)
    begin
        if ((icmp_ln311_fu_1046_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state38_assign_proc : process(icmp_ln312_fu_1063_p2)
    begin
        if ((icmp_ln312_fu_1063_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state48_assign_proc : process(icmp_ln319_fu_1080_p2)
    begin
        if ((icmp_ln319_fu_1080_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state58_assign_proc : process(icmp_ln320_fu_1097_p2)
    begin
        if ((icmp_ln320_fu_1097_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state58 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state58 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state68_assign_proc : process(icmp_ln321_fu_1114_p2)
    begin
        if ((icmp_ln321_fu_1114_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state68 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state117, icmp_ln95_fu_1531_p2)
    begin
        if ((((icmp_ln95_fu_1531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state117)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln309_phi_fu_604_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln309_reg_1643, phi_ln309_reg_600, add_ln309_reg_1647)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln309_reg_1643 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln309_phi_fu_604_p4 <= add_ln309_reg_1647;
        else 
            ap_phi_mux_phi_ln309_phi_fu_604_p4 <= phi_ln309_reg_600;
        end if; 
    end process;


    ap_phi_mux_phi_ln310_phi_fu_616_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln310_reg_1657, phi_ln310_reg_612, add_ln310_reg_1661)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln310_reg_1657 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln310_phi_fu_616_p4 <= add_ln310_reg_1661;
        else 
            ap_phi_mux_phi_ln310_phi_fu_616_p4 <= phi_ln310_reg_612;
        end if; 
    end process;


    ap_phi_mux_phi_ln311_phi_fu_628_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln311_reg_1671, phi_ln311_reg_624, add_ln311_reg_1675)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln311_reg_1671 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln311_phi_fu_628_p4 <= add_ln311_reg_1675;
        else 
            ap_phi_mux_phi_ln311_phi_fu_628_p4 <= phi_ln311_reg_624;
        end if; 
    end process;


    ap_phi_mux_phi_ln312_phi_fu_640_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln312_reg_1685, phi_ln312_reg_636, add_ln312_reg_1689)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln312_reg_1685 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln312_phi_fu_640_p4 <= add_ln312_reg_1689;
        else 
            ap_phi_mux_phi_ln312_phi_fu_640_p4 <= phi_ln312_reg_636;
        end if; 
    end process;


    ap_phi_mux_phi_ln319_phi_fu_652_p4_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, icmp_ln319_reg_1699, phi_ln319_reg_648, add_ln319_reg_1703)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln319_reg_1699 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln319_phi_fu_652_p4 <= add_ln319_reg_1703;
        else 
            ap_phi_mux_phi_ln319_phi_fu_652_p4 <= phi_ln319_reg_648;
        end if; 
    end process;


    ap_phi_mux_phi_ln320_phi_fu_664_p4_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln320_reg_1713, phi_ln320_reg_660, add_ln320_reg_1717)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln320_reg_1713 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln320_phi_fu_664_p4 <= add_ln320_reg_1717;
        else 
            ap_phi_mux_phi_ln320_phi_fu_664_p4 <= phi_ln320_reg_660;
        end if; 
    end process;


    ap_phi_mux_phi_ln321_phi_fu_676_p4_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln321_reg_1727, phi_ln321_reg_672, add_ln321_reg_1731)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln321_reg_1727 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln321_phi_fu_676_p4 <= add_ln321_reg_1731;
        else 
            ap_phi_mux_phi_ln321_phi_fu_676_p4 <= phi_ln321_reg_672;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state117, icmp_ln95_fu_1531_p2)
    begin
        if (((icmp_ln95_fu_1531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_1291_p1 <= reg_936;
    bitcast_ln28_2_fu_1436_p1 <= second_fc_0_load_reg_1918;
    bitcast_ln28_3_fu_1453_p1 <= reg_936;
    bitcast_ln28_fu_1274_p1 <= first_fc_0_load_reg_1841;

    conv_kernel1_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, grp_Conv2d1_fu_855_kernel_address0, ap_CS_fsm_state43, zext_ln310_fu_1041_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            conv_kernel1_address0 <= zext_ln310_fu_1041_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            conv_kernel1_address0 <= grp_Conv2d1_fu_855_kernel_address0;
        else 
            conv_kernel1_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, grp_Conv2d1_fu_855_kernel_ce0, ap_CS_fsm_state43)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            conv_kernel1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            conv_kernel1_ce0 <= grp_Conv2d1_fu_855_kernel_ce0;
        else 
            conv_kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel1_d0 <= input_matrix_addr_5_1_reg_1666;

    conv_kernel1_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln310_reg_1657_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln310_reg_1657_pp1_iter1_reg = ap_const_lv1_0))) then 
            conv_kernel1_we0 <= ap_const_logic_1;
        else 
            conv_kernel1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel2_address0_assign_proc : process(ap_block_pp2_stage0, ap_enable_reg_pp2_iter2, grp_Conv2d2_fu_865_kernel_address0, ap_CS_fsm_state45, zext_ln311_fu_1058_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            conv_kernel2_address0 <= zext_ln311_fu_1058_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            conv_kernel2_address0 <= grp_Conv2d2_fu_865_kernel_address0;
        else 
            conv_kernel2_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel2_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, grp_Conv2d2_fu_865_kernel_ce0, ap_CS_fsm_state45)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            conv_kernel2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            conv_kernel2_ce0 <= grp_Conv2d2_fu_865_kernel_ce0;
        else 
            conv_kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel2_d0 <= input_matrix_addr_4_1_reg_1680;

    conv_kernel2_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln311_reg_1671_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln311_reg_1671_pp2_iter1_reg = ap_const_lv1_0))) then 
            conv_kernel2_we0 <= ap_const_logic_1;
        else 
            conv_kernel2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel3_address0_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, ap_CS_fsm_state47, grp_Conv2d3_fu_875_kernel_address0, zext_ln312_fu_1075_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            conv_kernel3_address0 <= zext_ln312_fu_1075_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            conv_kernel3_address0 <= grp_Conv2d3_fu_875_kernel_address0;
        else 
            conv_kernel3_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel3_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2, ap_CS_fsm_state47, grp_Conv2d3_fu_875_kernel_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            conv_kernel3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            conv_kernel3_ce0 <= grp_Conv2d3_fu_875_kernel_ce0;
        else 
            conv_kernel3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel3_d0 <= input_matrix_addr_3_1_reg_1694;

    conv_kernel3_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln312_reg_1685_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln312_reg_1685_pp3_iter1_reg = ap_const_lv1_0))) then 
            conv_kernel3_we0 <= ap_const_logic_1;
        else 
            conv_kernel3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer1_address0_assign_proc : process(ap_block_pp4_stage0, ap_CS_fsm_state76, ap_enable_reg_pp4_iter2, zext_ln319_fu_1092_p1, zext_ln82_1_fu_1252_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            fc_hidden_layer1_address0 <= zext_ln82_1_fu_1252_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer1_address0 <= zext_ln319_fu_1092_p1(17 - 1 downto 0);
        else 
            fc_hidden_layer1_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer1_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_state76, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then 
            fc_hidden_layer1_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer1_d0 <= input_matrix_addr_2_1_reg_1708;

    fc_hidden_layer1_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln319_reg_1699_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln319_reg_1699_pp4_iter1_reg = ap_const_lv1_0))) then 
            fc_hidden_layer1_we0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer2_address0 <= zext_ln90_1_fu_1414_p1(13 - 1 downto 0);
    fc_hidden_layer2_address1 <= zext_ln320_fu_1109_p1(13 - 1 downto 0);

    fc_hidden_layer2_ce0_assign_proc : process(ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            fc_hidden_layer2_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_ce1_assign_proc : process(ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer2_ce1 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer2_d1 <= input_matrix_addr_1_1_reg_1722;

    fc_hidden_layer2_we1_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln320_reg_1713_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln320_reg_1713_pp5_iter1_reg = ap_const_lv1_0))) then 
            fc_hidden_layer2_we1 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer3_address0_assign_proc : process(ap_block_pp6_stage0, ap_CS_fsm_state118, ap_enable_reg_pp6_iter2, zext_ln321_fu_1126_p1, zext_ln98_1_fu_1596_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            fc_hidden_layer3_address0 <= zext_ln98_1_fu_1596_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer3_address0 <= zext_ln321_fu_1126_p1(9 - 1 downto 0);
        else 
            fc_hidden_layer3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer3_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_CS_fsm_state118, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)))) then 
            fc_hidden_layer3_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer3_d0 <= input_matrix_addr_re_reg_1736;

    fc_hidden_layer3_we0_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln321_reg_1727_pp6_iter1_reg, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln321_reg_1727_pp6_iter1_reg = ap_const_lv1_0))) then 
            fc_hidden_layer3_we0 <= ap_const_logic_1;
        else 
            fc_hidden_layer3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    first_conv1_address0_assign_proc : process(grp_Conv2d1_fu_855_out_matrix_address0, grp_Conv2d2_fu_865_input_matrix_address0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            first_conv1_address0 <= grp_Conv2d2_fu_865_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            first_conv1_address0 <= grp_Conv2d1_fu_855_out_matrix_address0;
        else 
            first_conv1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    first_conv1_ce0_assign_proc : process(grp_Conv2d1_fu_855_out_matrix_ce0, grp_Conv2d2_fu_865_input_matrix_ce0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            first_conv1_ce0 <= grp_Conv2d2_fu_865_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            first_conv1_ce0 <= grp_Conv2d1_fu_855_out_matrix_ce0;
        else 
            first_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    first_conv1_d0 <= grp_Conv2d1_fu_855_out_matrix_d0;

    first_conv1_we0_assign_proc : process(grp_Conv2d1_fu_855_out_matrix_we0, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            first_conv1_we0 <= grp_Conv2d1_fu_855_out_matrix_we0;
        else 
            first_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    first_fc_0_address0_assign_proc : process(first_fc_0_addr_reg_1785, ap_CS_fsm_state76, ap_CS_fsm_state85, zext_ln63_fu_1269_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            first_fc_0_address0 <= zext_ln63_fu_1269_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            first_fc_0_address0 <= first_fc_0_addr_reg_1785;
        else 
            first_fc_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    first_fc_0_ce0_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            first_fc_0_ce0 <= ap_const_logic_1;
        else 
            first_fc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    first_fc_0_d0 <= storemerge_reg_717;

    first_fc_0_we0_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            first_fc_0_we0 <= ap_const_logic_1;
        else 
            first_fc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    first_relu_0_address0_assign_proc : process(zext_ln63_reg_1831, ap_CS_fsm_state97, ap_CS_fsm_state95, zext_ln90_fu_1398_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            first_relu_0_address0 <= zext_ln90_fu_1398_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            first_relu_0_address0 <= zext_ln63_reg_1831(8 - 1 downto 0);
        else 
            first_relu_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    first_relu_0_ce0_assign_proc : process(ap_CS_fsm_state97, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            first_relu_0_ce0 <= ap_const_logic_1;
        else 
            first_relu_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    first_relu_0_d0 <= 
        first_fc_0_load_reg_1841 when (and_ln28_1_fu_1351_p2(0) = '1') else 
        reg_936;

    first_relu_0_we0_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            first_relu_0_we0 <= ap_const_logic_1;
        else 
            first_relu_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_conv_0_address0_assign_proc : process(zext_ln74_reg_1762, ap_CS_fsm_state76, ap_CS_fsm_state74, zext_ln82_fu_1236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            flatten_conv_0_address0 <= zext_ln82_fu_1236_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            flatten_conv_0_address0 <= zext_ln74_reg_1762(10 - 1 downto 0);
        else 
            flatten_conv_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    flatten_conv_0_ce0_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            flatten_conv_0_ce0 <= ap_const_logic_1;
        else 
            flatten_conv_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatten_conv_0_d0 <= third_conv1_q0;

    flatten_conv_0_we0_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            flatten_conv_0_we0 <= ap_const_logic_1;
        else 
            flatten_conv_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv2d1_fu_855_ap_start <= grp_Conv2d1_fu_855_ap_start_reg;
    grp_Conv2d2_fu_865_ap_start <= grp_Conv2d2_fu_865_ap_start_reg;
    grp_Conv2d3_fu_875_ap_start <= grp_Conv2d3_fu_875_ap_start_reg;

    grp_fu_885_p0_assign_proc : process(storemerge_reg_717, storemerge198_reg_774, storemerge199_reg_831, ap_CS_fsm_state81, ap_CS_fsm_state102, ap_CS_fsm_state123)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            grp_fu_885_p0 <= storemerge199_reg_831;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_885_p0 <= storemerge198_reg_774;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_885_p0 <= storemerge_reg_717;
        else 
            grp_fu_885_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_892_p0_assign_proc : process(flatten_conv_0_load_reg_1813, first_relu_0_load_reg_1890, second_relu_0_load_reg_1962, ap_CS_fsm_state78, ap_CS_fsm_state99, ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            grp_fu_892_p0 <= second_relu_0_load_reg_1962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_892_p0 <= first_relu_0_load_reg_1890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_892_p0 <= flatten_conv_0_load_reg_1813;
        else 
            grp_fu_892_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_892_p1_assign_proc : process(fc_hidden_layer1_loa_reg_1818, fc_hidden_layer2_loa_reg_1895, fc_hidden_layer3_loa_reg_1967, ap_CS_fsm_state78, ap_CS_fsm_state99, ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            grp_fu_892_p1 <= fc_hidden_layer3_loa_reg_1967;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_892_p1 <= fc_hidden_layer2_loa_reg_1895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_892_p1 <= fc_hidden_layer1_loa_reg_1818;
        else 
            grp_fu_892_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_899_p0_assign_proc : process(first_fc_0_q0, second_fc_0_q0, ap_CS_fsm_state86, ap_CS_fsm_state107)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            grp_fu_899_p0 <= second_fc_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_fu_899_p0 <= first_fc_0_q0;
        else 
            grp_fu_899_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_904_p0_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state115, first_fc_0_load_reg_1841, second_fc_0_load_reg_1918)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            grp_fu_904_p0 <= second_fc_0_load_reg_1918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_904_p0 <= first_fc_0_load_reg_1841;
        else 
            grp_fu_904_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_1137_p2 <= std_logic_vector(unsigned(i_0_i_reg_684) + unsigned(ap_const_lv5_1));
    icmp_ln28_1_fu_1315_p2 <= "1" when (trunc_ln28_fu_1287_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_1327_p2 <= "0" when (tmp_2_fu_1295_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_1333_p2 <= "1" when (trunc_ln28_1_fu_1305_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_1471_p2 <= "0" when (tmp_4_fu_1439_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_1477_p2 <= "1" when (trunc_ln28_2_fu_1449_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_1489_p2 <= "0" when (tmp_5_fu_1457_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_1495_p2 <= "1" when (trunc_ln28_3_fu_1467_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_1309_p2 <= "0" when (tmp_1_fu_1277_p4 = ap_const_lv8_FF) else "1";
    icmp_ln309_fu_1012_p2 <= "1" when (ap_phi_mux_phi_ln309_phi_fu_604_p4 = ap_const_lv10_384) else "0";
    icmp_ln310_fu_1029_p2 <= "1" when (ap_phi_mux_phi_ln310_phi_fu_616_p4 = ap_const_lv4_9) else "0";
    icmp_ln311_fu_1046_p2 <= "1" when (ap_phi_mux_phi_ln311_phi_fu_628_p4 = ap_const_lv4_9) else "0";
    icmp_ln312_fu_1063_p2 <= "1" when (ap_phi_mux_phi_ln312_phi_fu_640_p4 = ap_const_lv4_9) else "0";
    icmp_ln319_fu_1080_p2 <= "1" when (ap_phi_mux_phi_ln319_phi_fu_652_p4 = ap_const_lv17_19500) else "0";
    icmp_ln320_fu_1097_p2 <= "1" when (ap_phi_mux_phi_ln320_phi_fu_664_p4 = ap_const_lv13_1FA4) else "0";
    icmp_ln321_fu_1114_p2 <= "1" when (ap_phi_mux_phi_ln321_phi_fu_676_p4 = ap_const_lv9_1C2) else "0";
    icmp_ln62_fu_1257_p2 <= "1" when (j_0_i92_reg_752 = ap_const_lv8_B4) else "0";
    icmp_ln67_fu_1419_p2 <= "1" when (j_0_i110_reg_809 = ap_const_lv6_2D) else "0";
    icmp_ln72_fu_1131_p2 <= "1" when (i_0_i_reg_684 = ap_const_lv5_18) else "0";
    icmp_ln73_fu_1177_p2 <= "1" when (j_0_i_reg_695 = ap_const_lv5_18) else "0";
    icmp_ln79_fu_1207_p2 <= "1" when (j_0_i89_reg_706 = ap_const_lv8_B4) else "0";
    icmp_ln81_fu_1224_p2 <= "1" when (k_0_i_reg_730 = ap_const_lv10_240) else "0";
    icmp_ln87_fu_1369_p2 <= "1" when (j_0_i99_reg_763 = ap_const_lv6_2D) else "0";
    icmp_ln89_fu_1386_p2 <= "1" when (k_0_i101_reg_787 = ap_const_lv8_B4) else "0";
    icmp_ln95_fu_1531_p2 <= "1" when (j_0_i119_reg_820 = ap_const_lv4_A) else "0";
    icmp_ln97_fu_1548_p2 <= "1" when (k_0_i121_reg_844 = ap_const_lv6_2D) else "0";

    input_matrix_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_input_matrix_ARREADY, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state61) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            input_matrix_blk_n_AR <= m_axi_input_matrix_ARREADY;
        else 
            input_matrix_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_matrix_blk_n_R_assign_proc : process(m_axi_input_matrix_RVALID, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln321_reg_1727, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln320_reg_1713, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, icmp_ln319_reg_1699, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln312_reg_1685, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln311_reg_1671, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln310_reg_1657, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln309_reg_1643)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln309_reg_1643 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln310_reg_1657 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln311_reg_1671 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln312_reg_1685 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln319_reg_1699 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln320_reg_1713 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln321_reg_1727 = ap_const_lv1_0)))) then 
            input_matrix_blk_n_R <= m_axi_input_matrix_RVALID;
        else 
            input_matrix_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    j_2_fu_1213_p2 <= std_logic_vector(unsigned(j_0_i89_reg_706) + unsigned(ap_const_lv8_1));
    j_6_fu_1263_p2 <= std_logic_vector(unsigned(j_0_i92_reg_752) + unsigned(ap_const_lv8_1));
    j_7_fu_1375_p2 <= std_logic_vector(unsigned(j_0_i99_reg_763) + unsigned(ap_const_lv6_1));
    j_8_fu_1425_p2 <= std_logic_vector(unsigned(j_0_i110_reg_809) + unsigned(ap_const_lv6_1));
    j_9_fu_1537_p2 <= std_logic_vector(unsigned(j_0_i119_reg_820) + unsigned(ap_const_lv4_1));
    j_fu_1183_p2 <= std_logic_vector(unsigned(j_0_i_reg_695) + unsigned(ap_const_lv5_1));
    k_1_fu_1392_p2 <= std_logic_vector(unsigned(k_0_i101_reg_787) + unsigned(ap_const_lv8_1));
    k_2_fu_1554_p2 <= std_logic_vector(unsigned(k_0_i121_reg_844) + unsigned(ap_const_lv6_1));
    k_fu_1230_p2 <= std_logic_vector(unsigned(k_0_i_reg_730) + unsigned(ap_const_lv10_1));

    m_axi_input_matrix_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_input_matrix_ARREADY, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11, input_matrix_addr_reg_1607, input_matrix_addr_1_reg_1613, input_matrix_addr_2_reg_1619, input_matrix_addr_3_reg_1625, input_matrix_addr_4_reg_1631, input_matrix_addr_5_reg_1637, zext_ln308_6_fu_941_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARADDR <= input_matrix_addr_reg_1607;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARADDR <= input_matrix_addr_1_reg_1613;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARADDR <= input_matrix_addr_2_reg_1619;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARADDR <= input_matrix_addr_3_reg_1625;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARADDR <= input_matrix_addr_4_reg_1631;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARADDR <= input_matrix_addr_5_reg_1637;
        elsif ((not(((m_axi_input_matrix_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_input_matrix_ARADDR <= zext_ln308_6_fu_941_p1(32 - 1 downto 0);
        else 
            m_axi_input_matrix_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_input_matrix_ARBURST <= ap_const_lv2_0;
    m_axi_input_matrix_ARCACHE <= ap_const_lv4_0;
    m_axi_input_matrix_ARID <= ap_const_lv1_0;

    m_axi_input_matrix_ARLEN_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_input_matrix_ARREADY, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARLEN <= ap_const_lv32_1C2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARLEN <= ap_const_lv32_1FA4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_input_matrix_ARREADY = ap_const_logic_1))) then 
            m_axi_input_matrix_ARLEN <= ap_const_lv32_19500;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)))) then 
            m_axi_input_matrix_ARLEN <= ap_const_lv32_9;
        elsif ((not(((m_axi_input_matrix_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_input_matrix_ARLEN <= ap_const_lv32_384;
        else 
            m_axi_input_matrix_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_input_matrix_ARLOCK <= ap_const_lv2_0;
    m_axi_input_matrix_ARPROT <= ap_const_lv3_0;
    m_axi_input_matrix_ARQOS <= ap_const_lv4_0;
    m_axi_input_matrix_ARREGION <= ap_const_lv4_0;
    m_axi_input_matrix_ARSIZE <= ap_const_lv3_0;
    m_axi_input_matrix_ARUSER <= ap_const_lv1_0;

    m_axi_input_matrix_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_input_matrix_ARREADY, ap_CS_fsm_state61, ap_CS_fsm_state51, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (m_axi_input_matrix_ARREADY = ap_const_logic_1)) or (not(((m_axi_input_matrix_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            m_axi_input_matrix_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input_matrix_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_matrix_AWADDR <= ap_const_lv32_0;
    m_axi_input_matrix_AWBURST <= ap_const_lv2_0;
    m_axi_input_matrix_AWCACHE <= ap_const_lv4_0;
    m_axi_input_matrix_AWID <= ap_const_lv1_0;
    m_axi_input_matrix_AWLEN <= ap_const_lv32_0;
    m_axi_input_matrix_AWLOCK <= ap_const_lv2_0;
    m_axi_input_matrix_AWPROT <= ap_const_lv3_0;
    m_axi_input_matrix_AWQOS <= ap_const_lv4_0;
    m_axi_input_matrix_AWREGION <= ap_const_lv4_0;
    m_axi_input_matrix_AWSIZE <= ap_const_lv3_0;
    m_axi_input_matrix_AWUSER <= ap_const_lv1_0;
    m_axi_input_matrix_AWVALID <= ap_const_logic_0;
    m_axi_input_matrix_BREADY <= ap_const_logic_0;

    m_axi_input_matrix_RREADY_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, icmp_ln321_reg_1727, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln320_reg_1713, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, icmp_ln319_reg_1699, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln312_reg_1685, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln311_reg_1671, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln310_reg_1657, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln309_reg_1643, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln309_reg_1643 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln310_reg_1657 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln311_reg_1671 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln312_reg_1685 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln319_reg_1699 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln320_reg_1713 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln321_reg_1727 = ap_const_lv1_0)))) then 
            m_axi_input_matrix_RREADY <= ap_const_logic_1;
        else 
            m_axi_input_matrix_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_matrix_WDATA <= ap_const_lv32_0;
    m_axi_input_matrix_WID <= ap_const_lv1_0;
    m_axi_input_matrix_WLAST <= ap_const_logic_0;
    m_axi_input_matrix_WSTRB <= ap_const_lv4_0;
    m_axi_input_matrix_WUSER <= ap_const_lv1_0;
    m_axi_input_matrix_WVALID <= ap_const_logic_0;

    mnist_data_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, grp_Conv2d1_fu_855_input_matrix_address0, ap_CS_fsm_state43, zext_ln309_fu_1024_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mnist_data_address0 <= zext_ln309_fu_1024_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            mnist_data_address0 <= grp_Conv2d1_fu_855_input_matrix_address0;
        else 
            mnist_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mnist_data_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_Conv2d1_fu_855_input_matrix_ce0, ap_CS_fsm_state43)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mnist_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            mnist_data_ce0 <= grp_Conv2d1_fu_855_input_matrix_ce0;
        else 
            mnist_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mnist_data_d0 <= input_matrix_addr_6_1_reg_1652;

    mnist_data_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln309_reg_1643_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln309_reg_1643_pp0_iter1_reg = ap_const_lv1_0))) then 
            mnist_data_we0 <= ap_const_logic_1;
        else 
            mnist_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_1_fu_1339_p2 <= (icmp_ln28_3_fu_1333_p2 or icmp_ln28_2_fu_1327_p2);
    or_ln28_2_fu_1483_p2 <= (icmp_ln28_5_fu_1477_p2 or icmp_ln28_4_fu_1471_p2);
    or_ln28_3_fu_1501_p2 <= (icmp_ln28_7_fu_1495_p2 or icmp_ln28_6_fu_1489_p2);
    or_ln28_fu_1321_p2 <= (icmp_ln28_fu_1309_p2 or icmp_ln28_1_fu_1315_p2);
    outmlp_0_address0 <= outmlp_0_addr_reg_1939;

    outmlp_0_ce0_assign_proc : process(ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            outmlp_0_ce0 <= ap_const_logic_1;
        else 
            outmlp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outmlp_0_d0 <= storemerge199_reg_831;

    outmlp_0_we0_assign_proc : process(ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            outmlp_0_we0 <= ap_const_logic_1;
        else 
            outmlp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    second_fc_0_address0_assign_proc : process(second_fc_0_addr_reg_1862, ap_CS_fsm_state97, ap_CS_fsm_state106, zext_ln68_fu_1431_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            second_fc_0_address0 <= zext_ln68_fu_1431_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            second_fc_0_address0 <= second_fc_0_addr_reg_1862;
        else 
            second_fc_0_address0 <= "XXXXXX";
        end if; 
    end process;


    second_fc_0_ce0_assign_proc : process(ap_CS_fsm_state97, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            second_fc_0_ce0 <= ap_const_logic_1;
        else 
            second_fc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_fc_0_d0 <= storemerge198_reg_774;

    second_fc_0_we0_assign_proc : process(ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            second_fc_0_we0 <= ap_const_logic_1;
        else 
            second_fc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    second_relu_0_address0_assign_proc : process(zext_ln68_reg_1908, ap_CS_fsm_state118, ap_CS_fsm_state116, zext_ln98_fu_1560_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            second_relu_0_address0 <= zext_ln98_fu_1560_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            second_relu_0_address0 <= zext_ln68_reg_1908(6 - 1 downto 0);
        else 
            second_relu_0_address0 <= "XXXXXX";
        end if; 
    end process;


    second_relu_0_ce0_assign_proc : process(ap_CS_fsm_state118, ap_CS_fsm_state116)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            second_relu_0_ce0 <= ap_const_logic_1;
        else 
            second_relu_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_relu_0_d0 <= 
        second_fc_0_load_reg_1918 when (and_ln28_3_fu_1513_p2(0) = '1') else 
        reg_936;

    second_relu_0_we0_assign_proc : process(ap_CS_fsm_state116)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            second_relu_0_we0 <= ap_const_logic_1;
        else 
            second_relu_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sencond_conv1_address0_assign_proc : process(ap_CS_fsm_state47, grp_Conv2d2_fu_865_out_matrix_address0, grp_Conv2d3_fu_875_input_matrix_address0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sencond_conv1_address0 <= grp_Conv2d3_fu_875_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sencond_conv1_address0 <= grp_Conv2d2_fu_865_out_matrix_address0;
        else 
            sencond_conv1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sencond_conv1_ce0_assign_proc : process(ap_CS_fsm_state47, grp_Conv2d2_fu_865_out_matrix_ce0, grp_Conv2d3_fu_875_input_matrix_ce0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sencond_conv1_ce0 <= grp_Conv2d3_fu_875_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sencond_conv1_ce0 <= grp_Conv2d2_fu_865_out_matrix_ce0;
        else 
            sencond_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sencond_conv1_d0 <= grp_Conv2d2_fu_865_out_matrix_d0;

    sencond_conv1_we0_assign_proc : process(grp_Conv2d2_fu_865_out_matrix_we0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sencond_conv1_we0 <= grp_Conv2d2_fu_865_out_matrix_we0;
        else 
            sencond_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln74_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln74_fu_1189_p2),32));

    shl_ln1_fu_1565_p3 <= (k_0_i121_reg_844 & ap_const_lv3_0);
    shl_ln74_1_fu_1155_p3 <= (i_0_i_reg_684 & ap_const_lv3_0);
    shl_ln98_1_fu_1573_p3 <= (k_0_i121_reg_844 & ap_const_lv1_0);
    shl_ln_fu_1143_p3 <= (i_0_i_reg_684 & ap_const_lv5_0);
    sub_ln74_fu_1167_p2 <= std_logic_vector(unsigned(zext_ln74_1_fu_1151_p1) - unsigned(zext_ln74_2_fu_1163_p1));

    third_conv1_address0_assign_proc : process(ap_CS_fsm_state73, zext_ln74_fu_1198_p1, ap_CS_fsm_state47, grp_Conv2d3_fu_875_out_matrix_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            third_conv1_address0 <= zext_ln74_fu_1198_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            third_conv1_address0 <= grp_Conv2d3_fu_875_out_matrix_address0;
        else 
            third_conv1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    third_conv1_ce0_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state47, grp_Conv2d3_fu_875_out_matrix_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            third_conv1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            third_conv1_ce0 <= grp_Conv2d3_fu_875_out_matrix_ce0;
        else 
            third_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    third_conv1_we0_assign_proc : process(ap_CS_fsm_state47, grp_Conv2d3_fu_875_out_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            third_conv1_we0 <= grp_Conv2d3_fu_875_out_matrix_we0;
        else 
            third_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_1277_p4 <= bitcast_ln28_fu_1274_p1(30 downto 23);
    tmp_2_fu_1295_p4 <= bitcast_ln28_1_fu_1291_p1(30 downto 23);
    tmp_4_fu_1439_p4 <= bitcast_ln28_2_fu_1436_p1(30 downto 23);
    tmp_5_fu_1457_p4 <= bitcast_ln28_3_fu_1453_p1(30 downto 23);
    trunc_ln28_1_fu_1305_p1 <= bitcast_ln28_1_fu_1291_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_1449_p1 <= bitcast_ln28_2_fu_1436_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_1467_p1 <= bitcast_ln28_3_fu_1453_p1(23 - 1 downto 0);
    trunc_ln28_fu_1287_p1 <= bitcast_ln28_fu_1274_p1(23 - 1 downto 0);
    zext_ln308_1_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc2_offset),64));
    zext_ln308_2_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc1_offset),64));
    zext_ln308_3_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_offset),64));
    zext_ln308_4_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv2_offset),64));
    zext_ln308_5_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv1_offset),64));
    zext_ln308_6_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_matrix_offset),64));
    zext_ln308_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc3_offset),64));
    zext_ln309_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln309_reg_600_pp0_iter1_reg),64));
    zext_ln310_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln310_reg_612_pp1_iter1_reg),64));
    zext_ln311_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln311_reg_624_pp2_iter1_reg),64));
    zext_ln312_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln312_reg_636_pp3_iter1_reg),64));
    zext_ln319_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln319_reg_648_pp4_iter1_reg),64));
    zext_ln320_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln320_reg_660_pp5_iter1_reg),64));
    zext_ln321_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln321_reg_672_pp6_iter1_reg),64));
    zext_ln63_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i92_reg_752),64));
    zext_ln68_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i110_reg_809),64));
    zext_ln73_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_695),11));
    zext_ln74_1_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1143_p3),11));
    zext_ln74_2_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln74_1_fu_1155_p3),11));
    zext_ln74_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln74_fu_1194_p1),64));
    zext_ln79_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i89_reg_706),17));
    zext_ln80_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i89_reg_706),64));
    zext_ln82_1_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_fu_1247_p2),64));
    zext_ln82_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_730),64));
    zext_ln87_fu_1365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i99_reg_763),13));
    zext_ln88_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i99_reg_763),64));
    zext_ln90_1_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_fu_1409_p2),64));
    zext_ln90_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i101_reg_787),64));
    zext_ln95_fu_1527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i119_reg_820),7));
    zext_ln96_fu_1543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i119_reg_820),64));
    zext_ln98_1_fu_1596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_1_fu_1590_p2),64));
    zext_ln98_2_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_1581_p2),9));
    zext_ln98_fu_1560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i121_reg_844),64));
end behav;
