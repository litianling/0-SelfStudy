// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mnist_data_address0,
        mnist_data_ce0,
        mnist_data_q0,
        conv_kernel_1_address0,
        conv_kernel_1_ce0,
        conv_kernel_1_q0,
        max_poo_out_1_address0,
        max_poo_out_1_ce0,
        max_poo_out_1_we0,
        max_poo_out_1_d0,
        max_poo_out_1_q0,
        max_poo_locate_1_address0,
        max_poo_locate_1_ce0,
        max_poo_locate_1_we0,
        max_poo_locate_1_d0,
        conv_kernel_2_address0,
        conv_kernel_2_ce0,
        conv_kernel_2_q0,
        max_poo_locate_2_address0,
        max_poo_locate_2_ce0,
        max_poo_locate_2_we0,
        max_poo_locate_2_d0,
        fc_in_1_0_address0,
        fc_in_1_0_ce0,
        fc_in_1_0_we0,
        fc_in_1_0_d0,
        fc_in_1_0_q0,
        fc_in_1_0_address1,
        fc_in_1_0_ce1,
        fc_in_1_0_we1,
        fc_in_1_0_d1,
        fc_out_1_0_address0,
        fc_out_1_0_ce0,
        fc_out_1_0_we0,
        fc_out_1_0_d0,
        fc_out_1_0_q0,
        fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0,
        fc_hidden_layer1_q0,
        fc_in_2_relu1_0_address0,
        fc_in_2_relu1_0_ce0,
        fc_in_2_relu1_0_we0,
        fc_in_2_relu1_0_d0,
        fc_in_2_relu1_0_q0,
        fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0,
        probability_result_address0,
        probability_result_ce0,
        probability_result_we0,
        probability_result_d0
);

parameter    ap_ST_fsm_state1 = 107'd1;
parameter    ap_ST_fsm_state2 = 107'd2;
parameter    ap_ST_fsm_state3 = 107'd4;
parameter    ap_ST_fsm_state4 = 107'd8;
parameter    ap_ST_fsm_state5 = 107'd16;
parameter    ap_ST_fsm_state6 = 107'd32;
parameter    ap_ST_fsm_state7 = 107'd64;
parameter    ap_ST_fsm_state8 = 107'd128;
parameter    ap_ST_fsm_pp0_stage0 = 107'd256;
parameter    ap_ST_fsm_pp0_stage1 = 107'd512;
parameter    ap_ST_fsm_pp0_stage2 = 107'd1024;
parameter    ap_ST_fsm_state13 = 107'd2048;
parameter    ap_ST_fsm_state14 = 107'd4096;
parameter    ap_ST_fsm_state15 = 107'd8192;
parameter    ap_ST_fsm_state16 = 107'd16384;
parameter    ap_ST_fsm_state17 = 107'd32768;
parameter    ap_ST_fsm_state18 = 107'd65536;
parameter    ap_ST_fsm_state19 = 107'd131072;
parameter    ap_ST_fsm_state20 = 107'd262144;
parameter    ap_ST_fsm_state21 = 107'd524288;
parameter    ap_ST_fsm_state22 = 107'd1048576;
parameter    ap_ST_fsm_state23 = 107'd2097152;
parameter    ap_ST_fsm_state24 = 107'd4194304;
parameter    ap_ST_fsm_state25 = 107'd8388608;
parameter    ap_ST_fsm_state26 = 107'd16777216;
parameter    ap_ST_fsm_state27 = 107'd33554432;
parameter    ap_ST_fsm_state28 = 107'd67108864;
parameter    ap_ST_fsm_state29 = 107'd134217728;
parameter    ap_ST_fsm_state30 = 107'd268435456;
parameter    ap_ST_fsm_state31 = 107'd536870912;
parameter    ap_ST_fsm_state32 = 107'd1073741824;
parameter    ap_ST_fsm_state33 = 107'd2147483648;
parameter    ap_ST_fsm_state34 = 107'd4294967296;
parameter    ap_ST_fsm_state35 = 107'd8589934592;
parameter    ap_ST_fsm_state36 = 107'd17179869184;
parameter    ap_ST_fsm_state37 = 107'd34359738368;
parameter    ap_ST_fsm_state38 = 107'd68719476736;
parameter    ap_ST_fsm_state39 = 107'd137438953472;
parameter    ap_ST_fsm_state40 = 107'd274877906944;
parameter    ap_ST_fsm_state41 = 107'd549755813888;
parameter    ap_ST_fsm_state42 = 107'd1099511627776;
parameter    ap_ST_fsm_state43 = 107'd2199023255552;
parameter    ap_ST_fsm_state44 = 107'd4398046511104;
parameter    ap_ST_fsm_state45 = 107'd8796093022208;
parameter    ap_ST_fsm_state46 = 107'd17592186044416;
parameter    ap_ST_fsm_state47 = 107'd35184372088832;
parameter    ap_ST_fsm_state48 = 107'd70368744177664;
parameter    ap_ST_fsm_state49 = 107'd140737488355328;
parameter    ap_ST_fsm_state50 = 107'd281474976710656;
parameter    ap_ST_fsm_state51 = 107'd562949953421312;
parameter    ap_ST_fsm_state52 = 107'd1125899906842624;
parameter    ap_ST_fsm_state53 = 107'd2251799813685248;
parameter    ap_ST_fsm_state54 = 107'd4503599627370496;
parameter    ap_ST_fsm_state55 = 107'd9007199254740992;
parameter    ap_ST_fsm_state56 = 107'd18014398509481984;
parameter    ap_ST_fsm_state57 = 107'd36028797018963968;
parameter    ap_ST_fsm_state58 = 107'd72057594037927936;
parameter    ap_ST_fsm_state59 = 107'd144115188075855872;
parameter    ap_ST_fsm_state60 = 107'd288230376151711744;
parameter    ap_ST_fsm_state61 = 107'd576460752303423488;
parameter    ap_ST_fsm_state62 = 107'd1152921504606846976;
parameter    ap_ST_fsm_state63 = 107'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 107'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 107'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 107'd18446744073709551616;
parameter    ap_ST_fsm_state67 = 107'd36893488147419103232;
parameter    ap_ST_fsm_state68 = 107'd73786976294838206464;
parameter    ap_ST_fsm_state69 = 107'd147573952589676412928;
parameter    ap_ST_fsm_state70 = 107'd295147905179352825856;
parameter    ap_ST_fsm_state71 = 107'd590295810358705651712;
parameter    ap_ST_fsm_state72 = 107'd1180591620717411303424;
parameter    ap_ST_fsm_state73 = 107'd2361183241434822606848;
parameter    ap_ST_fsm_state74 = 107'd4722366482869645213696;
parameter    ap_ST_fsm_state75 = 107'd9444732965739290427392;
parameter    ap_ST_fsm_state76 = 107'd18889465931478580854784;
parameter    ap_ST_fsm_state77 = 107'd37778931862957161709568;
parameter    ap_ST_fsm_state78 = 107'd75557863725914323419136;
parameter    ap_ST_fsm_state79 = 107'd151115727451828646838272;
parameter    ap_ST_fsm_state80 = 107'd302231454903657293676544;
parameter    ap_ST_fsm_state81 = 107'd604462909807314587353088;
parameter    ap_ST_fsm_state82 = 107'd1208925819614629174706176;
parameter    ap_ST_fsm_state83 = 107'd2417851639229258349412352;
parameter    ap_ST_fsm_state84 = 107'd4835703278458516698824704;
parameter    ap_ST_fsm_state85 = 107'd9671406556917033397649408;
parameter    ap_ST_fsm_state86 = 107'd19342813113834066795298816;
parameter    ap_ST_fsm_state87 = 107'd38685626227668133590597632;
parameter    ap_ST_fsm_state88 = 107'd77371252455336267181195264;
parameter    ap_ST_fsm_state89 = 107'd154742504910672534362390528;
parameter    ap_ST_fsm_state90 = 107'd309485009821345068724781056;
parameter    ap_ST_fsm_state91 = 107'd618970019642690137449562112;
parameter    ap_ST_fsm_state92 = 107'd1237940039285380274899124224;
parameter    ap_ST_fsm_state93 = 107'd2475880078570760549798248448;
parameter    ap_ST_fsm_state94 = 107'd4951760157141521099596496896;
parameter    ap_ST_fsm_state95 = 107'd9903520314283042199192993792;
parameter    ap_ST_fsm_state96 = 107'd19807040628566084398385987584;
parameter    ap_ST_fsm_state97 = 107'd39614081257132168796771975168;
parameter    ap_ST_fsm_state98 = 107'd79228162514264337593543950336;
parameter    ap_ST_fsm_state99 = 107'd158456325028528675187087900672;
parameter    ap_ST_fsm_state100 = 107'd316912650057057350374175801344;
parameter    ap_ST_fsm_state101 = 107'd633825300114114700748351602688;
parameter    ap_ST_fsm_state102 = 107'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state103 = 107'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state104 = 107'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state105 = 107'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state106 = 107'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state107 = 107'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state108 = 107'd81129638414606681695789005144064;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] mnist_data_address0;
output   mnist_data_ce0;
input  [31:0] mnist_data_q0;
output  [3:0] conv_kernel_1_address0;
output   conv_kernel_1_ce0;
input  [31:0] conv_kernel_1_q0;
output  [7:0] max_poo_out_1_address0;
output   max_poo_out_1_ce0;
output   max_poo_out_1_we0;
output  [31:0] max_poo_out_1_d0;
input  [31:0] max_poo_out_1_q0;
output  [7:0] max_poo_locate_1_address0;
output   max_poo_locate_1_ce0;
output   max_poo_locate_1_we0;
output  [31:0] max_poo_locate_1_d0;
output  [3:0] conv_kernel_2_address0;
output   conv_kernel_2_ce0;
input  [31:0] conv_kernel_2_q0;
output  [5:0] max_poo_locate_2_address0;
output   max_poo_locate_2_ce0;
output   max_poo_locate_2_we0;
output  [31:0] max_poo_locate_2_d0;
output  [5:0] fc_in_1_0_address0;
output   fc_in_1_0_ce0;
output   fc_in_1_0_we0;
output  [31:0] fc_in_1_0_d0;
input  [31:0] fc_in_1_0_q0;
output  [5:0] fc_in_1_0_address1;
output   fc_in_1_0_ce1;
output   fc_in_1_0_we1;
output  [31:0] fc_in_1_0_d1;
output  [4:0] fc_out_1_0_address0;
output   fc_out_1_0_ce0;
output   fc_out_1_0_we0;
output  [31:0] fc_out_1_0_d0;
input  [31:0] fc_out_1_0_q0;
output  [9:0] fc_hidden_layer1_address0;
output   fc_hidden_layer1_ce0;
input  [31:0] fc_hidden_layer1_q0;
output  [4:0] fc_in_2_relu1_0_address0;
output   fc_in_2_relu1_0_ce0;
output   fc_in_2_relu1_0_we0;
output  [31:0] fc_in_2_relu1_0_d0;
input  [31:0] fc_in_2_relu1_0_q0;
output  [7:0] fc_hidden_layer2_address0;
output   fc_hidden_layer2_ce0;
input  [31:0] fc_hidden_layer2_q0;
output  [3:0] probability_result_address0;
output   probability_result_ce0;
output   probability_result_we0;
output  [31:0] probability_result_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] max_poo_out_1_address0;
reg max_poo_out_1_ce0;
reg max_poo_out_1_we0;
reg[5:0] fc_in_1_0_address0;
reg fc_in_1_0_ce0;
reg fc_in_1_0_we0;
reg[5:0] fc_in_1_0_address1;
reg fc_in_1_0_ce1;
reg fc_in_1_0_we1;
reg[4:0] fc_out_1_0_address0;
reg fc_out_1_0_ce0;
reg fc_out_1_0_we0;
reg fc_hidden_layer1_ce0;
reg[4:0] fc_in_2_relu1_0_address0;
reg fc_in_2_relu1_0_ce0;
reg fc_in_2_relu1_0_we0;
reg fc_hidden_layer2_ce0;
reg probability_result_ce0;
reg probability_result_we0;

(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] conv_out_1_address0;
reg    conv_out_1_ce0;
reg    conv_out_1_we0;
wire   [31:0] conv_out_1_q0;
reg   [7:0] conv_out_2_address0;
reg    conv_out_2_ce0;
reg    conv_out_2_we0;
wire   [31:0] conv_out_2_q0;
reg   [5:0] max_poo_out_2_address0;
reg    max_poo_out_2_ce0;
reg    max_poo_out_2_we0;
wire   [31:0] max_poo_out_2_q0;
reg   [5:0] max_poo_out_2_address1;
reg    max_poo_out_2_ce1;
wire   [31:0] max_poo_out_2_q1;
reg   [3:0] fc_out_2_0_address0;
reg    fc_out_2_0_ce0;
reg    fc_out_2_0_we0;
wire   [31:0] fc_out_2_0_q0;
reg   [2:0] i_0_i_reg_370;
wire   [31:0] grp_fu_542_p2;
reg   [31:0] reg_580;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state40;
wire   [31:0] grp_fu_536_p2;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state44;
wire   [63:0] grp_fu_550_p1;
reg   [63:0] reg_591;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state68;
wire   [31:0] grp_fu_546_p1;
reg   [31:0] reg_599;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state70;
wire   [63:0] grp_fu_575_p2;
reg   [63:0] reg_610;
wire    ap_CS_fsm_state84;
wire   [0:0] icmp_ln52_fu_616_p2;
reg   [0:0] icmp_ln52_reg_1024;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_1_fu_622_p2;
reg   [2:0] i_1_reg_1028;
reg    ap_enable_reg_pp0_iter0;
wire  signed [6:0] sub_ln54_fu_652_p2;
reg  signed [6:0] sub_ln54_reg_1033;
wire   [63:0] zext_ln54_fu_662_p1;
reg   [63:0] zext_ln54_reg_1041;
wire   [63:0] zext_ln54_1_fu_673_p1;
reg   [63:0] zext_ln54_1_reg_1051;
wire   [63:0] zext_ln54_2_fu_687_p1;
reg   [63:0] zext_ln54_2_reg_1061;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state10_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln54_3_fu_701_p1;
reg   [63:0] zext_ln54_3_reg_1071;
wire   [63:0] zext_ln54_4_fu_715_p1;
reg   [63:0] zext_ln54_4_reg_1081;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state11_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] zext_ln54_5_fu_729_p1;
reg   [63:0] zext_ln54_5_reg_1091;
wire   [7:0] j_0_i_cast8_fu_734_p1;
reg   [7:0] j_0_i_cast8_reg_1101;
wire    ap_CS_fsm_state14;
wire   [4:0] j_2_fu_744_p2;
reg   [4:0] j_2_reg_1109;
reg   [4:0] fc_out_1_0_addr_reg_1114;
wire   [0:0] icmp_ln58_fu_738_p2;
wire   [5:0] i_2_fu_761_p2;
reg   [5:0] i_2_reg_1122;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln60_fu_755_p2;
reg   [31:0] fc_in_1_0_load_reg_1137;
wire    ap_CS_fsm_state16;
reg   [31:0] fc_hidden_layer1_loa_reg_1142;
wire   [4:0] j_4_fu_814_p2;
reg   [4:0] j_4_reg_1150;
wire    ap_CS_fsm_state24;
wire   [63:0] zext_ln67_fu_820_p1;
reg   [63:0] zext_ln67_reg_1155;
wire   [0:0] icmp_ln66_fu_808_p2;
reg   [31:0] fc_out_1_0_load_reg_1165;
wire    ap_CS_fsm_state25;
wire   [63:0] grp_fu_566_p2;
reg   [63:0] tmp_i1_14_reg_1173;
wire    ap_CS_fsm_state31;
wire   [5:0] j_0_i14_cast5_fu_916_p1;
reg   [5:0] j_0_i14_cast5_reg_1178;
wire    ap_CS_fsm_state35;
wire   [3:0] j_5_fu_926_p2;
reg   [3:0] j_5_reg_1186;
reg   [3:0] fc_out_2_0_addr_2_reg_1191;
wire   [0:0] icmp_ln58_1_fu_920_p2;
wire   [4:0] i_3_fu_943_p2;
reg   [4:0] i_3_reg_1199;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln60_1_fu_937_p2;
reg   [31:0] fc_in_2_relu1_0_load_reg_1214;
wire    ap_CS_fsm_state37;
reg   [31:0] fc_hidden_layer2_loa_reg_1219;
wire   [3:0] i_fu_996_p2;
reg   [3:0] i_reg_1227;
wire    ap_CS_fsm_state45;
wire   [0:0] icmp_ln143_fu_990_p2;
wire   [63:0] grp_fu_562_p2;
reg   [63:0] tmp_6_reg_1237;
wire    ap_CS_fsm_state65;
wire   [3:0] j_fu_1013_p2;
reg   [3:0] j_reg_1245;
wire    ap_CS_fsm_state69;
wire   [63:0] zext_ln146_fu_1019_p1;
reg   [63:0] zext_ln146_reg_1250;
wire   [0:0] icmp_ln145_fu_1007_p2;
reg   [63:0] tmp_8_reg_1260;
wire    ap_CS_fsm_state71;
wire   [63:0] grp_fu_571_p2;
reg   [63:0] tmp_s_reg_1265;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state8;
wire    grp_MaxPool2d_fu_526_ap_ready;
wire    grp_MaxPool2d_fu_526_ap_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    grp_Conv2d_4_fu_496_ap_start;
wire    grp_Conv2d_4_fu_496_ap_done;
wire    grp_Conv2d_4_fu_496_ap_idle;
wire    grp_Conv2d_4_fu_496_ap_ready;
wire   [9:0] grp_Conv2d_4_fu_496_input_matrix_address0;
wire    grp_Conv2d_4_fu_496_input_matrix_ce0;
wire   [3:0] grp_Conv2d_4_fu_496_kernel_address0;
wire    grp_Conv2d_4_fu_496_kernel_ce0;
wire   [9:0] grp_Conv2d_4_fu_496_out_matrix_address0;
wire    grp_Conv2d_4_fu_496_out_matrix_ce0;
wire    grp_Conv2d_4_fu_496_out_matrix_we0;
wire   [31:0] grp_Conv2d_4_fu_496_out_matrix_d0;
wire    grp_Conv2d_3_fu_506_ap_start;
wire    grp_Conv2d_3_fu_506_ap_done;
wire    grp_Conv2d_3_fu_506_ap_idle;
wire    grp_Conv2d_3_fu_506_ap_ready;
wire   [7:0] grp_Conv2d_3_fu_506_input_matrix_address0;
wire    grp_Conv2d_3_fu_506_input_matrix_ce0;
wire   [3:0] grp_Conv2d_3_fu_506_kernel_address0;
wire    grp_Conv2d_3_fu_506_kernel_ce0;
wire   [7:0] grp_Conv2d_3_fu_506_out_matrix_address0;
wire    grp_Conv2d_3_fu_506_out_matrix_ce0;
wire    grp_Conv2d_3_fu_506_out_matrix_we0;
wire   [31:0] grp_Conv2d_3_fu_506_out_matrix_d0;
wire    grp_MaxPool2d_1_fu_516_ap_start;
wire    grp_MaxPool2d_1_fu_516_ap_done;
wire    grp_MaxPool2d_1_fu_516_ap_idle;
wire    grp_MaxPool2d_1_fu_516_ap_ready;
wire   [7:0] grp_MaxPool2d_1_fu_516_output_matrix_address0;
wire    grp_MaxPool2d_1_fu_516_output_matrix_ce0;
wire    grp_MaxPool2d_1_fu_516_output_matrix_we0;
wire   [31:0] grp_MaxPool2d_1_fu_516_output_matrix_d0;
wire   [7:0] grp_MaxPool2d_1_fu_516_locate_matrix_address0;
wire    grp_MaxPool2d_1_fu_516_locate_matrix_ce0;
wire    grp_MaxPool2d_1_fu_516_locate_matrix_we0;
wire   [31:0] grp_MaxPool2d_1_fu_516_locate_matrix_d0;
wire   [9:0] grp_MaxPool2d_1_fu_516_conv_out_1_address0;
wire    grp_MaxPool2d_1_fu_516_conv_out_1_ce0;
wire    grp_MaxPool2d_fu_526_ap_start;
wire    grp_MaxPool2d_fu_526_ap_idle;
wire   [5:0] grp_MaxPool2d_fu_526_output_matrix_address0;
wire    grp_MaxPool2d_fu_526_output_matrix_ce0;
wire    grp_MaxPool2d_fu_526_output_matrix_we0;
wire   [31:0] grp_MaxPool2d_fu_526_output_matrix_d0;
wire   [5:0] grp_MaxPool2d_fu_526_locate_matrix_address0;
wire    grp_MaxPool2d_fu_526_locate_matrix_ce0;
wire    grp_MaxPool2d_fu_526_locate_matrix_we0;
wire   [31:0] grp_MaxPool2d_fu_526_locate_matrix_d0;
wire   [7:0] grp_MaxPool2d_fu_526_conv_out_2_address0;
wire    grp_MaxPool2d_fu_526_conv_out_2_ce0;
reg   [2:0] ap_phi_mux_i_0_i_phi_fu_374_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] j_0_i_reg_381;
wire    ap_CS_fsm_state13;
reg   [31:0] storemerge_reg_392;
reg   [5:0] i_0_i4_reg_405;
reg   [4:0] j_0_i7_reg_416;
wire    ap_CS_fsm_state34;
reg   [3:0] j_0_i14_reg_427;
reg   [31:0] storemerge269_reg_438;
reg   [4:0] i_0_i18_reg_451;
reg   [3:0] i_0_reg_462;
wire   [31:0] ap_phi_mux_probability_sum_0_phi_fu_477_p4;
reg   [31:0] probability_sum_0_reg_473;
reg   [3:0] j_0_reg_485;
wire    ap_CS_fsm_state108;
reg    grp_Conv2d_4_fu_496_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_Conv2d_3_fu_506_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_MaxPool2d_1_fu_516_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_MaxPool2d_fu_526_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln59_fu_750_p1;
wire   [63:0] zext_ln61_fu_767_p1;
wire   [63:0] zext_ln61_1_fu_803_p1;
wire   [63:0] zext_ln59_1_fu_932_p1;
wire   [63:0] zext_ln61_2_fu_949_p1;
wire   [63:0] zext_ln61_3_fu_985_p1;
wire   [63:0] zext_ln144_fu_1002_p1;
reg   [31:0] grp_fu_536_p0;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state41;
reg   [31:0] grp_fu_542_p0;
reg   [31:0] grp_fu_542_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state38;
reg   [63:0] grp_fu_546_p0;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state107;
reg   [31:0] grp_fu_550_p0;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state85;
reg   [63:0] grp_fu_575_p1;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state72;
wire   [5:0] shl_ln_fu_628_p3;
wire   [3:0] shl_ln54_1_fu_640_p3;
wire   [6:0] zext_ln54_6_fu_636_p1;
wire   [6:0] zext_ln54_7_fu_648_p1;
wire  signed [31:0] sext_ln54_fu_658_p1;
wire   [31:0] or_ln54_fu_667_p2;
wire   [6:0] add_ln54_fu_678_p2;
wire  signed [31:0] sext_ln54_1_fu_683_p1;
wire   [6:0] add_ln54_1_fu_692_p2;
wire  signed [31:0] sext_ln54_2_fu_697_p1;
wire   [6:0] add_ln54_2_fu_706_p2;
wire  signed [31:0] sext_ln54_3_fu_711_p1;
wire   [6:0] add_ln54_3_fu_720_p2;
wire  signed [31:0] sext_ln54_4_fu_725_p1;
wire   [7:0] shl_ln61_1_fu_780_p3;
wire   [7:0] add_ln61_fu_788_p2;
wire   [9:0] shl_ln1_fu_772_p3;
wire   [9:0] zext_ln61_4_fu_793_p1;
wire   [9:0] add_ln61_1_fu_797_p2;
wire   [31:0] bitcast_ln23_fu_825_p1;
wire   [31:0] bitcast_ln23_1_fu_842_p1;
wire   [7:0] tmp_2_fu_828_p4;
wire   [22:0] trunc_ln23_fu_838_p1;
wire   [0:0] icmp_ln23_1_fu_866_p2;
wire   [0:0] icmp_ln23_fu_860_p2;
wire   [7:0] tmp_7_fu_846_p4;
wire   [22:0] trunc_ln23_1_fu_856_p1;
wire   [0:0] icmp_ln23_3_fu_884_p2;
wire   [0:0] icmp_ln23_2_fu_878_p2;
wire   [0:0] or_ln23_fu_872_p2;
wire   [0:0] or_ln23_1_fu_890_p2;
wire   [0:0] and_ln23_fu_896_p2;
wire   [0:0] grp_fu_557_p2;
wire   [0:0] and_ln23_1_fu_902_p2;
wire   [5:0] shl_ln61_3_fu_962_p3;
wire   [5:0] add_ln61_2_fu_970_p2;
wire   [7:0] shl_ln61_2_fu_954_p3;
wire   [7:0] zext_ln61_5_fu_975_p1;
wire   [7:0] add_ln61_3_fu_979_p2;
reg   [106:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 107'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_Conv2d_4_fu_496_ap_start_reg = 1'b0;
#0 grp_Conv2d_3_fu_506_ap_start_reg = 1'b0;
#0 grp_MaxPool2d_1_fu_516_ap_start_reg = 1'b0;
#0 grp_MaxPool2d_fu_526_ap_start_reg = 1'b0;
end

forward_conv_out_1 #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
conv_out_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_out_1_address0),
    .ce0(conv_out_1_ce0),
    .we0(conv_out_1_we0),
    .d0(grp_Conv2d_4_fu_496_out_matrix_d0),
    .q0(conv_out_1_q0)
);

forward_conv_out_2 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_out_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_out_2_address0),
    .ce0(conv_out_2_ce0),
    .we0(conv_out_2_we0),
    .d0(grp_Conv2d_3_fu_506_out_matrix_d0),
    .q0(conv_out_2_q0)
);

forward_max_poo_ofYi #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
max_poo_out_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(max_poo_out_2_address0),
    .ce0(max_poo_out_2_ce0),
    .we0(max_poo_out_2_we0),
    .d0(grp_MaxPool2d_fu_526_output_matrix_d0),
    .q0(max_poo_out_2_q0),
    .address1(max_poo_out_2_address1),
    .ce1(max_poo_out_2_ce1),
    .q1(max_poo_out_2_q1)
);

forward_fc_out_2_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc_out_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_out_2_0_address0),
    .ce0(fc_out_2_0_ce0),
    .we0(fc_out_2_0_we0),
    .d0(storemerge269_reg_438),
    .q0(fc_out_2_0_q0)
);

Conv2d_4 grp_Conv2d_4_fu_496(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_4_fu_496_ap_start),
    .ap_done(grp_Conv2d_4_fu_496_ap_done),
    .ap_idle(grp_Conv2d_4_fu_496_ap_idle),
    .ap_ready(grp_Conv2d_4_fu_496_ap_ready),
    .input_matrix_address0(grp_Conv2d_4_fu_496_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_4_fu_496_input_matrix_ce0),
    .input_matrix_q0(mnist_data_q0),
    .kernel_address0(grp_Conv2d_4_fu_496_kernel_address0),
    .kernel_ce0(grp_Conv2d_4_fu_496_kernel_ce0),
    .kernel_q0(conv_kernel_1_q0),
    .out_matrix_address0(grp_Conv2d_4_fu_496_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_4_fu_496_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_4_fu_496_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_4_fu_496_out_matrix_d0)
);

Conv2d_3 grp_Conv2d_3_fu_506(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_3_fu_506_ap_start),
    .ap_done(grp_Conv2d_3_fu_506_ap_done),
    .ap_idle(grp_Conv2d_3_fu_506_ap_idle),
    .ap_ready(grp_Conv2d_3_fu_506_ap_ready),
    .input_matrix_address0(grp_Conv2d_3_fu_506_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_3_fu_506_input_matrix_ce0),
    .input_matrix_q0(max_poo_out_1_q0),
    .kernel_address0(grp_Conv2d_3_fu_506_kernel_address0),
    .kernel_ce0(grp_Conv2d_3_fu_506_kernel_ce0),
    .kernel_q0(conv_kernel_2_q0),
    .out_matrix_address0(grp_Conv2d_3_fu_506_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_3_fu_506_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_3_fu_506_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_3_fu_506_out_matrix_d0)
);

MaxPool2d_1 grp_MaxPool2d_1_fu_516(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MaxPool2d_1_fu_516_ap_start),
    .ap_done(grp_MaxPool2d_1_fu_516_ap_done),
    .ap_idle(grp_MaxPool2d_1_fu_516_ap_idle),
    .ap_ready(grp_MaxPool2d_1_fu_516_ap_ready),
    .output_matrix_address0(grp_MaxPool2d_1_fu_516_output_matrix_address0),
    .output_matrix_ce0(grp_MaxPool2d_1_fu_516_output_matrix_ce0),
    .output_matrix_we0(grp_MaxPool2d_1_fu_516_output_matrix_we0),
    .output_matrix_d0(grp_MaxPool2d_1_fu_516_output_matrix_d0),
    .locate_matrix_address0(grp_MaxPool2d_1_fu_516_locate_matrix_address0),
    .locate_matrix_ce0(grp_MaxPool2d_1_fu_516_locate_matrix_ce0),
    .locate_matrix_we0(grp_MaxPool2d_1_fu_516_locate_matrix_we0),
    .locate_matrix_d0(grp_MaxPool2d_1_fu_516_locate_matrix_d0),
    .conv_out_1_address0(grp_MaxPool2d_1_fu_516_conv_out_1_address0),
    .conv_out_1_ce0(grp_MaxPool2d_1_fu_516_conv_out_1_ce0),
    .conv_out_1_q0(conv_out_1_q0)
);

MaxPool2d grp_MaxPool2d_fu_526(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MaxPool2d_fu_526_ap_start),
    .ap_done(grp_MaxPool2d_fu_526_ap_done),
    .ap_idle(grp_MaxPool2d_fu_526_ap_idle),
    .ap_ready(grp_MaxPool2d_fu_526_ap_ready),
    .output_matrix_address0(grp_MaxPool2d_fu_526_output_matrix_address0),
    .output_matrix_ce0(grp_MaxPool2d_fu_526_output_matrix_ce0),
    .output_matrix_we0(grp_MaxPool2d_fu_526_output_matrix_we0),
    .output_matrix_d0(grp_MaxPool2d_fu_526_output_matrix_d0),
    .locate_matrix_address0(grp_MaxPool2d_fu_526_locate_matrix_address0),
    .locate_matrix_ce0(grp_MaxPool2d_fu_526_locate_matrix_ce0),
    .locate_matrix_we0(grp_MaxPool2d_fu_526_locate_matrix_we0),
    .locate_matrix_d0(grp_MaxPool2d_fu_526_locate_matrix_d0),
    .conv_out_2_address0(grp_MaxPool2d_fu_526_conv_out_2_address0),
    .conv_out_2_ce0(grp_MaxPool2d_fu_526_conv_out_2_ce0),
    .conv_out_2_q0(conv_out_2_q0)
);

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_536_p0),
    .din1(reg_580),
    .ce(1'b1),
    .dout(grp_fu_536_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_542_p0),
    .din1(grp_fu_542_p1),
    .ce(1'b1),
    .dout(grp_fu_542_p2)
);

forw_back_fptruncg8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
forw_back_fptruncg8j_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_546_p0),
    .ce(1'b1),
    .dout(grp_fu_546_p1)
);

forw_back_fpext_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
forw_back_fpext_3hbi_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_550_p0),
    .ce(1'b1),
    .dout(grp_fu_550_p1)
);

forw_back_fcmp_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
forw_back_fcmp_32eOg_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fc_out_1_0_load_reg_1165),
    .din1(grp_fu_546_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_557_p2)
);

forw_back_dadd_64ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dadd_64ibs_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_591),
    .din1(reg_610),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

forw_back_dmul_64jbC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dmul_64jbC_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_591),
    .din1(64'd4587366580439587226),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

forw_back_ddiv_64kbM #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_ddiv_64kbM_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_610),
    .din1(reg_591),
    .ce(1'b1),
    .dout(grp_fu_571_p2)
);

forw_back_dexp_64lbW #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dexp_64lbW_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(grp_fu_575_p1),
    .ce(1'b1),
    .dout(grp_fu_575_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_MaxPool2d_fu_526_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((grp_MaxPool2d_fu_526_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_3_fu_506_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_Conv2d_3_fu_506_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_3_fu_506_ap_ready == 1'b1)) begin
            grp_Conv2d_3_fu_506_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_4_fu_496_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_Conv2d_4_fu_496_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_4_fu_496_ap_ready == 1'b1)) begin
            grp_Conv2d_4_fu_496_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MaxPool2d_1_fu_516_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_MaxPool2d_1_fu_516_ap_start_reg <= 1'b1;
        end else if ((grp_MaxPool2d_1_fu_516_ap_ready == 1'b1)) begin
            grp_MaxPool2d_1_fu_516_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MaxPool2d_fu_526_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_MaxPool2d_fu_526_ap_start_reg <= 1'b1;
        end else if ((grp_MaxPool2d_fu_526_ap_ready == 1'b1)) begin
            grp_MaxPool2d_fu_526_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_0_i18_reg_451 <= i_3_reg_1199;
    end else if (((icmp_ln58_1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        i_0_i18_reg_451 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_0_i4_reg_405 <= i_2_reg_1122;
    end else if (((icmp_ln58_fu_738_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        i_0_i4_reg_405 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_370 <= i_1_reg_1028;
    end else if (((grp_MaxPool2d_fu_526_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_i_reg_370 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_1_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_0_reg_462 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        i_0_reg_462 <= i_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_1_fu_937_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        j_0_i14_reg_427 <= j_5_reg_1186;
    end else if (((icmp_ln66_fu_808_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        j_0_i14_reg_427 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        j_0_i7_reg_416 <= j_4_reg_1150;
    end else if (((icmp_ln58_fu_738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        j_0_i7_reg_416 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        j_0_i_reg_381 <= j_2_reg_1109;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_i_reg_381 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        j_0_reg_485 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        j_0_reg_485 <= j_reg_1245;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_1_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        probability_sum_0_reg_473 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        probability_sum_0_reg_473 <= grp_fu_546_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        storemerge269_reg_438 <= grp_fu_536_p2;
    end else if (((icmp_ln58_1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        storemerge269_reg_438 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        storemerge_reg_392 <= grp_fu_536_p2;
    end else if (((icmp_ln58_fu_738_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        storemerge_reg_392 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        fc_hidden_layer1_loa_reg_1142 <= fc_hidden_layer1_q0;
        fc_in_1_0_load_reg_1137 <= fc_in_1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        fc_hidden_layer2_loa_reg_1219 <= fc_hidden_layer2_q0;
        fc_in_2_relu1_0_load_reg_1214 <= fc_in_2_relu1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_738_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        fc_out_1_0_addr_reg_1114 <= zext_ln59_fu_750_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        fc_out_1_0_load_reg_1165 <= fc_out_1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_1_fu_920_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        fc_out_2_0_addr_2_reg_1191 <= zext_ln59_1_fu_932_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_1028 <= i_1_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_2_reg_1122 <= i_2_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        i_3_reg_1199 <= i_3_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        i_reg_1227 <= i_fu_996_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln52_reg_1024 <= icmp_ln52_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        j_0_i14_cast5_reg_1178[3 : 0] <= j_0_i14_cast5_fu_916_p1[3 : 0];
        j_5_reg_1186 <= j_5_fu_926_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_0_i_cast8_reg_1101[4 : 0] <= j_0_i_cast8_fu_734_p1[4 : 0];
        j_2_reg_1109 <= j_2_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_4_reg_1150 <= j_4_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        j_reg_1245 <= j_fu_1013_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_580 <= grp_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_591 <= grp_fu_550_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_599 <= grp_fu_546_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state60))) begin
        reg_610 <= grp_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln54_reg_1033[6 : 1] <= sub_ln54_fu_652_p2[6 : 1];
        zext_ln54_1_reg_1051[31 : 1] <= zext_ln54_1_fu_673_p1[31 : 1];
        zext_ln54_reg_1041[31 : 1] <= zext_ln54_fu_662_p1[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        tmp_6_reg_1237 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp_8_reg_1260 <= grp_fu_550_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_i1_14_reg_1173 <= grp_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        tmp_s_reg_1265 <= grp_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_fu_1007_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        zext_ln146_reg_1250[3 : 0] <= zext_ln146_fu_1019_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln52_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln54_2_reg_1061[31 : 1] <= zext_ln54_2_fu_687_p1[31 : 1];
        zext_ln54_3_reg_1071[31 : 1] <= zext_ln54_3_fu_701_p1[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln52_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        zext_ln54_4_reg_1081[31 : 1] <= zext_ln54_4_fu_715_p1[31 : 1];
        zext_ln54_5_reg_1091[31 : 1] <= zext_ln54_5_fu_729_p1[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        zext_ln67_reg_1155[4 : 0] <= zext_ln67_fu_820_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln52_fu_616_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln145_fu_1007_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln52_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_i_phi_fu_374_p4 = i_1_reg_1028;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_374_p4 = i_0_i_reg_370;
    end
end

always @ (*) begin
    if (((icmp_ln145_fu_1007_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_1_address0 = grp_MaxPool2d_1_fu_516_conv_out_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_out_1_address0 = grp_Conv2d_4_fu_496_out_matrix_address0;
    end else begin
        conv_out_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_1_ce0 = grp_MaxPool2d_1_fu_516_conv_out_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_out_1_ce0 = grp_Conv2d_4_fu_496_out_matrix_ce0;
    end else begin
        conv_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_out_1_we0 = grp_Conv2d_4_fu_496_out_matrix_we0;
    end else begin
        conv_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_2_address0 = grp_MaxPool2d_fu_526_conv_out_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_2_address0 = grp_Conv2d_3_fu_506_out_matrix_address0;
    end else begin
        conv_out_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_2_ce0 = grp_MaxPool2d_fu_526_conv_out_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_2_ce0 = grp_Conv2d_3_fu_506_out_matrix_ce0;
    end else begin
        conv_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_2_we0 = grp_Conv2d_3_fu_506_out_matrix_we0;
    end else begin
        conv_out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        fc_hidden_layer1_ce0 = 1'b1;
    end else begin
        fc_hidden_layer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        fc_hidden_layer2_ce0 = 1'b1;
    end else begin
        fc_hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        fc_in_1_0_address0 = zext_ln61_fu_767_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc_in_1_0_address0 = zext_ln54_4_reg_1081;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        fc_in_1_0_address0 = zext_ln54_2_reg_1061;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        fc_in_1_0_address0 = zext_ln54_reg_1041;
    end else begin
        fc_in_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc_in_1_0_address1 = zext_ln54_5_reg_1091;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        fc_in_1_0_address1 = zext_ln54_3_reg_1071;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        fc_in_1_0_address1 = zext_ln54_1_reg_1051;
    end else begin
        fc_in_1_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fc_in_1_0_ce0 = 1'b1;
    end else begin
        fc_in_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fc_in_1_0_ce1 = 1'b1;
    end else begin
        fc_in_1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln52_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln52_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fc_in_1_0_we0 = 1'b1;
    end else begin
        fc_in_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln52_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln52_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fc_in_1_0_we1 = 1'b1;
    end else begin
        fc_in_1_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        fc_in_2_relu1_0_address0 = zext_ln61_2_fu_949_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        fc_in_2_relu1_0_address0 = zext_ln67_reg_1155;
    end else begin
        fc_in_2_relu1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state36))) begin
        fc_in_2_relu1_0_ce0 = 1'b1;
    end else begin
        fc_in_2_relu1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        fc_in_2_relu1_0_we0 = 1'b1;
    end else begin
        fc_in_2_relu1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        fc_out_1_0_address0 = zext_ln67_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        fc_out_1_0_address0 = fc_out_1_0_addr_reg_1114;
    end else begin
        fc_out_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15))) begin
        fc_out_1_0_ce0 = 1'b1;
    end else begin
        fc_out_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        fc_out_1_0_we0 = 1'b1;
    end else begin
        fc_out_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        fc_out_2_0_address0 = zext_ln146_fu_1019_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        fc_out_2_0_address0 = zext_ln144_fu_1002_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        fc_out_2_0_address0 = fc_out_2_0_addr_2_reg_1191;
    end else begin
        fc_out_2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state36))) begin
        fc_out_2_0_ce0 = 1'b1;
    end else begin
        fc_out_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        fc_out_2_0_we0 = 1'b1;
    end else begin
        fc_out_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_536_p0 = storemerge269_reg_438;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_536_p0 = storemerge_reg_392;
    end else begin
        grp_fu_536_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_542_p0 = fc_in_2_relu1_0_load_reg_1214;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_542_p0 = fc_in_1_0_load_reg_1137;
    end else begin
        grp_fu_542_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_542_p1 = fc_hidden_layer2_loa_reg_1219;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_542_p1 = fc_hidden_layer1_loa_reg_1142;
    end else begin
        grp_fu_542_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_546_p0 = tmp_s_reg_1265;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_546_p0 = tmp_6_reg_1237;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_546_p0 = tmp_i1_14_reg_1173;
    end else begin
        grp_fu_546_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_550_p0 = probability_sum_0_reg_473;
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state46))) begin
        grp_fu_550_p0 = fc_out_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_550_p0 = ap_phi_mux_probability_sum_0_phi_fu_477_p4;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_550_p0 = fc_out_1_0_q0;
    end else begin
        grp_fu_550_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_575_p1 = tmp_8_reg_1260;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_575_p1 = reg_591;
    end else begin
        grp_fu_575_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_poo_out_1_address0 = grp_MaxPool2d_1_fu_516_output_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        max_poo_out_1_address0 = grp_Conv2d_3_fu_506_input_matrix_address0;
    end else begin
        max_poo_out_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_poo_out_1_ce0 = grp_MaxPool2d_1_fu_516_output_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        max_poo_out_1_ce0 = grp_Conv2d_3_fu_506_input_matrix_ce0;
    end else begin
        max_poo_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_poo_out_1_we0 = grp_MaxPool2d_1_fu_516_output_matrix_we0;
    end else begin
        max_poo_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        max_poo_out_2_address0 = zext_ln54_4_fu_715_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        max_poo_out_2_address0 = zext_ln54_2_fu_687_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_poo_out_2_address0 = zext_ln54_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_poo_out_2_address0 = grp_MaxPool2d_fu_526_output_matrix_address0;
    end else begin
        max_poo_out_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            max_poo_out_2_address1 = zext_ln54_5_fu_729_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            max_poo_out_2_address1 = zext_ln54_3_fu_701_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            max_poo_out_2_address1 = zext_ln54_1_fu_673_p1;
        end else begin
            max_poo_out_2_address1 = 'bx;
        end
    end else begin
        max_poo_out_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        max_poo_out_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_poo_out_2_ce0 = grp_MaxPool2d_fu_526_output_matrix_ce0;
    end else begin
        max_poo_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        max_poo_out_2_ce1 = 1'b1;
    end else begin
        max_poo_out_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_poo_out_2_we0 = grp_MaxPool2d_fu_526_output_matrix_we0;
    end else begin
        max_poo_out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        probability_result_ce0 = 1'b1;
    end else begin
        probability_result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        probability_result_we0 = 1'b1;
    end else begin
        probability_result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_Conv2d_4_fu_496_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_MaxPool2d_1_fu_516_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_Conv2d_3_fu_506_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_MaxPool2d_fu_526_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln52_fu_616_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln52_fu_616_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln58_fu_738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln60_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln66_fu_808_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln58_1_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln60_1_fu_937_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state45 : begin
            if (((icmp_ln143_fu_990_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((icmp_ln145_fu_1007_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_1_fu_692_p2 = ($signed(sub_ln54_reg_1033) + $signed(7'd3));

assign add_ln54_2_fu_706_p2 = ($signed(sub_ln54_reg_1033) + $signed(7'd4));

assign add_ln54_3_fu_720_p2 = ($signed(sub_ln54_reg_1033) + $signed(7'd5));

assign add_ln54_fu_678_p2 = ($signed(sub_ln54_reg_1033) + $signed(7'd2));

assign add_ln61_1_fu_797_p2 = (shl_ln1_fu_772_p3 + zext_ln61_4_fu_793_p1);

assign add_ln61_2_fu_970_p2 = (j_0_i14_cast5_reg_1178 + shl_ln61_3_fu_962_p3);

assign add_ln61_3_fu_979_p2 = (shl_ln61_2_fu_954_p3 + zext_ln61_5_fu_975_p1);

assign add_ln61_fu_788_p2 = (j_0_i_cast8_reg_1101 + shl_ln61_1_fu_780_p3);

assign and_ln23_1_fu_902_p2 = (grp_fu_557_p2 & and_ln23_fu_896_p2);

assign and_ln23_fu_896_p2 = (or_ln23_fu_872_p2 & or_ln23_1_fu_890_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd83];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_probability_sum_0_phi_fu_477_p4 = probability_sum_0_reg_473;

assign bitcast_ln23_1_fu_842_p1 = reg_599;

assign bitcast_ln23_fu_825_p1 = fc_out_1_0_load_reg_1165;

assign conv_kernel_1_address0 = grp_Conv2d_4_fu_496_kernel_address0;

assign conv_kernel_1_ce0 = grp_Conv2d_4_fu_496_kernel_ce0;

assign conv_kernel_2_address0 = grp_Conv2d_3_fu_506_kernel_address0;

assign conv_kernel_2_ce0 = grp_Conv2d_3_fu_506_kernel_ce0;

assign fc_hidden_layer1_address0 = zext_ln61_1_fu_803_p1;

assign fc_hidden_layer2_address0 = zext_ln61_3_fu_985_p1;

assign fc_in_1_0_d0 = max_poo_out_2_q0;

assign fc_in_1_0_d1 = max_poo_out_2_q1;

assign fc_in_2_relu1_0_d0 = ((and_ln23_1_fu_902_p2[0:0] === 1'b1) ? fc_out_1_0_load_reg_1165 : reg_599);

assign fc_out_1_0_d0 = storemerge_reg_392;

assign grp_Conv2d_3_fu_506_ap_start = grp_Conv2d_3_fu_506_ap_start_reg;

assign grp_Conv2d_4_fu_496_ap_start = grp_Conv2d_4_fu_496_ap_start_reg;

assign grp_MaxPool2d_1_fu_516_ap_start = grp_MaxPool2d_1_fu_516_ap_start_reg;

assign grp_MaxPool2d_fu_526_ap_start = grp_MaxPool2d_fu_526_ap_start_reg;

assign i_1_fu_622_p2 = (ap_phi_mux_i_0_i_phi_fu_374_p4 + 3'd1);

assign i_2_fu_761_p2 = (i_0_i4_reg_405 + 6'd1);

assign i_3_fu_943_p2 = (i_0_i18_reg_451 + 5'd1);

assign i_fu_996_p2 = (i_0_reg_462 + 4'd1);

assign icmp_ln143_fu_990_p2 = ((i_0_reg_462 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_1007_p2 = ((j_0_reg_485 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_866_p2 = ((trunc_ln23_fu_838_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_878_p2 = ((tmp_7_fu_846_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_884_p2 = ((trunc_ln23_1_fu_856_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_860_p2 = ((tmp_2_fu_828_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_616_p2 = ((ap_phi_mux_i_0_i_phi_fu_374_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_920_p2 = ((j_0_i14_reg_427 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_738_p2 = ((j_0_i_reg_381 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln60_1_fu_937_p2 = ((i_0_i18_reg_451 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_755_p2 = ((i_0_i4_reg_405 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_808_p2 = ((j_0_i7_reg_416 == 5'd20) ? 1'b1 : 1'b0);

assign j_0_i14_cast5_fu_916_p1 = j_0_i14_reg_427;

assign j_0_i_cast8_fu_734_p1 = j_0_i_reg_381;

assign j_2_fu_744_p2 = (j_0_i_reg_381 + 5'd1);

assign j_4_fu_814_p2 = (j_0_i7_reg_416 + 5'd1);

assign j_5_fu_926_p2 = (j_0_i14_reg_427 + 4'd1);

assign j_fu_1013_p2 = (j_0_reg_485 + 4'd1);

assign max_poo_locate_1_address0 = grp_MaxPool2d_1_fu_516_locate_matrix_address0;

assign max_poo_locate_1_ce0 = grp_MaxPool2d_1_fu_516_locate_matrix_ce0;

assign max_poo_locate_1_d0 = grp_MaxPool2d_1_fu_516_locate_matrix_d0;

assign max_poo_locate_1_we0 = grp_MaxPool2d_1_fu_516_locate_matrix_we0;

assign max_poo_locate_2_address0 = grp_MaxPool2d_fu_526_locate_matrix_address0;

assign max_poo_locate_2_ce0 = grp_MaxPool2d_fu_526_locate_matrix_ce0;

assign max_poo_locate_2_d0 = grp_MaxPool2d_fu_526_locate_matrix_d0;

assign max_poo_locate_2_we0 = grp_MaxPool2d_fu_526_locate_matrix_we0;

assign max_poo_out_1_d0 = grp_MaxPool2d_1_fu_516_output_matrix_d0;

assign mnist_data_address0 = grp_Conv2d_4_fu_496_input_matrix_address0;

assign mnist_data_ce0 = grp_Conv2d_4_fu_496_input_matrix_ce0;

assign or_ln23_1_fu_890_p2 = (icmp_ln23_3_fu_884_p2 | icmp_ln23_2_fu_878_p2);

assign or_ln23_fu_872_p2 = (icmp_ln23_fu_860_p2 | icmp_ln23_1_fu_866_p2);

assign or_ln54_fu_667_p2 = (sext_ln54_fu_658_p1 | 32'd1);

assign probability_result_address0 = zext_ln146_reg_1250;

assign probability_result_d0 = grp_fu_546_p1;

assign sext_ln54_1_fu_683_p1 = $signed(add_ln54_fu_678_p2);

assign sext_ln54_2_fu_697_p1 = $signed(add_ln54_1_fu_692_p2);

assign sext_ln54_3_fu_711_p1 = $signed(add_ln54_2_fu_706_p2);

assign sext_ln54_4_fu_725_p1 = $signed(add_ln54_3_fu_720_p2);

assign sext_ln54_fu_658_p1 = sub_ln54_fu_652_p2;

assign shl_ln1_fu_772_p3 = {{i_0_i4_reg_405}, {4'd0}};

assign shl_ln54_1_fu_640_p3 = {{ap_phi_mux_i_0_i_phi_fu_374_p4}, {1'd0}};

assign shl_ln61_1_fu_780_p3 = {{i_0_i4_reg_405}, {2'd0}};

assign shl_ln61_2_fu_954_p3 = {{i_0_i18_reg_451}, {3'd0}};

assign shl_ln61_3_fu_962_p3 = {{i_0_i18_reg_451}, {1'd0}};

assign shl_ln_fu_628_p3 = {{ap_phi_mux_i_0_i_phi_fu_374_p4}, {3'd0}};

assign sub_ln54_fu_652_p2 = (zext_ln54_6_fu_636_p1 - zext_ln54_7_fu_648_p1);

assign tmp_2_fu_828_p4 = {{bitcast_ln23_fu_825_p1[30:23]}};

assign tmp_7_fu_846_p4 = {{bitcast_ln23_1_fu_842_p1[30:23]}};

assign trunc_ln23_1_fu_856_p1 = bitcast_ln23_1_fu_842_p1[22:0];

assign trunc_ln23_fu_838_p1 = bitcast_ln23_fu_825_p1[22:0];

assign zext_ln144_fu_1002_p1 = i_0_reg_462;

assign zext_ln146_fu_1019_p1 = j_0_reg_485;

assign zext_ln54_1_fu_673_p1 = or_ln54_fu_667_p2;

assign zext_ln54_2_fu_687_p1 = $unsigned(sext_ln54_1_fu_683_p1);

assign zext_ln54_3_fu_701_p1 = $unsigned(sext_ln54_2_fu_697_p1);

assign zext_ln54_4_fu_715_p1 = $unsigned(sext_ln54_3_fu_711_p1);

assign zext_ln54_5_fu_729_p1 = $unsigned(sext_ln54_4_fu_725_p1);

assign zext_ln54_6_fu_636_p1 = shl_ln_fu_628_p3;

assign zext_ln54_7_fu_648_p1 = shl_ln54_1_fu_640_p3;

assign zext_ln54_fu_662_p1 = $unsigned(sext_ln54_fu_658_p1);

assign zext_ln59_1_fu_932_p1 = j_0_i14_reg_427;

assign zext_ln59_fu_750_p1 = j_0_i_reg_381;

assign zext_ln61_1_fu_803_p1 = add_ln61_1_fu_797_p2;

assign zext_ln61_2_fu_949_p1 = i_0_i18_reg_451;

assign zext_ln61_3_fu_985_p1 = add_ln61_3_fu_979_p2;

assign zext_ln61_4_fu_793_p1 = add_ln61_fu_788_p2;

assign zext_ln61_5_fu_975_p1 = add_ln61_2_fu_970_p2;

assign zext_ln61_fu_767_p1 = i_0_i4_reg_405;

assign zext_ln67_fu_820_p1 = j_0_i7_reg_416;

always @ (posedge ap_clk) begin
    sub_ln54_reg_1033[0] <= 1'b0;
    zext_ln54_reg_1041[0] <= 1'b0;
    zext_ln54_reg_1041[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln54_1_reg_1051[0] <= 1'b1;
    zext_ln54_1_reg_1051[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln54_2_reg_1061[0] <= 1'b0;
    zext_ln54_2_reg_1061[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln54_3_reg_1071[0] <= 1'b1;
    zext_ln54_3_reg_1071[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln54_4_reg_1081[0] <= 1'b0;
    zext_ln54_4_reg_1081[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln54_5_reg_1091[0] <= 1'b1;
    zext_ln54_5_reg_1091[63:32] <= 32'b00000000000000000000000000000000;
    j_0_i_cast8_reg_1101[7:5] <= 3'b000;
    zext_ln67_reg_1155[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_0_i14_cast5_reg_1178[5:4] <= 2'b00;
    zext_ln146_reg_1250[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //forward
