-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_matrix_ce0 : OUT STD_LOGIC;
    input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_matrix_ce0 : OUT STD_LOGIC;
    out_matrix_we0 : OUT STD_LOGIC;
    out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_148 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_0_reg_159 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_0_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln31_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln31_fu_227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_reg_572 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_mid2_fu_245_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_mid2_reg_577 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_mid2_fu_253_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_mid2_reg_583 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_cast6_mid2_v_fu_261_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_cast6_mid2_v_reg_588 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_cast6_mid2_fu_269_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_cast_mid2_fu_277_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_cast_mid2_reg_598 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_cast3_fu_311_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_cast3_reg_604 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_cast_fu_315_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_cast_reg_610 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_matrix_addr_reg_615 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln34_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln34_reg_620_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_405_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_reg_624 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal row_0_mid2_fu_422_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_0_mid2_reg_629 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln34_fu_519_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln34_reg_634 : STD_LOGIC_VECTOR (2 downto 0);
    signal input_matrix_load_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal kernel_load_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_8_fu_553_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_8_reg_659 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j_fu_558_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln32_fu_563_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal indvar_flatten7_reg_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_reg_115 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_reg_137 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_152_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_col_0_phi_fu_162_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_row_0_phi_fu_183_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln33_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_1_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal shl_ln_fu_203_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln33_11_fu_211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_cast5_fu_199_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_233_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln33_mid1_fu_281_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln33_21_fu_289_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_cast5_mid1_fu_273_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln33_6_fu_293_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln33_fu_215_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln33_mid2_fu_299_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_cast4_fu_307_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln33_fu_319_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln33_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln9_fu_338_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln36_s_fu_350_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_6_fu_346_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_7_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_0_cast2_fu_334_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln36_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln36_2_fu_381_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln36_1_fu_373_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln36_fu_389_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln35_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_10_fu_411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln36_mid1_fu_433_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln36_11_mid1_fu_445_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_8_fu_441_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_9_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln36_20_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln36_13_fu_362_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_0_cast2_mid1_fu_429_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln36_21_fu_471_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln36_13_mid1_fu_484_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln36_12_mid1_fu_476_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln36_4_fu_492_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln36_22_fu_496_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln36_14_fu_393_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln36_8_mid2_v_fu_502_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln36_13_mid2_fu_463_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_0_cast_mid2_cast_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln36_fu_527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln36_3_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_8_mid2_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln36_2_fu_542_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    forw_back_fadd_32bkb_U84 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_168,
        din1 => tmp_reg_664,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    forw_back_fmul_32cud_U85 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_matrix_load_reg_649,
        din1 => kernel_load_reg_654,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                col_0_reg_159 <= select_ln34_reg_634;
            elsif (((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_0_reg_159 <= col_cast6_mid2_fu_269_p1;
            end if; 
        end if;
    end process;

    col_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                col_reg_115 <= col_cast6_mid2_v_reg_588;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_reg_115 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    empty_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_620_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                empty_reg_168 <= grp_fu_189_p2;
            elsif (((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar_flatten7_reg_104 <= add_ln31_reg_572;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten7_reg_104 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_148 <= add_ln34_reg_624;
            elsif (((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_148 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvars_iv_reg_126 <= add_ln32_fu_563_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_126 <= ap_const_lv3_3;
            end if; 
        end if;
    end process;

    row_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                row_0_reg_180 <= row_8_reg_659;
            elsif (((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_0_reg_180 <= row_cast3_fu_311_p1;
            end if; 
        end if;
    end process;

    row_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                row_reg_137 <= j_fu_558_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_reg_137 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_572 <= add_ln31_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln34_reg_624 <= add_ln34_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                col_cast6_mid2_v_reg_588 <= col_cast6_mid2_v_fu_261_p3;
                    col_cast_mid2_reg_598(1 downto 0) <= col_cast_mid2_fu_277_p1(1 downto 0);
                indvars_iv_mid2_reg_577 <= indvars_iv_mid2_fu_245_p3;
                out_matrix_addr_reg_615 <= zext_ln33_fu_329_p1(4 - 1 downto 0);
                    row_cast3_reg_604(1 downto 0) <= row_cast3_fu_311_p1(1 downto 0);
                    row_cast_reg_610(1 downto 0) <= row_cast_fu_315_p1(1 downto 0);
                row_mid2_reg_583 <= row_mid2_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln34_reg_620 <= icmp_ln34_fu_399_p2;
                icmp_ln34_reg_620_pp0_iter1_reg <= icmp_ln34_reg_620;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_matrix_load_reg_649 <= input_matrix_q0;
                kernel_load_reg_654 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                row_0_mid2_reg_629 <= row_0_mid2_fu_422_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                row_8_reg_659 <= row_8_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln34_reg_634 <= select_ln34_fu_519_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_664 <= grp_fu_195_p2;
            end if;
        end if;
    end process;
    col_cast_mid2_reg_598(3 downto 2) <= "00";
    row_cast3_reg_604(2) <= '0';
    row_cast_reg_610(8 downto 2) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln31_fu_221_p2, ap_CS_fsm_state2, icmp_ln34_fu_399_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln34_fu_399_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln34_fu_399_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln31_fu_227_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_104) + unsigned(ap_const_lv4_1));
    add_ln32_fu_563_p2 <= std_logic_vector(unsigned(indvars_iv_mid2_reg_577) + unsigned(ap_const_lv3_1));
    add_ln33_fu_319_p2 <= std_logic_vector(unsigned(sub_ln33_mid2_fu_299_p3) + unsigned(row_cast4_fu_307_p1));
    add_ln34_fu_405_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_152_p4) + unsigned(ap_const_lv4_1));
    add_ln36_2_fu_542_p2 <= std_logic_vector(unsigned(row_0_cast_mid2_cast_fu_515_p1) + unsigned(sub_ln36_8_mid2_fu_510_p2));
    add_ln36_fu_527_p2 <= std_logic_vector(unsigned(sub_ln36_13_mid2_fu_463_p3) + unsigned(row_0_cast_mid2_cast_fu_515_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln34_fu_399_p2)
    begin
        if ((icmp_ln34_fu_399_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln31_fu_221_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln31_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_0_phi_fu_162_p4_assign_proc : process(col_0_reg_159, icmp_ln34_reg_620, ap_CS_fsm_pp0_stage0, select_ln34_reg_634, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_col_0_phi_fu_162_p4 <= select_ln34_reg_634;
        else 
            ap_phi_mux_col_0_phi_fu_162_p4 <= col_0_reg_159;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_152_p4_assign_proc : process(indvar_flatten_reg_148, icmp_ln34_reg_620, ap_CS_fsm_pp0_stage0, add_ln34_reg_624, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= add_ln34_reg_624;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= indvar_flatten_reg_148;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_183_p4_assign_proc : process(row_0_reg_180, icmp_ln34_reg_620, ap_CS_fsm_pp0_stage0, row_8_reg_659, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_620 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_row_0_phi_fu_183_p4 <= row_8_reg_659;
        else 
            ap_phi_mux_row_0_phi_fu_183_p4 <= row_0_reg_180;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln31_fu_221_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln31_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_0_cast2_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_0_phi_fu_162_p4),4));
    col_0_cast2_mid1_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_10_fu_411_p2),4));
    col_10_fu_411_p2 <= std_logic_vector(unsigned(ap_phi_mux_col_0_phi_fu_162_p4) + unsigned(ap_const_lv3_1));
    col_cast5_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_115),5));
    col_cast5_mid1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_233_p2),5));
    col_cast6_mid2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_cast6_mid2_v_fu_261_p3),3));
    col_cast6_mid2_v_fu_261_p3 <= 
        i_fu_233_p2 when (icmp_ln32_fu_239_p2(0) = '1') else 
        col_reg_115;
    col_cast_mid2_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_cast6_mid2_v_fu_261_p3),4));
    i_fu_233_p2 <= std_logic_vector(unsigned(col_reg_115) + unsigned(ap_const_lv2_1));
    icmp_ln31_fu_221_p2 <= "1" when (indvar_flatten7_reg_104 = ap_const_lv4_9) else "0";
    icmp_ln32_fu_239_p2 <= "1" when (indvars_iv_reg_126 = ap_const_lv3_6) else "0";
    icmp_ln34_fu_399_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_152_p4 = ap_const_lv4_9) else "0";
    icmp_ln35_fu_417_p2 <= "1" when (ap_phi_mux_row_0_phi_fu_183_p4 = indvars_iv_mid2_reg_577) else "0";
    indvars_iv_mid2_fu_245_p3 <= 
        ap_const_lv3_3 when (icmp_ln32_fu_239_p2(0) = '1') else 
        indvars_iv_reg_126;
    input_matrix_address0 <= zext_ln36_fu_537_p1(10 - 1 downto 0);

    input_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_matrix_ce0 <= ap_const_logic_1;
        else 
            input_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_558_p2 <= std_logic_vector(unsigned(row_mid2_reg_583) + unsigned(ap_const_lv2_1));
    kernel_address0 <= sext_ln36_1_fu_548_p1(10 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_matrix_address0_assign_proc : process(ap_CS_fsm_state2, out_matrix_addr_reg_615, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln33_fu_329_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_matrix_address0 <= out_matrix_addr_reg_615;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_address0 <= zext_ln33_fu_329_p1(4 - 1 downto 0);
        else 
            out_matrix_address0 <= "XXXX";
        end if; 
    end process;


    out_matrix_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            out_matrix_ce0 <= ap_const_logic_1;
        else 
            out_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_matrix_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, grp_fu_189_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_matrix_d0 <= grp_fu_189_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_d0 <= ap_const_lv32_0;
        else 
            out_matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_matrix_we0_assign_proc : process(icmp_ln31_fu_221_p2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln34_reg_620_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_620_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln31_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_matrix_we0 <= ap_const_logic_1;
        else 
            out_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_0_cast_mid2_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_mid2_fu_422_p3),9));
    row_0_mid2_fu_422_p3 <= 
        row_cast3_reg_604 when (icmp_ln35_fu_417_p2(0) = '1') else 
        ap_phi_mux_row_0_phi_fu_183_p4;
    row_8_fu_553_p2 <= std_logic_vector(unsigned(row_0_mid2_reg_629) + unsigned(ap_const_lv3_1));
    row_cast3_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_mid2_fu_253_p3),3));
    row_cast4_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_mid2_fu_253_p3),5));
    row_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_mid2_fu_253_p3),9));
    row_mid2_fu_253_p3 <= 
        ap_const_lv2_0 when (icmp_ln32_fu_239_p2(0) = '1') else 
        row_reg_137;
    select_ln34_fu_519_p3 <= 
        col_10_fu_411_p2 when (icmp_ln35_fu_417_p2(0) = '1') else 
        ap_phi_mux_col_0_phi_fu_162_p4;
        sext_ln33_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_fu_319_p2),32));

        sext_ln36_1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_2_fu_542_p2),64));

        sext_ln36_3_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_fu_527_p2),32));

        sext_ln36_4_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln36_13_mid1_fu_484_p3),9));

        sext_ln36_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln36_2_fu_381_p3),9));

    shl_ln33_mid1_fu_281_p3 <= (i_fu_233_p2 & ap_const_lv2_0);
    shl_ln36_11_mid1_fu_445_p3 <= (col_10_fu_411_p2 & ap_const_lv1_0);
    shl_ln36_12_mid1_fu_476_p3 <= (sub_ln36_21_fu_471_p2 & ap_const_lv5_0);
    shl_ln36_13_mid1_fu_484_p3 <= (sub_ln36_21_fu_471_p2 & ap_const_lv2_0);
    shl_ln36_1_fu_373_p3 <= (sub_ln36_fu_368_p2 & ap_const_lv5_0);
    shl_ln36_2_fu_381_p3 <= (sub_ln36_fu_368_p2 & ap_const_lv2_0);
    shl_ln36_mid1_fu_433_p3 <= (col_10_fu_411_p2 & ap_const_lv5_0);
    shl_ln36_s_fu_350_p3 <= (ap_phi_mux_col_0_phi_fu_162_p4 & ap_const_lv1_0);
    shl_ln9_fu_338_p3 <= (ap_phi_mux_col_0_phi_fu_162_p4 & ap_const_lv5_0);
    shl_ln_fu_203_p3 <= (col_reg_115 & ap_const_lv2_0);
    sub_ln33_6_fu_293_p2 <= std_logic_vector(unsigned(zext_ln33_21_fu_289_p1) - unsigned(col_cast5_mid1_fu_273_p1));
    sub_ln33_fu_215_p2 <= std_logic_vector(unsigned(zext_ln33_11_fu_211_p1) - unsigned(col_cast5_fu_199_p1));
    sub_ln33_mid2_fu_299_p3 <= 
        sub_ln33_6_fu_293_p2 when (icmp_ln32_fu_239_p2(0) = '1') else 
        sub_ln33_fu_215_p2;
    sub_ln36_13_fu_362_p2 <= std_logic_vector(unsigned(zext_ln36_6_fu_346_p1) - unsigned(zext_ln36_7_fu_358_p1));
    sub_ln36_13_mid2_fu_463_p3 <= 
        sub_ln36_20_fu_457_p2 when (icmp_ln35_fu_417_p2(0) = '1') else 
        sub_ln36_13_fu_362_p2;
    sub_ln36_14_fu_393_p2 <= std_logic_vector(unsigned(shl_ln36_1_fu_373_p3) - unsigned(sext_ln36_fu_389_p1));
    sub_ln36_20_fu_457_p2 <= std_logic_vector(unsigned(zext_ln36_8_fu_441_p1) - unsigned(zext_ln36_9_fu_453_p1));
    sub_ln36_21_fu_471_p2 <= std_logic_vector(unsigned(col_0_cast2_mid1_fu_429_p1) - unsigned(col_cast_mid2_reg_598));
    sub_ln36_22_fu_496_p2 <= std_logic_vector(unsigned(shl_ln36_12_mid1_fu_476_p3) - unsigned(sext_ln36_4_fu_492_p1));
    sub_ln36_8_mid2_fu_510_p2 <= std_logic_vector(unsigned(sub_ln36_8_mid2_v_fu_502_p3) - unsigned(row_cast_reg_610));
    sub_ln36_8_mid2_v_fu_502_p3 <= 
        sub_ln36_22_fu_496_p2 when (icmp_ln35_fu_417_p2(0) = '1') else 
        sub_ln36_14_fu_393_p2;
    sub_ln36_fu_368_p2 <= std_logic_vector(unsigned(col_0_cast2_fu_334_p1) - unsigned(col_cast_mid2_reg_598));
    zext_ln33_11_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_203_p3),5));
    zext_ln33_21_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln33_mid1_fu_281_p3),5));
    zext_ln33_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln33_fu_325_p1),64));
    zext_ln36_6_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_fu_338_p3),9));
    zext_ln36_7_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln36_s_fu_350_p3),9));
    zext_ln36_8_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln36_mid1_fu_433_p3),9));
    zext_ln36_9_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln36_11_mid1_fu_445_p3),9));
    zext_ln36_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln36_3_fu_533_p1),64));
end behav;
