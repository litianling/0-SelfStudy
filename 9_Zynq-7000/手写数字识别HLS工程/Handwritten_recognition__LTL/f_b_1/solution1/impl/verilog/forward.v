// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mnist_data_address0,
        mnist_data_ce0,
        mnist_data_q0,
        conv_kernel_1_address0,
        conv_kernel_1_ce0,
        conv_kernel_1_q0,
        conv_out_1_address0,
        conv_out_1_ce0,
        conv_out_1_we0,
        conv_out_1_d0,
        conv_out_1_q0,
        conv_kernel_2_address0,
        conv_kernel_2_ce0,
        conv_kernel_2_q0,
        conv_out_2_address0,
        conv_out_2_ce0,
        conv_out_2_we0,
        conv_out_2_d0,
        conv_out_2_q0,
        conv_kernel_3_address0,
        conv_kernel_3_ce0,
        conv_kernel_3_q0,
        fc_in_1_0_address0,
        fc_in_1_0_ce0,
        fc_in_1_0_we0,
        fc_in_1_0_d0,
        fc_in_1_0_q0,
        fc_out_1_0_address0,
        fc_out_1_0_ce0,
        fc_out_1_0_we0,
        fc_out_1_0_d0,
        fc_out_1_0_q0,
        fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0,
        fc_hidden_layer1_q0,
        fc_in_2_relu1_0_address0,
        fc_in_2_relu1_0_ce0,
        fc_in_2_relu1_0_we0,
        fc_in_2_relu1_0_d0,
        fc_in_2_relu1_0_q0,
        fc_out_2_0_address0,
        fc_out_2_0_ce0,
        fc_out_2_0_we0,
        fc_out_2_0_d0,
        fc_out_2_0_q0,
        fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0,
        fc_in_3_relu2_0_address0,
        fc_in_3_relu2_0_ce0,
        fc_in_3_relu2_0_we0,
        fc_in_3_relu2_0_d0,
        fc_in_3_relu2_0_q0,
        fc_hidden_layer3_address0,
        fc_hidden_layer3_ce0,
        fc_hidden_layer3_q0,
        probability_result_address0,
        probability_result_ce0,
        probability_result_we0,
        probability_result_d0
);

parameter    ap_ST_fsm_state1 = 125'd1;
parameter    ap_ST_fsm_state2 = 125'd2;
parameter    ap_ST_fsm_state3 = 125'd4;
parameter    ap_ST_fsm_state4 = 125'd8;
parameter    ap_ST_fsm_state5 = 125'd16;
parameter    ap_ST_fsm_state6 = 125'd32;
parameter    ap_ST_fsm_state7 = 125'd64;
parameter    ap_ST_fsm_state8 = 125'd128;
parameter    ap_ST_fsm_state9 = 125'd256;
parameter    ap_ST_fsm_state10 = 125'd512;
parameter    ap_ST_fsm_state11 = 125'd1024;
parameter    ap_ST_fsm_state12 = 125'd2048;
parameter    ap_ST_fsm_state13 = 125'd4096;
parameter    ap_ST_fsm_state14 = 125'd8192;
parameter    ap_ST_fsm_state15 = 125'd16384;
parameter    ap_ST_fsm_state16 = 125'd32768;
parameter    ap_ST_fsm_state17 = 125'd65536;
parameter    ap_ST_fsm_state18 = 125'd131072;
parameter    ap_ST_fsm_state19 = 125'd262144;
parameter    ap_ST_fsm_state20 = 125'd524288;
parameter    ap_ST_fsm_state21 = 125'd1048576;
parameter    ap_ST_fsm_state22 = 125'd2097152;
parameter    ap_ST_fsm_state23 = 125'd4194304;
parameter    ap_ST_fsm_state24 = 125'd8388608;
parameter    ap_ST_fsm_state25 = 125'd16777216;
parameter    ap_ST_fsm_state26 = 125'd33554432;
parameter    ap_ST_fsm_state27 = 125'd67108864;
parameter    ap_ST_fsm_state28 = 125'd134217728;
parameter    ap_ST_fsm_state29 = 125'd268435456;
parameter    ap_ST_fsm_state30 = 125'd536870912;
parameter    ap_ST_fsm_state31 = 125'd1073741824;
parameter    ap_ST_fsm_state32 = 125'd2147483648;
parameter    ap_ST_fsm_state33 = 125'd4294967296;
parameter    ap_ST_fsm_state34 = 125'd8589934592;
parameter    ap_ST_fsm_state35 = 125'd17179869184;
parameter    ap_ST_fsm_state36 = 125'd34359738368;
parameter    ap_ST_fsm_state37 = 125'd68719476736;
parameter    ap_ST_fsm_state38 = 125'd137438953472;
parameter    ap_ST_fsm_state39 = 125'd274877906944;
parameter    ap_ST_fsm_state40 = 125'd549755813888;
parameter    ap_ST_fsm_state41 = 125'd1099511627776;
parameter    ap_ST_fsm_state42 = 125'd2199023255552;
parameter    ap_ST_fsm_state43 = 125'd4398046511104;
parameter    ap_ST_fsm_state44 = 125'd8796093022208;
parameter    ap_ST_fsm_state45 = 125'd17592186044416;
parameter    ap_ST_fsm_state46 = 125'd35184372088832;
parameter    ap_ST_fsm_state47 = 125'd70368744177664;
parameter    ap_ST_fsm_state48 = 125'd140737488355328;
parameter    ap_ST_fsm_state49 = 125'd281474976710656;
parameter    ap_ST_fsm_state50 = 125'd562949953421312;
parameter    ap_ST_fsm_state51 = 125'd1125899906842624;
parameter    ap_ST_fsm_state52 = 125'd2251799813685248;
parameter    ap_ST_fsm_state53 = 125'd4503599627370496;
parameter    ap_ST_fsm_state54 = 125'd9007199254740992;
parameter    ap_ST_fsm_state55 = 125'd18014398509481984;
parameter    ap_ST_fsm_state56 = 125'd36028797018963968;
parameter    ap_ST_fsm_state57 = 125'd72057594037927936;
parameter    ap_ST_fsm_state58 = 125'd144115188075855872;
parameter    ap_ST_fsm_state59 = 125'd288230376151711744;
parameter    ap_ST_fsm_state60 = 125'd576460752303423488;
parameter    ap_ST_fsm_state61 = 125'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 125'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 125'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 125'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 125'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 125'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 125'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 125'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 125'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 125'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 125'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 125'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 125'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 125'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 125'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 125'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 125'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 125'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 125'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 125'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 125'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 125'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 125'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 125'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 125'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 125'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 125'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 125'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 125'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 125'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 125'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 125'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 125'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 125'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 125'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 125'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 125'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 125'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 125'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 125'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 125'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 125'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 125'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 125'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 125'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 125'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 125'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 125'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 125'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 125'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 125'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 125'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 125'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 125'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 125'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 125'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 125'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 125'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 125'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 125'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 125'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 125'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 125'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 125'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 125'd21267647932558653966460912964485513216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] mnist_data_address0;
output   mnist_data_ce0;
input  [31:0] mnist_data_q0;
output  [3:0] conv_kernel_1_address0;
output   conv_kernel_1_ce0;
input  [31:0] conv_kernel_1_q0;
output  [9:0] conv_out_1_address0;
output   conv_out_1_ce0;
output   conv_out_1_we0;
output  [31:0] conv_out_1_d0;
input  [31:0] conv_out_1_q0;
output  [3:0] conv_kernel_2_address0;
output   conv_kernel_2_ce0;
input  [31:0] conv_kernel_2_q0;
output  [9:0] conv_out_2_address0;
output   conv_out_2_ce0;
output   conv_out_2_we0;
output  [31:0] conv_out_2_d0;
input  [31:0] conv_out_2_q0;
output  [3:0] conv_kernel_3_address0;
output   conv_kernel_3_ce0;
input  [31:0] conv_kernel_3_q0;
output  [9:0] fc_in_1_0_address0;
output   fc_in_1_0_ce0;
output   fc_in_1_0_we0;
output  [31:0] fc_in_1_0_d0;
input  [31:0] fc_in_1_0_q0;
output  [7:0] fc_out_1_0_address0;
output   fc_out_1_0_ce0;
output   fc_out_1_0_we0;
output  [31:0] fc_out_1_0_d0;
input  [31:0] fc_out_1_0_q0;
output  [16:0] fc_hidden_layer1_address0;
output   fc_hidden_layer1_ce0;
input  [31:0] fc_hidden_layer1_q0;
output  [7:0] fc_in_2_relu1_0_address0;
output   fc_in_2_relu1_0_ce0;
output   fc_in_2_relu1_0_we0;
output  [31:0] fc_in_2_relu1_0_d0;
input  [31:0] fc_in_2_relu1_0_q0;
output  [5:0] fc_out_2_0_address0;
output   fc_out_2_0_ce0;
output   fc_out_2_0_we0;
output  [31:0] fc_out_2_0_d0;
input  [31:0] fc_out_2_0_q0;
output  [12:0] fc_hidden_layer2_address0;
output   fc_hidden_layer2_ce0;
input  [31:0] fc_hidden_layer2_q0;
output  [5:0] fc_in_3_relu2_0_address0;
output   fc_in_3_relu2_0_ce0;
output   fc_in_3_relu2_0_we0;
output  [31:0] fc_in_3_relu2_0_d0;
input  [31:0] fc_in_3_relu2_0_q0;
output  [8:0] fc_hidden_layer3_address0;
output   fc_hidden_layer3_ce0;
input  [31:0] fc_hidden_layer3_q0;
output  [3:0] probability_result_address0;
output   probability_result_ce0;
output   probability_result_we0;
output  [31:0] probability_result_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] conv_out_1_address0;
reg conv_out_1_ce0;
reg conv_out_1_we0;
reg[9:0] conv_out_2_address0;
reg conv_out_2_ce0;
reg conv_out_2_we0;
reg[9:0] fc_in_1_0_address0;
reg fc_in_1_0_ce0;
reg fc_in_1_0_we0;
reg[7:0] fc_out_1_0_address0;
reg fc_out_1_0_ce0;
reg fc_out_1_0_we0;
reg fc_hidden_layer1_ce0;
reg[7:0] fc_in_2_relu1_0_address0;
reg fc_in_2_relu1_0_ce0;
reg fc_in_2_relu1_0_we0;
reg[5:0] fc_out_2_0_address0;
reg fc_out_2_0_ce0;
reg fc_out_2_0_we0;
reg fc_hidden_layer2_ce0;
reg[5:0] fc_in_3_relu2_0_address0;
reg fc_in_3_relu2_0_ce0;
reg fc_in_3_relu2_0_we0;
reg fc_hidden_layer3_ce0;
reg probability_result_ce0;
reg probability_result_we0;

(* fsm_encoding = "none" *) reg   [124:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] conv_out_3_address0;
reg    conv_out_3_ce0;
reg    conv_out_3_we0;
wire   [31:0] conv_out_3_q0;
reg   [3:0] fc_out_3_0_address0;
reg    fc_out_3_0_ce0;
reg    fc_out_3_0_we0;
wire   [31:0] fc_out_3_0_q0;
wire   [31:0] grp_fu_567_p2;
reg   [31:0] reg_606;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state57;
wire   [31:0] grp_fu_560_p2;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state61;
wire   [63:0] grp_fu_575_p1;
reg   [63:0] reg_618;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state85;
wire   [63:0] grp_fu_592_p2;
reg   [63:0] reg_626;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_571_p1;
reg   [31:0] reg_631;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state87;
wire   [63:0] grp_fu_601_p2;
reg   [63:0] reg_642;
wire    ap_CS_fsm_state101;
wire   [4:0] i_1_fu_654_p2;
reg   [4:0] i_1_reg_1155;
wire    ap_CS_fsm_state7;
wire   [10:0] sub_ln43_fu_684_p2;
reg   [10:0] sub_ln43_reg_1160;
wire   [0:0] icmp_ln41_fu_648_p2;
wire   [4:0] j_7_fu_700_p2;
reg   [4:0] j_7_reg_1168;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln43_fu_715_p1;
reg   [63:0] zext_ln43_reg_1173;
wire   [0:0] icmp_ln42_fu_694_p2;
wire   [16:0] j_0_i3_cast8_fu_720_p1;
reg   [16:0] j_0_i3_cast8_reg_1183;
wire    ap_CS_fsm_state10;
wire   [7:0] j_3_fu_730_p2;
reg   [7:0] j_3_reg_1191;
reg   [7:0] fc_out_1_0_addr_reg_1196;
wire   [0:0] icmp_ln47_fu_724_p2;
wire   [9:0] i_2_fu_747_p2;
reg   [9:0] i_2_reg_1204;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln49_fu_741_p2;
wire   [16:0] add_ln50_4_fu_758_p2;
reg   [16:0] add_ln50_4_reg_1214;
reg   [31:0] fc_in_1_0_load_reg_1224;
wire    ap_CS_fsm_state12;
reg   [31:0] fc_hidden_layer1_loa_reg_1229;
wire   [7:0] j_8_fu_780_p2;
reg   [7:0] j_8_reg_1237;
wire    ap_CS_fsm_state20;
wire   [63:0] zext_ln56_fu_786_p1;
reg   [63:0] zext_ln56_reg_1242;
wire   [0:0] icmp_ln55_fu_774_p2;
reg   [31:0] fc_out_1_0_load_reg_1252;
wire    ap_CS_fsm_state21;
wire   [12:0] j_0_i15_cast6_fu_882_p1;
reg   [12:0] j_0_i15_cast6_reg_1260;
wire    ap_CS_fsm_state31;
wire   [5:0] j_9_fu_892_p2;
reg   [5:0] j_9_reg_1268;
reg   [5:0] fc_out_2_0_addr_reg_1273;
wire   [0:0] icmp_ln47_1_fu_886_p2;
wire   [7:0] i_3_fu_909_p2;
reg   [7:0] i_3_reg_1281;
wire    ap_CS_fsm_state32;
wire   [0:0] icmp_ln49_1_fu_903_p2;
wire   [12:0] add_ln50_5_fu_920_p2;
reg   [12:0] add_ln50_5_reg_1291;
reg   [31:0] fc_in_2_relu1_0_load_reg_1301;
wire    ap_CS_fsm_state33;
reg   [31:0] fc_hidden_layer2_loa_reg_1306;
wire   [5:0] j_10_fu_942_p2;
reg   [5:0] j_10_reg_1314;
wire    ap_CS_fsm_state41;
wire   [63:0] zext_ln56_1_fu_948_p1;
reg   [63:0] zext_ln56_1_reg_1319;
wire   [0:0] icmp_ln55_1_fu_936_p2;
reg   [31:0] fc_out_2_0_load_reg_1329;
wire    ap_CS_fsm_state42;
wire   [6:0] j_0_i45_cast4_fu_1044_p1;
reg   [6:0] j_0_i45_cast4_reg_1337;
wire    ap_CS_fsm_state52;
wire   [3:0] j_11_fu_1054_p2;
reg   [3:0] j_11_reg_1345;
reg   [3:0] fc_out_3_0_addr_2_reg_1350;
wire   [0:0] icmp_ln47_2_fu_1048_p2;
wire   [5:0] i_4_fu_1071_p2;
reg   [5:0] i_4_reg_1358;
wire    ap_CS_fsm_state53;
wire   [0:0] icmp_ln49_2_fu_1065_p2;
reg   [31:0] fc_in_3_relu2_0_load_reg_1373;
wire    ap_CS_fsm_state54;
reg   [31:0] fc_hidden_layer3_loa_reg_1378;
wire   [3:0] i_fu_1124_p2;
reg   [3:0] i_reg_1386;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln118_fu_1118_p2;
wire   [63:0] grp_fu_588_p2;
reg   [63:0] tmp_4_reg_1396;
wire    ap_CS_fsm_state82;
wire   [3:0] j_fu_1141_p2;
reg   [3:0] j_reg_1404;
wire    ap_CS_fsm_state86;
wire   [63:0] zext_ln122_fu_1147_p1;
reg   [63:0] zext_ln122_reg_1409;
wire   [0:0] icmp_ln121_fu_1135_p2;
reg   [63:0] tmp_6_reg_1419;
wire    ap_CS_fsm_state88;
wire   [63:0] grp_fu_597_p2;
reg   [63:0] tmp_8_reg_1424;
wire    ap_CS_fsm_state123;
wire    grp_Conv2d_7_fu_530_ap_start;
wire    grp_Conv2d_7_fu_530_ap_done;
wire    grp_Conv2d_7_fu_530_ap_idle;
wire    grp_Conv2d_7_fu_530_ap_ready;
wire   [9:0] grp_Conv2d_7_fu_530_input_matrix_address0;
wire    grp_Conv2d_7_fu_530_input_matrix_ce0;
wire   [3:0] grp_Conv2d_7_fu_530_kernel_address0;
wire    grp_Conv2d_7_fu_530_kernel_ce0;
wire   [9:0] grp_Conv2d_7_fu_530_out_matrix_address0;
wire    grp_Conv2d_7_fu_530_out_matrix_ce0;
wire    grp_Conv2d_7_fu_530_out_matrix_we0;
wire   [31:0] grp_Conv2d_7_fu_530_out_matrix_d0;
wire    grp_Conv2d_6_fu_540_ap_start;
wire    grp_Conv2d_6_fu_540_ap_done;
wire    grp_Conv2d_6_fu_540_ap_idle;
wire    grp_Conv2d_6_fu_540_ap_ready;
wire   [9:0] grp_Conv2d_6_fu_540_input_matrix_address0;
wire    grp_Conv2d_6_fu_540_input_matrix_ce0;
wire   [3:0] grp_Conv2d_6_fu_540_kernel_address0;
wire    grp_Conv2d_6_fu_540_kernel_ce0;
wire   [9:0] grp_Conv2d_6_fu_540_out_matrix_address0;
wire    grp_Conv2d_6_fu_540_out_matrix_ce0;
wire    grp_Conv2d_6_fu_540_out_matrix_we0;
wire   [31:0] grp_Conv2d_6_fu_540_out_matrix_d0;
wire    grp_Conv2d_5_fu_550_ap_start;
wire    grp_Conv2d_5_fu_550_ap_done;
wire    grp_Conv2d_5_fu_550_ap_idle;
wire    grp_Conv2d_5_fu_550_ap_ready;
wire   [9:0] grp_Conv2d_5_fu_550_input_matrix_address0;
wire    grp_Conv2d_5_fu_550_input_matrix_ce0;
wire   [3:0] grp_Conv2d_5_fu_550_kernel_address0;
wire    grp_Conv2d_5_fu_550_kernel_ce0;
wire   [9:0] grp_Conv2d_5_fu_550_out_matrix_address0;
wire    grp_Conv2d_5_fu_550_out_matrix_ce0;
wire    grp_Conv2d_5_fu_550_out_matrix_we0;
wire   [31:0] grp_Conv2d_5_fu_550_out_matrix_d0;
reg   [4:0] i_0_i_reg_325;
wire    ap_CS_fsm_state6;
reg   [4:0] j_0_i_reg_336;
wire    ap_CS_fsm_state9;
reg   [7:0] j_0_i3_reg_347;
reg   [31:0] storemerge_reg_358;
reg   [9:0] i_0_i5_reg_371;
reg   [16:0] phi_mul_reg_382;
reg   [7:0] j_0_i8_reg_393;
wire    ap_CS_fsm_state30;
reg   [5:0] j_0_i15_reg_404;
reg   [31:0] storemerge211_reg_415;
reg   [7:0] i_0_i19_reg_428;
reg   [12:0] phi_mul209_reg_439;
reg   [5:0] j_0_i33_reg_450;
wire    ap_CS_fsm_state51;
reg   [3:0] j_0_i45_reg_461;
reg   [31:0] storemerge212_reg_472;
reg   [5:0] i_0_i49_reg_485;
reg   [3:0] i_0_reg_496;
wire   [31:0] ap_phi_mux_probability_sum_0_phi_fu_511_p4;
reg   [31:0] probability_sum_0_reg_507;
reg   [3:0] j_0_reg_519;
wire    ap_CS_fsm_state125;
reg    grp_Conv2d_7_fu_530_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_Conv2d_6_fu_540_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_Conv2d_5_fu_550_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln48_fu_736_p1;
wire   [63:0] zext_ln50_fu_753_p1;
wire   [63:0] zext_ln50_1_fu_769_p1;
wire   [63:0] zext_ln48_1_fu_898_p1;
wire   [63:0] zext_ln50_2_fu_915_p1;
wire   [63:0] zext_ln50_3_fu_931_p1;
wire   [63:0] zext_ln48_2_fu_1060_p1;
wire   [63:0] zext_ln50_4_fu_1077_p1;
wire   [63:0] zext_ln50_5_fu_1113_p1;
wire   [63:0] zext_ln119_fu_1130_p1;
reg   [31:0] grp_fu_560_p0;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state58;
reg   [31:0] grp_fu_567_p0;
reg   [31:0] grp_fu_567_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state55;
reg   [63:0] grp_fu_571_p0;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state124;
reg   [31:0] grp_fu_575_p0;
wire    ap_CS_fsm_state76;
reg   [31:0] grp_fu_583_p0;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state102;
reg   [63:0] grp_fu_601_p1;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state89;
wire   [9:0] shl_ln_fu_660_p3;
wire   [7:0] shl_ln43_1_fu_672_p3;
wire   [10:0] zext_ln43_1_fu_668_p1;
wire   [10:0] zext_ln43_2_fu_680_p1;
wire   [10:0] zext_ln42_fu_690_p1;
wire   [10:0] add_ln43_fu_706_p2;
wire  signed [31:0] sext_ln43_fu_711_p1;
wire   [16:0] add_ln50_fu_764_p2;
wire   [31:0] bitcast_ln26_fu_791_p1;
wire   [31:0] bitcast_ln26_1_fu_808_p1;
wire   [7:0] tmp_5_fu_794_p4;
wire   [22:0] trunc_ln26_fu_804_p1;
wire   [0:0] icmp_ln26_1_fu_832_p2;
wire   [0:0] icmp_ln26_fu_826_p2;
wire   [7:0] tmp_s_fu_812_p4;
wire   [22:0] trunc_ln26_1_fu_822_p1;
wire   [0:0] icmp_ln26_3_fu_850_p2;
wire   [0:0] icmp_ln26_2_fu_844_p2;
wire   [0:0] or_ln26_fu_838_p2;
wire   [0:0] or_ln26_1_fu_856_p2;
wire   [0:0] and_ln26_fu_862_p2;
wire   [0:0] grp_fu_583_p2;
wire   [0:0] and_ln26_1_fu_868_p2;
wire   [12:0] add_ln50_1_fu_926_p2;
wire   [31:0] bitcast_ln26_2_fu_953_p1;
wire   [31:0] bitcast_ln26_3_fu_970_p1;
wire   [7:0] tmp_11_fu_956_p4;
wire   [22:0] trunc_ln26_2_fu_966_p1;
wire   [0:0] icmp_ln26_5_fu_994_p2;
wire   [0:0] icmp_ln26_4_fu_988_p2;
wire   [7:0] tmp_12_fu_974_p4;
wire   [22:0] trunc_ln26_3_fu_984_p1;
wire   [0:0] icmp_ln26_7_fu_1012_p2;
wire   [0:0] icmp_ln26_6_fu_1006_p2;
wire   [0:0] or_ln26_2_fu_1000_p2;
wire   [0:0] or_ln26_3_fu_1018_p2;
wire   [0:0] and_ln26_2_fu_1024_p2;
wire   [0:0] and_ln26_3_fu_1030_p2;
wire   [6:0] shl_ln50_1_fu_1090_p3;
wire   [6:0] add_ln50_2_fu_1098_p2;
wire   [8:0] shl_ln1_fu_1082_p3;
wire   [8:0] zext_ln50_6_fu_1103_p1;
wire   [8:0] add_ln50_3_fu_1107_p2;
reg   [124:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 125'd1;
#0 grp_Conv2d_7_fu_530_ap_start_reg = 1'b0;
#0 grp_Conv2d_6_fu_540_ap_start_reg = 1'b0;
#0 grp_Conv2d_5_fu_550_ap_start_reg = 1'b0;
end

forward_conv_out_3 #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
conv_out_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_out_3_address0),
    .ce0(conv_out_3_ce0),
    .we0(conv_out_3_we0),
    .d0(grp_Conv2d_5_fu_550_out_matrix_d0),
    .q0(conv_out_3_q0)
);

forward_fc_out_3_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc_out_3_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_out_3_0_address0),
    .ce0(fc_out_3_0_ce0),
    .we0(fc_out_3_0_we0),
    .d0(storemerge212_reg_472),
    .q0(fc_out_3_0_q0)
);

Conv2d_7 grp_Conv2d_7_fu_530(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_7_fu_530_ap_start),
    .ap_done(grp_Conv2d_7_fu_530_ap_done),
    .ap_idle(grp_Conv2d_7_fu_530_ap_idle),
    .ap_ready(grp_Conv2d_7_fu_530_ap_ready),
    .input_matrix_address0(grp_Conv2d_7_fu_530_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_7_fu_530_input_matrix_ce0),
    .input_matrix_q0(mnist_data_q0),
    .kernel_address0(grp_Conv2d_7_fu_530_kernel_address0),
    .kernel_ce0(grp_Conv2d_7_fu_530_kernel_ce0),
    .kernel_q0(conv_kernel_1_q0),
    .out_matrix_address0(grp_Conv2d_7_fu_530_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_7_fu_530_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_7_fu_530_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_7_fu_530_out_matrix_d0)
);

Conv2d_6 grp_Conv2d_6_fu_540(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_6_fu_540_ap_start),
    .ap_done(grp_Conv2d_6_fu_540_ap_done),
    .ap_idle(grp_Conv2d_6_fu_540_ap_idle),
    .ap_ready(grp_Conv2d_6_fu_540_ap_ready),
    .input_matrix_address0(grp_Conv2d_6_fu_540_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_6_fu_540_input_matrix_ce0),
    .input_matrix_q0(conv_out_1_q0),
    .kernel_address0(grp_Conv2d_6_fu_540_kernel_address0),
    .kernel_ce0(grp_Conv2d_6_fu_540_kernel_ce0),
    .kernel_q0(conv_kernel_2_q0),
    .out_matrix_address0(grp_Conv2d_6_fu_540_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_6_fu_540_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_6_fu_540_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_6_fu_540_out_matrix_d0)
);

Conv2d_5 grp_Conv2d_5_fu_550(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_5_fu_550_ap_start),
    .ap_done(grp_Conv2d_5_fu_550_ap_done),
    .ap_idle(grp_Conv2d_5_fu_550_ap_idle),
    .ap_ready(grp_Conv2d_5_fu_550_ap_ready),
    .input_matrix_address0(grp_Conv2d_5_fu_550_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_5_fu_550_input_matrix_ce0),
    .input_matrix_q0(conv_out_2_q0),
    .kernel_address0(grp_Conv2d_5_fu_550_kernel_address0),
    .kernel_ce0(grp_Conv2d_5_fu_550_kernel_ce0),
    .kernel_q0(conv_kernel_3_q0),
    .out_matrix_address0(grp_Conv2d_5_fu_550_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_5_fu_550_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_5_fu_550_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_5_fu_550_out_matrix_d0)
);

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_560_p0),
    .din1(reg_606),
    .ce(1'b1),
    .dout(grp_fu_560_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_567_p0),
    .din1(grp_fu_567_p1),
    .ce(1'b1),
    .dout(grp_fu_567_p2)
);

forw_back_fptrunceOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
forw_back_fptrunceOg_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_571_p0),
    .ce(1'b1),
    .dout(grp_fu_571_p1)
);

forw_back_fpext_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
forw_back_fpext_3fYi_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_575_p0),
    .ce(1'b1),
    .dout(grp_fu_575_p1)
);

forw_back_fcmp_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
forw_back_fcmp_32g8j_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_583_p0),
    .din1(grp_fu_571_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_583_p2)
);

forw_back_dadd_64hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dadd_64hbi_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_618),
    .din1(reg_642),
    .ce(1'b1),
    .dout(grp_fu_588_p2)
);

forw_back_dmul_64ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dmul_64ibs_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_618),
    .din1(64'd4587366580439587226),
    .ce(1'b1),
    .dout(grp_fu_592_p2)
);

forw_back_ddiv_64jbC #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_ddiv_64jbC_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_642),
    .din1(reg_618),
    .ce(1'b1),
    .dout(grp_fu_597_p2)
);

forw_back_dexp_64kbM #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dexp_64kbM_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(grp_fu_601_p1),
    .ce(1'b1),
    .dout(grp_fu_601_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_5_fu_550_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_Conv2d_5_fu_550_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_5_fu_550_ap_ready == 1'b1)) begin
            grp_Conv2d_5_fu_550_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_6_fu_540_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Conv2d_6_fu_540_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_6_fu_540_ap_ready == 1'b1)) begin
            grp_Conv2d_6_fu_540_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_7_fu_530_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_Conv2d_7_fu_530_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_7_fu_530_ap_ready == 1'b1)) begin
            grp_Conv2d_7_fu_530_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_0_i19_reg_428 <= i_3_reg_1281;
    end else if (((icmp_ln47_1_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        i_0_i19_reg_428 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        i_0_i49_reg_485 <= i_4_reg_1358;
    end else if (((icmp_ln47_2_fu_1048_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
        i_0_i49_reg_485 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_0_i5_reg_371 <= i_2_reg_1204;
    end else if (((icmp_ln47_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        i_0_i5_reg_371 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_694_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_i_reg_325 <= i_1_reg_1155;
    end else if (((grp_Conv2d_5_fu_550_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_i_reg_325 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_2_fu_1048_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        i_0_reg_496 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        i_0_reg_496 <= i_reg_1386;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_1_fu_903_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        j_0_i15_reg_404 <= j_9_reg_1268;
    end else if (((icmp_ln55_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        j_0_i15_reg_404 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        j_0_i33_reg_450 <= j_10_reg_1314;
    end else if (((icmp_ln47_1_fu_886_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
        j_0_i33_reg_450 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_741_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        j_0_i3_reg_347 <= j_3_reg_1191;
    end else if (((icmp_ln41_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        j_0_i3_reg_347 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_2_fu_1065_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        j_0_i45_reg_461 <= j_11_reg_1345;
    end else if (((icmp_ln55_1_fu_936_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        j_0_i45_reg_461 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        j_0_i8_reg_393 <= j_8_reg_1237;
    end else if (((icmp_ln47_fu_724_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        j_0_i8_reg_393 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_0_i_reg_336 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_i_reg_336 <= j_7_reg_1168;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        j_0_reg_519 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        j_0_reg_519 <= j_reg_1404;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        phi_mul209_reg_439 <= add_ln50_5_reg_1291;
    end else if (((icmp_ln47_1_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        phi_mul209_reg_439 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        phi_mul_reg_382 <= add_ln50_4_reg_1214;
    end else if (((icmp_ln47_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        phi_mul_reg_382 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_2_fu_1048_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        probability_sum_0_reg_507 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        probability_sum_0_reg_507 <= grp_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        storemerge211_reg_415 <= grp_fu_560_p2;
    end else if (((icmp_ln47_1_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        storemerge211_reg_415 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        storemerge212_reg_472 <= grp_fu_560_p2;
    end else if (((icmp_ln47_2_fu_1048_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
        storemerge212_reg_472 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        storemerge_reg_358 <= grp_fu_560_p2;
    end else if (((icmp_ln47_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        storemerge_reg_358 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_741_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln50_4_reg_1214 <= add_ln50_4_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_1_fu_903_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        add_ln50_5_reg_1291 <= add_ln50_5_fu_920_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        fc_hidden_layer1_loa_reg_1229 <= fc_hidden_layer1_q0;
        fc_in_1_0_load_reg_1224 <= fc_in_1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        fc_hidden_layer2_loa_reg_1306 <= fc_hidden_layer2_q0;
        fc_in_2_relu1_0_load_reg_1301 <= fc_in_2_relu1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        fc_hidden_layer3_loa_reg_1378 <= fc_hidden_layer3_q0;
        fc_in_3_relu2_0_load_reg_1373 <= fc_in_3_relu2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fc_out_1_0_addr_reg_1196 <= zext_ln48_fu_736_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        fc_out_1_0_load_reg_1252 <= fc_out_1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_1_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        fc_out_2_0_addr_reg_1273 <= zext_ln48_1_fu_898_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        fc_out_2_0_load_reg_1329 <= fc_out_2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_2_fu_1048_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
        fc_out_3_0_addr_2_reg_1350 <= zext_ln48_2_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_1155 <= i_1_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_reg_1204 <= i_2_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_3_reg_1281 <= i_3_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        i_4_reg_1358 <= i_4_fu_1071_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        i_reg_1386 <= i_fu_1124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        j_0_i15_cast6_reg_1260[5 : 0] <= j_0_i15_cast6_fu_882_p1[5 : 0];
        j_9_reg_1268 <= j_9_fu_892_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_i3_cast8_reg_1183[7 : 0] <= j_0_i3_cast8_fu_720_p1[7 : 0];
        j_3_reg_1191 <= j_3_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j_0_i45_cast4_reg_1337[3 : 0] <= j_0_i45_cast4_fu_1044_p1[3 : 0];
        j_11_reg_1345 <= j_11_fu_1054_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        j_10_reg_1314 <= j_10_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_7_reg_1168 <= j_7_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_8_reg_1237 <= j_8_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        j_reg_1404 <= j_fu_1141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_606 <= grp_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_618 <= grp_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_626 <= grp_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_631 <= grp_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state77))) begin
        reg_642 <= grp_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sub_ln43_reg_1160[10 : 3] <= sub_ln43_fu_684_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        tmp_4_reg_1396 <= grp_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        tmp_6_reg_1419 <= grp_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        tmp_8_reg_1424 <= grp_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_1135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        zext_ln122_reg_1409[3 : 0] <= zext_ln122_fu_1147_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_694_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        zext_ln43_reg_1173[31 : 0] <= zext_ln43_fu_715_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_1_fu_936_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        zext_ln56_1_reg_1319[5 : 0] <= zext_ln56_1_fu_948_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        zext_ln56_reg_1242[7 : 0] <= zext_ln56_fu_786_p1[7 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln121_fu_1135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_fu_1135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_1_address0 = grp_Conv2d_6_fu_540_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_out_1_address0 = grp_Conv2d_7_fu_530_out_matrix_address0;
    end else begin
        conv_out_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_1_ce0 = grp_Conv2d_6_fu_540_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_out_1_ce0 = grp_Conv2d_7_fu_530_out_matrix_ce0;
    end else begin
        conv_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_out_1_we0 = grp_Conv2d_7_fu_530_out_matrix_we0;
    end else begin
        conv_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_2_address0 = grp_Conv2d_5_fu_550_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_2_address0 = grp_Conv2d_6_fu_540_out_matrix_address0;
    end else begin
        conv_out_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_2_ce0 = grp_Conv2d_5_fu_550_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_2_ce0 = grp_Conv2d_6_fu_540_out_matrix_ce0;
    end else begin
        conv_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_2_we0 = grp_Conv2d_6_fu_540_out_matrix_we0;
    end else begin
        conv_out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_3_address0 = zext_ln43_fu_715_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_3_address0 = grp_Conv2d_5_fu_550_out_matrix_address0;
    end else begin
        conv_out_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_3_ce0 = grp_Conv2d_5_fu_550_out_matrix_ce0;
    end else begin
        conv_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_3_we0 = grp_Conv2d_5_fu_550_out_matrix_we0;
    end else begin
        conv_out_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        fc_hidden_layer1_ce0 = 1'b1;
    end else begin
        fc_hidden_layer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        fc_hidden_layer2_ce0 = 1'b1;
    end else begin
        fc_hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        fc_hidden_layer3_ce0 = 1'b1;
    end else begin
        fc_hidden_layer3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        fc_in_1_0_address0 = zext_ln50_fu_753_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        fc_in_1_0_address0 = zext_ln43_reg_1173;
    end else begin
        fc_in_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        fc_in_1_0_ce0 = 1'b1;
    end else begin
        fc_in_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        fc_in_1_0_we0 = 1'b1;
    end else begin
        fc_in_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        fc_in_2_relu1_0_address0 = zext_ln50_2_fu_915_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        fc_in_2_relu1_0_address0 = zext_ln56_reg_1242;
    end else begin
        fc_in_2_relu1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state32))) begin
        fc_in_2_relu1_0_ce0 = 1'b1;
    end else begin
        fc_in_2_relu1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        fc_in_2_relu1_0_we0 = 1'b1;
    end else begin
        fc_in_2_relu1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        fc_in_3_relu2_0_address0 = zext_ln50_4_fu_1077_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        fc_in_3_relu2_0_address0 = zext_ln56_1_reg_1319;
    end else begin
        fc_in_3_relu2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state53))) begin
        fc_in_3_relu2_0_ce0 = 1'b1;
    end else begin
        fc_in_3_relu2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        fc_in_3_relu2_0_we0 = 1'b1;
    end else begin
        fc_in_3_relu2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        fc_out_1_0_address0 = zext_ln56_fu_786_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        fc_out_1_0_address0 = fc_out_1_0_addr_reg_1196;
    end else begin
        fc_out_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11))) begin
        fc_out_1_0_ce0 = 1'b1;
    end else begin
        fc_out_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        fc_out_1_0_we0 = 1'b1;
    end else begin
        fc_out_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        fc_out_2_0_address0 = zext_ln56_1_fu_948_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        fc_out_2_0_address0 = fc_out_2_0_addr_reg_1273;
    end else begin
        fc_out_2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state32))) begin
        fc_out_2_0_ce0 = 1'b1;
    end else begin
        fc_out_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        fc_out_2_0_we0 = 1'b1;
    end else begin
        fc_out_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        fc_out_3_0_address0 = zext_ln122_fu_1147_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        fc_out_3_0_address0 = zext_ln119_fu_1130_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        fc_out_3_0_address0 = fc_out_3_0_addr_2_reg_1350;
    end else begin
        fc_out_3_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state53))) begin
        fc_out_3_0_ce0 = 1'b1;
    end else begin
        fc_out_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        fc_out_3_0_we0 = 1'b1;
    end else begin
        fc_out_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_560_p0 = storemerge212_reg_472;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_560_p0 = storemerge211_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_560_p0 = storemerge_reg_358;
    end else begin
        grp_fu_560_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_567_p0 = fc_in_3_relu2_0_load_reg_1373;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_567_p0 = fc_in_2_relu1_0_load_reg_1301;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_567_p0 = fc_in_1_0_load_reg_1224;
    end else begin
        grp_fu_567_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_567_p1 = fc_hidden_layer3_loa_reg_1378;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_567_p1 = fc_hidden_layer2_loa_reg_1306;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_567_p1 = fc_hidden_layer1_loa_reg_1229;
    end else begin
        grp_fu_567_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state124)) begin
        grp_fu_571_p0 = tmp_8_reg_1424;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_571_p0 = tmp_4_reg_1396;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_571_p0 = reg_626;
    end else begin
        grp_fu_571_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_575_p0 = probability_sum_0_reg_507;
    end else if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_575_p0 = fc_out_3_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_575_p0 = ap_phi_mux_probability_sum_0_phi_fu_511_p4;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_575_p0 = fc_out_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_575_p0 = fc_out_1_0_q0;
    end else begin
        grp_fu_575_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_583_p0 = fc_out_2_0_load_reg_1329;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_583_p0 = fc_out_1_0_load_reg_1252;
    end else begin
        grp_fu_583_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_601_p1 = tmp_6_reg_1419;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_601_p1 = reg_618;
    end else begin
        grp_fu_601_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        probability_result_ce0 = 1'b1;
    end else begin
        probability_result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        probability_result_we0 = 1'b1;
    end else begin
        probability_result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_Conv2d_7_fu_530_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_Conv2d_6_fu_540_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_Conv2d_5_fu_550_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln41_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln42_fu_694_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln47_fu_724_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln49_fu_741_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln55_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state31 : begin
            if (((icmp_ln47_1_fu_886_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln49_1_fu_903_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln55_1_fu_936_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state52 : begin
            if (((icmp_ln47_2_fu_1048_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln49_2_fu_1065_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state62 : begin
            if (((icmp_ln118_fu_1118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln121_fu_1135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_706_p2 = (sub_ln43_reg_1160 + zext_ln42_fu_690_p1);

assign add_ln50_1_fu_926_p2 = (phi_mul209_reg_439 + j_0_i15_cast6_reg_1260);

assign add_ln50_2_fu_1098_p2 = (j_0_i45_cast4_reg_1337 + shl_ln50_1_fu_1090_p3);

assign add_ln50_3_fu_1107_p2 = (shl_ln1_fu_1082_p3 + zext_ln50_6_fu_1103_p1);

assign add_ln50_4_fu_758_p2 = (phi_mul_reg_382 + 17'd180);

assign add_ln50_5_fu_920_p2 = (phi_mul209_reg_439 + 13'd45);

assign add_ln50_fu_764_p2 = (phi_mul_reg_382 + j_0_i3_cast8_reg_1183);

assign and_ln26_1_fu_868_p2 = (grp_fu_583_p2 & and_ln26_fu_862_p2);

assign and_ln26_2_fu_1024_p2 = (or_ln26_3_fu_1018_p2 & or_ln26_2_fu_1000_p2);

assign and_ln26_3_fu_1030_p2 = (grp_fu_583_p2 & and_ln26_2_fu_1024_p2);

assign and_ln26_fu_862_p2 = (or_ln26_fu_838_p2 & or_ln26_1_fu_856_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_probability_sum_0_phi_fu_511_p4 = probability_sum_0_reg_507;

assign bitcast_ln26_1_fu_808_p1 = reg_631;

assign bitcast_ln26_2_fu_953_p1 = fc_out_2_0_load_reg_1329;

assign bitcast_ln26_3_fu_970_p1 = reg_631;

assign bitcast_ln26_fu_791_p1 = fc_out_1_0_load_reg_1252;

assign conv_kernel_1_address0 = grp_Conv2d_7_fu_530_kernel_address0;

assign conv_kernel_1_ce0 = grp_Conv2d_7_fu_530_kernel_ce0;

assign conv_kernel_2_address0 = grp_Conv2d_6_fu_540_kernel_address0;

assign conv_kernel_2_ce0 = grp_Conv2d_6_fu_540_kernel_ce0;

assign conv_kernel_3_address0 = grp_Conv2d_5_fu_550_kernel_address0;

assign conv_kernel_3_ce0 = grp_Conv2d_5_fu_550_kernel_ce0;

assign conv_out_1_d0 = grp_Conv2d_7_fu_530_out_matrix_d0;

assign conv_out_2_d0 = grp_Conv2d_6_fu_540_out_matrix_d0;

assign fc_hidden_layer1_address0 = zext_ln50_1_fu_769_p1;

assign fc_hidden_layer2_address0 = zext_ln50_3_fu_931_p1;

assign fc_hidden_layer3_address0 = zext_ln50_5_fu_1113_p1;

assign fc_in_1_0_d0 = conv_out_3_q0;

assign fc_in_2_relu1_0_d0 = ((and_ln26_1_fu_868_p2[0:0] === 1'b1) ? fc_out_1_0_load_reg_1252 : reg_631);

assign fc_in_3_relu2_0_d0 = ((and_ln26_3_fu_1030_p2[0:0] === 1'b1) ? fc_out_2_0_load_reg_1329 : reg_631);

assign fc_out_1_0_d0 = storemerge_reg_358;

assign fc_out_2_0_d0 = storemerge211_reg_415;

assign grp_Conv2d_5_fu_550_ap_start = grp_Conv2d_5_fu_550_ap_start_reg;

assign grp_Conv2d_6_fu_540_ap_start = grp_Conv2d_6_fu_540_ap_start_reg;

assign grp_Conv2d_7_fu_530_ap_start = grp_Conv2d_7_fu_530_ap_start_reg;

assign i_1_fu_654_p2 = (i_0_i_reg_325 + 5'd1);

assign i_2_fu_747_p2 = (i_0_i5_reg_371 + 10'd1);

assign i_3_fu_909_p2 = (i_0_i19_reg_428 + 8'd1);

assign i_4_fu_1071_p2 = (i_0_i49_reg_485 + 6'd1);

assign i_fu_1124_p2 = (i_0_reg_496 + 4'd1);

assign icmp_ln118_fu_1118_p2 = ((i_0_reg_496 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_1135_p2 = ((j_0_reg_519 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln26_1_fu_832_p2 = ((trunc_ln26_fu_804_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_2_fu_844_p2 = ((tmp_s_fu_812_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln26_3_fu_850_p2 = ((trunc_ln26_1_fu_822_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_4_fu_988_p2 = ((tmp_11_fu_956_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln26_5_fu_994_p2 = ((trunc_ln26_2_fu_966_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_6_fu_1006_p2 = ((tmp_12_fu_974_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln26_7_fu_1012_p2 = ((trunc_ln26_3_fu_984_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_826_p2 = ((tmp_5_fu_794_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_648_p2 = ((i_0_i_reg_325 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_694_p2 = ((j_0_i_reg_336 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln47_1_fu_886_p2 = ((j_0_i15_reg_404 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln47_2_fu_1048_p2 = ((j_0_i45_reg_461 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_724_p2 = ((j_0_i3_reg_347 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_903_p2 = ((i_0_i19_reg_428 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_1065_p2 = ((i_0_i49_reg_485 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_741_p2 = ((i_0_i5_reg_371 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_936_p2 = ((j_0_i33_reg_450 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_774_p2 = ((j_0_i8_reg_393 == 8'd180) ? 1'b1 : 1'b0);

assign j_0_i15_cast6_fu_882_p1 = j_0_i15_reg_404;

assign j_0_i3_cast8_fu_720_p1 = j_0_i3_reg_347;

assign j_0_i45_cast4_fu_1044_p1 = j_0_i45_reg_461;

assign j_10_fu_942_p2 = (j_0_i33_reg_450 + 6'd1);

assign j_11_fu_1054_p2 = (j_0_i45_reg_461 + 4'd1);

assign j_3_fu_730_p2 = (j_0_i3_reg_347 + 8'd1);

assign j_7_fu_700_p2 = (j_0_i_reg_336 + 5'd1);

assign j_8_fu_780_p2 = (j_0_i8_reg_393 + 8'd1);

assign j_9_fu_892_p2 = (j_0_i15_reg_404 + 6'd1);

assign j_fu_1141_p2 = (j_0_reg_519 + 4'd1);

assign mnist_data_address0 = grp_Conv2d_7_fu_530_input_matrix_address0;

assign mnist_data_ce0 = grp_Conv2d_7_fu_530_input_matrix_ce0;

assign or_ln26_1_fu_856_p2 = (icmp_ln26_3_fu_850_p2 | icmp_ln26_2_fu_844_p2);

assign or_ln26_2_fu_1000_p2 = (icmp_ln26_5_fu_994_p2 | icmp_ln26_4_fu_988_p2);

assign or_ln26_3_fu_1018_p2 = (icmp_ln26_7_fu_1012_p2 | icmp_ln26_6_fu_1006_p2);

assign or_ln26_fu_838_p2 = (icmp_ln26_fu_826_p2 | icmp_ln26_1_fu_832_p2);

assign probability_result_address0 = zext_ln122_reg_1409;

assign probability_result_d0 = grp_fu_571_p1;

assign sext_ln43_fu_711_p1 = $signed(add_ln43_fu_706_p2);

assign shl_ln1_fu_1082_p3 = {{i_0_i49_reg_485}, {3'd0}};

assign shl_ln43_1_fu_672_p3 = {{i_0_i_reg_325}, {3'd0}};

assign shl_ln50_1_fu_1090_p3 = {{i_0_i49_reg_485}, {1'd0}};

assign shl_ln_fu_660_p3 = {{i_0_i_reg_325}, {5'd0}};

assign sub_ln43_fu_684_p2 = (zext_ln43_1_fu_668_p1 - zext_ln43_2_fu_680_p1);

assign tmp_11_fu_956_p4 = {{bitcast_ln26_2_fu_953_p1[30:23]}};

assign tmp_12_fu_974_p4 = {{bitcast_ln26_3_fu_970_p1[30:23]}};

assign tmp_5_fu_794_p4 = {{bitcast_ln26_fu_791_p1[30:23]}};

assign tmp_s_fu_812_p4 = {{bitcast_ln26_1_fu_808_p1[30:23]}};

assign trunc_ln26_1_fu_822_p1 = bitcast_ln26_1_fu_808_p1[22:0];

assign trunc_ln26_2_fu_966_p1 = bitcast_ln26_2_fu_953_p1[22:0];

assign trunc_ln26_3_fu_984_p1 = bitcast_ln26_3_fu_970_p1[22:0];

assign trunc_ln26_fu_804_p1 = bitcast_ln26_fu_791_p1[22:0];

assign zext_ln119_fu_1130_p1 = i_0_reg_496;

assign zext_ln122_fu_1147_p1 = j_0_reg_519;

assign zext_ln42_fu_690_p1 = j_0_i_reg_336;

assign zext_ln43_1_fu_668_p1 = shl_ln_fu_660_p3;

assign zext_ln43_2_fu_680_p1 = shl_ln43_1_fu_672_p3;

assign zext_ln43_fu_715_p1 = $unsigned(sext_ln43_fu_711_p1);

assign zext_ln48_1_fu_898_p1 = j_0_i15_reg_404;

assign zext_ln48_2_fu_1060_p1 = j_0_i45_reg_461;

assign zext_ln48_fu_736_p1 = j_0_i3_reg_347;

assign zext_ln50_1_fu_769_p1 = add_ln50_fu_764_p2;

assign zext_ln50_2_fu_915_p1 = i_0_i19_reg_428;

assign zext_ln50_3_fu_931_p1 = add_ln50_1_fu_926_p2;

assign zext_ln50_4_fu_1077_p1 = i_0_i49_reg_485;

assign zext_ln50_5_fu_1113_p1 = add_ln50_3_fu_1107_p2;

assign zext_ln50_6_fu_1103_p1 = add_ln50_2_fu_1098_p2;

assign zext_ln50_fu_753_p1 = i_0_i5_reg_371;

assign zext_ln56_1_fu_948_p1 = j_0_i33_reg_450;

assign zext_ln56_fu_786_p1 = j_0_i8_reg_393;

always @ (posedge ap_clk) begin
    sub_ln43_reg_1160[2:0] <= 3'b000;
    zext_ln43_reg_1173[63:32] <= 32'b00000000000000000000000000000000;
    j_0_i3_cast8_reg_1183[16:8] <= 9'b000000000;
    zext_ln56_reg_1242[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    j_0_i15_cast6_reg_1260[12:6] <= 7'b0000000;
    zext_ln56_1_reg_1319[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    j_0_i45_cast4_reg_1337[6:4] <= 3'b000;
    zext_ln122_reg_1409[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //forward
