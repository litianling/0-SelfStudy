// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Padding_HH_
#define _Padding_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Padding : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > input_matrix_address0;
    sc_out< sc_logic > input_matrix_ce0;
    sc_in< sc_lv<32> > input_matrix_q0;
    sc_out< sc_lv<10> > output_matrix_address0;
    sc_out< sc_logic > output_matrix_ce0;
    sc_out< sc_logic > output_matrix_we0;
    sc_out< sc_lv<32> > output_matrix_d0;
    sc_out< sc_lv<10> > output_matrix_address1;
    sc_out< sc_logic > output_matrix_ce1;
    sc_out< sc_logic > output_matrix_we1;
    sc_out< sc_lv<32> > output_matrix_d1;


    // Module declarations
    Padding(sc_module_name name);
    SC_HAS_PROCESS(Padding);

    ~Padding();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > indvar_flatten_reg_102;
    sc_signal< sc_lv<5> > i_0_reg_113;
    sc_signal< sc_lv<5> > j_0_reg_124;
    sc_signal< sc_lv<1> > icmp_ln89_fu_187_p2;
    sc_signal< sc_lv<1> > icmp_ln89_reg_421;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > add_ln89_fu_193_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > select_ln92_3_fu_271_p3;
    sc_signal< sc_lv<5> > select_ln92_3_reg_430;
    sc_signal< sc_lv<1> > and_ln91_2_fu_351_p2;
    sc_signal< sc_lv<1> > and_ln91_2_reg_435;
    sc_signal< sc_lv<11> > add_ln92_3_fu_405_p2;
    sc_signal< sc_lv<11> > add_ln92_3_reg_444;
    sc_signal< sc_lv<5> > j_fu_411_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<5> > ap_phi_mux_i_0_phi_fu_117_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln94_fu_367_p1;
    sc_signal< sc_lv<64> > zext_ln92_3_fu_400_p1;
    sc_signal< sc_lv<64> > zext_ln92_fu_417_p1;
    sc_signal< sc_lv<10> > shl_ln_fu_135_p3;
    sc_signal< sc_lv<6> > shl_ln94_2_fu_147_p3;
    sc_signal< sc_lv<11> > zext_ln94_3_fu_143_p1;
    sc_signal< sc_lv<11> > zext_ln94_4_fu_155_p1;
    sc_signal< sc_lv<4> > tmp_fu_171_p4;
    sc_signal< sc_lv<1> > icmp_ln90_fu_205_p2;
    sc_signal< sc_lv<5> > i_fu_199_p2;
    sc_signal< sc_lv<10> > shl_ln94_mid1_fu_219_p3;
    sc_signal< sc_lv<6> > shl_ln94_2_mid1_fu_231_p3;
    sc_signal< sc_lv<11> > zext_ln94_5_fu_227_p1;
    sc_signal< sc_lv<11> > zext_ln94_6_fu_239_p1;
    sc_signal< sc_lv<11> > sub_ln94_2_fu_243_p2;
    sc_signal< sc_lv<11> > sub_ln94_fu_159_p2;
    sc_signal< sc_lv<1> > icmp_ln91_6_fu_257_p2;
    sc_signal< sc_lv<1> > icmp_ln91_1_fu_165_p2;
    sc_signal< sc_lv<5> > mul_ln92_fu_283_p0;
    sc_signal< sc_lv<4> > tmp_3_fu_289_p4;
    sc_signal< sc_lv<1> > icmp_ln91_7_fu_299_p2;
    sc_signal< sc_lv<1> > icmp_ln91_fu_181_p2;
    sc_signal< sc_lv<5> > select_ln92_fu_211_p3;
    sc_signal< sc_lv<4> > tmp_4_fu_317_p4;
    sc_signal< sc_lv<1> > icmp_ln91_8_fu_327_p2;
    sc_signal< sc_lv<1> > select_ln92_4_fu_305_p3;
    sc_signal< sc_lv<1> > icmp_ln91_3_fu_333_p2;
    sc_signal< sc_lv<1> > select_ln92_2_fu_263_p3;
    sc_signal< sc_lv<1> > and_ln91_3_fu_345_p2;
    sc_signal< sc_lv<1> > and_ln91_fu_339_p2;
    sc_signal< sc_lv<11> > select_ln92_1_fu_249_p3;
    sc_signal< sc_lv<11> > zext_ln92_4_fu_313_p1;
    sc_signal< sc_lv<11> > add_ln94_fu_357_p2;
    sc_signal< sc_lv<32> > sext_ln94_fu_363_p1;
    sc_signal< sc_lv<7> > zext_ln90_fu_372_p1;
    sc_signal< sc_lv<7> > add_ln92_fu_376_p2;
    sc_signal< sc_lv<7> > select_ln92_5_fu_382_p3;
    sc_signal< sc_lv<10> > sext_ln92_3_fu_390_p1;
    sc_signal< sc_lv<10> > mul_ln92_fu_283_p2;
    sc_signal< sc_lv<10> > add_ln92_2_fu_394_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<10> > mul_ln92_fu_283_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<10> ap_const_lv10_384;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<10> ap_const_lv10_1A;
    static const sc_lv<7> ap_const_lv7_4A;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln89_fu_193_p2();
    void thread_add_ln92_2_fu_394_p2();
    void thread_add_ln92_3_fu_405_p2();
    void thread_add_ln92_fu_376_p2();
    void thread_add_ln94_fu_357_p2();
    void thread_and_ln91_2_fu_351_p2();
    void thread_and_ln91_3_fu_345_p2();
    void thread_and_ln91_fu_339_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_117_p4();
    void thread_ap_ready();
    void thread_i_fu_199_p2();
    void thread_icmp_ln89_fu_187_p2();
    void thread_icmp_ln90_fu_205_p2();
    void thread_icmp_ln91_1_fu_165_p2();
    void thread_icmp_ln91_3_fu_333_p2();
    void thread_icmp_ln91_6_fu_257_p2();
    void thread_icmp_ln91_7_fu_299_p2();
    void thread_icmp_ln91_8_fu_327_p2();
    void thread_icmp_ln91_fu_181_p2();
    void thread_input_matrix_address0();
    void thread_input_matrix_ce0();
    void thread_j_fu_411_p2();
    void thread_mul_ln92_fu_283_p0();
    void thread_mul_ln92_fu_283_p00();
    void thread_mul_ln92_fu_283_p2();
    void thread_output_matrix_address0();
    void thread_output_matrix_address1();
    void thread_output_matrix_ce0();
    void thread_output_matrix_ce1();
    void thread_output_matrix_d0();
    void thread_output_matrix_d1();
    void thread_output_matrix_we0();
    void thread_output_matrix_we1();
    void thread_select_ln92_1_fu_249_p3();
    void thread_select_ln92_2_fu_263_p3();
    void thread_select_ln92_3_fu_271_p3();
    void thread_select_ln92_4_fu_305_p3();
    void thread_select_ln92_5_fu_382_p3();
    void thread_select_ln92_fu_211_p3();
    void thread_sext_ln92_3_fu_390_p1();
    void thread_sext_ln94_fu_363_p1();
    void thread_shl_ln94_2_fu_147_p3();
    void thread_shl_ln94_2_mid1_fu_231_p3();
    void thread_shl_ln94_mid1_fu_219_p3();
    void thread_shl_ln_fu_135_p3();
    void thread_sub_ln94_2_fu_243_p2();
    void thread_sub_ln94_fu_159_p2();
    void thread_tmp_3_fu_289_p4();
    void thread_tmp_4_fu_317_p4();
    void thread_tmp_fu_171_p4();
    void thread_zext_ln90_fu_372_p1();
    void thread_zext_ln92_3_fu_400_p1();
    void thread_zext_ln92_4_fu_313_p1();
    void thread_zext_ln92_fu_417_p1();
    void thread_zext_ln94_3_fu_143_p1();
    void thread_zext_ln94_4_fu_155_p1();
    void thread_zext_ln94_5_fu_227_p1();
    void thread_zext_ln94_6_fu_239_p1();
    void thread_zext_ln94_fu_367_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
