// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv2d_HH_
#define _Conv2d_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "forw_back_fadd_32bkb.h"
#include "forw_back_fmul_32cud.h"

namespace ap_rtl {

struct Conv2d : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > input_matrix_address0;
    sc_out< sc_logic > input_matrix_ce0;
    sc_in< sc_lv<32> > input_matrix_q0;
    sc_out< sc_lv<10> > kernel_address0;
    sc_out< sc_logic > kernel_ce0;
    sc_in< sc_lv<32> > kernel_q0;
    sc_out< sc_lv<4> > out_matrix_address0;
    sc_out< sc_logic > out_matrix_ce0;
    sc_out< sc_logic > out_matrix_we0;
    sc_out< sc_lv<32> > out_matrix_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Conv2d(sc_module_name name);
    SC_HAS_PROCESS(Conv2d);

    ~Conv2d();

    sc_trace_file* mVcdFile;

    forw_back_fadd_32bkb<1,4,32,32,32>* forw_back_fadd_32bkb_U84;
    forw_back_fmul_32cud<1,3,32,32,32>* forw_back_fmul_32cud_U85;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > indvar_flatten_reg_148;
    sc_signal< sc_lv<3> > col_0_reg_159;
    sc_signal< sc_lv<32> > empty_reg_168;
    sc_signal< sc_lv<3> > row_0_reg_180;
    sc_signal< sc_lv<1> > icmp_ln31_fu_221_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > add_ln31_fu_227_p2;
    sc_signal< sc_lv<4> > add_ln31_reg_572;
    sc_signal< sc_lv<3> > indvars_iv_mid2_fu_245_p3;
    sc_signal< sc_lv<3> > indvars_iv_mid2_reg_577;
    sc_signal< sc_lv<2> > row_mid2_fu_253_p3;
    sc_signal< sc_lv<2> > row_mid2_reg_583;
    sc_signal< sc_lv<2> > col_cast6_mid2_v_fu_261_p3;
    sc_signal< sc_lv<2> > col_cast6_mid2_v_reg_588;
    sc_signal< sc_lv<3> > col_cast6_mid2_fu_269_p1;
    sc_signal< sc_lv<4> > col_cast_mid2_fu_277_p1;
    sc_signal< sc_lv<4> > col_cast_mid2_reg_598;
    sc_signal< sc_lv<3> > row_cast3_fu_311_p1;
    sc_signal< sc_lv<3> > row_cast3_reg_604;
    sc_signal< sc_lv<9> > row_cast_fu_315_p1;
    sc_signal< sc_lv<9> > row_cast_reg_610;
    sc_signal< sc_lv<4> > out_matrix_addr_reg_615;
    sc_signal< sc_lv<1> > icmp_ln34_fu_399_p2;
    sc_signal< sc_lv<1> > icmp_ln34_reg_620;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln34_reg_620_pp0_iter1_reg;
    sc_signal< sc_lv<4> > add_ln34_fu_405_p2;
    sc_signal< sc_lv<4> > add_ln34_reg_624;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<3> > row_0_mid2_fu_422_p3;
    sc_signal< sc_lv<3> > row_0_mid2_reg_629;
    sc_signal< sc_lv<3> > select_ln34_fu_519_p3;
    sc_signal< sc_lv<3> > select_ln34_reg_634;
    sc_signal< sc_lv<32> > input_matrix_load_reg_649;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > kernel_load_reg_654;
    sc_signal< sc_lv<3> > row_8_fu_553_p2;
    sc_signal< sc_lv<3> > row_8_reg_659;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state6_pp0_stage3_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage3_iter1;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<32> > grp_fu_195_p2;
    sc_signal< sc_lv<32> > tmp_reg_664;
    sc_signal< sc_lv<32> > grp_fu_189_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<2> > j_fu_558_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<3> > add_ln32_fu_563_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_lv<4> > indvar_flatten7_reg_104;
    sc_signal< sc_lv<2> > col_reg_115;
    sc_signal< sc_lv<3> > indvars_iv_reg_126;
    sc_signal< sc_lv<2> > row_reg_137;
    sc_signal< sc_lv<4> > ap_phi_mux_indvar_flatten_phi_fu_152_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_col_0_phi_fu_162_p4;
    sc_signal< sc_lv<3> > ap_phi_mux_row_0_phi_fu_183_p4;
    sc_signal< sc_lv<64> > zext_ln33_fu_329_p1;
    sc_signal< sc_lv<64> > zext_ln36_fu_537_p1;
    sc_signal< sc_lv<64> > sext_ln36_1_fu_548_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<4> > shl_ln_fu_203_p3;
    sc_signal< sc_lv<5> > zext_ln33_11_fu_211_p1;
    sc_signal< sc_lv<5> > col_cast5_fu_199_p1;
    sc_signal< sc_lv<1> > icmp_ln32_fu_239_p2;
    sc_signal< sc_lv<2> > i_fu_233_p2;
    sc_signal< sc_lv<4> > shl_ln33_mid1_fu_281_p3;
    sc_signal< sc_lv<5> > zext_ln33_21_fu_289_p1;
    sc_signal< sc_lv<5> > col_cast5_mid1_fu_273_p1;
    sc_signal< sc_lv<5> > sub_ln33_6_fu_293_p2;
    sc_signal< sc_lv<5> > sub_ln33_fu_215_p2;
    sc_signal< sc_lv<5> > sub_ln33_mid2_fu_299_p3;
    sc_signal< sc_lv<5> > row_cast4_fu_307_p1;
    sc_signal< sc_lv<5> > add_ln33_fu_319_p2;
    sc_signal< sc_lv<32> > sext_ln33_fu_325_p1;
    sc_signal< sc_lv<8> > shl_ln9_fu_338_p3;
    sc_signal< sc_lv<4> > shl_ln36_s_fu_350_p3;
    sc_signal< sc_lv<9> > zext_ln36_6_fu_346_p1;
    sc_signal< sc_lv<9> > zext_ln36_7_fu_358_p1;
    sc_signal< sc_lv<4> > col_0_cast2_fu_334_p1;
    sc_signal< sc_lv<4> > sub_ln36_fu_368_p2;
    sc_signal< sc_lv<6> > shl_ln36_2_fu_381_p3;
    sc_signal< sc_lv<9> > shl_ln36_1_fu_373_p3;
    sc_signal< sc_lv<9> > sext_ln36_fu_389_p1;
    sc_signal< sc_lv<1> > icmp_ln35_fu_417_p2;
    sc_signal< sc_lv<3> > col_10_fu_411_p2;
    sc_signal< sc_lv<8> > shl_ln36_mid1_fu_433_p3;
    sc_signal< sc_lv<4> > shl_ln36_11_mid1_fu_445_p3;
    sc_signal< sc_lv<9> > zext_ln36_8_fu_441_p1;
    sc_signal< sc_lv<9> > zext_ln36_9_fu_453_p1;
    sc_signal< sc_lv<9> > sub_ln36_20_fu_457_p2;
    sc_signal< sc_lv<9> > sub_ln36_13_fu_362_p2;
    sc_signal< sc_lv<4> > col_0_cast2_mid1_fu_429_p1;
    sc_signal< sc_lv<4> > sub_ln36_21_fu_471_p2;
    sc_signal< sc_lv<6> > shl_ln36_13_mid1_fu_484_p3;
    sc_signal< sc_lv<9> > shl_ln36_12_mid1_fu_476_p3;
    sc_signal< sc_lv<9> > sext_ln36_4_fu_492_p1;
    sc_signal< sc_lv<9> > sub_ln36_22_fu_496_p2;
    sc_signal< sc_lv<9> > sub_ln36_14_fu_393_p2;
    sc_signal< sc_lv<9> > sub_ln36_8_mid2_v_fu_502_p3;
    sc_signal< sc_lv<9> > sub_ln36_13_mid2_fu_463_p3;
    sc_signal< sc_lv<9> > row_0_cast_mid2_cast_fu_515_p1;
    sc_signal< sc_lv<9> > add_ln36_fu_527_p2;
    sc_signal< sc_lv<32> > sext_ln36_3_fu_533_p1;
    sc_signal< sc_lv<9> > sub_ln36_8_mid2_fu_510_p2;
    sc_signal< sc_lv<9> > add_ln36_2_fu_542_p2;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_state5_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage3;
    static const sc_lv<7> ap_ST_fsm_state12;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln31_fu_227_p2();
    void thread_add_ln32_fu_563_p2();
    void thread_add_ln33_fu_319_p2();
    void thread_add_ln34_fu_405_p2();
    void thread_add_ln36_2_fu_542_p2();
    void thread_add_ln36_fu_527_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state10_pp0_stage3_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage2_iter0();
    void thread_ap_block_state6_pp0_stage3_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_block_state8_pp0_stage1_iter1();
    void thread_ap_block_state9_pp0_stage2_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_col_0_phi_fu_162_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_152_p4();
    void thread_ap_phi_mux_row_0_phi_fu_183_p4();
    void thread_ap_ready();
    void thread_col_0_cast2_fu_334_p1();
    void thread_col_0_cast2_mid1_fu_429_p1();
    void thread_col_10_fu_411_p2();
    void thread_col_cast5_fu_199_p1();
    void thread_col_cast5_mid1_fu_273_p1();
    void thread_col_cast6_mid2_fu_269_p1();
    void thread_col_cast6_mid2_v_fu_261_p3();
    void thread_col_cast_mid2_fu_277_p1();
    void thread_i_fu_233_p2();
    void thread_icmp_ln31_fu_221_p2();
    void thread_icmp_ln32_fu_239_p2();
    void thread_icmp_ln34_fu_399_p2();
    void thread_icmp_ln35_fu_417_p2();
    void thread_indvars_iv_mid2_fu_245_p3();
    void thread_input_matrix_address0();
    void thread_input_matrix_ce0();
    void thread_j_fu_558_p2();
    void thread_kernel_address0();
    void thread_kernel_ce0();
    void thread_out_matrix_address0();
    void thread_out_matrix_ce0();
    void thread_out_matrix_d0();
    void thread_out_matrix_we0();
    void thread_row_0_cast_mid2_cast_fu_515_p1();
    void thread_row_0_mid2_fu_422_p3();
    void thread_row_8_fu_553_p2();
    void thread_row_cast3_fu_311_p1();
    void thread_row_cast4_fu_307_p1();
    void thread_row_cast_fu_315_p1();
    void thread_row_mid2_fu_253_p3();
    void thread_select_ln34_fu_519_p3();
    void thread_sext_ln33_fu_325_p1();
    void thread_sext_ln36_1_fu_548_p1();
    void thread_sext_ln36_3_fu_533_p1();
    void thread_sext_ln36_4_fu_492_p1();
    void thread_sext_ln36_fu_389_p1();
    void thread_shl_ln33_mid1_fu_281_p3();
    void thread_shl_ln36_11_mid1_fu_445_p3();
    void thread_shl_ln36_12_mid1_fu_476_p3();
    void thread_shl_ln36_13_mid1_fu_484_p3();
    void thread_shl_ln36_1_fu_373_p3();
    void thread_shl_ln36_2_fu_381_p3();
    void thread_shl_ln36_mid1_fu_433_p3();
    void thread_shl_ln36_s_fu_350_p3();
    void thread_shl_ln9_fu_338_p3();
    void thread_shl_ln_fu_203_p3();
    void thread_sub_ln33_6_fu_293_p2();
    void thread_sub_ln33_fu_215_p2();
    void thread_sub_ln33_mid2_fu_299_p3();
    void thread_sub_ln36_13_fu_362_p2();
    void thread_sub_ln36_13_mid2_fu_463_p3();
    void thread_sub_ln36_14_fu_393_p2();
    void thread_sub_ln36_20_fu_457_p2();
    void thread_sub_ln36_21_fu_471_p2();
    void thread_sub_ln36_22_fu_496_p2();
    void thread_sub_ln36_8_mid2_fu_510_p2();
    void thread_sub_ln36_8_mid2_v_fu_502_p3();
    void thread_sub_ln36_fu_368_p2();
    void thread_zext_ln33_11_fu_211_p1();
    void thread_zext_ln33_21_fu_289_p1();
    void thread_zext_ln33_fu_329_p1();
    void thread_zext_ln36_6_fu_346_p1();
    void thread_zext_ln36_7_fu_358_p1();
    void thread_zext_ln36_8_fu_441_p1();
    void thread_zext_ln36_9_fu_453_p1();
    void thread_zext_ln36_fu_537_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
