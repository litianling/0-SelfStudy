-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2d_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_matrix_ce0 : OUT STD_LOGIC;
    input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_matrix_ce0 : OUT STD_LOGIC;
    out_matrix_we0 : OUT STD_LOGIC;
    out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv2d_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_2A4 : STD_LOGIC_VECTOR (9 downto 0) := "1010100100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_0_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_0_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln31_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln31_fu_253_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_reg_653 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln31_fu_289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_11_fu_297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_11_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_12_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_12_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_13_fu_313_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_13_reg_673 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_16_fu_369_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_16_reg_678 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_17_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_17_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_18_fu_393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_18_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_19_fu_401_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_19_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_cast_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_cast_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_matrix_addr_reg_712 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln33_reg_722 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln34_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln34_reg_727_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_727_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln34_reg_731 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln35_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln34_fu_585_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln34_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_load_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal kernel_load_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_2_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_2_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j_fu_620_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln32_6_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_7_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_8_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten42_reg_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln31_reg_109 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln31_2_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_142 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln32_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln32_2_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_186 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_201_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_col_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_phi_fu_221_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_row_0_phi_fu_232_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_1_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln32_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_7_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_8_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln31_3_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_9_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_14_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln31_4_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln3134_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_10_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln3133_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_2_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_640_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln35_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_15_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_fu_459_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_6_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_7_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_4_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_8_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_9_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_4_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_6_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_7_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_10_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_5_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_8_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_4_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_3_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln35_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_2_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_640_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_640_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_640_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_640_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln33_fu_459_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln33_fu_459_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_mac_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    forw_back_fadd_32bkb_U8 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_empty_phi_fu_221_p4,
        din1 => tmp_reg_771,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    forw_back_fmul_32cud_U9 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_matrix_load_reg_756,
        din1 => kernel_load_reg_761,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    forw_back_mac_muldEe_U10 : component forw_back_mac_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_640_p0,
        din1 => grp_fu_640_p1,
        din2 => grp_fu_640_p2,
        dout => grp_fu_640_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_0_reg_208 <= select_ln34_reg_741;
            elsif (((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_0_reg_208 <= zext_ln31_fu_377_p1;
            end if; 
        end if;
    end process;

    col_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                col_reg_142 <= select_ln31_16_reg_678;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_reg_142 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    empty_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                empty_reg_217 <= tmp_s_reg_776;
            elsif (((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_217 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten42_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten42_reg_98 <= add_ln31_reg_653;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten42_reg_98 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_197 <= add_ln34_reg_731;
            elsif (((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_197 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvars_iv12_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv12_reg_131 <= select_ln31_19_reg_700;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv12_reg_131 <= ap_const_lv32_3;
            end if; 
        end if;
    end process;

    indvars_iv19_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv19_reg_175 <= add_ln32_6_fu_625_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv19_reg_175 <= ap_const_lv32_3;
            end if; 
        end if;
    end process;

    phi_ln31_2_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln31_2_reg_120 <= select_ln31_18_reg_695;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln31_2_reg_120 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln31_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln31_reg_109 <= select_ln31_17_reg_690;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln31_reg_109 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln32_2_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln32_2_reg_164 <= add_ln32_7_fu_630_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln32_2_reg_164 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln32_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln32_reg_153 <= add_ln32_8_fu_635_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln32_reg_153 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_0_reg_229 <= row_2_reg_766;
            elsif (((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_0_reg_229 <= row_cast_fu_433_p1;
            end if; 
        end if;
    end process;

    row_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                row_reg_186 <= j_fu_620_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_reg_186 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_reg_653 <= add_ln31_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln34_reg_731 <= add_ln34_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln34_reg_727 <= icmp_ln34_fu_500_p2;
                icmp_ln34_reg_727_pp0_iter1_reg <= icmp_ln34_reg_727;
                icmp_ln34_reg_727_pp0_iter2_reg <= icmp_ln34_reg_727_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_matrix_load_reg_756 <= input_matrix_q0;
                kernel_load_reg_761 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln33_reg_722 <= mul_ln33_fu_459_p2;
                out_matrix_addr_reg_712 <= zext_ln33_fu_437_p1(10 - 1 downto 0);
                    row_cast_reg_705(4 downto 0) <= row_cast_fu_433_p1(4 downto 0);
                select_ln31_11_reg_663 <= select_ln31_11_fu_297_p3;
                select_ln31_12_reg_668 <= select_ln31_12_fu_305_p3;
                select_ln31_13_reg_673 <= select_ln31_13_fu_313_p3;
                select_ln31_16_reg_678 <= select_ln31_16_fu_369_p3;
                select_ln31_17_reg_690 <= select_ln31_17_fu_385_p3;
                select_ln31_18_reg_695 <= select_ln31_18_fu_393_p3;
                select_ln31_19_reg_700 <= select_ln31_19_fu_401_p3;
                select_ln31_reg_658 <= select_ln31_fu_289_p3;
                    zext_ln31_reg_683(4 downto 0) <= zext_ln31_fu_377_p1(4 downto 0);
                    zext_ln35_reg_717(4 downto 0) <= zext_ln35_fu_447_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                row_2_reg_766 <= row_2_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln34_reg_741 <= select_ln34_fu_585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln35_reg_736 <= select_ln35_fu_522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_771 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_727_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_s_reg_776 <= grp_fu_238_p2;
            end if;
        end if;
    end process;
    zext_ln31_reg_683(31 downto 5) <= "000000000000000000000000000";
    row_cast_reg_705(31 downto 5) <= "000000000000000000000000000";
    zext_ln35_reg_717(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln31_fu_247_p2, ap_CS_fsm_state2, icmp_ln34_fu_500_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln34_fu_500_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln34_fu_500_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln3133_fu_355_p2 <= std_logic_vector(unsigned(phi_ln31_reg_109) + unsigned(select_ln3134_fu_347_p3));
    add_ln31_10_fu_335_p2 <= std_logic_vector(unsigned(add_ln31_9_fu_277_p2) + unsigned(select_ln31_14_fu_327_p3));
    add_ln31_7_fu_265_p2 <= std_logic_vector(unsigned(indvars_iv12_reg_131) + unsigned(ap_const_lv32_1));
    add_ln31_8_fu_271_p2 <= std_logic_vector(unsigned(phi_ln31_2_reg_120) + unsigned(ap_const_lv32_1));
    add_ln31_9_fu_277_p2 <= std_logic_vector(unsigned(phi_ln31_reg_109) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln31_fu_253_p2 <= std_logic_vector(unsigned(indvar_flatten42_reg_98) + unsigned(ap_const_lv10_1));
    add_ln32_6_fu_625_p2 <= std_logic_vector(unsigned(select_ln31_12_reg_668) + unsigned(ap_const_lv32_1));
    add_ln32_7_fu_630_p2 <= std_logic_vector(unsigned(select_ln31_11_reg_663) + unsigned(ap_const_lv32_1));
    add_ln32_8_fu_635_p2 <= std_logic_vector(unsigned(select_ln31_reg_658) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln32_fu_423_p2 <= std_logic_vector(unsigned(select_ln31_fu_289_p3) + unsigned(select_ln32_fu_415_p3));
    add_ln34_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_201_p4));
    add_ln35_fu_441_p2 <= std_logic_vector(unsigned(select_ln31_13_fu_313_p3) + unsigned(ap_const_lv5_3));
    add_ln36_2_fu_604_p2 <= std_logic_vector(unsigned(sub_ln35_fu_580_p2) + unsigned(select_ln35_fu_522_p3));
    add_ln36_fu_593_p2 <= std_logic_vector(unsigned(select_ln35_fu_522_p3) + unsigned(select_ln35_3_fu_547_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln34_fu_500_p2)
    begin
        if ((icmp_ln34_fu_500_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln31_fu_247_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln31_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_0_phi_fu_211_p4_assign_proc : process(col_0_reg_208, icmp_ln34_reg_727, ap_CS_fsm_pp0_stage0, select_ln34_reg_741, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_col_0_phi_fu_211_p4 <= select_ln34_reg_741;
        else 
            ap_phi_mux_col_0_phi_fu_211_p4 <= col_0_reg_208;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_221_p4_assign_proc : process(empty_reg_217, icmp_ln34_reg_727_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, tmp_s_reg_776, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1)
    begin
        if (((icmp_ln34_reg_727_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_empty_phi_fu_221_p4 <= tmp_s_reg_776;
        else 
            ap_phi_mux_empty_phi_fu_221_p4 <= empty_reg_217;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_201_p4_assign_proc : process(indvar_flatten_reg_197, icmp_ln34_reg_727, ap_CS_fsm_pp0_stage0, add_ln34_reg_731, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_201_p4 <= add_ln34_reg_731;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_201_p4 <= indvar_flatten_reg_197;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_232_p4_assign_proc : process(row_0_reg_229, icmp_ln34_reg_727, ap_CS_fsm_pp0_stage0, row_2_reg_766, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_727 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_row_0_phi_fu_232_p4 <= row_2_reg_766;
        else 
            ap_phi_mux_row_0_phi_fu_232_p4 <= row_0_reg_229;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln31_fu_247_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln31_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_4_fu_511_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_col_0_phi_fu_211_p4));
    grp_fu_640_p0 <= grp_fu_640_p00(5 - 1 downto 0);
    grp_fu_640_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_16_fu_369_p3),10));
    grp_fu_640_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_640_p2 <= grp_fu_640_p20(5 - 1 downto 0);
    grp_fu_640_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_13_fu_313_p3),10));
    i_fu_259_p2 <= std_logic_vector(unsigned(col_reg_142) + unsigned(ap_const_lv5_1));
    icmp_ln31_3_fu_321_p2 <= "1" when (signed(add_ln31_7_fu_265_p2) > signed(add_ln31_8_fu_271_p2)) else "0";
    icmp_ln31_4_fu_341_p2 <= "1" when (signed(indvars_iv12_reg_131) > signed(phi_ln31_2_reg_120)) else "0";
    icmp_ln31_fu_247_p2 <= "1" when (indvar_flatten42_reg_98 = ap_const_lv10_2A4) else "0";
    icmp_ln32_2_fu_409_p2 <= "1" when (signed(select_ln31_12_fu_305_p3) > signed(select_ln31_11_fu_297_p3)) else "0";
    icmp_ln32_fu_283_p2 <= "1" when (row_reg_186 = ap_const_lv5_1A) else "0";
    icmp_ln34_fu_500_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_201_p4 = mul_ln33_reg_722) else "0";
    icmp_ln35_fu_517_p2 <= "1" when (signed(ap_phi_mux_row_0_phi_fu_232_p4) < signed(zext_ln35_reg_717)) else "0";
    input_matrix_address0 <= sext_ln36_fu_599_p1(10 - 1 downto 0);

    input_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_matrix_ce0 <= ap_const_logic_1;
        else 
            input_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_620_p2 <= std_logic_vector(unsigned(select_ln31_13_reg_673) + unsigned(ap_const_lv5_1));
    kernel_address0 <= sext_ln36_1_fu_610_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln33_fu_459_p0 <= mul_ln33_fu_459_p00(32 - 1 downto 0);
    mul_ln33_fu_459_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_423_p2),64));
    mul_ln33_fu_459_p1 <= mul_ln33_fu_459_p10(32 - 1 downto 0);
    mul_ln33_fu_459_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_15_fu_361_p3),64));
    mul_ln33_fu_459_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln33_fu_459_p0) * unsigned(mul_ln33_fu_459_p1), 64));

    out_matrix_address0_assign_proc : process(ap_CS_fsm_state2, out_matrix_addr_reg_712, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, zext_ln33_fu_437_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_matrix_address0 <= out_matrix_addr_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_address0 <= zext_ln33_fu_437_p1(10 - 1 downto 0);
        else 
            out_matrix_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_matrix_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            out_matrix_ce0 <= ap_const_logic_1;
        else 
            out_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_matrix_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, tmp_s_reg_776, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_matrix_d0 <= tmp_s_reg_776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_d0 <= ap_const_lv32_0;
        else 
            out_matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_matrix_we0_assign_proc : process(icmp_ln31_fu_247_p2, ap_CS_fsm_state2, icmp_ln34_reg_727_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((icmp_ln31_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln34_reg_727_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            out_matrix_we0 <= ap_const_logic_1;
        else 
            out_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_2_fu_615_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln35_reg_736));
    row_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_13_fu_313_p3),32));
    select_ln3134_fu_347_p3 <= 
        indvars_iv12_reg_131 when (icmp_ln31_4_fu_341_p2(0) = '1') else 
        phi_ln31_2_reg_120;
    select_ln31_11_fu_297_p3 <= 
        ap_const_lv32_0 when (icmp_ln32_fu_283_p2(0) = '1') else 
        phi_ln32_2_reg_164;
    select_ln31_12_fu_305_p3 <= 
        ap_const_lv32_3 when (icmp_ln32_fu_283_p2(0) = '1') else 
        indvars_iv19_reg_175;
    select_ln31_13_fu_313_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_fu_283_p2(0) = '1') else 
        row_reg_186;
    select_ln31_14_fu_327_p3 <= 
        add_ln31_7_fu_265_p2 when (icmp_ln31_3_fu_321_p2(0) = '1') else 
        add_ln31_8_fu_271_p2;
    select_ln31_15_fu_361_p3 <= 
        add_ln31_10_fu_335_p2 when (icmp_ln32_fu_283_p2(0) = '1') else 
        add_ln3133_fu_355_p2;
    select_ln31_16_fu_369_p3 <= 
        i_fu_259_p2 when (icmp_ln32_fu_283_p2(0) = '1') else 
        col_reg_142;
    select_ln31_17_fu_385_p3 <= 
        add_ln31_9_fu_277_p2 when (icmp_ln32_fu_283_p2(0) = '1') else 
        phi_ln31_reg_109;
    select_ln31_18_fu_393_p3 <= 
        add_ln31_8_fu_271_p2 when (icmp_ln32_fu_283_p2(0) = '1') else 
        phi_ln31_2_reg_120;
    select_ln31_19_fu_401_p3 <= 
        add_ln31_7_fu_265_p2 when (icmp_ln32_fu_283_p2(0) = '1') else 
        indvars_iv12_reg_131;
    select_ln31_fu_289_p3 <= 
        ap_const_lv32_0 when (icmp_ln32_fu_283_p2(0) = '1') else 
        phi_ln32_reg_153;
    select_ln32_fu_415_p3 <= 
        select_ln31_12_fu_305_p3 when (icmp_ln32_2_fu_409_p2(0) = '1') else 
        select_ln31_11_fu_297_p3;
    select_ln34_fu_585_p3 <= 
        ap_phi_mux_col_0_phi_fu_211_p4 when (icmp_ln35_fu_517_p2(0) = '1') else 
        col_4_fu_511_p2;
    select_ln35_3_fu_547_p3 <= 
        sub_ln36_4_fu_477_p2 when (icmp_ln35_fu_517_p2(0) = '1') else 
        sub_ln36_6_fu_541_p2;
    select_ln35_4_fu_572_p3 <= 
        sub_ln36_5_fu_494_p2 when (icmp_ln35_fu_517_p2(0) = '1') else 
        sub_ln36_8_fu_566_p2;
    select_ln35_fu_522_p3 <= 
        ap_phi_mux_row_0_phi_fu_232_p4 when (icmp_ln35_fu_517_p2(0) = '1') else 
        row_cast_reg_705;
        sext_ln36_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_2_fu_604_p2),64));

        sext_ln36_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_fu_593_p2),64));

    shl_ln36_10_fu_560_p2 <= std_logic_vector(shift_left(unsigned(sub_ln36_7_fu_555_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_6_fu_471_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_col_0_phi_fu_211_p4),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_7_fu_488_p2 <= std_logic_vector(shift_left(unsigned(sub_ln36_fu_483_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_8_fu_529_p2 <= std_logic_vector(shift_left(unsigned(col_4_fu_511_p2),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln36_9_fu_535_p2 <= std_logic_vector(shift_left(unsigned(col_4_fu_511_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_fu_465_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_col_0_phi_fu_211_p4),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    sub_ln35_fu_580_p2 <= std_logic_vector(unsigned(select_ln35_4_fu_572_p3) - unsigned(row_cast_reg_705));
    sub_ln36_4_fu_477_p2 <= std_logic_vector(unsigned(shl_ln36_fu_465_p2) - unsigned(shl_ln36_6_fu_471_p2));
    sub_ln36_5_fu_494_p2 <= std_logic_vector(unsigned(shl_ln36_7_fu_488_p2) - unsigned(sub_ln36_fu_483_p2));
    sub_ln36_6_fu_541_p2 <= std_logic_vector(unsigned(shl_ln36_8_fu_529_p2) - unsigned(shl_ln36_9_fu_535_p2));
    sub_ln36_7_fu_555_p2 <= std_logic_vector(unsigned(col_4_fu_511_p2) - unsigned(zext_ln31_reg_683));
    sub_ln36_8_fu_566_p2 <= std_logic_vector(unsigned(shl_ln36_10_fu_560_p2) - unsigned(sub_ln36_7_fu_555_p2));
    sub_ln36_fu_483_p2 <= std_logic_vector(unsigned(ap_phi_mux_col_0_phi_fu_211_p4) - unsigned(zext_ln31_reg_683));
    zext_ln31_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_16_fu_369_p3),32));
    zext_ln33_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_640_p3),64));
    zext_ln35_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_441_p2),32));
end behav;
