-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Padding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_matrix_ce0 : OUT STD_LOGIC;
    input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_matrix_ce0 : OUT STD_LOGIC;
    output_matrix_we0 : OUT STD_LOGIC;
    output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_matrix_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_matrix_ce1 : OUT STD_LOGIC;
    output_matrix_we1 : OUT STD_LOGIC;
    output_matrix_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Padding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv7_4A : STD_LOGIC_VECTOR (6 downto 0) := "1001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_102 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_113 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_124 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln89_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln89_fu_193_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln92_3_fu_271_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln92_3_reg_430 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln91_2_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln91_2_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_3_fu_405_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln92_3_reg_444 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_117_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln94_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_3_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_135_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln94_2_fu_147_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln94_3_fu_143_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln94_4_fu_155_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_171_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln90_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_199_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln94_mid1_fu_219_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln94_2_mid1_fu_231_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln94_5_fu_227_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln94_6_fu_239_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln94_2_fu_243_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln94_fu_159_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln91_6_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_1_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln92_fu_283_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_289_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln91_7_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_211_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_317_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln91_8_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_4_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_3_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_2_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln91_3_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln91_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_1_fu_249_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln92_4_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln94_fu_357_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln94_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln90_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln92_fu_376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln92_5_fu_382_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln92_3_fu_390_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln92_fu_283_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln92_2_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln92_fu_283_p00 : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_reg_421 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_113 <= select_ln92_3_reg_430;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_113 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_fu_187_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_102 <= add_ln89_fu_193_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_102 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_fu_187_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_124 <= j_fu_411_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_124 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln91_2_fu_351_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln92_3_reg_444 <= add_ln92_3_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln91_2_reg_435 <= and_ln91_2_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln89_reg_421 <= icmp_ln89_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_fu_187_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln92_3_reg_430 <= select_ln92_3_fu_271_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln89_fu_187_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln89_fu_187_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln89_fu_187_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln89_fu_193_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_102) + unsigned(ap_const_lv10_1));
    add_ln92_2_fu_394_p2 <= std_logic_vector(signed(sext_ln92_3_fu_390_p1) + signed(mul_ln92_fu_283_p2));
    add_ln92_3_fu_405_p2 <= std_logic_vector(unsigned(zext_ln92_4_fu_313_p1) + unsigned(select_ln92_1_fu_249_p3));
    add_ln92_fu_376_p2 <= std_logic_vector(unsigned(zext_ln90_fu_372_p1) + unsigned(ap_const_lv7_4A));
    add_ln94_fu_357_p2 <= std_logic_vector(unsigned(select_ln92_1_fu_249_p3) + unsigned(zext_ln92_4_fu_313_p1));
    and_ln91_2_fu_351_p2 <= (and_ln91_fu_339_p2 and and_ln91_3_fu_345_p2);
    and_ln91_3_fu_345_p2 <= (select_ln92_2_fu_263_p3 and icmp_ln91_3_fu_333_p2);
    and_ln91_fu_339_p2 <= (select_ln92_4_fu_305_p3 and icmp_ln91_8_fu_327_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln89_fu_187_p2)
    begin
        if ((icmp_ln89_fu_187_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_117_p4_assign_proc : process(i_0_reg_113, icmp_ln89_reg_421, ap_CS_fsm_pp0_stage0, select_ln92_3_reg_430, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln89_reg_421 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_117_p4 <= select_ln92_3_reg_430;
        else 
            ap_phi_mux_i_0_phi_fu_117_p4 <= i_0_reg_113;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_199_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_117_p4) + unsigned(ap_const_lv5_1));
    icmp_ln89_fu_187_p2 <= "1" when (indvar_flatten_reg_102 = ap_const_lv10_384) else "0";
    icmp_ln90_fu_205_p2 <= "1" when (j_0_reg_124 = ap_const_lv5_1E) else "0";
    icmp_ln91_1_fu_165_p2 <= "1" when (unsigned(ap_phi_mux_i_0_phi_fu_117_p4) < unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln91_3_fu_333_p2 <= "1" when (unsigned(select_ln92_fu_211_p3) < unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln91_6_fu_257_p2 <= "1" when (unsigned(i_fu_199_p2) < unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln91_7_fu_299_p2 <= "0" when (tmp_3_fu_289_p4 = ap_const_lv4_0) else "1";
    icmp_ln91_8_fu_327_p2 <= "0" when (tmp_4_fu_317_p4 = ap_const_lv4_0) else "1";
    icmp_ln91_fu_181_p2 <= "0" when (tmp_fu_171_p4 = ap_const_lv4_0) else "1";
    input_matrix_address0 <= zext_ln92_3_fu_400_p1(10 - 1 downto 0);

    input_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_matrix_ce0 <= ap_const_logic_1;
        else 
            input_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_411_p2 <= std_logic_vector(unsigned(select_ln92_fu_211_p3) + unsigned(ap_const_lv5_1));
    mul_ln92_fu_283_p0 <= mul_ln92_fu_283_p00(5 - 1 downto 0);
    mul_ln92_fu_283_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_3_fu_271_p3),10));
    mul_ln92_fu_283_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln92_fu_283_p0) * unsigned(ap_const_lv10_1A), 10));
    output_matrix_address0 <= zext_ln94_fu_367_p1(10 - 1 downto 0);
    output_matrix_address1 <= zext_ln92_fu_417_p1(10 - 1 downto 0);

    output_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_matrix_ce0 <= ap_const_logic_1;
        else 
            output_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_matrix_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_matrix_ce1 <= ap_const_logic_1;
        else 
            output_matrix_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_matrix_d0 <= ap_const_lv32_0;
    output_matrix_d1 <= input_matrix_q0;

    output_matrix_we0_assign_proc : process(icmp_ln89_fu_187_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, and_ln91_2_fu_351_p2)
    begin
        if (((ap_const_lv1_0 = and_ln91_2_fu_351_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln89_fu_187_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_matrix_we0 <= ap_const_logic_1;
        else 
            output_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_matrix_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln91_2_reg_435, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = and_ln91_2_reg_435) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_matrix_we1 <= ap_const_logic_1;
        else 
            output_matrix_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln92_1_fu_249_p3 <= 
        sub_ln94_2_fu_243_p2 when (icmp_ln90_fu_205_p2(0) = '1') else 
        sub_ln94_fu_159_p2;
    select_ln92_2_fu_263_p3 <= 
        icmp_ln91_6_fu_257_p2 when (icmp_ln90_fu_205_p2(0) = '1') else 
        icmp_ln91_1_fu_165_p2;
    select_ln92_3_fu_271_p3 <= 
        i_fu_199_p2 when (icmp_ln90_fu_205_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_117_p4;
    select_ln92_4_fu_305_p3 <= 
        icmp_ln91_7_fu_299_p2 when (icmp_ln90_fu_205_p2(0) = '1') else 
        icmp_ln91_fu_181_p2;
    select_ln92_5_fu_382_p3 <= 
        ap_const_lv7_4A when (icmp_ln90_fu_205_p2(0) = '1') else 
        add_ln92_fu_376_p2;
    select_ln92_fu_211_p3 <= 
        ap_const_lv5_0 when (icmp_ln90_fu_205_p2(0) = '1') else 
        j_0_reg_124;
        sext_ln92_3_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln92_5_fu_382_p3),10));

        sext_ln94_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln94_fu_357_p2),32));

    shl_ln94_2_fu_147_p3 <= (ap_phi_mux_i_0_phi_fu_117_p4 & ap_const_lv1_0);
    shl_ln94_2_mid1_fu_231_p3 <= (i_fu_199_p2 & ap_const_lv1_0);
    shl_ln94_mid1_fu_219_p3 <= (i_fu_199_p2 & ap_const_lv5_0);
    shl_ln_fu_135_p3 <= (ap_phi_mux_i_0_phi_fu_117_p4 & ap_const_lv5_0);
    sub_ln94_2_fu_243_p2 <= std_logic_vector(unsigned(zext_ln94_5_fu_227_p1) - unsigned(zext_ln94_6_fu_239_p1));
    sub_ln94_fu_159_p2 <= std_logic_vector(unsigned(zext_ln94_3_fu_143_p1) - unsigned(zext_ln94_4_fu_155_p1));
    tmp_3_fu_289_p4 <= i_fu_199_p2(4 downto 1);
    tmp_4_fu_317_p4 <= select_ln92_fu_211_p3(4 downto 1);
    tmp_fu_171_p4 <= ap_phi_mux_i_0_phi_fu_117_p4(4 downto 1);
    zext_ln90_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_124),7));
    zext_ln92_3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_2_fu_394_p2),64));
    zext_ln92_4_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_fu_211_p3),11));
    zext_ln92_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_3_reg_444),64));
    zext_ln94_3_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_135_p3),11));
    zext_ln94_4_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln94_2_fu_147_p3),11));
    zext_ln94_5_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln94_mid1_fu_219_p3),11));
    zext_ln94_6_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln94_2_mid1_fu_231_p3),11));
    zext_ln94_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln94_fu_363_p1),64));
end behav;
