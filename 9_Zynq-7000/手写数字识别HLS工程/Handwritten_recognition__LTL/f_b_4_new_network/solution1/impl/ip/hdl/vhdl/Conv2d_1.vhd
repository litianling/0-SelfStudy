-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_matrix_ce0 : OUT STD_LOGIC;
    input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_matrix_ce0 : OUT STD_LOGIC;
    out_matrix_we0 : OUT STD_LOGIC;
    out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv2d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_201 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_0_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_0_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln28_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln28_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_21_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_21_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_22_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_22_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_23_fu_347_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_23_reg_709 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_26_fu_403_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_26_reg_714 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_28_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_28_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_29_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_29_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_30_fu_469_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_30_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_cast_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_cast_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_matrix_addr_reg_748 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln30_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_763_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_763_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_570_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_reg_767 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln32_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_5_fu_594_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_5_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_load_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal kernel_load_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_6_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_6_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j_fu_665_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln29_11_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_12_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_13_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten42_reg_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln28_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln28_3_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln29_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln29_3_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_190 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_205_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_col_0_phi_fu_215_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_phi_fu_225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_row_0_phi_fu_236_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_1_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal shl_ln_fu_251_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln30_3_fu_263_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_6_fu_259_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln30_7_fu_271_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln29_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_13_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_14_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_5_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_24_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_15_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_6_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln2877_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_16_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln2876_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln30_mid1_fu_415_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln30_3_mid1_fu_427_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_12_fu_423_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln30_13_fu_435_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln30_4_fu_439_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln30_fu_275_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln29_3_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_cast1_fu_501_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_27_fu_445_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln30_fu_509_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln30_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_cast2_fu_497_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_fu_524_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_25_fu_395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_542_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln33_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_8_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_12_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln33_11_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_8_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_13_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_6_fu_625_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln32_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln32_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_2_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln30_fu_542_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln30_fu_542_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    forw_back_fadd_32bkb_U66 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_empty_phi_fu_225_p4,
        din1 => tmp_reg_807,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p2);

    forw_back_fmul_32cud_U67 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_matrix_load_reg_792,
        din1 => kernel_load_reg_797,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_0_reg_212 <= select_ln32_5_reg_777;
            elsif (((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_0_reg_212 <= zext_ln28_fu_411_p1;
            end if; 
        end if;
    end process;

    col_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                col_reg_146 <= select_ln28_26_reg_714;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_reg_146 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    empty_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                empty_reg_221 <= tmp_s_reg_812;
            elsif (((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_221 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten42_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten42_reg_102 <= add_ln28_reg_689;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten42_reg_102 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_201 <= add_ln31_reg_767;
            elsif (((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_201 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvars_iv12_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv12_reg_135 <= select_ln28_30_reg_736;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv12_reg_135 <= ap_const_lv32_3;
            end if; 
        end if;
    end process;

    indvars_iv19_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv19_reg_179 <= add_ln29_11_fu_670_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv19_reg_179 <= ap_const_lv32_3;
            end if; 
        end if;
    end process;

    phi_ln28_3_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln28_3_reg_124 <= select_ln28_29_reg_731;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln28_3_reg_124 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln28_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln28_reg_113 <= select_ln28_28_reg_726;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln28_reg_113 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln29_3_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln29_3_reg_168 <= add_ln29_12_fu_675_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln29_3_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln29_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln29_reg_157 <= add_ln29_13_fu_680_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln29_reg_157 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_0_reg_233 <= row_6_reg_802;
            elsif (((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_0_reg_233 <= row_cast_fu_505_p1;
            end if; 
        end if;
    end process;

    row_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                row_reg_190 <= j_fu_665_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_reg_190 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln28_reg_689 <= add_ln28_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln31_reg_767 <= add_ln31_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln31_reg_763 <= icmp_ln31_fu_565_p2;
                icmp_ln31_reg_763_pp0_iter1_reg <= icmp_ln31_reg_763;
                icmp_ln31_reg_763_pp0_iter2_reg <= icmp_ln31_reg_763_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_matrix_load_reg_792 <= input_matrix_q0;
                kernel_load_reg_797 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln30_reg_758 <= mul_ln30_fu_542_p2;
                out_matrix_addr_reg_748 <= zext_ln30_fu_519_p1(8 - 1 downto 0);
                    row_cast_reg_741(3 downto 0) <= row_cast_fu_505_p1(3 downto 0);
                select_ln28_21_reg_699 <= select_ln28_21_fu_331_p3;
                select_ln28_22_reg_704 <= select_ln28_22_fu_339_p3;
                select_ln28_23_reg_709 <= select_ln28_23_fu_347_p3;
                select_ln28_26_reg_714 <= select_ln28_26_fu_403_p3;
                select_ln28_28_reg_726 <= select_ln28_28_fu_453_p3;
                select_ln28_29_reg_731 <= select_ln28_29_fu_461_p3;
                select_ln28_30_reg_736 <= select_ln28_30_fu_469_p3;
                select_ln28_reg_694 <= select_ln28_fu_323_p3;
                    zext_ln28_reg_719(3 downto 0) <= zext_ln28_fu_411_p1(3 downto 0);
                    zext_ln32_reg_753(4 downto 0) <= zext_ln32_fu_530_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                row_6_reg_802 <= row_6_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln32_5_reg_777 <= select_ln32_5_fu_594_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln32_reg_772 <= select_ln32_fu_587_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_807 <= grp_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_763_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_s_reg_812 <= grp_fu_242_p2;
            end if;
        end if;
    end process;
    zext_ln28_reg_719(31 downto 4) <= "0000000000000000000000000000";
    row_cast_reg_741(31 downto 4) <= "0000000000000000000000000000";
    zext_ln32_reg_753(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln28_fu_281_p2, ap_CS_fsm_state2, icmp_ln31_fu_565_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln28_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln31_fu_565_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln31_fu_565_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln2876_fu_389_p2 <= std_logic_vector(unsigned(select_ln2877_fu_381_p3) + unsigned(phi_ln28_reg_113));
    add_ln28_13_fu_299_p2 <= std_logic_vector(unsigned(indvars_iv12_reg_135) + unsigned(ap_const_lv32_1));
    add_ln28_14_fu_305_p2 <= std_logic_vector(unsigned(phi_ln28_3_reg_124) + unsigned(ap_const_lv32_1));
    add_ln28_15_fu_311_p2 <= std_logic_vector(unsigned(phi_ln28_reg_113) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln28_16_fu_369_p2 <= std_logic_vector(unsigned(select_ln28_24_fu_361_p3) + unsigned(add_ln28_15_fu_311_p2));
    add_ln28_fu_287_p2 <= std_logic_vector(unsigned(indvar_flatten42_reg_102) + unsigned(ap_const_lv8_1));
    add_ln29_11_fu_670_p2 <= std_logic_vector(unsigned(select_ln28_22_reg_704) + unsigned(ap_const_lv32_1));
    add_ln29_12_fu_675_p2 <= std_logic_vector(unsigned(select_ln28_21_reg_699) + unsigned(ap_const_lv32_1));
    add_ln29_13_fu_680_p2 <= std_logic_vector(unsigned(select_ln28_reg_694) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln29_fu_491_p2 <= std_logic_vector(unsigned(select_ln29_fu_483_p3) + unsigned(select_ln28_fu_323_p3));
    add_ln30_fu_509_p2 <= std_logic_vector(unsigned(row_cast1_fu_501_p1) + unsigned(select_ln28_27_fu_445_p3));
    add_ln31_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_205_p4));
    add_ln32_fu_524_p2 <= std_logic_vector(unsigned(row_cast2_fu_497_p1) + unsigned(ap_const_lv5_3));
    add_ln33_2_fu_649_p2 <= std_logic_vector(unsigned(sub_ln32_fu_633_p2) + unsigned(select_ln32_fu_587_p3));
    add_ln33_fu_638_p2 <= std_logic_vector(unsigned(select_ln32_fu_587_p3) + unsigned(shl_ln32_fu_602_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln31_fu_565_p2)
    begin
        if ((icmp_ln31_fu_565_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln28_fu_281_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln28_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_0_phi_fu_215_p4_assign_proc : process(col_0_reg_212, icmp_ln31_reg_763, ap_CS_fsm_pp0_stage0, select_ln32_5_reg_777, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_col_0_phi_fu_215_p4 <= select_ln32_5_reg_777;
        else 
            ap_phi_mux_col_0_phi_fu_215_p4 <= col_0_reg_212;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_225_p4_assign_proc : process(empty_reg_221, icmp_ln31_reg_763_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, tmp_s_reg_812, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1)
    begin
        if (((icmp_ln31_reg_763_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_empty_phi_fu_225_p4 <= tmp_s_reg_812;
        else 
            ap_phi_mux_empty_phi_fu_225_p4 <= empty_reg_221;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_205_p4_assign_proc : process(indvar_flatten_reg_201, icmp_ln31_reg_763, ap_CS_fsm_pp0_stage0, add_ln31_reg_767, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_205_p4 <= add_ln31_reg_767;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_205_p4 <= indvar_flatten_reg_201;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_236_p4_assign_proc : process(row_0_reg_233, icmp_ln31_reg_763, ap_CS_fsm_pp0_stage0, row_6_reg_802, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln31_reg_763 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_row_0_phi_fu_236_p4 <= row_6_reg_802;
        else 
            ap_phi_mux_row_0_phi_fu_236_p4 <= row_0_reg_233;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln28_fu_281_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln28_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_8_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_col_0_phi_fu_215_p4));
    i_fu_293_p2 <= std_logic_vector(unsigned(col_reg_146) + unsigned(ap_const_lv4_1));
    icmp_ln28_5_fu_355_p2 <= "1" when (signed(add_ln28_13_fu_299_p2) > signed(add_ln28_14_fu_305_p2)) else "0";
    icmp_ln28_6_fu_375_p2 <= "1" when (signed(indvars_iv12_reg_135) > signed(phi_ln28_3_reg_124)) else "0";
    icmp_ln28_fu_281_p2 <= "1" when (indvar_flatten42_reg_102 = ap_const_lv8_C4) else "0";
    icmp_ln29_3_fu_477_p2 <= "1" when (signed(select_ln28_22_fu_339_p3) > signed(select_ln28_21_fu_331_p3)) else "0";
    icmp_ln29_fu_317_p2 <= "1" when (row_reg_190 = ap_const_lv4_E) else "0";
    icmp_ln31_fu_565_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_205_p4 = mul_ln30_reg_758) else "0";
    icmp_ln32_fu_582_p2 <= "1" when (signed(ap_phi_mux_row_0_phi_fu_236_p4) < signed(zext_ln32_reg_753)) else "0";
    input_matrix_address0 <= sext_ln33_fu_644_p1(8 - 1 downto 0);

    input_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_matrix_ce0 <= ap_const_logic_1;
        else 
            input_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_665_p2 <= std_logic_vector(unsigned(select_ln28_23_reg_709) + unsigned(ap_const_lv4_1));
    kernel_address0 <= sext_ln33_1_fu_655_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln30_fu_542_p0 <= mul_ln30_fu_542_p00(32 - 1 downto 0);
    mul_ln30_fu_542_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_25_fu_395_p3),64));
    mul_ln30_fu_542_p1 <= mul_ln30_fu_542_p10(32 - 1 downto 0);
    mul_ln30_fu_542_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_491_p2),64));
    mul_ln30_fu_542_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln30_fu_542_p0) * unsigned(mul_ln30_fu_542_p1), 64));

    out_matrix_address0_assign_proc : process(ap_CS_fsm_state2, out_matrix_addr_reg_748, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, zext_ln30_fu_519_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_matrix_address0 <= out_matrix_addr_reg_748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_address0 <= zext_ln30_fu_519_p1(8 - 1 downto 0);
        else 
            out_matrix_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_matrix_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            out_matrix_ce0 <= ap_const_logic_1;
        else 
            out_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_matrix_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, tmp_s_reg_812, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_matrix_d0 <= tmp_s_reg_812;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_matrix_d0 <= ap_const_lv32_0;
        else 
            out_matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_matrix_we0_assign_proc : process(icmp_ln28_fu_281_p2, ap_CS_fsm_state2, icmp_ln31_reg_763_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((icmp_ln28_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln31_reg_763_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            out_matrix_we0 <= ap_const_logic_1;
        else 
            out_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_6_fu_660_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln32_reg_772));
    row_cast1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_23_fu_347_p3),9));
    row_cast2_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_23_fu_347_p3),5));
    row_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_23_fu_347_p3),32));
    select_ln2877_fu_381_p3 <= 
        indvars_iv12_reg_135 when (icmp_ln28_6_fu_375_p2(0) = '1') else 
        phi_ln28_3_reg_124;
    select_ln28_21_fu_331_p3 <= 
        ap_const_lv32_0 when (icmp_ln29_fu_317_p2(0) = '1') else 
        phi_ln29_3_reg_168;
    select_ln28_22_fu_339_p3 <= 
        ap_const_lv32_3 when (icmp_ln29_fu_317_p2(0) = '1') else 
        indvars_iv19_reg_179;
    select_ln28_23_fu_347_p3 <= 
        ap_const_lv4_0 when (icmp_ln29_fu_317_p2(0) = '1') else 
        row_reg_190;
    select_ln28_24_fu_361_p3 <= 
        add_ln28_13_fu_299_p2 when (icmp_ln28_5_fu_355_p2(0) = '1') else 
        add_ln28_14_fu_305_p2;
    select_ln28_25_fu_395_p3 <= 
        add_ln28_16_fu_369_p2 when (icmp_ln29_fu_317_p2(0) = '1') else 
        add_ln2876_fu_389_p2;
    select_ln28_26_fu_403_p3 <= 
        i_fu_293_p2 when (icmp_ln29_fu_317_p2(0) = '1') else 
        col_reg_146;
    select_ln28_27_fu_445_p3 <= 
        sub_ln30_4_fu_439_p2 when (icmp_ln29_fu_317_p2(0) = '1') else 
        sub_ln30_fu_275_p2;
    select_ln28_28_fu_453_p3 <= 
        add_ln28_15_fu_311_p2 when (icmp_ln29_fu_317_p2(0) = '1') else 
        phi_ln28_reg_113;
    select_ln28_29_fu_461_p3 <= 
        add_ln28_14_fu_305_p2 when (icmp_ln29_fu_317_p2(0) = '1') else 
        phi_ln28_3_reg_124;
    select_ln28_30_fu_469_p3 <= 
        add_ln28_13_fu_299_p2 when (icmp_ln29_fu_317_p2(0) = '1') else 
        indvars_iv12_reg_135;
    select_ln28_fu_323_p3 <= 
        ap_const_lv32_0 when (icmp_ln29_fu_317_p2(0) = '1') else 
        phi_ln29_reg_157;
    select_ln29_fu_483_p3 <= 
        select_ln28_22_fu_339_p3 when (icmp_ln29_3_fu_477_p2(0) = '1') else 
        select_ln28_21_fu_331_p3;
    select_ln32_5_fu_594_p3 <= 
        ap_phi_mux_col_0_phi_fu_215_p4 when (icmp_ln32_fu_582_p2(0) = '1') else 
        col_8_fu_576_p2;
    select_ln32_6_fu_625_p3 <= 
        sub_ln33_8_fu_559_p2 when (icmp_ln32_fu_582_p2(0) = '1') else 
        sub_ln33_13_fu_619_p2;
    select_ln32_fu_587_p3 <= 
        ap_phi_mux_row_0_phi_fu_236_p4 when (icmp_ln32_fu_582_p2(0) = '1') else 
        row_cast_reg_741;
        sext_ln30_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_fu_509_p2),32));

        sext_ln33_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_2_fu_649_p2),64));

        sext_ln33_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_fu_638_p2),64));

    shl_ln30_3_fu_263_p3 <= (col_reg_146 & ap_const_lv1_0);
    shl_ln30_3_mid1_fu_427_p3 <= (i_fu_293_p2 & ap_const_lv1_0);
    shl_ln30_mid1_fu_415_p3 <= (i_fu_293_p2 & ap_const_lv4_0);
    shl_ln32_fu_602_p2 <= std_logic_vector(shift_left(unsigned(select_ln32_5_fu_594_p3),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln33_11_fu_613_p2 <= std_logic_vector(shift_left(unsigned(sub_ln33_12_fu_608_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln33_fu_553_p2 <= std_logic_vector(shift_left(unsigned(sub_ln33_fu_548_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln_fu_251_p3 <= (col_reg_146 & ap_const_lv4_0);
    sub_ln30_4_fu_439_p2 <= std_logic_vector(unsigned(zext_ln30_12_fu_423_p1) - unsigned(zext_ln30_13_fu_435_p1));
    sub_ln30_fu_275_p2 <= std_logic_vector(unsigned(zext_ln30_6_fu_259_p1) - unsigned(zext_ln30_7_fu_271_p1));
    sub_ln32_fu_633_p2 <= std_logic_vector(unsigned(select_ln32_6_fu_625_p3) - unsigned(row_cast_reg_741));
    sub_ln33_12_fu_608_p2 <= std_logic_vector(unsigned(col_8_fu_576_p2) - unsigned(zext_ln28_reg_719));
    sub_ln33_13_fu_619_p2 <= std_logic_vector(unsigned(shl_ln33_11_fu_613_p2) - unsigned(sub_ln33_12_fu_608_p2));
    sub_ln33_8_fu_559_p2 <= std_logic_vector(unsigned(shl_ln33_fu_553_p2) - unsigned(sub_ln33_fu_548_p2));
    sub_ln33_fu_548_p2 <= std_logic_vector(unsigned(ap_phi_mux_col_0_phi_fu_215_p4) - unsigned(zext_ln28_reg_719));
    zext_ln28_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_26_fu_403_p3),32));
    zext_ln30_12_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln30_mid1_fu_415_p3),9));
    zext_ln30_13_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln30_3_mid1_fu_427_p3),9));
    zext_ln30_6_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_251_p3),9));
    zext_ln30_7_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln30_3_fu_263_p3),9));
    zext_ln30_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_fu_515_p1),64));
    zext_ln32_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_524_p2),32));
end behav;
