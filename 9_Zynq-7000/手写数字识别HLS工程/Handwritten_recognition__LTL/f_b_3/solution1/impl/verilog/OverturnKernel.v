// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module OverturnKernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_matrix_address0,
        input_matrix_ce0,
        input_matrix_q0,
        output_matrix_address0,
        output_matrix_ce0,
        output_matrix_we0,
        output_matrix_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_matrix_address0;
output   input_matrix_ce0;
input  [31:0] input_matrix_q0;
output  [3:0] output_matrix_address0;
output   output_matrix_ce0;
output   output_matrix_we0;
output  [31:0] output_matrix_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_matrix_ce0;
reg output_matrix_ce0;
reg output_matrix_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_101_p2;
reg   [1:0] i_reg_205;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln85_1_fu_119_p2;
reg   [4:0] sub_ln85_1_reg_210;
wire   [0:0] icmp_ln83_fu_95_p2;
wire   [4:0] add_ln85_1_fu_153_p2;
reg   [4:0] add_ln85_1_reg_215;
wire   [1:0] j_fu_169_p2;
reg   [1:0] j_reg_223;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln84_fu_163_p2;
wire   [4:0] sub_ln85_3_fu_189_p2;
reg   [4:0] sub_ln85_3_reg_233;
reg   [1:0] i_0_reg_69;
reg   [1:0] j_0_reg_80;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln85_fu_184_p1;
wire   [63:0] zext_ln85_1_fu_197_p1;
wire   [3:0] shl_ln_fu_107_p3;
wire   [4:0] zext_ln85_2_fu_115_p1;
wire   [4:0] zext_ln83_fu_91_p1;
wire   [1:0] sub_ln85_fu_125_p2;
wire   [3:0] shl_ln85_1_fu_135_p3;
wire   [4:0] zext_ln85_4_fu_143_p1;
wire   [4:0] zext_ln85_3_fu_131_p1;
wire   [4:0] sub_ln85_2_fu_147_p2;
wire   [4:0] zext_ln84_fu_159_p1;
wire   [4:0] add_ln85_fu_175_p2;
wire  signed [31:0] sext_ln85_fu_180_p1;
wire  signed [31:0] sext_ln85_1_fu_194_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_69 <= i_reg_205;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_69 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_80 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_80 <= j_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln85_1_reg_215 <= add_ln85_1_fu_153_p2;
        sub_ln85_1_reg_210 <= sub_ln85_1_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_205 <= i_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_223 <= j_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln85_3_reg_233 <= sub_ln85_3_fu_189_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln83_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_matrix_ce0 = 1'b1;
    end else begin
        input_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_matrix_ce0 = 1'b1;
    end else begin
        output_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_matrix_we0 = 1'b1;
    end else begin
        output_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln83_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln84_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_1_fu_153_p2 = (sub_ln85_2_fu_147_p2 + 5'd2);

assign add_ln85_fu_175_p2 = (sub_ln85_1_reg_210 + zext_ln84_fu_159_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_101_p2 = (i_0_reg_69 + 2'd1);

assign icmp_ln83_fu_95_p2 = ((i_0_reg_69 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_163_p2 = ((j_0_reg_80 == 2'd3) ? 1'b1 : 1'b0);

assign input_matrix_address0 = zext_ln85_fu_184_p1;

assign j_fu_169_p2 = (j_0_reg_80 + 2'd1);

assign output_matrix_address0 = zext_ln85_1_fu_197_p1;

assign output_matrix_d0 = input_matrix_q0;

assign sext_ln85_1_fu_194_p1 = $signed(sub_ln85_3_reg_233);

assign sext_ln85_fu_180_p1 = $signed(add_ln85_fu_175_p2);

assign shl_ln85_1_fu_135_p3 = {{sub_ln85_fu_125_p2}, {2'd0}};

assign shl_ln_fu_107_p3 = {{i_0_reg_69}, {2'd0}};

assign sub_ln85_1_fu_119_p2 = (zext_ln85_2_fu_115_p1 - zext_ln83_fu_91_p1);

assign sub_ln85_2_fu_147_p2 = (zext_ln85_4_fu_143_p1 - zext_ln85_3_fu_131_p1);

assign sub_ln85_3_fu_189_p2 = (add_ln85_1_reg_215 - zext_ln84_fu_159_p1);

assign sub_ln85_fu_125_p2 = ($signed(2'd2) - $signed(i_0_reg_69));

assign zext_ln83_fu_91_p1 = i_0_reg_69;

assign zext_ln84_fu_159_p1 = j_0_reg_80;

assign zext_ln85_1_fu_197_p1 = $unsigned(sext_ln85_1_fu_194_p1);

assign zext_ln85_2_fu_115_p1 = shl_ln_fu_107_p3;

assign zext_ln85_3_fu_131_p1 = sub_ln85_fu_125_p2;

assign zext_ln85_4_fu_143_p1 = shl_ln85_1_fu_135_p3;

assign zext_ln85_fu_184_p1 = $unsigned(sext_ln85_fu_180_p1);

endmodule //OverturnKernel
