// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module backward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        label_r,
        m_axi_lr_in_AWVALID,
        m_axi_lr_in_AWREADY,
        m_axi_lr_in_AWADDR,
        m_axi_lr_in_AWID,
        m_axi_lr_in_AWLEN,
        m_axi_lr_in_AWSIZE,
        m_axi_lr_in_AWBURST,
        m_axi_lr_in_AWLOCK,
        m_axi_lr_in_AWCACHE,
        m_axi_lr_in_AWPROT,
        m_axi_lr_in_AWQOS,
        m_axi_lr_in_AWREGION,
        m_axi_lr_in_AWUSER,
        m_axi_lr_in_WVALID,
        m_axi_lr_in_WREADY,
        m_axi_lr_in_WDATA,
        m_axi_lr_in_WSTRB,
        m_axi_lr_in_WLAST,
        m_axi_lr_in_WID,
        m_axi_lr_in_WUSER,
        m_axi_lr_in_ARVALID,
        m_axi_lr_in_ARREADY,
        m_axi_lr_in_ARADDR,
        m_axi_lr_in_ARID,
        m_axi_lr_in_ARLEN,
        m_axi_lr_in_ARSIZE,
        m_axi_lr_in_ARBURST,
        m_axi_lr_in_ARLOCK,
        m_axi_lr_in_ARCACHE,
        m_axi_lr_in_ARPROT,
        m_axi_lr_in_ARQOS,
        m_axi_lr_in_ARREGION,
        m_axi_lr_in_ARUSER,
        m_axi_lr_in_RVALID,
        m_axi_lr_in_RREADY,
        m_axi_lr_in_RDATA,
        m_axi_lr_in_RLAST,
        m_axi_lr_in_RID,
        m_axi_lr_in_RUSER,
        m_axi_lr_in_RRESP,
        m_axi_lr_in_BVALID,
        m_axi_lr_in_BREADY,
        m_axi_lr_in_BRESP,
        m_axi_lr_in_BID,
        m_axi_lr_in_BUSER,
        lr_in_offset,
        probability_result_address0,
        probability_result_ce0,
        probability_result_q0,
        fc_in_3_relu2_0_address0,
        fc_in_3_relu2_0_ce0,
        fc_in_3_relu2_0_q0,
        fc_hidden_layer3_address0,
        fc_hidden_layer3_ce0,
        fc_hidden_layer3_we0,
        fc_hidden_layer3_d0,
        fc_hidden_layer3_q0,
        fc_out_2_0_address0,
        fc_out_2_0_ce0,
        fc_out_2_0_q0,
        fc_in_2_relu1_0_address0,
        fc_in_2_relu1_0_ce0,
        fc_in_2_relu1_0_q0,
        fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0,
        fc_hidden_layer2_address1,
        fc_hidden_layer2_ce1,
        fc_hidden_layer2_we1,
        fc_hidden_layer2_d1,
        fc_out_1_0_address0,
        fc_out_1_0_ce0,
        fc_out_1_0_q0,
        fc_in_1_0_address0,
        fc_in_1_0_ce0,
        fc_in_1_0_q0,
        fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0,
        fc_hidden_layer1_we0,
        fc_hidden_layer1_d0,
        fc_hidden_layer1_q0,
        conv_out_2_address0,
        conv_out_2_ce0,
        conv_out_2_q0,
        conv_kernel_3_address0,
        conv_kernel_3_ce0,
        conv_kernel_3_we0,
        conv_kernel_3_d0,
        conv_kernel_3_q0,
        conv_out_1_address0,
        conv_out_1_ce0,
        conv_out_1_q0,
        conv_kernel_2_address0,
        conv_kernel_2_ce0,
        conv_kernel_2_we0,
        conv_kernel_2_d0,
        conv_kernel_2_q0,
        mnist_data_address0,
        mnist_data_ce0,
        mnist_data_q0,
        conv_kernel_1_address0,
        conv_kernel_1_ce0,
        conv_kernel_1_we0,
        conv_kernel_1_d0,
        conv_kernel_1_q0
);

parameter    ap_ST_fsm_state1 = 114'd1;
parameter    ap_ST_fsm_state2 = 114'd2;
parameter    ap_ST_fsm_state3 = 114'd4;
parameter    ap_ST_fsm_state4 = 114'd8;
parameter    ap_ST_fsm_state5 = 114'd16;
parameter    ap_ST_fsm_state6 = 114'd32;
parameter    ap_ST_fsm_state7 = 114'd64;
parameter    ap_ST_fsm_pp0_stage0 = 114'd128;
parameter    ap_ST_fsm_state14 = 114'd256;
parameter    ap_ST_fsm_state15 = 114'd512;
parameter    ap_ST_fsm_state16 = 114'd1024;
parameter    ap_ST_fsm_state17 = 114'd2048;
parameter    ap_ST_fsm_state18 = 114'd4096;
parameter    ap_ST_fsm_state19 = 114'd8192;
parameter    ap_ST_fsm_state20 = 114'd16384;
parameter    ap_ST_fsm_state21 = 114'd32768;
parameter    ap_ST_fsm_state22 = 114'd65536;
parameter    ap_ST_fsm_state23 = 114'd131072;
parameter    ap_ST_fsm_state24 = 114'd262144;
parameter    ap_ST_fsm_state25 = 114'd524288;
parameter    ap_ST_fsm_state26 = 114'd1048576;
parameter    ap_ST_fsm_state27 = 114'd2097152;
parameter    ap_ST_fsm_state28 = 114'd4194304;
parameter    ap_ST_fsm_state29 = 114'd8388608;
parameter    ap_ST_fsm_state30 = 114'd16777216;
parameter    ap_ST_fsm_state31 = 114'd33554432;
parameter    ap_ST_fsm_state32 = 114'd67108864;
parameter    ap_ST_fsm_state33 = 114'd134217728;
parameter    ap_ST_fsm_state34 = 114'd268435456;
parameter    ap_ST_fsm_state35 = 114'd536870912;
parameter    ap_ST_fsm_state36 = 114'd1073741824;
parameter    ap_ST_fsm_pp1_stage0 = 114'd2147483648;
parameter    ap_ST_fsm_state43 = 114'd4294967296;
parameter    ap_ST_fsm_state44 = 114'd8589934592;
parameter    ap_ST_fsm_state45 = 114'd17179869184;
parameter    ap_ST_fsm_state46 = 114'd34359738368;
parameter    ap_ST_fsm_state47 = 114'd68719476736;
parameter    ap_ST_fsm_state48 = 114'd137438953472;
parameter    ap_ST_fsm_state49 = 114'd274877906944;
parameter    ap_ST_fsm_state50 = 114'd549755813888;
parameter    ap_ST_fsm_state51 = 114'd1099511627776;
parameter    ap_ST_fsm_state52 = 114'd2199023255552;
parameter    ap_ST_fsm_state53 = 114'd4398046511104;
parameter    ap_ST_fsm_state54 = 114'd8796093022208;
parameter    ap_ST_fsm_state55 = 114'd17592186044416;
parameter    ap_ST_fsm_state56 = 114'd35184372088832;
parameter    ap_ST_fsm_state57 = 114'd70368744177664;
parameter    ap_ST_fsm_state58 = 114'd140737488355328;
parameter    ap_ST_fsm_state59 = 114'd281474976710656;
parameter    ap_ST_fsm_state60 = 114'd562949953421312;
parameter    ap_ST_fsm_state61 = 114'd1125899906842624;
parameter    ap_ST_fsm_state62 = 114'd2251799813685248;
parameter    ap_ST_fsm_state63 = 114'd4503599627370496;
parameter    ap_ST_fsm_state64 = 114'd9007199254740992;
parameter    ap_ST_fsm_pp2_stage0 = 114'd18014398509481984;
parameter    ap_ST_fsm_state71 = 114'd36028797018963968;
parameter    ap_ST_fsm_state72 = 114'd72057594037927936;
parameter    ap_ST_fsm_state73 = 114'd144115188075855872;
parameter    ap_ST_fsm_state74 = 114'd288230376151711744;
parameter    ap_ST_fsm_state75 = 114'd576460752303423488;
parameter    ap_ST_fsm_state76 = 114'd1152921504606846976;
parameter    ap_ST_fsm_state77 = 114'd2305843009213693952;
parameter    ap_ST_fsm_state78 = 114'd4611686018427387904;
parameter    ap_ST_fsm_state79 = 114'd9223372036854775808;
parameter    ap_ST_fsm_state80 = 114'd18446744073709551616;
parameter    ap_ST_fsm_state81 = 114'd36893488147419103232;
parameter    ap_ST_fsm_state82 = 114'd73786976294838206464;
parameter    ap_ST_fsm_state83 = 114'd147573952589676412928;
parameter    ap_ST_fsm_state84 = 114'd295147905179352825856;
parameter    ap_ST_fsm_state85 = 114'd590295810358705651712;
parameter    ap_ST_fsm_state86 = 114'd1180591620717411303424;
parameter    ap_ST_fsm_state87 = 114'd2361183241434822606848;
parameter    ap_ST_fsm_state88 = 114'd4722366482869645213696;
parameter    ap_ST_fsm_state89 = 114'd9444732965739290427392;
parameter    ap_ST_fsm_state90 = 114'd18889465931478580854784;
parameter    ap_ST_fsm_state91 = 114'd37778931862957161709568;
parameter    ap_ST_fsm_state92 = 114'd75557863725914323419136;
parameter    ap_ST_fsm_state93 = 114'd151115727451828646838272;
parameter    ap_ST_fsm_state94 = 114'd302231454903657293676544;
parameter    ap_ST_fsm_state95 = 114'd604462909807314587353088;
parameter    ap_ST_fsm_state96 = 114'd1208925819614629174706176;
parameter    ap_ST_fsm_state97 = 114'd2417851639229258349412352;
parameter    ap_ST_fsm_state98 = 114'd4835703278458516698824704;
parameter    ap_ST_fsm_state99 = 114'd9671406556917033397649408;
parameter    ap_ST_fsm_state100 = 114'd19342813113834066795298816;
parameter    ap_ST_fsm_state101 = 114'd38685626227668133590597632;
parameter    ap_ST_fsm_state102 = 114'd77371252455336267181195264;
parameter    ap_ST_fsm_state103 = 114'd154742504910672534362390528;
parameter    ap_ST_fsm_state104 = 114'd309485009821345068724781056;
parameter    ap_ST_fsm_state105 = 114'd618970019642690137449562112;
parameter    ap_ST_fsm_state106 = 114'd1237940039285380274899124224;
parameter    ap_ST_fsm_state107 = 114'd2475880078570760549798248448;
parameter    ap_ST_fsm_state108 = 114'd4951760157141521099596496896;
parameter    ap_ST_fsm_state109 = 114'd9903520314283042199192993792;
parameter    ap_ST_fsm_state110 = 114'd19807040628566084398385987584;
parameter    ap_ST_fsm_state111 = 114'd39614081257132168796771975168;
parameter    ap_ST_fsm_state112 = 114'd79228162514264337593543950336;
parameter    ap_ST_fsm_state113 = 114'd158456325028528675187087900672;
parameter    ap_ST_fsm_state114 = 114'd316912650057057350374175801344;
parameter    ap_ST_fsm_state115 = 114'd633825300114114700748351602688;
parameter    ap_ST_fsm_state116 = 114'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state117 = 114'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state118 = 114'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state119 = 114'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state120 = 114'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state121 = 114'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state122 = 114'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state123 = 114'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state124 = 114'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state125 = 114'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state126 = 114'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state127 = 114'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state128 = 114'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state129 = 114'd10384593717069655257060992658440192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] label_r;
output   m_axi_lr_in_AWVALID;
input   m_axi_lr_in_AWREADY;
output  [31:0] m_axi_lr_in_AWADDR;
output  [0:0] m_axi_lr_in_AWID;
output  [31:0] m_axi_lr_in_AWLEN;
output  [2:0] m_axi_lr_in_AWSIZE;
output  [1:0] m_axi_lr_in_AWBURST;
output  [1:0] m_axi_lr_in_AWLOCK;
output  [3:0] m_axi_lr_in_AWCACHE;
output  [2:0] m_axi_lr_in_AWPROT;
output  [3:0] m_axi_lr_in_AWQOS;
output  [3:0] m_axi_lr_in_AWREGION;
output  [0:0] m_axi_lr_in_AWUSER;
output   m_axi_lr_in_WVALID;
input   m_axi_lr_in_WREADY;
output  [31:0] m_axi_lr_in_WDATA;
output  [3:0] m_axi_lr_in_WSTRB;
output   m_axi_lr_in_WLAST;
output  [0:0] m_axi_lr_in_WID;
output  [0:0] m_axi_lr_in_WUSER;
output   m_axi_lr_in_ARVALID;
input   m_axi_lr_in_ARREADY;
output  [31:0] m_axi_lr_in_ARADDR;
output  [0:0] m_axi_lr_in_ARID;
output  [31:0] m_axi_lr_in_ARLEN;
output  [2:0] m_axi_lr_in_ARSIZE;
output  [1:0] m_axi_lr_in_ARBURST;
output  [1:0] m_axi_lr_in_ARLOCK;
output  [3:0] m_axi_lr_in_ARCACHE;
output  [2:0] m_axi_lr_in_ARPROT;
output  [3:0] m_axi_lr_in_ARQOS;
output  [3:0] m_axi_lr_in_ARREGION;
output  [0:0] m_axi_lr_in_ARUSER;
input   m_axi_lr_in_RVALID;
output   m_axi_lr_in_RREADY;
input  [31:0] m_axi_lr_in_RDATA;
input   m_axi_lr_in_RLAST;
input  [0:0] m_axi_lr_in_RID;
input  [0:0] m_axi_lr_in_RUSER;
input  [1:0] m_axi_lr_in_RRESP;
input   m_axi_lr_in_BVALID;
output   m_axi_lr_in_BREADY;
input  [1:0] m_axi_lr_in_BRESP;
input  [0:0] m_axi_lr_in_BID;
input  [0:0] m_axi_lr_in_BUSER;
input  [29:0] lr_in_offset;
output  [3:0] probability_result_address0;
output   probability_result_ce0;
input  [31:0] probability_result_q0;
output  [5:0] fc_in_3_relu2_0_address0;
output   fc_in_3_relu2_0_ce0;
input  [31:0] fc_in_3_relu2_0_q0;
output  [8:0] fc_hidden_layer3_address0;
output   fc_hidden_layer3_ce0;
output   fc_hidden_layer3_we0;
output  [31:0] fc_hidden_layer3_d0;
input  [31:0] fc_hidden_layer3_q0;
output  [5:0] fc_out_2_0_address0;
output   fc_out_2_0_ce0;
input  [31:0] fc_out_2_0_q0;
output  [7:0] fc_in_2_relu1_0_address0;
output   fc_in_2_relu1_0_ce0;
input  [31:0] fc_in_2_relu1_0_q0;
output  [12:0] fc_hidden_layer2_address0;
output   fc_hidden_layer2_ce0;
input  [31:0] fc_hidden_layer2_q0;
output  [12:0] fc_hidden_layer2_address1;
output   fc_hidden_layer2_ce1;
output   fc_hidden_layer2_we1;
output  [31:0] fc_hidden_layer2_d1;
output  [7:0] fc_out_1_0_address0;
output   fc_out_1_0_ce0;
input  [31:0] fc_out_1_0_q0;
output  [9:0] fc_in_1_0_address0;
output   fc_in_1_0_ce0;
input  [31:0] fc_in_1_0_q0;
output  [16:0] fc_hidden_layer1_address0;
output   fc_hidden_layer1_ce0;
output   fc_hidden_layer1_we0;
output  [31:0] fc_hidden_layer1_d0;
input  [31:0] fc_hidden_layer1_q0;
output  [9:0] conv_out_2_address0;
output   conv_out_2_ce0;
input  [31:0] conv_out_2_q0;
output  [3:0] conv_kernel_3_address0;
output   conv_kernel_3_ce0;
output   conv_kernel_3_we0;
output  [31:0] conv_kernel_3_d0;
input  [31:0] conv_kernel_3_q0;
output  [9:0] conv_out_1_address0;
output   conv_out_1_ce0;
input  [31:0] conv_out_1_q0;
output  [3:0] conv_kernel_2_address0;
output   conv_kernel_2_ce0;
output   conv_kernel_2_we0;
output  [31:0] conv_kernel_2_d0;
input  [31:0] conv_kernel_2_q0;
output  [9:0] mnist_data_address0;
output   mnist_data_ce0;
input  [31:0] mnist_data_q0;
output  [3:0] conv_kernel_1_address0;
output   conv_kernel_1_ce0;
output   conv_kernel_1_we0;
output  [31:0] conv_kernel_1_d0;
input  [31:0] conv_kernel_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_lr_in_ARVALID;
reg m_axi_lr_in_RREADY;
reg[3:0] probability_result_address0;
reg probability_result_ce0;
reg fc_in_3_relu2_0_ce0;
reg[8:0] fc_hidden_layer3_address0;
reg fc_hidden_layer3_ce0;
reg fc_hidden_layer3_we0;
reg fc_out_2_0_ce0;
reg fc_in_2_relu1_0_ce0;
reg[12:0] fc_hidden_layer2_address0;
reg fc_hidden_layer2_ce0;
reg fc_hidden_layer2_ce1;
reg fc_hidden_layer2_we1;
reg fc_out_1_0_ce0;
reg fc_in_1_0_ce0;
reg[16:0] fc_hidden_layer1_address0;
reg fc_hidden_layer1_ce0;
reg fc_hidden_layer1_we0;
reg[3:0] conv_kernel_3_address0;
reg conv_kernel_3_ce0;
reg conv_kernel_3_we0;
reg[3:0] conv_kernel_2_address0;
reg conv_kernel_2_ce0;
reg conv_kernel_2_we0;
reg conv_kernel_1_ce0;
reg conv_kernel_1_we0;

(* fsm_encoding = "none" *) reg   [113:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    lr_in_blk_n_AR;
wire    ap_CS_fsm_state72;
wire   [0:0] icmp_ln67_2_fu_1683_p2;
reg    lr_in_blk_n_R;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state97;
reg   [8:0] indvar_flatten_reg_645;
reg   [5:0] i_0_i_reg_656;
reg   [3:0] j_0_i_reg_667;
reg   [12:0] indvar_flatten13_reg_723;
reg   [7:0] i_0_i16_reg_734;
reg   [5:0] j_0_i21_reg_745;
reg   [16:0] indvar_flatten26_reg_814;
reg   [9:0] i_0_i60_reg_825;
reg   [7:0] j_0_i64_reg_836;
wire   [31:0] grp_fu_1058_p2;
reg   [31:0] reg_1095;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state128;
wire   [31:0] grad_3_q0;
reg   [31:0] reg_1106;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln61_reg_1953;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_1069_p2;
reg   [31:0] reg_1111;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln61_reg_1953_pp0_iter3_reg;
wire    ap_CS_fsm_state20;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_state37_pp1_stage0_iter0;
wire    ap_block_state38_pp1_stage0_iter1;
wire    ap_block_state39_pp1_stage0_iter2;
wire    ap_block_state40_pp1_stage0_iter3;
wire    ap_block_state41_pp1_stage0_iter4;
wire    ap_block_state42_pp1_stage0_iter5;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln61_1_reg_2090;
reg   [0:0] icmp_ln61_1_reg_2090_pp1_iter3_reg;
wire    ap_CS_fsm_state49;
reg    ap_enable_reg_pp2_iter4;
wire    ap_block_state65_pp2_stage0_iter0;
wire    ap_block_state66_pp2_stage0_iter1;
wire    ap_block_state67_pp2_stage0_iter2;
wire    ap_block_state68_pp2_stage0_iter3;
wire    ap_block_state69_pp2_stage0_iter4;
wire    ap_block_state70_pp2_stage0_iter5;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln61_2_reg_2221;
reg   [0:0] icmp_ln61_2_reg_2221_pp2_iter3_reg;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state124;
reg   [31:0] reg_1119;
wire   [63:0] grp_fu_1078_p1;
reg   [63:0] reg_1125;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state57;
wire   [63:0] grp_fu_1090_p2;
reg   [63:0] reg_1130;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state62;
wire   [31:0] grad_2_q0;
reg   [31:0] reg_1135;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state46;
reg   [31:0] reg_1140;
wire    ap_CS_fsm_state115;
wire   [31:0] grad_1_q0;
reg   [31:0] reg_1146;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state74;
reg   [31:0] reg_1151;
reg   [31:0] reg_1157;
wire    grp_MatrixBackPropagatio_1_fu_1022_ap_ready;
wire    grp_MatrixBackPropagatio_1_fu_1022_ap_done;
reg   [31:0] reg_1163;
wire    grp_Conv2d_2_fu_1014_ap_ready;
wire    grp_Conv2d_2_fu_1014_ap_done;
wire    grp_Padding_fu_1038_ap_ready;
wire    grp_Padding_fu_1038_ap_done;
reg    ap_block_state91_on_subcall_done;
reg   [3:0] grad_3_addr_reg_1914;
wire    ap_CS_fsm_state2;
reg   [31:0] lr_in_addr_reg_1924;
wire   [0:0] icmp_ln129_fu_1188_p2;
wire    ap_CS_fsm_state6;
wire   [3:0] i_5_fu_1194_p2;
reg   [3:0] i_5_reg_1934;
wire   [0:0] icmp_ln130_fu_1200_p2;
reg   [0:0] icmp_ln130_reg_1939;
wire   [63:0] zext_ln131_fu_1205_p1;
reg   [63:0] zext_ln131_reg_1943;
wire   [0:0] icmp_ln61_fu_1210_p2;
reg   [0:0] icmp_ln61_reg_1953_pp0_iter1_reg;
reg   [0:0] icmp_ln61_reg_1953_pp0_iter2_reg;
reg   [0:0] icmp_ln61_reg_1953_pp0_iter4_reg;
wire   [8:0] add_ln61_fu_1216_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] j_0_i_mid2_fu_1234_p3;
reg   [3:0] j_0_i_mid2_reg_1962;
wire   [5:0] shl_ln63_mid2_v_v_fu_1242_p3;
reg   [5:0] shl_ln63_mid2_v_v_reg_1967;
wire   [3:0] j_fu_1260_p2;
reg   [31:0] fc_in_3_relu2_0_load_reg_1989;
wire   [8:0] add_ln63_1_fu_1293_p2;
reg   [8:0] add_ln63_1_reg_1994;
reg   [8:0] add_ln63_1_reg_1994_pp0_iter2_reg;
reg   [8:0] add_ln63_1_reg_1994_pp0_iter3_reg;
reg   [8:0] add_ln63_1_reg_1994_pp0_iter4_reg;
wire   [5:0] i_6_fu_1309_p2;
reg   [5:0] i_6_reg_2002;
wire    ap_CS_fsm_state15;
reg   [5:0] rgrad_2_addr_reg_2007;
wire   [0:0] icmp_ln67_fu_1303_p2;
wire   [8:0] shl_ln_fu_1320_p3;
reg   [8:0] shl_ln_reg_2012;
wire   [6:0] shl_ln70_1_fu_1328_p3;
reg   [6:0] shl_ln70_1_reg_2017;
wire   [3:0] j_15_fu_1346_p2;
reg   [3:0] j_15_reg_2025;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln69_fu_1340_p2;
wire   [0:0] icmp_ln75_fu_1376_p2;
wire    ap_CS_fsm_state26;
wire   [5:0] i_8_fu_1382_p2;
reg   [5:0] i_8_reg_2044;
wire   [63:0] zext_ln76_fu_1388_p1;
reg   [63:0] zext_ln76_reg_2049;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln76_fu_1411_p2;
reg   [0:0] icmp_ln76_reg_2066;
wire   [0:0] icmp_ln76_1_fu_1417_p2;
reg   [0:0] icmp_ln76_1_reg_2071;
wire   [0:0] and_ln76_fu_1427_p2;
reg   [0:0] and_ln76_reg_2081;
wire    ap_CS_fsm_state28;
wire   [31:0] rgrad_2_q0;
wire   [0:0] icmp_ln61_1_fu_1433_p2;
reg   [0:0] icmp_ln61_1_reg_2090_pp1_iter1_reg;
reg   [0:0] icmp_ln61_1_reg_2090_pp1_iter2_reg;
reg   [0:0] icmp_ln61_1_reg_2090_pp1_iter4_reg;
wire   [12:0] add_ln61_2_fu_1439_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [5:0] select_ln63_fu_1457_p3;
reg   [5:0] select_ln63_reg_2099;
wire   [7:0] select_ln63_1_fu_1465_p3;
reg   [7:0] select_ln63_1_reg_2104;
wire   [5:0] j_16_fu_1483_p2;
reg   [31:0] fc_in_2_relu1_0_load_reg_2125;
wire   [12:0] grp_fu_1888_p3;
reg   [12:0] add_ln63_2_reg_2130;
reg   [12:0] add_ln63_2_reg_2130_pp1_iter2_reg;
reg   [12:0] add_ln63_2_reg_2130_pp1_iter3_reg;
reg   [12:0] add_ln63_2_reg_2130_pp1_iter4_reg;
wire   [12:0] add_ln70_4_fu_1499_p2;
reg   [12:0] add_ln70_4_reg_2135;
wire    ap_CS_fsm_state44;
wire   [7:0] i_9_fu_1511_p2;
reg   [7:0] i_9_reg_2143;
reg   [7:0] rgrad_1_addr_reg_2148;
wire   [0:0] icmp_ln67_1_fu_1505_p2;
wire   [5:0] j_17_fu_1532_p2;
reg   [5:0] j_17_reg_2156;
wire    ap_CS_fsm_state45;
wire   [0:0] icmp_ln69_1_fu_1526_p2;
wire   [0:0] icmp_ln75_1_fu_1554_p2;
wire    ap_CS_fsm_state54;
wire   [7:0] i_11_fu_1560_p2;
reg   [7:0] i_11_reg_2175;
wire   [63:0] zext_ln76_1_fu_1566_p1;
reg   [63:0] zext_ln76_1_reg_2180;
wire    ap_CS_fsm_state55;
wire   [0:0] icmp_ln76_2_fu_1589_p2;
reg   [0:0] icmp_ln76_2_reg_2197;
wire   [0:0] icmp_ln76_3_fu_1595_p2;
reg   [0:0] icmp_ln76_3_reg_2202;
wire   [0:0] and_ln76_1_fu_1605_p2;
reg   [0:0] and_ln76_1_reg_2212;
wire    ap_CS_fsm_state56;
wire   [31:0] rgrad_1_q0;
wire   [0:0] icmp_ln61_2_fu_1611_p2;
reg   [0:0] icmp_ln61_2_reg_2221_pp2_iter1_reg;
reg   [0:0] icmp_ln61_2_reg_2221_pp2_iter2_reg;
reg   [0:0] icmp_ln61_2_reg_2221_pp2_iter4_reg;
wire   [16:0] add_ln61_4_fu_1617_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] select_ln63_2_fu_1635_p3;
reg   [7:0] select_ln63_2_reg_2230;
wire   [9:0] select_ln63_3_fu_1643_p3;
reg   [9:0] select_ln63_3_reg_2235;
wire   [7:0] j_18_fu_1661_p2;
reg   [31:0] fc_in_1_0_load_reg_2256;
wire   [16:0] grp_fu_1896_p3;
reg   [16:0] add_ln63_3_reg_2261;
reg   [16:0] add_ln63_3_reg_2261_pp2_iter2_reg;
reg   [16:0] add_ln63_3_reg_2261_pp2_iter3_reg;
reg   [16:0] add_ln63_3_reg_2261_pp2_iter4_reg;
wire   [16:0] add_ln70_5_fu_1677_p2;
reg   [16:0] add_ln70_5_reg_2266;
reg    ap_block_state72_io;
wire   [9:0] i_12_fu_1689_p2;
reg   [9:0] i_12_reg_2274;
reg   [9:0] grad_0_addr_reg_2279;
wire   [7:0] j_19_fu_1710_p2;
reg   [7:0] j_19_reg_2287;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln69_2_fu_1704_p2;
wire   [16:0] add_ln101_4_fu_1732_p2;
reg   [16:0] add_ln101_4_reg_2302;
wire    ap_CS_fsm_state98;
wire   [9:0] i_13_fu_1744_p2;
reg   [9:0] i_13_reg_2310;
wire   [7:0] j_20_fu_1760_p2;
reg   [7:0] j_20_reg_2318;
wire    ap_CS_fsm_state99;
reg   [16:0] fc_hidden_layer1_add_2_reg_2323;
wire   [0:0] icmp_ln100_fu_1754_p2;
wire   [31:0] wgrad_1_q0;
reg   [31:0] wgrad_1_load_reg_2333;
wire    ap_CS_fsm_state100;
wire   [12:0] add_ln101_5_fu_1778_p2;
reg   [12:0] add_ln101_5_reg_2338;
wire    ap_CS_fsm_state109;
wire   [7:0] i_14_fu_1790_p2;
reg   [7:0] i_14_reg_2346;
wire   [5:0] j_21_fu_1806_p2;
reg   [5:0] j_21_reg_2354;
wire    ap_CS_fsm_state110;
reg   [12:0] fc_hidden_layer2_add_2_reg_2359;
wire   [0:0] icmp_ln100_1_fu_1800_p2;
wire   [31:0] wgrad_2_q0;
reg   [31:0] wgrad_2_load_reg_2370;
wire    ap_CS_fsm_state111;
wire   [5:0] i_15_fu_1830_p2;
reg   [5:0] i_15_reg_2378;
wire    ap_CS_fsm_state119;
wire   [8:0] shl_ln2_fu_1836_p3;
reg   [8:0] shl_ln2_reg_2383;
wire   [0:0] icmp_ln99_2_fu_1824_p2;
wire   [6:0] shl_ln101_1_fu_1844_p3;
reg   [6:0] shl_ln101_1_reg_2388;
wire   [3:0] j_22_fu_1862_p2;
reg   [3:0] j_22_reg_2396;
wire    ap_CS_fsm_state120;
reg   [8:0] fc_hidden_layer3_add_2_reg_2401;
wire   [0:0] icmp_ln100_2_fu_1856_p2;
wire   [31:0] wgrad_3_q0;
reg   [31:0] wgrad_3_load_reg_2411;
wire    ap_CS_fsm_state121;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state37;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter5;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state65;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg   [3:0] grad_3_address0;
reg    grad_3_ce0;
reg    grad_3_we0;
reg   [31:0] grad_3_d0;
reg   [8:0] wgrad_3_address0;
reg    wgrad_3_ce0;
reg    wgrad_3_we0;
reg   [5:0] rgrad_2_address0;
reg    rgrad_2_ce0;
reg    rgrad_2_we0;
reg   [31:0] rgrad_2_d0;
reg   [7:0] grad_2_address0;
reg    grad_2_ce0;
reg    grad_2_we0;
reg   [31:0] grad_2_d0;
reg   [12:0] wgrad_2_address0;
reg    wgrad_2_ce0;
reg    wgrad_2_we0;
reg   [7:0] rgrad_1_address0;
reg    rgrad_1_ce0;
reg    rgrad_1_we0;
reg   [7:0] grad_1_address0;
reg    grad_1_ce0;
reg    grad_1_we0;
reg   [31:0] grad_1_d0;
reg   [16:0] wgrad_1_address0;
reg    wgrad_1_ce0;
reg    wgrad_1_we0;
reg   [9:0] grad_0_address0;
reg    grad_0_ce0;
reg    grad_0_we0;
wire   [31:0] grad_0_q0;
reg   [3:0] kernel_grad_3_address0;
reg    kernel_grad_3_ce0;
reg    kernel_grad_3_we0;
wire   [31:0] kernel_grad_3_q0;
reg   [9:0] conv_grad_2_address0;
reg    conv_grad_2_ce0;
reg    conv_grad_2_we0;
wire   [31:0] conv_grad_2_q0;
reg   [3:0] kernel_grad_3_overtu_address0;
reg    kernel_grad_3_overtu_ce0;
reg    kernel_grad_3_overtu_we0;
wire   [31:0] kernel_grad_3_overtu_q0;
reg   [9:0] conv_grad_3_padding_address0;
reg    conv_grad_3_padding_ce0;
reg    conv_grad_3_padding_we0;
wire   [31:0] conv_grad_3_padding_q0;
reg    conv_grad_3_padding_ce1;
reg    conv_grad_3_padding_we1;
reg   [3:0] kernel_grad_2_address0;
reg    kernel_grad_2_ce0;
reg    kernel_grad_2_we0;
wire   [31:0] kernel_grad_2_q0;
reg   [9:0] conv_grad_1_address0;
reg    conv_grad_1_ce0;
reg    conv_grad_1_we0;
wire   [31:0] conv_grad_1_q0;
reg   [3:0] kernel_grad_2_overtu_address0;
reg    kernel_grad_2_overtu_ce0;
reg    kernel_grad_2_overtu_we0;
wire   [31:0] kernel_grad_2_overtu_q0;
reg   [9:0] conv_grad_2_padding_address0;
reg    conv_grad_2_padding_ce0;
reg    conv_grad_2_padding_we0;
wire   [31:0] conv_grad_2_padding_q0;
reg    conv_grad_2_padding_ce1;
reg    conv_grad_2_padding_we1;
reg   [3:0] kernel_grad_1_address0;
reg    kernel_grad_1_ce0;
reg    kernel_grad_1_we0;
wire   [31:0] kernel_grad_1_q0;
wire    grp_Conv2d_1_fu_984_ap_start;
wire    grp_Conv2d_1_fu_984_ap_done;
wire    grp_Conv2d_1_fu_984_ap_idle;
wire    grp_Conv2d_1_fu_984_ap_ready;
wire   [9:0] grp_Conv2d_1_fu_984_input_matrix_address0;
wire    grp_Conv2d_1_fu_984_input_matrix_ce0;
wire   [3:0] grp_Conv2d_1_fu_984_kernel_address0;
wire    grp_Conv2d_1_fu_984_kernel_ce0;
wire   [9:0] grp_Conv2d_1_fu_984_out_matrix_address0;
wire    grp_Conv2d_1_fu_984_out_matrix_ce0;
wire    grp_Conv2d_1_fu_984_out_matrix_we0;
wire   [31:0] grp_Conv2d_1_fu_984_out_matrix_d0;
wire    grp_Conv2d_3_fu_991_ap_start;
wire    grp_Conv2d_3_fu_991_ap_done;
wire    grp_Conv2d_3_fu_991_ap_idle;
wire    grp_Conv2d_3_fu_991_ap_ready;
wire   [9:0] grp_Conv2d_3_fu_991_input_matrix_address0;
wire    grp_Conv2d_3_fu_991_input_matrix_ce0;
wire   [3:0] grp_Conv2d_3_fu_991_kernel_address0;
wire    grp_Conv2d_3_fu_991_kernel_ce0;
wire   [9:0] grp_Conv2d_3_fu_991_out_matrix_address0;
wire    grp_Conv2d_3_fu_991_out_matrix_ce0;
wire    grp_Conv2d_3_fu_991_out_matrix_we0;
wire   [31:0] grp_Conv2d_3_fu_991_out_matrix_d0;
wire    grp_Conv2d_fu_998_ap_start;
wire    grp_Conv2d_fu_998_ap_done;
wire    grp_Conv2d_fu_998_ap_idle;
wire    grp_Conv2d_fu_998_ap_ready;
wire   [9:0] grp_Conv2d_fu_998_input_matrix_address0;
wire    grp_Conv2d_fu_998_input_matrix_ce0;
wire   [9:0] grp_Conv2d_fu_998_kernel_address0;
wire    grp_Conv2d_fu_998_kernel_ce0;
wire   [3:0] grp_Conv2d_fu_998_out_matrix_address0;
wire    grp_Conv2d_fu_998_out_matrix_ce0;
wire    grp_Conv2d_fu_998_out_matrix_we0;
wire   [31:0] grp_Conv2d_fu_998_out_matrix_d0;
wire    grp_Conv2d_4_fu_1006_ap_start;
wire    grp_Conv2d_4_fu_1006_ap_done;
wire    grp_Conv2d_4_fu_1006_ap_idle;
wire    grp_Conv2d_4_fu_1006_ap_ready;
wire   [9:0] grp_Conv2d_4_fu_1006_kernel_address0;
wire    grp_Conv2d_4_fu_1006_kernel_ce0;
wire   [3:0] grp_Conv2d_4_fu_1006_out_matrix_address0;
wire    grp_Conv2d_4_fu_1006_out_matrix_ce0;
wire    grp_Conv2d_4_fu_1006_out_matrix_we0;
wire   [31:0] grp_Conv2d_4_fu_1006_out_matrix_d0;
wire   [9:0] grp_Conv2d_4_fu_1006_conv_out_2_address0;
wire    grp_Conv2d_4_fu_1006_conv_out_2_ce0;
wire    grp_Conv2d_2_fu_1014_ap_start;
wire    grp_Conv2d_2_fu_1014_ap_idle;
wire   [9:0] grp_Conv2d_2_fu_1014_kernel_address0;
wire    grp_Conv2d_2_fu_1014_kernel_ce0;
wire   [3:0] grp_Conv2d_2_fu_1014_out_matrix_address0;
wire    grp_Conv2d_2_fu_1014_out_matrix_ce0;
wire    grp_Conv2d_2_fu_1014_out_matrix_we0;
wire   [31:0] grp_Conv2d_2_fu_1014_out_matrix_d0;
wire   [9:0] grp_Conv2d_2_fu_1014_conv_out_1_address0;
wire    grp_Conv2d_2_fu_1014_conv_out_1_ce0;
wire    grp_MatrixBackPropagatio_1_fu_1022_ap_start;
wire    grp_MatrixBackPropagatio_1_fu_1022_ap_idle;
wire   [3:0] grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0;
wire    grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0;
reg   [31:0] grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0;
wire   [3:0] grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0;
wire    grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0;
wire    grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0;
wire   [31:0] grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0;
reg   [31:0] grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0;
reg   [31:0] grp_MatrixBackPropagatio_1_fu_1022_lr;
wire    grp_Padding_1_fu_1032_ap_start;
wire    grp_Padding_1_fu_1032_ap_done;
wire    grp_Padding_1_fu_1032_ap_idle;
wire    grp_Padding_1_fu_1032_ap_ready;
wire   [9:0] grp_Padding_1_fu_1032_input_matrix_address0;
wire    grp_Padding_1_fu_1032_input_matrix_ce0;
wire   [9:0] grp_Padding_1_fu_1032_output_matrix_address0;
wire    grp_Padding_1_fu_1032_output_matrix_ce0;
wire    grp_Padding_1_fu_1032_output_matrix_we0;
wire   [31:0] grp_Padding_1_fu_1032_output_matrix_d0;
wire   [9:0] grp_Padding_1_fu_1032_output_matrix_address1;
wire    grp_Padding_1_fu_1032_output_matrix_ce1;
wire    grp_Padding_1_fu_1032_output_matrix_we1;
wire   [31:0] grp_Padding_1_fu_1032_output_matrix_d1;
wire    grp_Padding_fu_1038_ap_start;
wire    grp_Padding_fu_1038_ap_idle;
wire   [9:0] grp_Padding_fu_1038_input_matrix_address0;
wire    grp_Padding_fu_1038_input_matrix_ce0;
wire   [9:0] grp_Padding_fu_1038_output_matrix_address0;
wire    grp_Padding_fu_1038_output_matrix_ce0;
wire    grp_Padding_fu_1038_output_matrix_we0;
wire   [31:0] grp_Padding_fu_1038_output_matrix_d0;
wire   [9:0] grp_Padding_fu_1038_output_matrix_address1;
wire    grp_Padding_fu_1038_output_matrix_ce1;
wire    grp_Padding_fu_1038_output_matrix_we1;
wire   [31:0] grp_Padding_fu_1038_output_matrix_d1;
wire    grp_OverturnKernel_fu_1044_ap_start;
wire    grp_OverturnKernel_fu_1044_ap_done;
wire    grp_OverturnKernel_fu_1044_ap_idle;
wire    grp_OverturnKernel_fu_1044_ap_ready;
wire   [3:0] grp_OverturnKernel_fu_1044_input_matrix_address0;
wire    grp_OverturnKernel_fu_1044_input_matrix_ce0;
wire   [3:0] grp_OverturnKernel_fu_1044_output_matrix_address0;
wire    grp_OverturnKernel_fu_1044_output_matrix_ce0;
wire    grp_OverturnKernel_fu_1044_output_matrix_we0;
wire   [31:0] grp_OverturnKernel_fu_1044_output_matrix_d0;
wire    grp_OverturnKernel_fu_1051_ap_start;
wire    grp_OverturnKernel_fu_1051_ap_done;
wire    grp_OverturnKernel_fu_1051_ap_idle;
wire    grp_OverturnKernel_fu_1051_ap_ready;
wire   [3:0] grp_OverturnKernel_fu_1051_input_matrix_address0;
wire    grp_OverturnKernel_fu_1051_input_matrix_ce0;
wire   [3:0] grp_OverturnKernel_fu_1051_output_matrix_address0;
wire    grp_OverturnKernel_fu_1051_output_matrix_ce0;
wire    grp_OverturnKernel_fu_1051_output_matrix_we0;
wire   [31:0] grp_OverturnKernel_fu_1051_output_matrix_d0;
reg   [3:0] i_0_reg_634;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_phi_mux_i_0_i_phi_fu_660_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] i_0_i1_reg_678;
wire    ap_CS_fsm_state14;
reg   [31:0] empty_46_reg_689;
wire    ap_CS_fsm_state25;
reg   [3:0] j_0_i2_reg_701;
reg   [5:0] i_0_i8_reg_712;
wire    ap_CS_fsm_state36;
reg   [7:0] ap_phi_mux_i_0_i16_phi_fu_738_p4;
wire    ap_block_pp1_stage0;
reg   [7:0] i_0_i31_reg_756;
wire    ap_CS_fsm_state43;
reg   [12:0] phi_mul_reg_767;
reg   [31:0] storemerge_reg_779;
reg   [5:0] j_0_i36_reg_792;
reg   [7:0] i_0_i49_reg_803;
wire    ap_CS_fsm_state64;
reg   [9:0] ap_phi_mux_i_0_i60_phi_fu_829_p4;
wire    ap_block_pp2_stage0;
reg   [9:0] i_0_i74_reg_847;
wire    ap_CS_fsm_state71;
reg   [16:0] phi_mul234_reg_858;
reg   [31:0] storemerge240_reg_870;
reg   [7:0] j_0_i79_reg_883;
reg   [9:0] i_0_i92_reg_894;
reg   [16:0] phi_mul236_reg_905;
reg   [7:0] j_0_i93_reg_917;
wire    ap_CS_fsm_state108;
wire   [0:0] icmp_ln99_fu_1738_p2;
reg   [7:0] i_0_i101_reg_928;
reg   [12:0] phi_mul238_reg_939;
reg   [5:0] j_0_i105_reg_951;
wire    ap_CS_fsm_state118;
wire   [0:0] icmp_ln99_1_fu_1784_p2;
reg   [5:0] i_0_i118_reg_962;
reg   [3:0] j_0_i122_reg_973;
wire    ap_CS_fsm_state129;
reg    grp_Conv2d_1_fu_984_ap_start_reg;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
reg    grp_Conv2d_3_fu_991_ap_start_reg;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
reg    grp_Conv2d_fu_998_ap_start_reg;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
reg    grp_Conv2d_4_fu_1006_ap_start_reg;
wire    ap_CS_fsm_state83;
reg    grp_Conv2d_2_fu_1014_ap_start_reg;
reg    grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state96;
reg    grp_Padding_1_fu_1032_ap_start_reg;
wire    ap_CS_fsm_state85;
reg    grp_Padding_fu_1038_ap_start_reg;
reg    grp_OverturnKernel_fu_1044_ap_start_reg;
reg    grp_OverturnKernel_fu_1051_ap_start_reg;
wire   [63:0] zext_ln130_fu_1168_p1;
wire   [63:0] fc_in_3_relu2_0_load_2_fu_1250_p1;
wire   [63:0] zext_ln63_fu_1255_p1;
wire   [63:0] zext_ln63_2_fu_1299_p1;
wire   [63:0] zext_ln68_fu_1315_p1;
wire   [63:0] zext_ln70_fu_1366_p1;
wire   [63:0] zext_ln70_1_fu_1371_p1;
wire   [7:0] grad_2_addr_1_gep_fu_415_p3;
wire   [63:0] zext_ln63_6_fu_1473_p1;
wire   [63:0] zext_ln63_4_fu_1478_p1;
wire   [63:0] zext_ln63_5_fu_1495_p1;
wire   [63:0] zext_ln68_1_fu_1517_p1;
wire   [63:0] zext_ln70_2_fu_1544_p1;
wire   [63:0] zext_ln70_3_fu_1549_p1;
wire   [7:0] grad_1_addr_1_gep_fu_518_p3;
wire   [63:0] zext_ln63_10_fu_1651_p1;
wire   [63:0] zext_ln63_7_fu_1656_p1;
wire   [63:0] zext_ln63_8_fu_1673_p1;
wire   [63:0] zext_ln68_2_fu_1695_p1;
wire   [63:0] zext_ln70_4_fu_1722_p1;
wire   [63:0] zext_ln70_5_fu_1727_p1;
wire   [63:0] zext_ln101_fu_1772_p1;
wire   [63:0] zext_ln101_1_fu_1818_p1;
wire   [63:0] zext_ln101_2_fu_1882_p1;
wire   [63:0] zext_ln127_fu_1174_p1;
wire    ap_CS_fsm_state123;
wire   [31:0] grp_fu_1073_p1;
wire    ap_CS_fsm_state102;
reg   [31:0] grp_fu_1058_p0;
reg   [31:0] grp_fu_1058_p1;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state125;
reg   [31:0] grp_fu_1069_p0;
reg   [31:0] grp_fu_1069_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state63;
reg   [31:0] grp_fu_1078_p0;
reg   [31:0] grp_fu_1083_p0;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state58;
wire   [31:0] zext_ln129_fu_1184_p1;
wire   [0:0] icmp_ln62_fu_1228_p2;
wire   [5:0] i_fu_1222_p2;
wire   [6:0] shl_ln63_1_mid2_fu_1273_p3;
wire   [6:0] j_0_i_cast16_mid2_ca_fu_1280_p1;
wire   [6:0] add_ln63_fu_1283_p2;
wire   [8:0] zext_ln63_1_fu_1289_p1;
wire   [8:0] shl_ln63_mid2_fu_1266_p3;
wire   [6:0] j_0_i2_cast13_fu_1336_p1;
wire   [6:0] add_ln70_fu_1352_p2;
wire   [8:0] zext_ln70_6_fu_1357_p1;
wire   [8:0] add_ln70_1_fu_1361_p2;
wire   [31:0] bitcast_ln76_fu_1393_p1;
wire   [7:0] tmp_s_fu_1397_p4;
wire   [22:0] trunc_ln76_fu_1407_p1;
wire   [0:0] or_ln76_fu_1423_p2;
wire   [0:0] grp_fu_1083_p2;
wire   [0:0] icmp_ln62_1_fu_1451_p2;
wire   [7:0] i_7_fu_1445_p2;
wire   [12:0] j_0_i36_cast9_fu_1522_p1;
wire   [12:0] add_ln70_2_fu_1538_p2;
wire   [31:0] bitcast_ln76_1_fu_1571_p1;
wire   [7:0] tmp_15_fu_1575_p4;
wire   [22:0] trunc_ln76_1_fu_1585_p1;
wire   [0:0] or_ln76_1_fu_1601_p2;
wire   [0:0] icmp_ln62_2_fu_1629_p2;
wire   [9:0] i_10_fu_1623_p2;
wire   [16:0] j_0_i79_cast5_fu_1700_p1;
wire   [16:0] add_ln70_3_fu_1716_p2;
wire   [16:0] j_0_i93_cast_fu_1750_p1;
wire   [16:0] add_ln101_fu_1766_p2;
wire   [12:0] j_0_i105_cast_fu_1796_p1;
wire   [12:0] add_ln101_1_fu_1812_p2;
wire   [6:0] j_0_i122_cast_fu_1852_p1;
wire   [6:0] add_ln101_2_fu_1868_p2;
wire   [8:0] zext_ln101_3_fu_1873_p1;
wire   [8:0] add_ln101_3_fu_1877_p2;
wire   [7:0] grp_fu_1888_p0;
wire   [6:0] grp_fu_1888_p1;
wire   [5:0] grp_fu_1888_p2;
wire   [9:0] grp_fu_1896_p0;
wire   [8:0] grp_fu_1896_p1;
wire   [7:0] grp_fu_1896_p2;
reg   [1:0] grp_fu_1058_opcode;
reg   [113:0] ap_NS_fsm;
reg    ap_block_state83_on_subcall_done;
reg    ap_block_state93_on_subcall_done;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [12:0] grp_fu_1888_p00;
wire   [12:0] grp_fu_1888_p20;
wire   [16:0] grp_fu_1896_p00;
wire   [16:0] grp_fu_1896_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 114'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 grp_Conv2d_1_fu_984_ap_start_reg = 1'b0;
#0 grp_Conv2d_3_fu_991_ap_start_reg = 1'b0;
#0 grp_Conv2d_fu_998_ap_start_reg = 1'b0;
#0 grp_Conv2d_4_fu_1006_ap_start_reg = 1'b0;
#0 grp_Conv2d_2_fu_1014_ap_start_reg = 1'b0;
#0 grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg = 1'b0;
#0 grp_Padding_1_fu_1032_ap_start_reg = 1'b0;
#0 grp_Padding_fu_1038_ap_start_reg = 1'b0;
#0 grp_OverturnKernel_fu_1044_ap_start_reg = 1'b0;
#0 grp_OverturnKernel_fu_1051_ap_start_reg = 1'b0;
end

backward_grad_3 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
grad_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grad_3_address0),
    .ce0(grad_3_ce0),
    .we0(grad_3_we0),
    .d0(grad_3_d0),
    .q0(grad_3_q0)
);

backward_wgrad_3 #(
    .DataWidth( 32 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
wgrad_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wgrad_3_address0),
    .ce0(wgrad_3_ce0),
    .we0(wgrad_3_we0),
    .d0(reg_1111),
    .q0(wgrad_3_q0)
);

backward_rgrad_2 #(
    .DataWidth( 32 ),
    .AddressRange( 45 ),
    .AddressWidth( 6 ))
rgrad_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rgrad_2_address0),
    .ce0(rgrad_2_ce0),
    .we0(rgrad_2_we0),
    .d0(rgrad_2_d0),
    .q0(rgrad_2_q0)
);

backward_grad_2 #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
grad_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grad_2_address0),
    .ce0(grad_2_ce0),
    .we0(grad_2_we0),
    .d0(grad_2_d0),
    .q0(grad_2_q0)
);

backward_wgrad_2 #(
    .DataWidth( 32 ),
    .AddressRange( 8100 ),
    .AddressWidth( 13 ))
wgrad_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wgrad_2_address0),
    .ce0(wgrad_2_ce0),
    .we0(wgrad_2_we0),
    .d0(reg_1111),
    .q0(wgrad_2_q0)
);

backward_grad_2 #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
rgrad_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rgrad_1_address0),
    .ce0(rgrad_1_ce0),
    .we0(rgrad_1_we0),
    .d0(storemerge_reg_779),
    .q0(rgrad_1_q0)
);

backward_grad_2 #(
    .DataWidth( 32 ),
    .AddressRange( 180 ),
    .AddressWidth( 8 ))
grad_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grad_1_address0),
    .ce0(grad_1_ce0),
    .we0(grad_1_we0),
    .d0(grad_1_d0),
    .q0(grad_1_q0)
);

backward_wgrad_1 #(
    .DataWidth( 32 ),
    .AddressRange( 103680 ),
    .AddressWidth( 17 ))
wgrad_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wgrad_1_address0),
    .ce0(wgrad_1_ce0),
    .we0(wgrad_1_we0),
    .d0(reg_1111),
    .q0(wgrad_1_q0)
);

backward_grad_0 #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
grad_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grad_0_address0),
    .ce0(grad_0_ce0),
    .we0(grad_0_we0),
    .d0(storemerge240_reg_870),
    .q0(grad_0_q0)
);

backward_kernel_gocq #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_grad_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_grad_3_address0),
    .ce0(kernel_grad_3_ce0),
    .we0(kernel_grad_3_we0),
    .d0(grp_Conv2d_4_fu_1006_out_matrix_d0),
    .q0(kernel_grad_3_q0)
);

backward_conv_grapcA #(
    .DataWidth( 32 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
conv_grad_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_grad_2_address0),
    .ce0(conv_grad_2_ce0),
    .we0(conv_grad_2_we0),
    .d0(grp_Conv2d_3_fu_991_out_matrix_d0),
    .q0(conv_grad_2_q0)
);

backward_kernel_gocq #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_grad_3_overtu_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_grad_3_overtu_address0),
    .ce0(kernel_grad_3_overtu_ce0),
    .we0(kernel_grad_3_overtu_we0),
    .d0(grp_OverturnKernel_fu_1044_output_matrix_d0),
    .q0(kernel_grad_3_overtu_q0)
);

backward_conv_grarcU #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
conv_grad_3_padding_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_grad_3_padding_address0),
    .ce0(conv_grad_3_padding_ce0),
    .we0(conv_grad_3_padding_we0),
    .d0(grp_Padding_1_fu_1032_output_matrix_d0),
    .q0(conv_grad_3_padding_q0),
    .address1(grp_Padding_1_fu_1032_output_matrix_address1),
    .ce1(conv_grad_3_padding_ce1),
    .we1(conv_grad_3_padding_we1),
    .d1(grp_Padding_1_fu_1032_output_matrix_d1)
);

backward_kernel_gocq #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_grad_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_grad_2_address0),
    .ce0(kernel_grad_2_ce0),
    .we0(kernel_grad_2_we0),
    .d0(grp_Conv2d_2_fu_1014_out_matrix_d0),
    .q0(kernel_grad_2_q0)
);

backward_conv_gratde #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
conv_grad_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_grad_1_address0),
    .ce0(conv_grad_1_ce0),
    .we0(conv_grad_1_we0),
    .d0(grp_Conv2d_1_fu_984_out_matrix_d0),
    .q0(conv_grad_1_q0)
);

backward_kernel_gocq #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_grad_2_overtu_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_grad_2_overtu_address0),
    .ce0(kernel_grad_2_overtu_ce0),
    .we0(kernel_grad_2_overtu_we0),
    .d0(grp_OverturnKernel_fu_1051_output_matrix_d0),
    .q0(kernel_grad_2_overtu_q0)
);

backward_conv_gravdy #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
conv_grad_2_padding_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_grad_2_padding_address0),
    .ce0(conv_grad_2_padding_ce0),
    .we0(conv_grad_2_padding_we0),
    .d0(grp_Padding_fu_1038_output_matrix_d0),
    .q0(conv_grad_2_padding_q0),
    .address1(grp_Padding_fu_1038_output_matrix_address1),
    .ce1(conv_grad_2_padding_ce1),
    .we1(conv_grad_2_padding_we1),
    .d1(grp_Padding_fu_1038_output_matrix_d1)
);

backward_kernel_gocq #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_grad_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_grad_1_address0),
    .ce0(kernel_grad_1_ce0),
    .we0(kernel_grad_1_we0),
    .d0(grp_Conv2d_fu_998_out_matrix_d0),
    .q0(kernel_grad_1_q0)
);

Conv2d_1 grp_Conv2d_1_fu_984(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_1_fu_984_ap_start),
    .ap_done(grp_Conv2d_1_fu_984_ap_done),
    .ap_idle(grp_Conv2d_1_fu_984_ap_idle),
    .ap_ready(grp_Conv2d_1_fu_984_ap_ready),
    .input_matrix_address0(grp_Conv2d_1_fu_984_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_1_fu_984_input_matrix_ce0),
    .input_matrix_q0(conv_grad_2_padding_q0),
    .kernel_address0(grp_Conv2d_1_fu_984_kernel_address0),
    .kernel_ce0(grp_Conv2d_1_fu_984_kernel_ce0),
    .kernel_q0(kernel_grad_2_overtu_q0),
    .out_matrix_address0(grp_Conv2d_1_fu_984_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_1_fu_984_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_1_fu_984_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_1_fu_984_out_matrix_d0)
);

Conv2d_3 grp_Conv2d_3_fu_991(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_3_fu_991_ap_start),
    .ap_done(grp_Conv2d_3_fu_991_ap_done),
    .ap_idle(grp_Conv2d_3_fu_991_ap_idle),
    .ap_ready(grp_Conv2d_3_fu_991_ap_ready),
    .input_matrix_address0(grp_Conv2d_3_fu_991_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_3_fu_991_input_matrix_ce0),
    .input_matrix_q0(conv_grad_3_padding_q0),
    .kernel_address0(grp_Conv2d_3_fu_991_kernel_address0),
    .kernel_ce0(grp_Conv2d_3_fu_991_kernel_ce0),
    .kernel_q0(kernel_grad_3_overtu_q0),
    .out_matrix_address0(grp_Conv2d_3_fu_991_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_3_fu_991_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_3_fu_991_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_3_fu_991_out_matrix_d0)
);

Conv2d grp_Conv2d_fu_998(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_fu_998_ap_start),
    .ap_done(grp_Conv2d_fu_998_ap_done),
    .ap_idle(grp_Conv2d_fu_998_ap_idle),
    .ap_ready(grp_Conv2d_fu_998_ap_ready),
    .input_matrix_address0(grp_Conv2d_fu_998_input_matrix_address0),
    .input_matrix_ce0(grp_Conv2d_fu_998_input_matrix_ce0),
    .input_matrix_q0(mnist_data_q0),
    .kernel_address0(grp_Conv2d_fu_998_kernel_address0),
    .kernel_ce0(grp_Conv2d_fu_998_kernel_ce0),
    .kernel_q0(conv_grad_1_q0),
    .out_matrix_address0(grp_Conv2d_fu_998_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_fu_998_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_fu_998_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_fu_998_out_matrix_d0)
);

Conv2d_4 grp_Conv2d_4_fu_1006(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_4_fu_1006_ap_start),
    .ap_done(grp_Conv2d_4_fu_1006_ap_done),
    .ap_idle(grp_Conv2d_4_fu_1006_ap_idle),
    .ap_ready(grp_Conv2d_4_fu_1006_ap_ready),
    .kernel_address0(grp_Conv2d_4_fu_1006_kernel_address0),
    .kernel_ce0(grp_Conv2d_4_fu_1006_kernel_ce0),
    .kernel_q0(grad_0_q0),
    .out_matrix_address0(grp_Conv2d_4_fu_1006_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_4_fu_1006_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_4_fu_1006_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_4_fu_1006_out_matrix_d0),
    .conv_out_2_address0(grp_Conv2d_4_fu_1006_conv_out_2_address0),
    .conv_out_2_ce0(grp_Conv2d_4_fu_1006_conv_out_2_ce0),
    .conv_out_2_q0(conv_out_2_q0)
);

Conv2d_2 grp_Conv2d_2_fu_1014(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Conv2d_2_fu_1014_ap_start),
    .ap_done(grp_Conv2d_2_fu_1014_ap_done),
    .ap_idle(grp_Conv2d_2_fu_1014_ap_idle),
    .ap_ready(grp_Conv2d_2_fu_1014_ap_ready),
    .kernel_address0(grp_Conv2d_2_fu_1014_kernel_address0),
    .kernel_ce0(grp_Conv2d_2_fu_1014_kernel_ce0),
    .kernel_q0(conv_grad_2_q0),
    .out_matrix_address0(grp_Conv2d_2_fu_1014_out_matrix_address0),
    .out_matrix_ce0(grp_Conv2d_2_fu_1014_out_matrix_ce0),
    .out_matrix_we0(grp_Conv2d_2_fu_1014_out_matrix_we0),
    .out_matrix_d0(grp_Conv2d_2_fu_1014_out_matrix_d0),
    .conv_out_1_address0(grp_Conv2d_2_fu_1014_conv_out_1_address0),
    .conv_out_1_ce0(grp_Conv2d_2_fu_1014_conv_out_1_ce0),
    .conv_out_1_q0(conv_out_1_q0)
);

MatrixBackPropagatio_1 grp_MatrixBackPropagatio_1_fu_1022(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MatrixBackPropagatio_1_fu_1022_ap_start),
    .ap_done(grp_MatrixBackPropagatio_1_fu_1022_ap_done),
    .ap_idle(grp_MatrixBackPropagatio_1_fu_1022_ap_idle),
    .ap_ready(grp_MatrixBackPropagatio_1_fu_1022_ap_ready),
    .input_matrix_address0(grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0),
    .input_matrix_ce0(grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0),
    .input_matrix_q0(grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0),
    .output_matrix_address0(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0),
    .output_matrix_ce0(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0),
    .output_matrix_we0(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0),
    .output_matrix_d0(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0),
    .output_matrix_q0(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0),
    .lr(grp_MatrixBackPropagatio_1_fu_1022_lr)
);

Padding_1 grp_Padding_1_fu_1032(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Padding_1_fu_1032_ap_start),
    .ap_done(grp_Padding_1_fu_1032_ap_done),
    .ap_idle(grp_Padding_1_fu_1032_ap_idle),
    .ap_ready(grp_Padding_1_fu_1032_ap_ready),
    .input_matrix_address0(grp_Padding_1_fu_1032_input_matrix_address0),
    .input_matrix_ce0(grp_Padding_1_fu_1032_input_matrix_ce0),
    .input_matrix_q0(grad_0_q0),
    .output_matrix_address0(grp_Padding_1_fu_1032_output_matrix_address0),
    .output_matrix_ce0(grp_Padding_1_fu_1032_output_matrix_ce0),
    .output_matrix_we0(grp_Padding_1_fu_1032_output_matrix_we0),
    .output_matrix_d0(grp_Padding_1_fu_1032_output_matrix_d0),
    .output_matrix_address1(grp_Padding_1_fu_1032_output_matrix_address1),
    .output_matrix_ce1(grp_Padding_1_fu_1032_output_matrix_ce1),
    .output_matrix_we1(grp_Padding_1_fu_1032_output_matrix_we1),
    .output_matrix_d1(grp_Padding_1_fu_1032_output_matrix_d1)
);

Padding grp_Padding_fu_1038(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Padding_fu_1038_ap_start),
    .ap_done(grp_Padding_fu_1038_ap_done),
    .ap_idle(grp_Padding_fu_1038_ap_idle),
    .ap_ready(grp_Padding_fu_1038_ap_ready),
    .input_matrix_address0(grp_Padding_fu_1038_input_matrix_address0),
    .input_matrix_ce0(grp_Padding_fu_1038_input_matrix_ce0),
    .input_matrix_q0(conv_grad_2_q0),
    .output_matrix_address0(grp_Padding_fu_1038_output_matrix_address0),
    .output_matrix_ce0(grp_Padding_fu_1038_output_matrix_ce0),
    .output_matrix_we0(grp_Padding_fu_1038_output_matrix_we0),
    .output_matrix_d0(grp_Padding_fu_1038_output_matrix_d0),
    .output_matrix_address1(grp_Padding_fu_1038_output_matrix_address1),
    .output_matrix_ce1(grp_Padding_fu_1038_output_matrix_ce1),
    .output_matrix_we1(grp_Padding_fu_1038_output_matrix_we1),
    .output_matrix_d1(grp_Padding_fu_1038_output_matrix_d1)
);

OverturnKernel grp_OverturnKernel_fu_1044(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_OverturnKernel_fu_1044_ap_start),
    .ap_done(grp_OverturnKernel_fu_1044_ap_done),
    .ap_idle(grp_OverturnKernel_fu_1044_ap_idle),
    .ap_ready(grp_OverturnKernel_fu_1044_ap_ready),
    .input_matrix_address0(grp_OverturnKernel_fu_1044_input_matrix_address0),
    .input_matrix_ce0(grp_OverturnKernel_fu_1044_input_matrix_ce0),
    .input_matrix_q0(conv_kernel_3_q0),
    .output_matrix_address0(grp_OverturnKernel_fu_1044_output_matrix_address0),
    .output_matrix_ce0(grp_OverturnKernel_fu_1044_output_matrix_ce0),
    .output_matrix_we0(grp_OverturnKernel_fu_1044_output_matrix_we0),
    .output_matrix_d0(grp_OverturnKernel_fu_1044_output_matrix_d0)
);

OverturnKernel grp_OverturnKernel_fu_1051(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_OverturnKernel_fu_1051_ap_start),
    .ap_done(grp_OverturnKernel_fu_1051_ap_done),
    .ap_idle(grp_OverturnKernel_fu_1051_ap_idle),
    .ap_ready(grp_OverturnKernel_fu_1051_ap_ready),
    .input_matrix_address0(grp_OverturnKernel_fu_1051_input_matrix_address0),
    .input_matrix_ce0(grp_OverturnKernel_fu_1051_input_matrix_ce0),
    .input_matrix_q0(conv_kernel_2_q0),
    .output_matrix_address0(grp_OverturnKernel_fu_1051_output_matrix_address0),
    .output_matrix_ce0(grp_OverturnKernel_fu_1051_output_matrix_ce0),
    .output_matrix_we0(grp_OverturnKernel_fu_1051_output_matrix_we0),
    .output_matrix_d0(grp_OverturnKernel_fu_1051_output_matrix_d0)
);

forw_back_faddfsuxdS #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_faddfsuxdS_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1058_p0),
    .din1(grp_fu_1058_p1),
    .opcode(grp_fu_1058_opcode),
    .ce(1'b1),
    .dout(grp_fu_1058_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1069_p0),
    .din1(grp_fu_1069_p1),
    .ce(1'b1),
    .dout(grp_fu_1069_p2)
);

forw_back_fptrunceOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
forw_back_fptrunceOg_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1130),
    .ce(1'b1),
    .dout(grp_fu_1073_p1)
);

forw_back_fpext_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
forw_back_fpext_3fYi_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1078_p0),
    .ce(1'b1),
    .dout(grp_fu_1078_p1)
);

forw_back_fcmp_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
forw_back_fcmp_32g8j_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1083_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_1083_p2)
);

forw_back_dmul_64ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
forw_back_dmul_64ibs_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_1125),
    .din1(64'd4587366580439587226),
    .ce(1'b1),
    .dout(grp_fu_1090_p2)
);

forw_back_mac_mulyd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 13 ))
forw_back_mac_mulyd2_U101(
    .din0(grp_fu_1888_p0),
    .din1(grp_fu_1888_p1),
    .din2(grp_fu_1888_p2),
    .dout(grp_fu_1888_p3)
);

forw_back_mac_mulzec #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
forw_back_mac_mulzec_U102(
    .din0(grp_fu_1896_p0),
    .din1(grp_fu_1896_p1),
    .din2(grp_fu_1896_p2),
    .dout(grp_fu_1896_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln129_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((icmp_ln129_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state37) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln75_fu_1376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state37)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state37);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if (((icmp_ln75_fu_1376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state65) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln75_1_fu_1554_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state65)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state65);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end else if (((icmp_ln75_1_fu_1554_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp2_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_1_fu_984_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state92)) begin
            grp_Conv2d_1_fu_984_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_1_fu_984_ap_ready == 1'b1)) begin
            grp_Conv2d_1_fu_984_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_2_fu_1014_ap_start_reg <= 1'b0;
    end else begin
        if ((~((m_axi_lr_in_RVALID == 1'b0) | (m_axi_lr_in_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state88))) begin
            grp_Conv2d_2_fu_1014_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_2_fu_1014_ap_ready == 1'b1)) begin
            grp_Conv2d_2_fu_1014_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_3_fu_991_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state86)) begin
            grp_Conv2d_3_fu_991_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_3_fu_991_ap_ready == 1'b1)) begin
            grp_Conv2d_3_fu_991_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_4_fu_1006_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state82) & (m_axi_lr_in_ARREADY == 1'b1))) begin
            grp_Conv2d_4_fu_1006_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_4_fu_1006_ap_ready == 1'b1)) begin
            grp_Conv2d_4_fu_1006_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Conv2d_fu_998_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state94)) begin
            grp_Conv2d_fu_998_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2d_fu_998_ap_ready == 1'b1)) begin
            grp_Conv2d_fu_998_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state92))) begin
            grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg <= 1'b1;
        end else if ((grp_MatrixBackPropagatio_1_fu_1022_ap_ready == 1'b1)) begin
            grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_OverturnKernel_fu_1044_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state82) & (m_axi_lr_in_ARREADY == 1'b1))) begin
            grp_OverturnKernel_fu_1044_ap_start_reg <= 1'b1;
        end else if ((grp_OverturnKernel_fu_1044_ap_ready == 1'b1)) begin
            grp_OverturnKernel_fu_1044_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_OverturnKernel_fu_1051_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state82) & (m_axi_lr_in_ARREADY == 1'b1))) begin
            grp_OverturnKernel_fu_1051_ap_start_reg <= 1'b1;
        end else if ((grp_OverturnKernel_fu_1051_ap_ready == 1'b1)) begin
            grp_OverturnKernel_fu_1051_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Padding_1_fu_1032_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state84) & (m_axi_lr_in_ARREADY == 1'b1))) begin
            grp_Padding_1_fu_1032_ap_start_reg <= 1'b1;
        end else if ((grp_Padding_1_fu_1032_ap_ready == 1'b1)) begin
            grp_Padding_1_fu_1032_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Padding_fu_1038_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state90)) begin
            grp_Padding_fu_1038_ap_start_reg <= 1'b1;
        end else if ((grp_Padding_fu_1038_ap_ready == 1'b1)) begin
            grp_Padding_fu_1038_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        empty_46_reg_689 <= reg_1095;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln67_fu_1303_p2 == 1'd0))) begin
        empty_46_reg_689 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_1_fu_1800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
        i_0_i101_reg_928 <= i_14_reg_2346;
    end else if (((icmp_ln99_fu_1738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        i_0_i101_reg_928 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_2_fu_1856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state120))) begin
        i_0_i118_reg_962 <= i_15_reg_2378;
    end else if (((icmp_ln99_1_fu_1784_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state109))) begin
        i_0_i118_reg_962 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_reg_2090 == 1'd0))) begin
        i_0_i16_reg_734 <= select_ln63_1_reg_2104;
    end else if (((icmp_ln75_fu_1376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        i_0_i16_reg_734 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_1340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_0_i1_reg_678 <= i_6_reg_2002;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_i1_reg_678 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_1_fu_1526_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        i_0_i31_reg_756 <= i_9_reg_2143;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i_0_i31_reg_756 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_0_i49_reg_803 <= i_11_reg_2175;
    end else if (((icmp_ln67_1_fu_1505_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        i_0_i49_reg_803 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_reg_2221 == 1'd0))) begin
        i_0_i60_reg_825 <= select_ln63_3_reg_2235;
    end else if (((icmp_ln75_1_fu_1554_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        i_0_i60_reg_825 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_2_fu_1704_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        i_0_i74_reg_847 <= i_12_reg_2274;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        i_0_i74_reg_847 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        i_0_i8_reg_712 <= i_8_reg_2044;
    end else if (((icmp_ln67_fu_1303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        i_0_i8_reg_712 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_1754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state99))) begin
        i_0_i92_reg_894 <= i_13_reg_2310;
    end else if ((~((grp_MatrixBackPropagatio_1_fu_1022_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state97))) begin
        i_0_i92_reg_894 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_reg_1953 == 1'd0))) begin
        i_0_i_reg_656 <= shl_ln63_mid2_v_v_reg_1967;
    end else if (((icmp_ln129_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_i_reg_656 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_634 <= i_5_reg_1934;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_634 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_fu_1433_p2 == 1'd0))) begin
        indvar_flatten13_reg_723 <= add_ln61_2_fu_1439_p2;
    end else if (((icmp_ln75_fu_1376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        indvar_flatten13_reg_723 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_fu_1611_p2 == 1'd0))) begin
        indvar_flatten26_reg_814 <= add_ln61_4_fu_1617_p2;
    end else if (((icmp_ln75_1_fu_1554_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        indvar_flatten26_reg_814 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_fu_1210_p2 == 1'd0))) begin
        indvar_flatten_reg_645 <= add_ln61_fu_1216_p2;
    end else if (((icmp_ln129_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvar_flatten_reg_645 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state109) & (icmp_ln99_1_fu_1784_p2 == 1'd0))) begin
        j_0_i105_reg_951 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        j_0_i105_reg_951 <= j_21_reg_2354;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state119) & (icmp_ln99_2_fu_1824_p2 == 1'd0))) begin
        j_0_i122_reg_973 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        j_0_i122_reg_973 <= j_22_reg_2396;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_fu_1433_p2 == 1'd0))) begin
        j_0_i21_reg_745 <= j_16_fu_1483_p2;
    end else if (((icmp_ln75_fu_1376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        j_0_i21_reg_745 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j_0_i2_reg_701 <= j_15_reg_2025;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln67_fu_1303_p2 == 1'd0))) begin
        j_0_i2_reg_701 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        j_0_i36_reg_792 <= j_17_reg_2156;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln67_1_fu_1505_p2 == 1'd0))) begin
        j_0_i36_reg_792 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_fu_1611_p2 == 1'd0))) begin
        j_0_i64_reg_836 <= j_18_fu_1661_p2;
    end else if (((icmp_ln75_1_fu_1554_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        j_0_i64_reg_836 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        j_0_i79_reg_883 <= j_19_reg_2287;
    end else if (((1'b0 == ap_block_state72_io) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln67_2_fu_1683_p2 == 1'd0))) begin
        j_0_i79_reg_883 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln99_fu_1738_p2 == 1'd0))) begin
        j_0_i93_reg_917 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        j_0_i93_reg_917 <= j_20_reg_2318;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_fu_1210_p2 == 1'd0))) begin
        j_0_i_reg_667 <= j_fu_1260_p2;
    end else if (((icmp_ln129_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_0_i_reg_667 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_2_fu_1704_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        phi_mul234_reg_858 <= add_ln70_5_reg_2266;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        phi_mul234_reg_858 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_1754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state99))) begin
        phi_mul236_reg_905 <= add_ln101_4_reg_2302;
    end else if ((~((grp_MatrixBackPropagatio_1_fu_1022_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state97))) begin
        phi_mul236_reg_905 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_1_fu_1800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
        phi_mul238_reg_939 <= add_ln101_5_reg_2338;
    end else if (((icmp_ln99_fu_1738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        phi_mul238_reg_939 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_1_fu_1526_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        phi_mul_reg_767 <= add_ln70_4_reg_2135;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        phi_mul_reg_767 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        storemerge240_reg_870 <= grp_fu_1058_p2;
    end else if (((1'b0 == ap_block_state72_io) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln67_2_fu_1683_p2 == 1'd0))) begin
        storemerge240_reg_870 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        storemerge_reg_779 <= grp_fu_1058_p2;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln67_1_fu_1505_p2 == 1'd0))) begin
        storemerge_reg_779 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        add_ln101_4_reg_2302 <= add_ln101_4_fu_1732_p2;
        i_13_reg_2310 <= i_13_fu_1744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        add_ln101_5_reg_2338 <= add_ln101_5_fu_1778_p2;
        i_14_reg_2346 <= i_14_fu_1790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_reg_1953 == 1'd0))) begin
        add_ln63_1_reg_1994 <= add_ln63_1_fu_1293_p2;
        fc_in_3_relu2_0_load_reg_1989 <= fc_in_3_relu2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln63_1_reg_1994_pp0_iter2_reg <= add_ln63_1_reg_1994;
        add_ln63_1_reg_1994_pp0_iter3_reg <= add_ln63_1_reg_1994_pp0_iter2_reg;
        add_ln63_1_reg_1994_pp0_iter4_reg <= add_ln63_1_reg_1994_pp0_iter3_reg;
        icmp_ln61_reg_1953_pp0_iter2_reg <= icmp_ln61_reg_1953_pp0_iter1_reg;
        icmp_ln61_reg_1953_pp0_iter3_reg <= icmp_ln61_reg_1953_pp0_iter2_reg;
        icmp_ln61_reg_1953_pp0_iter4_reg <= icmp_ln61_reg_1953_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_reg_2090 == 1'd0))) begin
        add_ln63_2_reg_2130 <= grp_fu_1888_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln63_2_reg_2130_pp1_iter2_reg <= add_ln63_2_reg_2130;
        add_ln63_2_reg_2130_pp1_iter3_reg <= add_ln63_2_reg_2130_pp1_iter2_reg;
        add_ln63_2_reg_2130_pp1_iter4_reg <= add_ln63_2_reg_2130_pp1_iter3_reg;
        icmp_ln61_1_reg_2090_pp1_iter2_reg <= icmp_ln61_1_reg_2090_pp1_iter1_reg;
        icmp_ln61_1_reg_2090_pp1_iter3_reg <= icmp_ln61_1_reg_2090_pp1_iter2_reg;
        icmp_ln61_1_reg_2090_pp1_iter4_reg <= icmp_ln61_1_reg_2090_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_reg_2221 == 1'd0))) begin
        add_ln63_3_reg_2261 <= grp_fu_1896_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        add_ln63_3_reg_2261_pp2_iter2_reg <= add_ln63_3_reg_2261;
        add_ln63_3_reg_2261_pp2_iter3_reg <= add_ln63_3_reg_2261_pp2_iter2_reg;
        add_ln63_3_reg_2261_pp2_iter4_reg <= add_ln63_3_reg_2261_pp2_iter3_reg;
        icmp_ln61_2_reg_2221_pp2_iter2_reg <= icmp_ln61_2_reg_2221_pp2_iter1_reg;
        icmp_ln61_2_reg_2221_pp2_iter3_reg <= icmp_ln61_2_reg_2221_pp2_iter2_reg;
        icmp_ln61_2_reg_2221_pp2_iter4_reg <= icmp_ln61_2_reg_2221_pp2_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        add_ln70_4_reg_2135 <= add_ln70_4_fu_1499_p2;
        i_9_reg_2143 <= i_9_fu_1511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state72_io) & (1'b1 == ap_CS_fsm_state72))) begin
        add_ln70_5_reg_2266 <= add_ln70_5_fu_1677_p2;
        i_12_reg_2274 <= i_12_fu_1689_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        and_ln76_1_reg_2212 <= and_ln76_1_fu_1605_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        and_ln76_reg_2081 <= and_ln76_fu_1427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1754_p2 == 1'd0))) begin
        fc_hidden_layer1_add_2_reg_2323 <= zext_ln101_fu_1772_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state110) & (icmp_ln100_1_fu_1800_p2 == 1'd0))) begin
        fc_hidden_layer2_add_2_reg_2359 <= zext_ln101_1_fu_1818_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state120) & (icmp_ln100_2_fu_1856_p2 == 1'd0))) begin
        fc_hidden_layer3_add_2_reg_2401 <= zext_ln101_2_fu_1882_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_reg_2221 == 1'd0))) begin
        fc_in_1_0_load_reg_2256 <= fc_in_1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_reg_2090 == 1'd0))) begin
        fc_in_2_relu1_0_load_reg_2125 <= fc_in_2_relu1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state72_io) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln67_2_fu_1683_p2 == 1'd0))) begin
        grad_0_addr_reg_2279 <= zext_ln68_2_fu_1695_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grad_3_addr_reg_1914 <= zext_ln130_fu_1168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        i_11_reg_2175 <= i_11_fu_1560_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        i_15_reg_2378 <= i_15_fu_1830_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_5_reg_1934 <= i_5_fu_1194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_6_reg_2002 <= i_6_fu_1309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_8_reg_2044 <= i_8_fu_1382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln129_fu_1188_p2 == 1'd0))) begin
        icmp_ln130_reg_1939 <= icmp_ln130_fu_1200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln61_1_reg_2090 <= icmp_ln61_1_fu_1433_p2;
        icmp_ln61_1_reg_2090_pp1_iter1_reg <= icmp_ln61_1_reg_2090;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln61_2_reg_2221 <= icmp_ln61_2_fu_1611_p2;
        icmp_ln61_2_reg_2221_pp2_iter1_reg <= icmp_ln61_2_reg_2221;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln61_reg_1953 <= icmp_ln61_fu_1210_p2;
        icmp_ln61_reg_1953_pp0_iter1_reg <= icmp_ln61_reg_1953;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln76_1_reg_2071 <= icmp_ln76_1_fu_1417_p2;
        icmp_ln76_reg_2066 <= icmp_ln76_fu_1411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        icmp_ln76_2_reg_2197 <= icmp_ln76_2_fu_1589_p2;
        icmp_ln76_3_reg_2202 <= icmp_ln76_3_fu_1595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_fu_1210_p2 == 1'd0))) begin
        j_0_i_mid2_reg_1962 <= j_0_i_mid2_fu_1234_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_15_reg_2025 <= j_15_fu_1346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        j_17_reg_2156 <= j_17_fu_1532_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        j_19_reg_2287 <= j_19_fu_1710_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        j_20_reg_2318 <= j_20_fu_1760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        j_21_reg_2354 <= j_21_fu_1806_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        j_22_reg_2396 <= j_22_fu_1862_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lr_in_addr_reg_1924[29 : 0] <= zext_ln127_fu_1174_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_1095 <= grp_fu_1058_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_reg_1953 == 1'd0)))) begin
        reg_1106 <= grad_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln61_2_reg_2221_pp2_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln61_1_reg_2090_pp1_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln61_reg_1953_pp0_iter3_reg == 1'd0)))) begin
        reg_1111 <= grp_fu_1069_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_1119 <= fc_hidden_layer3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_1125 <= grp_fu_1078_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_1130 <= grp_fu_1090_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_reg_2090 == 1'd0)))) begin
        reg_1135 <= grad_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state46))) begin
        reg_1140 <= fc_hidden_layer2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state74) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_reg_2221 == 1'd0)))) begin
        reg_1146 <= grad_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state103))) begin
        reg_1151 <= fc_hidden_layer1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((grp_MatrixBackPropagatio_1_fu_1022_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state97)) | (~((m_axi_lr_in_RVALID == 1'b0) | (m_axi_lr_in_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state88)))) begin
        reg_1157 <= m_axi_lr_in_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((~((m_axi_lr_in_RVALID == 1'b0) | (1'b1 == ap_block_state91_on_subcall_done)) & (1'b1 == ap_CS_fsm_state91)) | (~((grp_Conv2d_2_fu_1014_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state89)))) begin
        reg_1163 <= m_axi_lr_in_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln67_1_fu_1505_p2 == 1'd0))) begin
        rgrad_1_addr_reg_2148 <= zext_ln68_1_fu_1517_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln67_fu_1303_p2 == 1'd0))) begin
        rgrad_2_addr_reg_2007 <= zext_ln68_fu_1315_p1;
        shl_ln70_1_reg_2017[6 : 1] <= shl_ln70_1_fu_1328_p3[6 : 1];
        shl_ln_reg_2012[8 : 3] <= shl_ln_fu_1320_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_fu_1433_p2 == 1'd0))) begin
        select_ln63_1_reg_2104 <= select_ln63_1_fu_1465_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_fu_1611_p2 == 1'd0))) begin
        select_ln63_2_reg_2230 <= select_ln63_2_fu_1635_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_fu_1611_p2 == 1'd0))) begin
        select_ln63_3_reg_2235 <= select_ln63_3_fu_1643_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_fu_1433_p2 == 1'd0))) begin
        select_ln63_reg_2099 <= select_ln63_fu_1457_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state119) & (icmp_ln99_2_fu_1824_p2 == 1'd0))) begin
        shl_ln101_1_reg_2388[6 : 1] <= shl_ln101_1_fu_1844_p3[6 : 1];
        shl_ln2_reg_2383[8 : 3] <= shl_ln2_fu_1836_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_fu_1210_p2 == 1'd0))) begin
        shl_ln63_mid2_v_v_reg_1967 <= shl_ln63_mid2_v_v_fu_1242_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        wgrad_1_load_reg_2333 <= wgrad_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        wgrad_2_load_reg_2370 <= wgrad_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        wgrad_3_load_reg_2411 <= wgrad_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln130_fu_1200_p2 == 1'd0) & (icmp_ln129_fu_1188_p2 == 1'd0))) begin
        zext_ln131_reg_1943[3 : 0] <= zext_ln131_fu_1205_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & (icmp_ln75_1_fu_1554_p2 == 1'd0))) begin
        zext_ln76_1_reg_2180[7 : 0] <= zext_ln76_1_fu_1566_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln75_fu_1376_p2 == 1'd0))) begin
        zext_ln76_reg_2049[5 : 0] <= zext_ln76_fu_1388_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln61_fu_1210_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_1_fu_1433_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state37 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state37 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_2_fu_1611_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state65 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state65 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln99_2_fu_1824_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state119)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_1_reg_2090 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_0_i16_phi_fu_738_p4 = select_ln63_1_reg_2104;
    end else begin
        ap_phi_mux_i_0_i16_phi_fu_738_p4 = i_0_i16_reg_734;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln61_2_reg_2221 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_0_i60_phi_fu_829_p4 = select_ln63_3_reg_2235;
    end else begin
        ap_phi_mux_i_0_i60_phi_fu_829_p4 = i_0_i60_reg_825;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln61_reg_1953 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_i_phi_fu_660_p4 = shl_ln63_mid2_v_v_reg_1967;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_660_p4 = i_0_i_reg_656;
    end
end

always @ (*) begin
    if (((icmp_ln99_2_fu_1824_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state119))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        conv_grad_1_address0 = grp_Conv2d_fu_998_kernel_address0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_grad_1_address0 = grp_Conv2d_1_fu_984_out_matrix_address0;
    end else begin
        conv_grad_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        conv_grad_1_ce0 = grp_Conv2d_fu_998_kernel_ce0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_grad_1_ce0 = grp_Conv2d_1_fu_984_out_matrix_ce0;
    end else begin
        conv_grad_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_grad_1_we0 = grp_Conv2d_1_fu_984_out_matrix_we0;
    end else begin
        conv_grad_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_grad_2_address0 = grp_Padding_fu_1038_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        conv_grad_2_address0 = grp_Conv2d_2_fu_1014_kernel_address0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        conv_grad_2_address0 = grp_Conv2d_3_fu_991_out_matrix_address0;
    end else begin
        conv_grad_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_grad_2_ce0 = grp_Padding_fu_1038_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        conv_grad_2_ce0 = grp_Conv2d_2_fu_1014_kernel_ce0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        conv_grad_2_ce0 = grp_Conv2d_3_fu_991_out_matrix_ce0;
    end else begin
        conv_grad_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_grad_2_padding_address0 = grp_Padding_fu_1038_output_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_grad_2_padding_address0 = grp_Conv2d_1_fu_984_input_matrix_address0;
    end else begin
        conv_grad_2_padding_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_grad_2_padding_ce0 = grp_Padding_fu_1038_output_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_grad_2_padding_ce0 = grp_Conv2d_1_fu_984_input_matrix_ce0;
    end else begin
        conv_grad_2_padding_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_grad_2_padding_ce1 = grp_Padding_fu_1038_output_matrix_ce1;
    end else begin
        conv_grad_2_padding_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_grad_2_padding_we0 = grp_Padding_fu_1038_output_matrix_we0;
    end else begin
        conv_grad_2_padding_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_grad_2_padding_we1 = grp_Padding_fu_1038_output_matrix_we1;
    end else begin
        conv_grad_2_padding_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        conv_grad_2_we0 = grp_Conv2d_3_fu_991_out_matrix_we0;
    end else begin
        conv_grad_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        conv_grad_3_padding_address0 = grp_Padding_1_fu_1032_output_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        conv_grad_3_padding_address0 = grp_Conv2d_3_fu_991_input_matrix_address0;
    end else begin
        conv_grad_3_padding_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        conv_grad_3_padding_ce0 = grp_Padding_1_fu_1032_output_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        conv_grad_3_padding_ce0 = grp_Conv2d_3_fu_991_input_matrix_ce0;
    end else begin
        conv_grad_3_padding_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        conv_grad_3_padding_ce1 = grp_Padding_1_fu_1032_output_matrix_ce1;
    end else begin
        conv_grad_3_padding_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        conv_grad_3_padding_we0 = grp_Padding_1_fu_1032_output_matrix_we0;
    end else begin
        conv_grad_3_padding_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        conv_grad_3_padding_we1 = grp_Padding_1_fu_1032_output_matrix_we1;
    end else begin
        conv_grad_3_padding_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        conv_kernel_1_ce0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0;
    end else begin
        conv_kernel_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        conv_kernel_1_we0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0;
    end else begin
        conv_kernel_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        conv_kernel_2_address0 = grp_OverturnKernel_fu_1051_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_kernel_2_address0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0;
    end else begin
        conv_kernel_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        conv_kernel_2_ce0 = grp_OverturnKernel_fu_1051_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_kernel_2_ce0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0;
    end else begin
        conv_kernel_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        conv_kernel_2_we0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0;
    end else begin
        conv_kernel_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        conv_kernel_3_address0 = grp_OverturnKernel_fu_1044_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_kernel_3_address0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0;
    end else begin
        conv_kernel_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        conv_kernel_3_ce0 = grp_OverturnKernel_fu_1044_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_kernel_3_ce0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0;
    end else begin
        conv_kernel_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        conv_kernel_3_we0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0;
    end else begin
        conv_kernel_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state108))) begin
        fc_hidden_layer1_address0 = fc_hidden_layer1_add_2_reg_2323;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        fc_hidden_layer1_address0 = zext_ln70_4_fu_1722_p1;
    end else begin
        fc_hidden_layer1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state108))) begin
        fc_hidden_layer1_ce0 = 1'b1;
    end else begin
        fc_hidden_layer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        fc_hidden_layer1_we0 = 1'b1;
    end else begin
        fc_hidden_layer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        fc_hidden_layer2_address0 = fc_hidden_layer2_add_2_reg_2359;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        fc_hidden_layer2_address0 = zext_ln70_2_fu_1544_p1;
    end else begin
        fc_hidden_layer2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state114))) begin
        fc_hidden_layer2_ce0 = 1'b1;
    end else begin
        fc_hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        fc_hidden_layer2_ce1 = 1'b1;
    end else begin
        fc_hidden_layer2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        fc_hidden_layer2_we1 = 1'b1;
    end else begin
        fc_hidden_layer2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state129))) begin
        fc_hidden_layer3_address0 = fc_hidden_layer3_add_2_reg_2401;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        fc_hidden_layer3_address0 = zext_ln70_fu_1366_p1;
    end else begin
        fc_hidden_layer3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state129))) begin
        fc_hidden_layer3_ce0 = 1'b1;
    end else begin
        fc_hidden_layer3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        fc_hidden_layer3_we0 = 1'b1;
    end else begin
        fc_hidden_layer3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        fc_in_1_0_ce0 = 1'b1;
    end else begin
        fc_in_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fc_in_2_relu1_0_ce0 = 1'b1;
    end else begin
        fc_in_2_relu1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc_in_3_relu2_0_ce0 = 1'b1;
    end else begin
        fc_in_3_relu2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        fc_out_1_0_ce0 = 1'b1;
    end else begin
        fc_out_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        fc_out_2_0_ce0 = 1'b1;
    end else begin
        fc_out_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grad_0_address0 = grad_0_addr_reg_2279;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        grad_0_address0 = grp_Padding_1_fu_1032_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grad_0_address0 = grp_Conv2d_4_fu_1006_kernel_address0;
    end else begin
        grad_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grad_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        grad_0_ce0 = grp_Padding_1_fu_1032_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grad_0_ce0 = grp_Conv2d_4_fu_1006_kernel_ce0;
    end else begin
        grad_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grad_0_we0 = 1'b1;
    end else begin
        grad_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grad_1_address0 = zext_ln70_5_fu_1727_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        grad_1_address0 = zext_ln63_7_fu_1656_p1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grad_1_address0 = grad_1_addr_1_gep_fu_518_p3;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grad_1_address0 = zext_ln76_1_reg_2180;
    end else begin
        grad_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state64) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        grad_1_ce0 = 1'b1;
    end else begin
        grad_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grad_1_d0 = grp_fu_1073_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grad_1_d0 = rgrad_1_q0;
    end else begin
        grad_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln76_1_fu_1605_p2) & (1'b1 == ap_CS_fsm_state56)) | ((1'b1 == ap_CS_fsm_state64) & (1'd0 == and_ln76_1_reg_2212)))) begin
        grad_1_we0 = 1'b1;
    end else begin
        grad_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grad_2_address0 = zext_ln70_3_fu_1549_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        grad_2_address0 = zext_ln63_4_fu_1478_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grad_2_address0 = grad_2_addr_1_gep_fu_415_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grad_2_address0 = zext_ln76_reg_2049;
    end else begin
        grad_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state36) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grad_2_ce0 = 1'b1;
    end else begin
        grad_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grad_2_d0 = grp_fu_1073_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grad_2_d0 = rgrad_2_q0;
    end else begin
        grad_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln76_fu_1427_p2) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == ap_CS_fsm_state36) & (1'd0 == and_ln76_reg_2081)))) begin
        grad_2_we0 = 1'b1;
    end else begin
        grad_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grad_3_address0 = zext_ln70_1_fu_1371_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grad_3_address0 = zext_ln63_fu_1255_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grad_3_address0 = zext_ln131_reg_1943;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grad_3_address0 = grad_3_addr_reg_1914;
    end else begin
        grad_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grad_3_ce0 = 1'b1;
    end else begin
        grad_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grad_3_d0 = probability_result_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grad_3_d0 = reg_1095;
    end else begin
        grad_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln130_fu_1200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln129_fu_1188_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln130_reg_1939 == 1'd0)))) begin
        grad_3_we0 = 1'b1;
    end else begin
        grad_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 = kernel_grad_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 = kernel_grad_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 = kernel_grad_2_q0;
    end else begin
        grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_MatrixBackPropagatio_1_fu_1022_lr = reg_1157;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state93))) begin
        grp_MatrixBackPropagatio_1_fu_1022_lr = reg_1163;
    end else begin
        grp_MatrixBackPropagatio_1_fu_1022_lr = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 = conv_kernel_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 = conv_kernel_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 = conv_kernel_2_q0;
    end else begin
        grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state104))) begin
        grp_fu_1058_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_1058_opcode = 2'd0;
    end else begin
        grp_fu_1058_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        grp_fu_1058_p0 = reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        grp_fu_1058_p0 = fc_hidden_layer2_q0;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        grp_fu_1058_p0 = reg_1151;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_1058_p0 = storemerge240_reg_870;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_1058_p0 = storemerge_reg_779;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_1058_p0 = empty_46_reg_689;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_1058_p0 = probability_result_q0;
    end else begin
        grp_fu_1058_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_1058_p1 = reg_1111;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_1058_p1 = 32'd3212836864;
    end else begin
        grp_fu_1058_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        grp_fu_1069_p0 = wgrad_3_load_reg_2411;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_fu_1069_p0 = wgrad_2_load_reg_2370;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        grp_fu_1069_p0 = wgrad_1_load_reg_2333;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_1069_p0 = reg_1151;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_1069_p0 = fc_in_1_0_load_reg_2256;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_1069_p0 = reg_1140;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_1069_p0 = fc_in_2_relu1_0_load_reg_2125;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_1069_p0 = reg_1119;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_1069_p0 = fc_in_3_relu2_0_load_reg_1989;
    end else begin
        grp_fu_1069_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state101))) begin
        grp_fu_1069_p1 = reg_1157;
    end else if (((1'b1 == ap_CS_fsm_state75) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0)))) begin
        grp_fu_1069_p1 = reg_1146;
    end else if (((1'b1 == ap_CS_fsm_state47) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0)))) begin
        grp_fu_1069_p1 = reg_1135;
    end else if (((1'b1 == ap_CS_fsm_state18) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        grp_fu_1069_p1 = reg_1106;
    end else begin
        grp_fu_1069_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_1078_p0 = rgrad_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_1078_p0 = rgrad_2_q0;
    end else begin
        grp_fu_1078_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_1083_p0 = fc_out_1_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_1083_p0 = fc_out_2_0_q0;
    end else begin
        grp_fu_1083_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        kernel_grad_1_address0 = grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        kernel_grad_1_address0 = grp_Conv2d_fu_998_out_matrix_address0;
    end else begin
        kernel_grad_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        kernel_grad_1_ce0 = grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        kernel_grad_1_ce0 = grp_Conv2d_fu_998_out_matrix_ce0;
    end else begin
        kernel_grad_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        kernel_grad_1_we0 = grp_Conv2d_fu_998_out_matrix_we0;
    end else begin
        kernel_grad_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        kernel_grad_2_address0 = grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        kernel_grad_2_address0 = grp_Conv2d_2_fu_1014_out_matrix_address0;
    end else begin
        kernel_grad_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        kernel_grad_2_ce0 = grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        kernel_grad_2_ce0 = grp_Conv2d_2_fu_1014_out_matrix_ce0;
    end else begin
        kernel_grad_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_2_overtu_address0 = grp_OverturnKernel_fu_1051_output_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        kernel_grad_2_overtu_address0 = grp_Conv2d_1_fu_984_kernel_address0;
    end else begin
        kernel_grad_2_overtu_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_2_overtu_ce0 = grp_OverturnKernel_fu_1051_output_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        kernel_grad_2_overtu_ce0 = grp_Conv2d_1_fu_984_kernel_ce0;
    end else begin
        kernel_grad_2_overtu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_2_overtu_we0 = grp_OverturnKernel_fu_1051_output_matrix_we0;
    end else begin
        kernel_grad_2_overtu_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        kernel_grad_2_we0 = grp_Conv2d_2_fu_1014_out_matrix_we0;
    end else begin
        kernel_grad_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        kernel_grad_3_address0 = grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_3_address0 = grp_Conv2d_4_fu_1006_out_matrix_address0;
    end else begin
        kernel_grad_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        kernel_grad_3_ce0 = grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_3_ce0 = grp_Conv2d_4_fu_1006_out_matrix_ce0;
    end else begin
        kernel_grad_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_3_overtu_address0 = grp_OverturnKernel_fu_1044_output_matrix_address0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        kernel_grad_3_overtu_address0 = grp_Conv2d_3_fu_991_kernel_address0;
    end else begin
        kernel_grad_3_overtu_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_3_overtu_ce0 = grp_OverturnKernel_fu_1044_output_matrix_ce0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        kernel_grad_3_overtu_ce0 = grp_Conv2d_3_fu_991_kernel_ce0;
    end else begin
        kernel_grad_3_overtu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_3_overtu_we0 = grp_OverturnKernel_fu_1044_output_matrix_we0;
    end else begin
        kernel_grad_3_overtu_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_grad_3_we0 = grp_Conv2d_4_fu_1006_out_matrix_we0;
    end else begin
        kernel_grad_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state88) | ((icmp_ln67_2_fu_1683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72)))) begin
        lr_in_blk_n_AR = m_axi_lr_in_ARREADY;
    end else begin
        lr_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88))) begin
        lr_in_blk_n_R = m_axi_lr_in_RVALID;
    end else begin
        lr_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state84) & (m_axi_lr_in_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state82) & (m_axi_lr_in_ARREADY == 1'b1)) | (~((m_axi_lr_in_RVALID == 1'b0) | (m_axi_lr_in_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state88)) | ((1'b0 == ap_block_state72_io) & (icmp_ln67_2_fu_1683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72)))) begin
        m_axi_lr_in_ARVALID = 1'b1;
    end else begin
        m_axi_lr_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((grp_MatrixBackPropagatio_1_fu_1022_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state97)) | (~((m_axi_lr_in_RVALID == 1'b0) | (1'b1 == ap_block_state91_on_subcall_done)) & (1'b1 == ap_CS_fsm_state91)) | (~((grp_Conv2d_2_fu_1014_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state89)) | (~((m_axi_lr_in_RVALID == 1'b0) | (m_axi_lr_in_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state88)))) begin
        m_axi_lr_in_RREADY = 1'b1;
    end else begin
        m_axi_lr_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        probability_result_address0 = zext_ln131_fu_1205_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        probability_result_address0 = zext_ln130_fu_1168_p1;
    end else begin
        probability_result_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        probability_result_ce0 = 1'b1;
    end else begin
        probability_result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        rgrad_1_address0 = zext_ln76_1_reg_2180;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        rgrad_1_address0 = rgrad_1_addr_reg_2148;
    end else begin
        rgrad_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state45))) begin
        rgrad_1_ce0 = 1'b1;
    end else begin
        rgrad_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        rgrad_1_we0 = 1'b1;
    end else begin
        rgrad_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        rgrad_2_address0 = zext_ln76_reg_2049;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        rgrad_2_address0 = rgrad_2_addr_reg_2007;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        rgrad_2_address0 = zext_ln68_fu_1315_p1;
    end else begin
        rgrad_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        rgrad_2_ce0 = 1'b1;
    end else begin
        rgrad_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        rgrad_2_d0 = reg_1095;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        rgrad_2_d0 = 32'd0;
    end else begin
        rgrad_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln67_fu_1303_p2 == 1'd0)))) begin
        rgrad_2_we0 = 1'b1;
    end else begin
        rgrad_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        wgrad_1_address0 = zext_ln101_fu_1772_p1;
    end else if (((ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        wgrad_1_address0 = zext_ln63_8_fu_1673_p1;
    end else begin
        wgrad_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state99) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter5 == 1'b1)))) begin
        wgrad_1_ce0 = 1'b1;
    end else begin
        wgrad_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln61_2_reg_2221_pp2_iter4_reg == 1'd0))) begin
        wgrad_1_we0 = 1'b1;
    end else begin
        wgrad_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        wgrad_2_address0 = zext_ln101_1_fu_1818_p1;
    end else if (((ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        wgrad_2_address0 = zext_ln63_5_fu_1495_p1;
    end else begin
        wgrad_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state110) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
        wgrad_2_ce0 = 1'b1;
    end else begin
        wgrad_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1) & (icmp_ln61_1_reg_2090_pp1_iter4_reg == 1'd0))) begin
        wgrad_2_we0 = 1'b1;
    end else begin
        wgrad_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        wgrad_3_address0 = zext_ln101_2_fu_1882_p1;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        wgrad_3_address0 = zext_ln63_2_fu_1299_p1;
    end else begin
        wgrad_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        wgrad_3_ce0 = 1'b1;
    end else begin
        wgrad_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln61_reg_1953_pp0_iter4_reg == 1'd0))) begin
        wgrad_3_we0 = 1'b1;
    end else begin
        wgrad_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln129_fu_1188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln61_fu_1210_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln61_fu_1210_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln67_fu_1303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln69_fu_1340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln75_fu_1376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'd1 == and_ln76_fu_1427_p2) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln61_1_fu_1433_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln61_1_fu_1433_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln67_1_fu_1505_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((icmp_ln69_1_fu_1526_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state54 : begin
            if (((icmp_ln75_1_fu_1554_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'd1 == and_ln76_1_fu_1605_p2) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln61_2_fu_1611_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln61_2_fu_1611_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b0 == ap_block_state72_io) & (1'b1 == ap_CS_fsm_state72) & (icmp_ln67_2_fu_1683_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else if (((1'b0 == ap_block_state72_io) & (icmp_ln67_2_fu_1683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln69_2_fu_1704_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (m_axi_lr_in_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((1'b0 == ap_block_state83_on_subcall_done) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == ap_CS_fsm_state84) & (m_axi_lr_in_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((1'b1 == ap_CS_fsm_state85) & (grp_Padding_1_fu_1032_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            if (((1'b1 == ap_CS_fsm_state87) & (grp_Conv2d_3_fu_991_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            if ((~((m_axi_lr_in_RVALID == 1'b0) | (m_axi_lr_in_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            if ((~((grp_Conv2d_2_fu_1014_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if ((~((m_axi_lr_in_RVALID == 1'b0) | (1'b1 == ap_block_state91_on_subcall_done)) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            if (((1'b0 == ap_block_state93_on_subcall_done) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (((1'b1 == ap_CS_fsm_state95) & (grp_Conv2d_fu_998_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if ((~((grp_MatrixBackPropagatio_1_fu_1022_ap_done == 1'b0) | (m_axi_lr_in_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            if (((icmp_ln99_fu_1738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state99 : begin
            if (((icmp_ln100_fu_1754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state109 : begin
            if (((icmp_ln99_1_fu_1784_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end
        end
        ap_ST_fsm_state110 : begin
            if (((icmp_ln100_1_fu_1800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state119 : begin
            if (((icmp_ln99_2_fu_1824_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        ap_ST_fsm_state120 : begin
            if (((icmp_ln100_2_fu_1856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state120))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_1_fu_1812_p2 = (phi_mul238_reg_939 + j_0_i105_cast_fu_1796_p1);

assign add_ln101_2_fu_1868_p2 = (shl_ln101_1_reg_2388 + j_0_i122_cast_fu_1852_p1);

assign add_ln101_3_fu_1877_p2 = (zext_ln101_3_fu_1873_p1 + shl_ln2_reg_2383);

assign add_ln101_4_fu_1732_p2 = (phi_mul236_reg_905 + 17'd180);

assign add_ln101_5_fu_1778_p2 = (phi_mul238_reg_939 + 13'd45);

assign add_ln101_fu_1766_p2 = (phi_mul236_reg_905 + j_0_i93_cast_fu_1750_p1);

assign add_ln61_2_fu_1439_p2 = (indvar_flatten13_reg_723 + 13'd1);

assign add_ln61_4_fu_1617_p2 = (indvar_flatten26_reg_814 + 17'd1);

assign add_ln61_fu_1216_p2 = (indvar_flatten_reg_645 + 9'd1);

assign add_ln63_1_fu_1293_p2 = (zext_ln63_1_fu_1289_p1 + shl_ln63_mid2_fu_1266_p3);

assign add_ln63_fu_1283_p2 = (shl_ln63_1_mid2_fu_1273_p3 + j_0_i_cast16_mid2_ca_fu_1280_p1);

assign add_ln70_1_fu_1361_p2 = (zext_ln70_6_fu_1357_p1 + shl_ln_reg_2012);

assign add_ln70_2_fu_1538_p2 = (j_0_i36_cast9_fu_1522_p1 + phi_mul_reg_767);

assign add_ln70_3_fu_1716_p2 = (j_0_i79_cast5_fu_1700_p1 + phi_mul234_reg_858);

assign add_ln70_4_fu_1499_p2 = (phi_mul_reg_767 + 13'd45);

assign add_ln70_5_fu_1677_p2 = (phi_mul234_reg_858 + 17'd180);

assign add_ln70_fu_1352_p2 = (shl_ln70_1_reg_2017 + j_0_i2_cast13_fu_1336_p1);

assign and_ln76_1_fu_1605_p2 = (or_ln76_1_fu_1601_p2 & grp_fu_1083_p2);

assign and_ln76_fu_1427_p2 = (or_ln76_fu_1423_p2 & grp_fu_1083_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd83];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_io = ((icmp_ln67_2_fu_1683_p2 == 1'd1) & (m_axi_lr_in_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state83_on_subcall_done = ((grp_OverturnKernel_fu_1051_ap_done == 1'b0) | (grp_OverturnKernel_fu_1044_ap_done == 1'b0) | (grp_Conv2d_4_fu_1006_ap_done == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state91_on_subcall_done = ((grp_Padding_fu_1038_ap_done == 1'b0) | (grp_MatrixBackPropagatio_1_fu_1022_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state93_on_subcall_done = ((grp_MatrixBackPropagatio_1_fu_1022_ap_done == 1'b0) | (grp_Conv2d_1_fu_984_ap_done == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitcast_ln76_1_fu_1571_p1 = fc_out_1_0_q0;

assign bitcast_ln76_fu_1393_p1 = fc_out_2_0_q0;

assign conv_kernel_1_address0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0;

assign conv_kernel_1_d0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0;

assign conv_kernel_2_d0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0;

assign conv_kernel_3_d0 = grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0;

assign conv_out_1_address0 = grp_Conv2d_2_fu_1014_conv_out_1_address0;

assign conv_out_1_ce0 = grp_Conv2d_2_fu_1014_conv_out_1_ce0;

assign conv_out_2_address0 = grp_Conv2d_4_fu_1006_conv_out_2_address0;

assign conv_out_2_ce0 = grp_Conv2d_4_fu_1006_conv_out_2_ce0;

assign fc_hidden_layer1_d0 = reg_1095;

assign fc_hidden_layer2_address1 = fc_hidden_layer2_add_2_reg_2359;

assign fc_hidden_layer2_d1 = grp_fu_1058_p2;

assign fc_hidden_layer3_d0 = reg_1095;

assign fc_in_1_0_address0 = zext_ln63_10_fu_1651_p1;

assign fc_in_2_relu1_0_address0 = zext_ln63_6_fu_1473_p1;

assign fc_in_3_relu2_0_address0 = fc_in_3_relu2_0_load_2_fu_1250_p1;

assign fc_in_3_relu2_0_load_2_fu_1250_p1 = shl_ln63_mid2_v_v_fu_1242_p3;

assign fc_out_1_0_address0 = zext_ln76_1_fu_1566_p1;

assign fc_out_2_0_address0 = zext_ln76_fu_1388_p1;

assign grad_1_addr_1_gep_fu_518_p3 = zext_ln76_1_reg_2180;

assign grad_2_addr_1_gep_fu_415_p3 = zext_ln76_reg_2049;

assign grp_Conv2d_1_fu_984_ap_start = grp_Conv2d_1_fu_984_ap_start_reg;

assign grp_Conv2d_2_fu_1014_ap_start = grp_Conv2d_2_fu_1014_ap_start_reg;

assign grp_Conv2d_3_fu_991_ap_start = grp_Conv2d_3_fu_991_ap_start_reg;

assign grp_Conv2d_4_fu_1006_ap_start = grp_Conv2d_4_fu_1006_ap_start_reg;

assign grp_Conv2d_fu_998_ap_start = grp_Conv2d_fu_998_ap_start_reg;

assign grp_MatrixBackPropagatio_1_fu_1022_ap_start = grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg;

assign grp_OverturnKernel_fu_1044_ap_start = grp_OverturnKernel_fu_1044_ap_start_reg;

assign grp_OverturnKernel_fu_1051_ap_start = grp_OverturnKernel_fu_1051_ap_start_reg;

assign grp_Padding_1_fu_1032_ap_start = grp_Padding_1_fu_1032_ap_start_reg;

assign grp_Padding_fu_1038_ap_start = grp_Padding_fu_1038_ap_start_reg;

assign grp_fu_1888_p0 = grp_fu_1888_p00;

assign grp_fu_1888_p00 = select_ln63_1_reg_2104;

assign grp_fu_1888_p1 = 13'd45;

assign grp_fu_1888_p2 = grp_fu_1888_p20;

assign grp_fu_1888_p20 = select_ln63_reg_2099;

assign grp_fu_1896_p0 = grp_fu_1896_p00;

assign grp_fu_1896_p00 = select_ln63_3_reg_2235;

assign grp_fu_1896_p1 = 17'd180;

assign grp_fu_1896_p2 = grp_fu_1896_p20;

assign grp_fu_1896_p20 = select_ln63_2_reg_2230;

assign i_10_fu_1623_p2 = (ap_phi_mux_i_0_i60_phi_fu_829_p4 + 10'd1);

assign i_11_fu_1560_p2 = (i_0_i49_reg_803 + 8'd1);

assign i_12_fu_1689_p2 = (i_0_i74_reg_847 + 10'd1);

assign i_13_fu_1744_p2 = (i_0_i92_reg_894 + 10'd1);

assign i_14_fu_1790_p2 = (i_0_i101_reg_928 + 8'd1);

assign i_15_fu_1830_p2 = (i_0_i118_reg_962 + 6'd1);

assign i_5_fu_1194_p2 = (i_0_reg_634 + 4'd1);

assign i_6_fu_1309_p2 = (i_0_i1_reg_678 + 6'd1);

assign i_7_fu_1445_p2 = (ap_phi_mux_i_0_i16_phi_fu_738_p4 + 8'd1);

assign i_8_fu_1382_p2 = (i_0_i8_reg_712 + 6'd1);

assign i_9_fu_1511_p2 = (i_0_i31_reg_756 + 8'd1);

assign i_fu_1222_p2 = (ap_phi_mux_i_0_i_phi_fu_660_p4 + 6'd1);

assign icmp_ln100_1_fu_1800_p2 = ((j_0_i105_reg_951 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln100_2_fu_1856_p2 = ((j_0_i122_reg_973 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln100_fu_1754_p2 = ((j_0_i93_reg_917 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_1188_p2 = ((i_0_reg_634 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_1200_p2 = ((zext_ln129_fu_1184_p1 == label_r) ? 1'b1 : 1'b0);

assign icmp_ln61_1_fu_1433_p2 = ((indvar_flatten13_reg_723 == 13'd8100) ? 1'b1 : 1'b0);

assign icmp_ln61_2_fu_1611_p2 = ((indvar_flatten26_reg_814 == 17'd103680) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_1210_p2 = ((indvar_flatten_reg_645 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln62_1_fu_1451_p2 = ((j_0_i21_reg_745 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln62_2_fu_1629_p2 = ((j_0_i64_reg_836 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_1228_p2 = ((j_0_i_reg_667 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_1505_p2 = ((i_0_i31_reg_756 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln67_2_fu_1683_p2 = ((i_0_i74_reg_847 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_1303_p2 = ((i_0_i1_reg_678 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_1526_p2 = ((j_0_i36_reg_792 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln69_2_fu_1704_p2 = ((j_0_i79_reg_883 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_1340_p2 = ((j_0_i2_reg_701 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln75_1_fu_1554_p2 = ((i_0_i49_reg_803 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_1376_p2 = ((i_0_i8_reg_712 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_1417_p2 = ((trunc_ln76_fu_1407_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln76_2_fu_1589_p2 = ((tmp_15_fu_1575_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln76_3_fu_1595_p2 = ((trunc_ln76_1_fu_1585_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_1411_p2 = ((tmp_s_fu_1397_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln99_1_fu_1784_p2 = ((i_0_i101_reg_928 == 8'd180) ? 1'b1 : 1'b0);

assign icmp_ln99_2_fu_1824_p2 = ((i_0_i118_reg_962 == 6'd45) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_1738_p2 = ((i_0_i92_reg_894 == 10'd576) ? 1'b1 : 1'b0);

assign j_0_i105_cast_fu_1796_p1 = j_0_i105_reg_951;

assign j_0_i122_cast_fu_1852_p1 = j_0_i122_reg_973;

assign j_0_i2_cast13_fu_1336_p1 = j_0_i2_reg_701;

assign j_0_i36_cast9_fu_1522_p1 = j_0_i36_reg_792;

assign j_0_i79_cast5_fu_1700_p1 = j_0_i79_reg_883;

assign j_0_i93_cast_fu_1750_p1 = j_0_i93_reg_917;

assign j_0_i_cast16_mid2_ca_fu_1280_p1 = j_0_i_mid2_reg_1962;

assign j_0_i_mid2_fu_1234_p3 = ((icmp_ln62_fu_1228_p2[0:0] === 1'b1) ? 4'd0 : j_0_i_reg_667);

assign j_15_fu_1346_p2 = (j_0_i2_reg_701 + 4'd1);

assign j_16_fu_1483_p2 = (select_ln63_fu_1457_p3 + 6'd1);

assign j_17_fu_1532_p2 = (j_0_i36_reg_792 + 6'd1);

assign j_18_fu_1661_p2 = (select_ln63_2_fu_1635_p3 + 8'd1);

assign j_19_fu_1710_p2 = (j_0_i79_reg_883 + 8'd1);

assign j_20_fu_1760_p2 = (j_0_i93_reg_917 + 8'd1);

assign j_21_fu_1806_p2 = (j_0_i105_reg_951 + 6'd1);

assign j_22_fu_1862_p2 = (j_0_i122_reg_973 + 4'd1);

assign j_fu_1260_p2 = (j_0_i_mid2_fu_1234_p3 + 4'd1);

assign m_axi_lr_in_ARADDR = lr_in_addr_reg_1924;

assign m_axi_lr_in_ARBURST = 2'd0;

assign m_axi_lr_in_ARCACHE = 4'd0;

assign m_axi_lr_in_ARID = 1'd0;

assign m_axi_lr_in_ARLEN = 32'd1;

assign m_axi_lr_in_ARLOCK = 2'd0;

assign m_axi_lr_in_ARPROT = 3'd0;

assign m_axi_lr_in_ARQOS = 4'd0;

assign m_axi_lr_in_ARREGION = 4'd0;

assign m_axi_lr_in_ARSIZE = 3'd0;

assign m_axi_lr_in_ARUSER = 1'd0;

assign m_axi_lr_in_AWADDR = 32'd0;

assign m_axi_lr_in_AWBURST = 2'd0;

assign m_axi_lr_in_AWCACHE = 4'd0;

assign m_axi_lr_in_AWID = 1'd0;

assign m_axi_lr_in_AWLEN = 32'd0;

assign m_axi_lr_in_AWLOCK = 2'd0;

assign m_axi_lr_in_AWPROT = 3'd0;

assign m_axi_lr_in_AWQOS = 4'd0;

assign m_axi_lr_in_AWREGION = 4'd0;

assign m_axi_lr_in_AWSIZE = 3'd0;

assign m_axi_lr_in_AWUSER = 1'd0;

assign m_axi_lr_in_AWVALID = 1'b0;

assign m_axi_lr_in_BREADY = 1'b0;

assign m_axi_lr_in_WDATA = 32'd0;

assign m_axi_lr_in_WID = 1'd0;

assign m_axi_lr_in_WLAST = 1'b0;

assign m_axi_lr_in_WSTRB = 4'd0;

assign m_axi_lr_in_WUSER = 1'd0;

assign m_axi_lr_in_WVALID = 1'b0;

assign mnist_data_address0 = grp_Conv2d_fu_998_input_matrix_address0;

assign mnist_data_ce0 = grp_Conv2d_fu_998_input_matrix_ce0;

assign or_ln76_1_fu_1601_p2 = (icmp_ln76_3_reg_2202 | icmp_ln76_2_reg_2197);

assign or_ln76_fu_1423_p2 = (icmp_ln76_reg_2066 | icmp_ln76_1_reg_2071);

assign select_ln63_1_fu_1465_p3 = ((icmp_ln62_1_fu_1451_p2[0:0] === 1'b1) ? i_7_fu_1445_p2 : ap_phi_mux_i_0_i16_phi_fu_738_p4);

assign select_ln63_2_fu_1635_p3 = ((icmp_ln62_2_fu_1629_p2[0:0] === 1'b1) ? 8'd0 : j_0_i64_reg_836);

assign select_ln63_3_fu_1643_p3 = ((icmp_ln62_2_fu_1629_p2[0:0] === 1'b1) ? i_10_fu_1623_p2 : ap_phi_mux_i_0_i60_phi_fu_829_p4);

assign select_ln63_fu_1457_p3 = ((icmp_ln62_1_fu_1451_p2[0:0] === 1'b1) ? 6'd0 : j_0_i21_reg_745);

assign shl_ln101_1_fu_1844_p3 = {{i_0_i118_reg_962}, {1'd0}};

assign shl_ln2_fu_1836_p3 = {{i_0_i118_reg_962}, {3'd0}};

assign shl_ln63_1_mid2_fu_1273_p3 = {{shl_ln63_mid2_v_v_reg_1967}, {1'd0}};

assign shl_ln63_mid2_fu_1266_p3 = {{shl_ln63_mid2_v_v_reg_1967}, {3'd0}};

assign shl_ln63_mid2_v_v_fu_1242_p3 = ((icmp_ln62_fu_1228_p2[0:0] === 1'b1) ? i_fu_1222_p2 : ap_phi_mux_i_0_i_phi_fu_660_p4);

assign shl_ln70_1_fu_1328_p3 = {{i_0_i1_reg_678}, {1'd0}};

assign shl_ln_fu_1320_p3 = {{i_0_i1_reg_678}, {3'd0}};

assign tmp_15_fu_1575_p4 = {{bitcast_ln76_1_fu_1571_p1[30:23]}};

assign tmp_s_fu_1397_p4 = {{bitcast_ln76_fu_1393_p1[30:23]}};

assign trunc_ln76_1_fu_1585_p1 = bitcast_ln76_1_fu_1571_p1[22:0];

assign trunc_ln76_fu_1407_p1 = bitcast_ln76_fu_1393_p1[22:0];

assign zext_ln101_1_fu_1818_p1 = add_ln101_1_fu_1812_p2;

assign zext_ln101_2_fu_1882_p1 = add_ln101_3_fu_1877_p2;

assign zext_ln101_3_fu_1873_p1 = add_ln101_2_fu_1868_p2;

assign zext_ln101_fu_1772_p1 = add_ln101_fu_1766_p2;

assign zext_ln127_fu_1174_p1 = lr_in_offset;

assign zext_ln129_fu_1184_p1 = i_0_reg_634;

assign zext_ln130_fu_1168_p1 = label_r;

assign zext_ln131_fu_1205_p1 = i_0_reg_634;

assign zext_ln63_10_fu_1651_p1 = select_ln63_3_fu_1643_p3;

assign zext_ln63_1_fu_1289_p1 = add_ln63_fu_1283_p2;

assign zext_ln63_2_fu_1299_p1 = add_ln63_1_reg_1994_pp0_iter4_reg;

assign zext_ln63_4_fu_1478_p1 = select_ln63_fu_1457_p3;

assign zext_ln63_5_fu_1495_p1 = add_ln63_2_reg_2130_pp1_iter4_reg;

assign zext_ln63_6_fu_1473_p1 = select_ln63_1_fu_1465_p3;

assign zext_ln63_7_fu_1656_p1 = select_ln63_2_fu_1635_p3;

assign zext_ln63_8_fu_1673_p1 = add_ln63_3_reg_2261_pp2_iter4_reg;

assign zext_ln63_fu_1255_p1 = j_0_i_mid2_fu_1234_p3;

assign zext_ln68_1_fu_1517_p1 = i_0_i31_reg_756;

assign zext_ln68_2_fu_1695_p1 = i_0_i74_reg_847;

assign zext_ln68_fu_1315_p1 = i_0_i1_reg_678;

assign zext_ln70_1_fu_1371_p1 = j_0_i2_reg_701;

assign zext_ln70_2_fu_1544_p1 = add_ln70_2_fu_1538_p2;

assign zext_ln70_3_fu_1549_p1 = j_0_i36_reg_792;

assign zext_ln70_4_fu_1722_p1 = add_ln70_3_fu_1716_p2;

assign zext_ln70_5_fu_1727_p1 = j_0_i79_reg_883;

assign zext_ln70_6_fu_1357_p1 = add_ln70_fu_1352_p2;

assign zext_ln70_fu_1366_p1 = add_ln70_1_fu_1361_p2;

assign zext_ln76_1_fu_1566_p1 = i_0_i49_reg_803;

assign zext_ln76_fu_1388_p1 = i_0_i8_reg_712;

always @ (posedge ap_clk) begin
    lr_in_addr_reg_1924[31:30] <= 2'b00;
    zext_ln131_reg_1943[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_2012[2:0] <= 3'b000;
    shl_ln70_1_reg_2017[0] <= 1'b0;
    zext_ln76_reg_2049[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln76_1_reg_2180[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    shl_ln2_reg_2383[2:0] <= 3'b000;
    shl_ln101_1_reg_2388[0] <= 1'b0;
end

endmodule //backward
