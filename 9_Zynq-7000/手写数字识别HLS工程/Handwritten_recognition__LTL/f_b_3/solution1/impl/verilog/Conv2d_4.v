// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2d_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        out_matrix_address0,
        out_matrix_ce0,
        out_matrix_we0,
        out_matrix_d0,
        conv_out_2_address0,
        conv_out_2_ce0,
        conv_out_2_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [3:0] out_matrix_address0;
output   out_matrix_ce0;
output   out_matrix_we0;
output  [31:0] out_matrix_d0;
output  [9:0] conv_out_2_address0;
output   conv_out_2_ce0;
input  [31:0] conv_out_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg kernel_ce0;
reg[3:0] out_matrix_address0;
reg out_matrix_ce0;
reg out_matrix_we0;
reg[31:0] out_matrix_d0;
reg conv_out_2_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten_reg_146;
reg   [2:0] col_0_reg_157;
reg   [31:0] empty_reg_166;
reg   [2:0] row_0_reg_178;
wire   [0:0] icmp_ln31_fu_219_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln31_fu_225_p2;
reg   [3:0] add_ln31_reg_508;
wire   [2:0] indvars_iv_mid2_fu_243_p3;
reg   [2:0] indvars_iv_mid2_reg_513;
wire   [1:0] row_mid2_fu_251_p3;
reg   [1:0] row_mid2_reg_519;
wire   [1:0] col_cast7_mid2_v_fu_259_p3;
reg   [1:0] col_cast7_mid2_v_reg_524;
wire   [2:0] col_cast7_mid2_fu_267_p1;
wire   [3:0] col_cast_mid2_fu_275_p1;
reg   [3:0] col_cast_mid2_reg_534;
wire   [2:0] row_cast4_fu_309_p1;
reg   [2:0] row_cast4_reg_540;
wire   [8:0] row_cast_fu_313_p1;
reg   [8:0] row_cast_reg_546;
reg   [3:0] out_matrix_addr_reg_551;
wire   [0:0] icmp_ln34_fu_367_p2;
reg   [0:0] icmp_ln34_reg_556;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln34_reg_556_pp0_iter1_reg;
wire   [3:0] add_ln34_fu_373_p2;
reg   [3:0] add_ln34_reg_560;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln36_fu_390_p3;
reg   [2:0] select_ln36_reg_565;
wire   [2:0] select_ln36_1_fu_401_p3;
reg   [2:0] select_ln36_1_reg_570;
reg   [31:0] conv_out_2_load_reg_585;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] kernel_load_reg_590;
wire   [2:0] row_4_fu_480_p2;
reg   [2:0] row_4_reg_595;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_193_p2;
reg   [31:0] tmp_reg_600;
wire   [31:0] grp_fu_187_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [1:0] j_fu_485_p2;
wire    ap_CS_fsm_state12;
wire   [2:0] add_ln32_fu_490_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [3:0] indvar_flatten7_reg_102;
reg   [1:0] col_reg_113;
reg   [2:0] indvars_iv_reg_124;
reg   [1:0] row_reg_135;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_150_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_col_0_phi_fu_160_p4;
reg   [2:0] ap_phi_mux_row_0_phi_fu_181_p4;
wire   [63:0] zext_ln33_fu_327_p1;
wire   [63:0] zext_ln36_fu_465_p1;
wire  signed [63:0] sext_ln36_1_fu_475_p1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [3:0] shl_ln_fu_201_p3;
wire   [4:0] zext_ln33_6_fu_209_p1;
wire   [4:0] col_cast6_fu_197_p1;
wire   [0:0] icmp_ln32_fu_237_p2;
wire   [1:0] i_fu_231_p2;
wire   [3:0] shl_ln33_mid1_fu_279_p3;
wire   [4:0] zext_ln33_13_fu_287_p1;
wire   [4:0] col_cast6_mid1_fu_271_p1;
wire   [4:0] sub_ln33_3_fu_291_p2;
wire   [4:0] sub_ln33_fu_213_p2;
wire   [4:0] sub_ln33_mid2_fu_297_p3;
wire   [4:0] row_cast5_fu_305_p1;
wire   [4:0] add_ln33_fu_317_p2;
wire  signed [31:0] sext_ln33_fu_323_p1;
wire   [3:0] col_0_cast_fu_332_p1;
wire   [3:0] sub_ln36_fu_336_p2;
wire   [6:0] shl_ln36_5_fu_349_p3;
wire   [8:0] shl_ln6_fu_341_p3;
wire  signed [8:0] sext_ln36_fu_357_p1;
wire   [0:0] icmp_ln35_fu_385_p2;
wire   [2:0] col_6_fu_379_p2;
wire   [3:0] col_0_cast_mid1_fu_397_p1;
wire   [3:0] sub_ln36_11_fu_413_p2;
wire   [6:0] shl_ln36_5_mid1_fu_426_p3;
wire   [8:0] shl_ln36_mid1_fu_418_p3;
wire  signed [8:0] sext_ln36_2_fu_434_p1;
wire   [8:0] sub_ln36_12_fu_438_p2;
wire   [8:0] sub_ln36_7_fu_361_p2;
wire   [8:0] select_ln36_2_fu_444_p3;
wire   [6:0] grp_fu_495_p3;
wire   [8:0] zext_ln36_2_fu_457_p1;
wire   [8:0] sub_ln36_13_fu_452_p2;
wire   [8:0] add_ln36_2_fu_469_p2;
wire    ap_block_pp0_stage3;
wire   [2:0] grp_fu_495_p0;
wire   [5:0] grp_fu_495_p1;
wire   [2:0] grp_fu_495_p2;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [6:0] grp_fu_495_p00;
wire   [6:0] grp_fu_495_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_166),
    .din1(tmp_reg_600),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_2_load_reg_585),
    .din1(kernel_load_reg_590),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

forw_back_mac_mullbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 3 ),
    .dout_WIDTH( 7 ))
forw_back_mac_mullbW_U55(
    .din0(grp_fu_495_p0),
    .din1(grp_fu_495_p1),
    .din2(grp_fu_495_p2),
    .dout(grp_fu_495_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_556 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        col_0_reg_157 <= select_ln36_1_reg_570;
    end else if (((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_reg_157 <= col_cast7_mid2_fu_267_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        col_reg_113 <= col_cast7_mid2_v_reg_524;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_reg_113 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_556_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_reg_166 <= grp_fu_187_p2;
    end else if (((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_166 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        indvar_flatten7_reg_102 <= add_ln31_reg_508;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten7_reg_102 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_556 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_146 <= add_ln34_reg_560;
    end else if (((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_146 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        indvars_iv_reg_124 <= add_ln32_fu_490_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_124 <= 3'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_556 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        row_0_reg_178 <= row_4_reg_595;
    end else if (((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_178 <= row_cast4_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        row_reg_135 <= j_fu_485_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_reg_135 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_508 <= add_ln31_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln34_reg_560 <= add_ln34_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_cast7_mid2_v_reg_524 <= col_cast7_mid2_v_fu_259_p3;
        col_cast_mid2_reg_534[1 : 0] <= col_cast_mid2_fu_275_p1[1 : 0];
        indvars_iv_mid2_reg_513 <= indvars_iv_mid2_fu_243_p3;
        out_matrix_addr_reg_551 <= zext_ln33_fu_327_p1;
        row_cast4_reg_540[1 : 0] <= row_cast4_fu_309_p1[1 : 0];
        row_cast_reg_546[1 : 0] <= row_cast_fu_313_p1[1 : 0];
        row_mid2_reg_519 <= row_mid2_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_556 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_2_load_reg_585 <= conv_out_2_q0;
        kernel_load_reg_590 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln34_reg_556 <= icmp_ln34_fu_367_p2;
        icmp_ln34_reg_556_pp0_iter1_reg <= icmp_ln34_reg_556;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_556 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        row_4_reg_595 <= row_4_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln36_1_reg_570 <= select_ln36_1_fu_401_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln36_reg_565 <= select_ln36_fu_390_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_556 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_600 <= grp_fu_193_p2;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_367_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_556 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_0_phi_fu_160_p4 = select_ln36_1_reg_570;
    end else begin
        ap_phi_mux_col_0_phi_fu_160_p4 = col_0_reg_157;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_556 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_150_p4 = add_ln34_reg_560;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_150_p4 = indvar_flatten_reg_146;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_556 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_row_0_phi_fu_181_p4 = row_4_reg_595;
    end else begin
        ap_phi_mux_row_0_phi_fu_181_p4 = row_0_reg_178;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_out_2_ce0 = 1'b1;
    end else begin
        conv_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_matrix_address0 = out_matrix_addr_reg_551;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_address0 = zext_ln33_fu_327_p1;
    end else begin
        out_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        out_matrix_ce0 = 1'b1;
    end else begin
        out_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_matrix_d0 = grp_fu_187_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_d0 = 32'd0;
    end else begin
        out_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_556_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln31_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_matrix_we0 = 1'b1;
    end else begin
        out_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln34_fu_367_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln34_fu_367_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_225_p2 = (indvar_flatten7_reg_102 + 4'd1);

assign add_ln32_fu_490_p2 = (indvars_iv_mid2_reg_513 + 3'd1);

assign add_ln33_fu_317_p2 = (sub_ln33_mid2_fu_297_p3 + row_cast5_fu_305_p1);

assign add_ln34_fu_373_p2 = (ap_phi_mux_indvar_flatten_phi_fu_150_p4 + 4'd1);

assign add_ln36_2_fu_469_p2 = (zext_ln36_2_fu_457_p1 + sub_ln36_13_fu_452_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_0_cast_fu_332_p1 = ap_phi_mux_col_0_phi_fu_160_p4;

assign col_0_cast_mid1_fu_397_p1 = col_6_fu_379_p2;

assign col_6_fu_379_p2 = (ap_phi_mux_col_0_phi_fu_160_p4 + 3'd1);

assign col_cast6_fu_197_p1 = col_reg_113;

assign col_cast6_mid1_fu_271_p1 = i_fu_231_p2;

assign col_cast7_mid2_fu_267_p1 = col_cast7_mid2_v_fu_259_p3;

assign col_cast7_mid2_v_fu_259_p3 = ((icmp_ln32_fu_237_p2[0:0] === 1'b1) ? i_fu_231_p2 : col_reg_113);

assign col_cast_mid2_fu_275_p1 = col_cast7_mid2_v_fu_259_p3;

assign conv_out_2_address0 = zext_ln36_fu_465_p1;

assign grp_fu_495_p0 = grp_fu_495_p00;

assign grp_fu_495_p00 = select_ln36_1_fu_401_p3;

assign grp_fu_495_p1 = 7'd26;

assign grp_fu_495_p2 = grp_fu_495_p20;

assign grp_fu_495_p20 = select_ln36_fu_390_p3;

assign i_fu_231_p2 = (col_reg_113 + 2'd1);

assign icmp_ln31_fu_219_p2 = ((indvar_flatten7_reg_102 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_237_p2 = ((indvars_iv_reg_124 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_367_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_150_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_385_p2 = ((ap_phi_mux_row_0_phi_fu_181_p4 == indvars_iv_mid2_reg_513) ? 1'b1 : 1'b0);

assign indvars_iv_mid2_fu_243_p3 = ((icmp_ln32_fu_237_p2[0:0] === 1'b1) ? 3'd3 : indvars_iv_reg_124);

assign j_fu_485_p2 = (row_mid2_reg_519 + 2'd1);

assign kernel_address0 = sext_ln36_1_fu_475_p1;

assign row_4_fu_480_p2 = (select_ln36_reg_565 + 3'd1);

assign row_cast4_fu_309_p1 = row_mid2_fu_251_p3;

assign row_cast5_fu_305_p1 = row_mid2_fu_251_p3;

assign row_cast_fu_313_p1 = row_mid2_fu_251_p3;

assign row_mid2_fu_251_p3 = ((icmp_ln32_fu_237_p2[0:0] === 1'b1) ? 2'd0 : row_reg_135);

assign select_ln36_1_fu_401_p3 = ((icmp_ln35_fu_385_p2[0:0] === 1'b1) ? col_6_fu_379_p2 : ap_phi_mux_col_0_phi_fu_160_p4);

assign select_ln36_2_fu_444_p3 = ((icmp_ln35_fu_385_p2[0:0] === 1'b1) ? sub_ln36_12_fu_438_p2 : sub_ln36_7_fu_361_p2);

assign select_ln36_fu_390_p3 = ((icmp_ln35_fu_385_p2[0:0] === 1'b1) ? row_cast4_reg_540 : ap_phi_mux_row_0_phi_fu_181_p4);

assign sext_ln33_fu_323_p1 = $signed(add_ln33_fu_317_p2);

assign sext_ln36_1_fu_475_p1 = $signed(add_ln36_2_fu_469_p2);

assign sext_ln36_2_fu_434_p1 = $signed(shl_ln36_5_mid1_fu_426_p3);

assign sext_ln36_fu_357_p1 = $signed(shl_ln36_5_fu_349_p3);

assign shl_ln33_mid1_fu_279_p3 = {{i_fu_231_p2}, {2'd0}};

assign shl_ln36_5_fu_349_p3 = {{sub_ln36_fu_336_p2}, {3'd0}};

assign shl_ln36_5_mid1_fu_426_p3 = {{sub_ln36_11_fu_413_p2}, {3'd0}};

assign shl_ln36_mid1_fu_418_p3 = {{sub_ln36_11_fu_413_p2}, {5'd0}};

assign shl_ln6_fu_341_p3 = {{sub_ln36_fu_336_p2}, {5'd0}};

assign shl_ln_fu_201_p3 = {{col_reg_113}, {2'd0}};

assign sub_ln33_3_fu_291_p2 = (zext_ln33_13_fu_287_p1 - col_cast6_mid1_fu_271_p1);

assign sub_ln33_fu_213_p2 = (zext_ln33_6_fu_209_p1 - col_cast6_fu_197_p1);

assign sub_ln33_mid2_fu_297_p3 = ((icmp_ln32_fu_237_p2[0:0] === 1'b1) ? sub_ln33_3_fu_291_p2 : sub_ln33_fu_213_p2);

assign sub_ln36_11_fu_413_p2 = (col_0_cast_mid1_fu_397_p1 - col_cast_mid2_reg_534);

assign sub_ln36_12_fu_438_p2 = ($signed(shl_ln36_mid1_fu_418_p3) - $signed(sext_ln36_2_fu_434_p1));

assign sub_ln36_13_fu_452_p2 = (select_ln36_2_fu_444_p3 - row_cast_reg_546);

assign sub_ln36_7_fu_361_p2 = ($signed(shl_ln6_fu_341_p3) - $signed(sext_ln36_fu_357_p1));

assign sub_ln36_fu_336_p2 = (col_0_cast_fu_332_p1 - col_cast_mid2_reg_534);

assign zext_ln33_13_fu_287_p1 = shl_ln33_mid1_fu_279_p3;

assign zext_ln33_6_fu_209_p1 = shl_ln_fu_201_p3;

assign zext_ln33_fu_327_p1 = $unsigned(sext_ln33_fu_323_p1);

assign zext_ln36_2_fu_457_p1 = select_ln36_fu_390_p3;

assign zext_ln36_fu_465_p1 = grp_fu_495_p3;

always @ (posedge ap_clk) begin
    col_cast_mid2_reg_534[3:2] <= 2'b00;
    row_cast4_reg_540[2] <= 1'b0;
    row_cast_reg_546[8:2] <= 7'b0000000;
end

endmodule //Conv2d_4
