// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Padding_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_matrix_address0,
        input_matrix_ce0,
        input_matrix_q0,
        output_matrix_address0,
        output_matrix_ce0,
        output_matrix_we0,
        output_matrix_d0,
        output_matrix_address1,
        output_matrix_ce1,
        output_matrix_we1,
        output_matrix_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_matrix_address0;
output   input_matrix_ce0;
input  [31:0] input_matrix_q0;
output  [9:0] output_matrix_address0;
output   output_matrix_ce0;
output   output_matrix_we0;
output  [31:0] output_matrix_d0;
output  [9:0] output_matrix_address1;
output   output_matrix_ce1;
output   output_matrix_we1;
output  [31:0] output_matrix_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_matrix_ce0;
reg output_matrix_ce0;
reg output_matrix_we0;
reg output_matrix_ce1;
reg output_matrix_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_108;
reg   [4:0] i_0_reg_119;
reg   [4:0] j_0_reg_130;
wire   [0:0] icmp_ln89_fu_233_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln89_fu_239_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln89_fu_391_p3;
wire   [0:0] and_ln91_1_fu_433_p2;
reg   [0:0] and_ln91_1_reg_497;
wire   [10:0] grp_fu_141_p2;
reg   [10:0] add_ln92_3_reg_506;
wire   [4:0] j_fu_469_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln94_fu_443_p1;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln92_fu_464_p1;
wire   [63:0] zext_ln92_fu_478_p1;
wire   [10:0] sub_ln94_mid2_fu_299_p3;
wire   [10:0] zext_ln90_mid2_cast_fu_386_p1;
wire   [9:0] shl_ln_fu_149_p3;
wire   [6:0] shl_ln94_1_fu_161_p3;
wire   [10:0] zext_ln94_1_fu_157_p1;
wire   [10:0] zext_ln94_2_fu_169_p1;
wire   [5:0] i_0_cast7_fu_145_p1;
wire   [5:0] add_ln92_fu_185_p2;
wire   [8:0] shl_ln92_1_fu_199_p3;
wire   [10:0] shl_ln3_fu_191_p3;
wire  signed [10:0] sext_ln92_1_fu_207_p1;
wire   [3:0] tmp_fu_217_p4;
wire   [0:0] icmp_ln90_fu_251_p2;
wire   [4:0] i_fu_245_p2;
wire   [9:0] shl_ln94_mid1_fu_269_p3;
wire   [6:0] shl_ln94_1_mid1_fu_281_p3;
wire   [10:0] zext_ln94_3_fu_277_p1;
wire   [10:0] zext_ln94_4_fu_289_p1;
wire   [10:0] sub_ln94_1_fu_293_p2;
wire   [10:0] sub_ln94_fu_173_p2;
wire   [0:0] icmp_ln91_2_fu_308_p2;
wire   [0:0] icmp_ln91_fu_179_p2;
wire   [5:0] i_0_cast7_mid1_fu_265_p1;
wire   [5:0] add_ln92_4_fu_322_p2;
wire   [8:0] shl_ln92_1_mid1_fu_336_p3;
wire   [10:0] shl_ln92_mid1_fu_328_p3;
wire  signed [10:0] sext_ln92_3_fu_344_p1;
wire   [10:0] sub_ln92_1_fu_348_p2;
wire   [10:0] sub_ln92_fu_211_p2;
wire   [3:0] tmp_1_fu_362_p4;
wire   [0:0] icmp_ln91_4_fu_372_p2;
wire   [0:0] icmp_ln91_1_fu_227_p2;
wire   [4:0] j_0_mid2_fu_257_p3;
wire   [3:0] tmp_2_fu_399_p4;
wire   [0:0] icmp_ln91_5_fu_409_p2;
wire   [0:0] icmp_ln91_1_mid2_fu_378_p3;
wire   [0:0] icmp_ln91_3_fu_415_p2;
wire   [0:0] icmp_ln91_mid2_fu_314_p3;
wire   [0:0] and_ln91_2_fu_427_p2;
wire   [0:0] and_ln91_fu_421_p2;
wire  signed [31:0] sext_ln94_fu_439_p1;
wire   [4:0] add_ln92_1_fu_448_p2;
wire   [10:0] zext_ln92_1_fu_454_p1;
wire   [10:0] sub_ln92_mid2_fu_354_p3;
wire   [10:0] add_ln92_2_fu_458_p2;
wire  signed [31:0] sext_ln92_2_fu_475_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_119 <= select_ln89_fu_391_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_119 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_108 <= add_ln89_fu_239_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_108 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_130 <= j_fu_469_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_130 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln91_1_fu_433_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln92_3_reg_506 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln91_1_reg_497 <= and_ln91_1_fu_433_p2;
    end
end

always @ (*) begin
    if ((icmp_ln89_fu_233_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_matrix_ce0 = 1'b1;
    end else begin
        input_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_matrix_ce0 = 1'b1;
    end else begin
        output_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_matrix_ce1 = 1'b1;
    end else begin
        output_matrix_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln91_1_fu_433_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln89_fu_233_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_matrix_we0 = 1'b1;
    end else begin
        output_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln91_1_reg_497) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_matrix_we1 = 1'b1;
    end else begin
        output_matrix_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln89_fu_233_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln89_fu_233_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln89_fu_239_p2 = (indvar_flatten_reg_108 + 10'd1);

assign add_ln92_1_fu_448_p2 = ($signed(j_0_mid2_fu_257_p3) + $signed(5'd30));

assign add_ln92_2_fu_458_p2 = (zext_ln92_1_fu_454_p1 + sub_ln92_mid2_fu_354_p3);

assign add_ln92_4_fu_322_p2 = ($signed(i_0_cast7_mid1_fu_265_p1) + $signed(6'd62));

assign add_ln92_fu_185_p2 = ($signed(i_0_cast7_fu_145_p1) + $signed(6'd62));

assign and_ln91_1_fu_433_p2 = (and_ln91_fu_421_p2 & and_ln91_2_fu_427_p2);

assign and_ln91_2_fu_427_p2 = (icmp_ln91_mid2_fu_314_p3 & icmp_ln91_3_fu_415_p2);

assign and_ln91_fu_421_p2 = (icmp_ln91_5_fu_409_p2 & icmp_ln91_1_mid2_fu_378_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_141_p2 = (sub_ln94_mid2_fu_299_p3 + zext_ln90_mid2_cast_fu_386_p1);

assign i_0_cast7_fu_145_p1 = i_0_reg_119;

assign i_0_cast7_mid1_fu_265_p1 = i_fu_245_p2;

assign i_fu_245_p2 = (i_0_reg_119 + 5'd1);

assign icmp_ln89_fu_233_p2 = ((indvar_flatten_reg_108 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_251_p2 = ((j_0_reg_130 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln91_1_fu_227_p2 = ((tmp_fu_217_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_1_mid2_fu_378_p3 = ((icmp_ln90_fu_251_p2[0:0] === 1'b1) ? icmp_ln91_4_fu_372_p2 : icmp_ln91_1_fu_227_p2);

assign icmp_ln91_2_fu_308_p2 = ((i_fu_245_p2 < 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln91_3_fu_415_p2 = ((j_0_mid2_fu_257_p3 < 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln91_4_fu_372_p2 = ((tmp_1_fu_362_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_5_fu_409_p2 = ((tmp_2_fu_399_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_179_p2 = ((i_0_reg_119 < 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln91_mid2_fu_314_p3 = ((icmp_ln90_fu_251_p2[0:0] === 1'b1) ? icmp_ln91_2_fu_308_p2 : icmp_ln91_fu_179_p2);

assign input_matrix_address0 = sext_ln92_fu_464_p1;

assign j_0_mid2_fu_257_p3 = ((icmp_ln90_fu_251_p2[0:0] === 1'b1) ? 5'd0 : j_0_reg_130);

assign j_fu_469_p2 = (j_0_mid2_fu_257_p3 + 5'd1);

assign output_matrix_address0 = zext_ln94_fu_443_p1;

assign output_matrix_address1 = zext_ln92_fu_478_p1;

assign output_matrix_d0 = 32'd0;

assign output_matrix_d1 = input_matrix_q0;

assign select_ln89_fu_391_p3 = ((icmp_ln90_fu_251_p2[0:0] === 1'b1) ? i_fu_245_p2 : i_0_reg_119);

assign sext_ln92_1_fu_207_p1 = $signed(shl_ln92_1_fu_199_p3);

assign sext_ln92_2_fu_475_p1 = $signed(add_ln92_3_reg_506);

assign sext_ln92_3_fu_344_p1 = $signed(shl_ln92_1_mid1_fu_336_p3);

assign sext_ln92_fu_464_p1 = $signed(add_ln92_2_fu_458_p2);

assign sext_ln94_fu_439_p1 = $signed(grp_fu_141_p2);

assign shl_ln3_fu_191_p3 = {{add_ln92_fu_185_p2}, {5'd0}};

assign shl_ln92_1_fu_199_p3 = {{add_ln92_fu_185_p2}, {3'd0}};

assign shl_ln92_1_mid1_fu_336_p3 = {{add_ln92_4_fu_322_p2}, {3'd0}};

assign shl_ln92_mid1_fu_328_p3 = {{add_ln92_4_fu_322_p2}, {5'd0}};

assign shl_ln94_1_fu_161_p3 = {{i_0_reg_119}, {2'd0}};

assign shl_ln94_1_mid1_fu_281_p3 = {{i_fu_245_p2}, {2'd0}};

assign shl_ln94_mid1_fu_269_p3 = {{i_fu_245_p2}, {5'd0}};

assign shl_ln_fu_149_p3 = {{i_0_reg_119}, {5'd0}};

assign sub_ln92_1_fu_348_p2 = ($signed(shl_ln92_mid1_fu_328_p3) - $signed(sext_ln92_3_fu_344_p1));

assign sub_ln92_fu_211_p2 = ($signed(shl_ln3_fu_191_p3) - $signed(sext_ln92_1_fu_207_p1));

assign sub_ln92_mid2_fu_354_p3 = ((icmp_ln90_fu_251_p2[0:0] === 1'b1) ? sub_ln92_1_fu_348_p2 : sub_ln92_fu_211_p2);

assign sub_ln94_1_fu_293_p2 = (zext_ln94_3_fu_277_p1 - zext_ln94_4_fu_289_p1);

assign sub_ln94_fu_173_p2 = (zext_ln94_1_fu_157_p1 - zext_ln94_2_fu_169_p1);

assign sub_ln94_mid2_fu_299_p3 = ((icmp_ln90_fu_251_p2[0:0] === 1'b1) ? sub_ln94_1_fu_293_p2 : sub_ln94_fu_173_p2);

assign tmp_1_fu_362_p4 = {{i_fu_245_p2[4:1]}};

assign tmp_2_fu_399_p4 = {{j_0_mid2_fu_257_p3[4:1]}};

assign tmp_fu_217_p4 = {{i_0_reg_119[4:1]}};

assign zext_ln90_mid2_cast_fu_386_p1 = j_0_mid2_fu_257_p3;

assign zext_ln92_1_fu_454_p1 = add_ln92_1_fu_448_p2;

assign zext_ln92_fu_478_p1 = $unsigned(sext_ln92_2_fu_475_p1);

assign zext_ln94_1_fu_157_p1 = shl_ln_fu_149_p3;

assign zext_ln94_2_fu_169_p1 = shl_ln94_1_fu_161_p3;

assign zext_ln94_3_fu_277_p1 = shl_ln94_mid1_fu_269_p3;

assign zext_ln94_4_fu_289_p1 = shl_ln94_1_mid1_fu_281_p3;

assign zext_ln94_fu_443_p1 = $unsigned(sext_ln94_fu_439_p1);

endmodule //Padding_1
