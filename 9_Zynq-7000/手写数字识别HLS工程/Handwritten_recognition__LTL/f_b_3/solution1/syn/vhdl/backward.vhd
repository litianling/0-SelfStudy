-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backward is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    label_r : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_AWVALID : OUT STD_LOGIC;
    m_axi_lr_in_AWREADY : IN STD_LOGIC;
    m_axi_lr_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_WVALID : OUT STD_LOGIC;
    m_axi_lr_in_WREADY : IN STD_LOGIC;
    m_axi_lr_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_WLAST : OUT STD_LOGIC;
    m_axi_lr_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_ARVALID : OUT STD_LOGIC;
    m_axi_lr_in_ARREADY : IN STD_LOGIC;
    m_axi_lr_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_RVALID : IN STD_LOGIC;
    m_axi_lr_in_RREADY : OUT STD_LOGIC;
    m_axi_lr_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_RLAST : IN STD_LOGIC;
    m_axi_lr_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_BVALID : IN STD_LOGIC;
    m_axi_lr_in_BREADY : OUT STD_LOGIC;
    m_axi_lr_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    lr_in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    probability_result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    probability_result_ce0 : OUT STD_LOGIC;
    probability_result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_3_relu2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_in_3_relu2_0_ce0 : OUT STD_LOGIC;
    fc_in_3_relu2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fc_hidden_layer3_ce0 : OUT STD_LOGIC;
    fc_hidden_layer3_we0 : OUT STD_LOGIC;
    fc_hidden_layer3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_out_2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_out_2_0_ce0 : OUT STD_LOGIC;
    fc_out_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_2_relu1_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fc_in_2_relu1_0_ce0 : OUT STD_LOGIC;
    fc_in_2_relu1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    fc_hidden_layer2_ce0 : OUT STD_LOGIC;
    fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    fc_hidden_layer2_ce1 : OUT STD_LOGIC;
    fc_hidden_layer2_we1 : OUT STD_LOGIC;
    fc_hidden_layer2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_out_1_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fc_out_1_0_ce0 : OUT STD_LOGIC;
    fc_out_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    fc_in_1_0_ce0 : OUT STD_LOGIC;
    fc_in_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    fc_hidden_layer1_ce0 : OUT STD_LOGIC;
    fc_hidden_layer1_we0 : OUT STD_LOGIC;
    fc_hidden_layer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_out_2_ce0 : OUT STD_LOGIC;
    conv_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_3_ce0 : OUT STD_LOGIC;
    conv_kernel_3_we0 : OUT STD_LOGIC;
    conv_kernel_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_out_1_ce0 : OUT STD_LOGIC;
    conv_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_2_ce0 : OUT STD_LOGIC;
    conv_kernel_2_we0 : OUT STD_LOGIC;
    conv_kernel_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mnist_data_ce0 : OUT STD_LOGIC;
    mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_1_ce0 : OUT STD_LOGIC;
    conv_kernel_1_we0 : OUT STD_LOGIC;
    conv_kernel_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of backward is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (113 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (113 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (113 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (113 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (113 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (113 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (113 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (113 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (113 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (113 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (113 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (113 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (113 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_3FA999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1C2 : STD_LOGIC_VECTOR (8 downto 0) := "111000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv13_1FA4 : STD_LOGIC_VECTOR (12 downto 0) := "1111110100100";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_2D : STD_LOGIC_VECTOR (12 downto 0) := "0000000101101";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv17_19500 : STD_LOGIC_VECTOR (16 downto 0) := "11001010100000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv17_B4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010110100";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (113 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lr_in_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal icmp_ln67_2_fu_1683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lr_in_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal indvar_flatten_reg_645 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_i_reg_656 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i_reg_667 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten13_reg_723 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_0_i16_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_i21_reg_745 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten26_reg_814 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_0_i60_reg_825 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_i64_reg_836 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1058_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal grad_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln61_reg_1953 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_1069_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln61_reg_1953_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_state37_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln61_1_reg_2090 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_2090_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_state65_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state66_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state67_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state68_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state69_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state70_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln61_2_reg_2221 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_2221_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1078_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1125 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_1090_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1130 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal grad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_1_fu_1022_ap_ready : STD_LOGIC;
    signal grp_MatrixBackPropagatio_1_fu_1022_ap_done : STD_LOGIC;
    signal reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_2_fu_1014_ap_ready : STD_LOGIC;
    signal grp_Conv2d_2_fu_1014_ap_done : STD_LOGIC;
    signal grp_Padding_fu_1038_ap_ready : STD_LOGIC;
    signal grp_Padding_fu_1038_ap_done : STD_LOGIC;
    signal ap_block_state91_on_subcall_done : BOOLEAN;
    signal grad_3_addr_reg_1914 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lr_in_addr_reg_1924 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln129_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_5_fu_1194_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_1934 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln130_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_reg_1939 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln131_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_reg_1943 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln61_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1953_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1953_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1953_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_1216_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_0_i_mid2_fu_1234_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_i_mid2_reg_1962 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln63_mid2_v_v_fu_1242_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln63_mid2_v_v_reg_1967 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_1260_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_in_3_relu2_0_load_reg_1989 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln63_1_fu_1293_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_1_reg_1994 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_1_reg_1994_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_1_reg_1994_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln63_1_reg_1994_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_fu_1309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_reg_2002 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal rgrad_2_addr_reg_2007 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln67_fu_1303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_1320_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_2012 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln70_1_fu_1328_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln70_1_reg_2017 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_15_fu_1346_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_15_reg_2025 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln69_fu_1340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_8_fu_1382_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_8_reg_2044 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln76_fu_1388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_reg_2049 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln76_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2066 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_fu_1417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_2071 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_2081 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal rgrad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln61_1_fu_1433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_2090_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_2090_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_2090_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_2_fu_1439_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln63_fu_1457_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln63_reg_2099 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln63_1_fu_1465_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln63_1_reg_2104 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_16_fu_1483_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc_in_2_relu1_0_load_reg_2125 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1888_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln63_2_reg_2130 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln63_2_reg_2130_pp1_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln63_2_reg_2130_pp1_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln63_2_reg_2130_pp1_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln70_4_fu_1499_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln70_4_reg_2135 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal i_9_fu_1511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_9_reg_2143 : STD_LOGIC_VECTOR (7 downto 0);
    signal rgrad_1_addr_reg_2148 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln67_1_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_17_fu_1532_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_17_reg_2156 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal icmp_ln69_1_fu_1526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_fu_1554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_11_fu_1560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_11_reg_2175 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_1_fu_1566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_1_reg_2180 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal icmp_ln76_2_fu_1589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_2_reg_2197 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_3_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_3_reg_2202 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_1_fu_1605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_1_reg_2212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal rgrad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln61_2_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_2221_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_2221_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_2221_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_4_fu_1617_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln63_2_fu_1635_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln63_2_reg_2230 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln63_3_fu_1643_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln63_3_reg_2235 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_18_fu_1661_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_in_1_0_load_reg_2256 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1896_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln63_3_reg_2261 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln63_3_reg_2261_pp2_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln63_3_reg_2261_pp2_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln63_3_reg_2261_pp2_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln70_5_fu_1677_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln70_5_reg_2266 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state72_io : BOOLEAN;
    signal i_12_fu_1689_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_12_reg_2274 : STD_LOGIC_VECTOR (9 downto 0);
    signal grad_0_addr_reg_2279 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_19_fu_1710_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_19_reg_2287 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal icmp_ln69_2_fu_1704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln101_4_fu_1732_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln101_4_reg_2302 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal i_13_fu_1744_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_13_reg_2310 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_20_fu_1760_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_20_reg_2318 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal fc_hidden_layer1_add_2_reg_2323 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln100_fu_1754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wgrad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_1_load_reg_2333 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal add_ln101_5_fu_1778_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln101_5_reg_2338 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal i_14_fu_1790_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_14_reg_2346 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_21_fu_1806_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_21_reg_2354 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal fc_hidden_layer2_add_2_reg_2359 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln100_1_fu_1800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wgrad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_2_load_reg_2370 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal i_15_fu_1830_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_15_reg_2378 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal shl_ln2_fu_1836_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln2_reg_2383 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln99_2_fu_1824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln101_1_fu_1844_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln101_1_reg_2388 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_22_fu_1862_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_22_reg_2396 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal fc_hidden_layer3_add_2_reg_2401 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln100_2_fu_1856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wgrad_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_3_load_reg_2411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state37 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state65 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal grad_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grad_3_ce0 : STD_LOGIC;
    signal grad_3_we0 : STD_LOGIC;
    signal grad_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal wgrad_3_ce0 : STD_LOGIC;
    signal wgrad_3_we0 : STD_LOGIC;
    signal rgrad_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal rgrad_2_ce0 : STD_LOGIC;
    signal rgrad_2_we0 : STD_LOGIC;
    signal rgrad_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grad_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_2_ce0 : STD_LOGIC;
    signal grad_2_we0 : STD_LOGIC;
    signal grad_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal wgrad_2_ce0 : STD_LOGIC;
    signal wgrad_2_we0 : STD_LOGIC;
    signal rgrad_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rgrad_1_ce0 : STD_LOGIC;
    signal rgrad_1_we0 : STD_LOGIC;
    signal grad_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_1_ce0 : STD_LOGIC;
    signal grad_1_we0 : STD_LOGIC;
    signal grad_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal wgrad_1_ce0 : STD_LOGIC;
    signal wgrad_1_we0 : STD_LOGIC;
    signal grad_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grad_0_ce0 : STD_LOGIC;
    signal grad_0_we0 : STD_LOGIC;
    signal grad_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_grad_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_3_ce0 : STD_LOGIC;
    signal kernel_grad_3_we0 : STD_LOGIC;
    signal kernel_grad_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_grad_2_ce0 : STD_LOGIC;
    signal conv_grad_2_we0 : STD_LOGIC;
    signal conv_grad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_grad_3_overtu_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_3_overtu_ce0 : STD_LOGIC;
    signal kernel_grad_3_overtu_we0 : STD_LOGIC;
    signal kernel_grad_3_overtu_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_3_padding_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_grad_3_padding_ce0 : STD_LOGIC;
    signal conv_grad_3_padding_we0 : STD_LOGIC;
    signal conv_grad_3_padding_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_3_padding_ce1 : STD_LOGIC;
    signal conv_grad_3_padding_we1 : STD_LOGIC;
    signal kernel_grad_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_2_ce0 : STD_LOGIC;
    signal kernel_grad_2_we0 : STD_LOGIC;
    signal kernel_grad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_grad_1_ce0 : STD_LOGIC;
    signal conv_grad_1_we0 : STD_LOGIC;
    signal conv_grad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_grad_2_overtu_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_2_overtu_ce0 : STD_LOGIC;
    signal kernel_grad_2_overtu_we0 : STD_LOGIC;
    signal kernel_grad_2_overtu_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_2_padding_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_grad_2_padding_ce0 : STD_LOGIC;
    signal conv_grad_2_padding_we0 : STD_LOGIC;
    signal conv_grad_2_padding_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_2_padding_ce1 : STD_LOGIC;
    signal conv_grad_2_padding_we1 : STD_LOGIC;
    signal kernel_grad_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_1_ce0 : STD_LOGIC;
    signal kernel_grad_1_we0 : STD_LOGIC;
    signal kernel_grad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_1_fu_984_ap_start : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_ap_done : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_ap_idle : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_ap_ready : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_1_fu_984_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_1_fu_984_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_out_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_1_fu_984_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_984_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_3_fu_991_ap_start : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_ap_done : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_ap_idle : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_ap_ready : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_3_fu_991_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_3_fu_991_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_out_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_3_fu_991_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_991_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_fu_998_ap_start : STD_LOGIC;
    signal grp_Conv2d_fu_998_ap_done : STD_LOGIC;
    signal grp_Conv2d_fu_998_ap_idle : STD_LOGIC;
    signal grp_Conv2d_fu_998_ap_ready : STD_LOGIC;
    signal grp_Conv2d_fu_998_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_fu_998_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_fu_998_kernel_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_fu_998_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_fu_998_out_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_fu_998_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_fu_998_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_fu_998_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_4_fu_1006_ap_start : STD_LOGIC;
    signal grp_Conv2d_4_fu_1006_ap_done : STD_LOGIC;
    signal grp_Conv2d_4_fu_1006_ap_idle : STD_LOGIC;
    signal grp_Conv2d_4_fu_1006_ap_ready : STD_LOGIC;
    signal grp_Conv2d_4_fu_1006_kernel_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_4_fu_1006_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_1006_out_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_4_fu_1006_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_1006_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_1006_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_4_fu_1006_conv_out_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_4_fu_1006_conv_out_2_ce0 : STD_LOGIC;
    signal grp_Conv2d_2_fu_1014_ap_start : STD_LOGIC;
    signal grp_Conv2d_2_fu_1014_ap_idle : STD_LOGIC;
    signal grp_Conv2d_2_fu_1014_kernel_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_2_fu_1014_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_2_fu_1014_out_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_2_fu_1014_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_2_fu_1014_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_2_fu_1014_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_2_fu_1014_conv_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_2_fu_1014_conv_out_1_ce0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_1_fu_1022_ap_start : STD_LOGIC;
    signal grp_MatrixBackPropagatio_1_fu_1022_ap_idle : STD_LOGIC;
    signal grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_1_fu_1022_lr : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_1_fu_1032_ap_start : STD_LOGIC;
    signal grp_Padding_1_fu_1032_ap_done : STD_LOGIC;
    signal grp_Padding_1_fu_1032_ap_idle : STD_LOGIC;
    signal grp_Padding_1_fu_1032_ap_ready : STD_LOGIC;
    signal grp_Padding_1_fu_1032_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_1_fu_1032_input_matrix_ce0 : STD_LOGIC;
    signal grp_Padding_1_fu_1032_output_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_1_fu_1032_output_matrix_ce0 : STD_LOGIC;
    signal grp_Padding_1_fu_1032_output_matrix_we0 : STD_LOGIC;
    signal grp_Padding_1_fu_1032_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_1_fu_1032_output_matrix_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_1_fu_1032_output_matrix_ce1 : STD_LOGIC;
    signal grp_Padding_1_fu_1032_output_matrix_we1 : STD_LOGIC;
    signal grp_Padding_1_fu_1032_output_matrix_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_fu_1038_ap_start : STD_LOGIC;
    signal grp_Padding_fu_1038_ap_idle : STD_LOGIC;
    signal grp_Padding_fu_1038_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_fu_1038_input_matrix_ce0 : STD_LOGIC;
    signal grp_Padding_fu_1038_output_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_fu_1038_output_matrix_ce0 : STD_LOGIC;
    signal grp_Padding_fu_1038_output_matrix_we0 : STD_LOGIC;
    signal grp_Padding_fu_1038_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_fu_1038_output_matrix_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_fu_1038_output_matrix_ce1 : STD_LOGIC;
    signal grp_Padding_fu_1038_output_matrix_we1 : STD_LOGIC;
    signal grp_Padding_fu_1038_output_matrix_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_OverturnKernel_fu_1044_ap_start : STD_LOGIC;
    signal grp_OverturnKernel_fu_1044_ap_done : STD_LOGIC;
    signal grp_OverturnKernel_fu_1044_ap_idle : STD_LOGIC;
    signal grp_OverturnKernel_fu_1044_ap_ready : STD_LOGIC;
    signal grp_OverturnKernel_fu_1044_input_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_OverturnKernel_fu_1044_input_matrix_ce0 : STD_LOGIC;
    signal grp_OverturnKernel_fu_1044_output_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_OverturnKernel_fu_1044_output_matrix_ce0 : STD_LOGIC;
    signal grp_OverturnKernel_fu_1044_output_matrix_we0 : STD_LOGIC;
    signal grp_OverturnKernel_fu_1044_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_OverturnKernel_fu_1051_ap_start : STD_LOGIC;
    signal grp_OverturnKernel_fu_1051_ap_done : STD_LOGIC;
    signal grp_OverturnKernel_fu_1051_ap_idle : STD_LOGIC;
    signal grp_OverturnKernel_fu_1051_ap_ready : STD_LOGIC;
    signal grp_OverturnKernel_fu_1051_input_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_OverturnKernel_fu_1051_input_matrix_ce0 : STD_LOGIC;
    signal grp_OverturnKernel_fu_1051_output_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_OverturnKernel_fu_1051_output_matrix_ce0 : STD_LOGIC;
    signal grp_OverturnKernel_fu_1051_output_matrix_we0 : STD_LOGIC;
    signal grp_OverturnKernel_fu_1051_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_634 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_i_0_i_phi_fu_660_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_0_i1_reg_678 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal empty_46_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal j_0_i2_reg_701 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i8_reg_712 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_phi_mux_i_0_i16_phi_fu_738_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_0_i31_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal phi_mul_reg_767 : STD_LOGIC_VECTOR (12 downto 0);
    signal storemerge_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i36_reg_792 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_i49_reg_803 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_phi_mux_i_0_i60_phi_fu_829_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_0_i74_reg_847 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal phi_mul234_reg_858 : STD_LOGIC_VECTOR (16 downto 0);
    signal storemerge240_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i79_reg_883 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i92_reg_894 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul236_reg_905 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_0_i93_reg_917 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal icmp_ln99_fu_1738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i101_reg_928 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul238_reg_939 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_i105_reg_951 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal icmp_ln99_1_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i118_reg_962 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i122_reg_973 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal grp_Conv2d_1_fu_984_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_Conv2d_3_fu_991_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_Conv2d_fu_998_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_Conv2d_4_fu_1006_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal grp_Conv2d_2_fu_1014_ap_start_reg : STD_LOGIC := '0';
    signal grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_Padding_1_fu_1032_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_Padding_fu_1038_ap_start_reg : STD_LOGIC := '0';
    signal grp_OverturnKernel_fu_1044_ap_start_reg : STD_LOGIC := '0';
    signal grp_OverturnKernel_fu_1051_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln130_fu_1168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fc_in_3_relu2_0_load_2_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_2_fu_1299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_1315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_1366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_1371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grad_2_addr_1_gep_fu_415_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_6_fu_1473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_4_fu_1478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_5_fu_1495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_1_fu_1517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_fu_1544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_3_fu_1549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grad_1_addr_1_gep_fu_518_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln63_10_fu_1651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_7_fu_1656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_8_fu_1673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_fu_1695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_4_fu_1722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_5_fu_1727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_1772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_1_fu_1818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_2_fu_1882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_fu_1174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal grp_fu_1073_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal grp_fu_1058_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1058_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal grp_fu_1069_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1069_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_1078_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1083_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal zext_ln129_fu_1184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln62_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1222_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln63_1_mid2_fu_1273_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_i_cast16_mid2_ca_fu_1280_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln63_fu_1283_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_1_fu_1289_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln63_mid2_fu_1266_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_i2_cast13_fu_1336_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln70_fu_1352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln70_6_fu_1357_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln70_1_fu_1361_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln76_fu_1393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1397_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_1407_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln76_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_1445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_i36_cast9_fu_1522_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln70_2_fu_1538_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln76_1_fu_1571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1575_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_1_fu_1585_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln76_1_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_2_fu_1629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_1623_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_i79_cast5_fu_1700_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln70_3_fu_1716_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_0_i93_cast_fu_1750_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln101_fu_1766_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_0_i105_cast_fu_1796_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln101_1_fu_1812_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_i122_cast_fu_1852_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln101_2_fu_1868_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln101_3_fu_1873_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln101_3_fu_1877_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1888_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1888_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1888_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1896_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1896_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1896_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1058_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (113 downto 0);
    signal ap_block_state83_on_subcall_done : BOOLEAN;
    signal ap_block_state93_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_1888_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1888_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1896_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1896_p20 : STD_LOGIC_VECTOR (16 downto 0);

    component Conv2d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_2_ce0 : OUT STD_LOGIC;
        conv_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_1_ce0 : OUT STD_LOGIC;
        conv_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixBackPropagatio_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        lr : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Padding_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_matrix_ce1 : OUT STD_LOGIC;
        output_matrix_we1 : OUT STD_LOGIC;
        output_matrix_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Padding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_matrix_ce1 : OUT STD_LOGIC;
        output_matrix_we1 : OUT STD_LOGIC;
        output_matrix_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component OverturnKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_faddfsuxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fptrunceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fpext_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_fcmp_32g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component forw_back_dmul_64ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_mac_mulyd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component forw_back_mac_mulzec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component backward_grad_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_wgrad_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_rgrad_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_grad_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_wgrad_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_wgrad_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_grad_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_kernel_gocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_conv_grapcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_conv_grarcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_conv_gratde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_conv_gravdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grad_3_U : component backward_grad_3
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_3_address0,
        ce0 => grad_3_ce0,
        we0 => grad_3_we0,
        d0 => grad_3_d0,
        q0 => grad_3_q0);

    wgrad_3_U : component backward_wgrad_3
    generic map (
        DataWidth => 32,
        AddressRange => 450,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wgrad_3_address0,
        ce0 => wgrad_3_ce0,
        we0 => wgrad_3_we0,
        d0 => reg_1111,
        q0 => wgrad_3_q0);

    rgrad_2_U : component backward_rgrad_2
    generic map (
        DataWidth => 32,
        AddressRange => 45,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rgrad_2_address0,
        ce0 => rgrad_2_ce0,
        we0 => rgrad_2_we0,
        d0 => rgrad_2_d0,
        q0 => rgrad_2_q0);

    grad_2_U : component backward_grad_2
    generic map (
        DataWidth => 32,
        AddressRange => 180,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_2_address0,
        ce0 => grad_2_ce0,
        we0 => grad_2_we0,
        d0 => grad_2_d0,
        q0 => grad_2_q0);

    wgrad_2_U : component backward_wgrad_2
    generic map (
        DataWidth => 32,
        AddressRange => 8100,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wgrad_2_address0,
        ce0 => wgrad_2_ce0,
        we0 => wgrad_2_we0,
        d0 => reg_1111,
        q0 => wgrad_2_q0);

    rgrad_1_U : component backward_grad_2
    generic map (
        DataWidth => 32,
        AddressRange => 180,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rgrad_1_address0,
        ce0 => rgrad_1_ce0,
        we0 => rgrad_1_we0,
        d0 => storemerge_reg_779,
        q0 => rgrad_1_q0);

    grad_1_U : component backward_grad_2
    generic map (
        DataWidth => 32,
        AddressRange => 180,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_1_address0,
        ce0 => grad_1_ce0,
        we0 => grad_1_we0,
        d0 => grad_1_d0,
        q0 => grad_1_q0);

    wgrad_1_U : component backward_wgrad_1
    generic map (
        DataWidth => 32,
        AddressRange => 103680,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wgrad_1_address0,
        ce0 => wgrad_1_ce0,
        we0 => wgrad_1_we0,
        d0 => reg_1111,
        q0 => wgrad_1_q0);

    grad_0_U : component backward_grad_0
    generic map (
        DataWidth => 32,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_0_address0,
        ce0 => grad_0_ce0,
        we0 => grad_0_we0,
        d0 => storemerge240_reg_870,
        q0 => grad_0_q0);

    kernel_grad_3_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_3_address0,
        ce0 => kernel_grad_3_ce0,
        we0 => kernel_grad_3_we0,
        d0 => grp_Conv2d_4_fu_1006_out_matrix_d0,
        q0 => kernel_grad_3_q0);

    conv_grad_2_U : component backward_conv_grapcA
    generic map (
        DataWidth => 32,
        AddressRange => 676,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_grad_2_address0,
        ce0 => conv_grad_2_ce0,
        we0 => conv_grad_2_we0,
        d0 => grp_Conv2d_3_fu_991_out_matrix_d0,
        q0 => conv_grad_2_q0);

    kernel_grad_3_overtu_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_3_overtu_address0,
        ce0 => kernel_grad_3_overtu_ce0,
        we0 => kernel_grad_3_overtu_we0,
        d0 => grp_OverturnKernel_fu_1044_output_matrix_d0,
        q0 => kernel_grad_3_overtu_q0);

    conv_grad_3_padding_U : component backward_conv_grarcU
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_grad_3_padding_address0,
        ce0 => conv_grad_3_padding_ce0,
        we0 => conv_grad_3_padding_we0,
        d0 => grp_Padding_1_fu_1032_output_matrix_d0,
        q0 => conv_grad_3_padding_q0,
        address1 => grp_Padding_1_fu_1032_output_matrix_address1,
        ce1 => conv_grad_3_padding_ce1,
        we1 => conv_grad_3_padding_we1,
        d1 => grp_Padding_1_fu_1032_output_matrix_d1);

    kernel_grad_2_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_2_address0,
        ce0 => kernel_grad_2_ce0,
        we0 => kernel_grad_2_we0,
        d0 => grp_Conv2d_2_fu_1014_out_matrix_d0,
        q0 => kernel_grad_2_q0);

    conv_grad_1_U : component backward_conv_gratde
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_grad_1_address0,
        ce0 => conv_grad_1_ce0,
        we0 => conv_grad_1_we0,
        d0 => grp_Conv2d_1_fu_984_out_matrix_d0,
        q0 => conv_grad_1_q0);

    kernel_grad_2_overtu_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_2_overtu_address0,
        ce0 => kernel_grad_2_overtu_ce0,
        we0 => kernel_grad_2_overtu_we0,
        d0 => grp_OverturnKernel_fu_1051_output_matrix_d0,
        q0 => kernel_grad_2_overtu_q0);

    conv_grad_2_padding_U : component backward_conv_gravdy
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_grad_2_padding_address0,
        ce0 => conv_grad_2_padding_ce0,
        we0 => conv_grad_2_padding_we0,
        d0 => grp_Padding_fu_1038_output_matrix_d0,
        q0 => conv_grad_2_padding_q0,
        address1 => grp_Padding_fu_1038_output_matrix_address1,
        ce1 => conv_grad_2_padding_ce1,
        we1 => conv_grad_2_padding_we1,
        d1 => grp_Padding_fu_1038_output_matrix_d1);

    kernel_grad_1_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_1_address0,
        ce0 => kernel_grad_1_ce0,
        we0 => kernel_grad_1_we0,
        d0 => grp_Conv2d_fu_998_out_matrix_d0,
        q0 => kernel_grad_1_q0);

    grp_Conv2d_1_fu_984 : component Conv2d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_1_fu_984_ap_start,
        ap_done => grp_Conv2d_1_fu_984_ap_done,
        ap_idle => grp_Conv2d_1_fu_984_ap_idle,
        ap_ready => grp_Conv2d_1_fu_984_ap_ready,
        input_matrix_address0 => grp_Conv2d_1_fu_984_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_1_fu_984_input_matrix_ce0,
        input_matrix_q0 => conv_grad_2_padding_q0,
        kernel_address0 => grp_Conv2d_1_fu_984_kernel_address0,
        kernel_ce0 => grp_Conv2d_1_fu_984_kernel_ce0,
        kernel_q0 => kernel_grad_2_overtu_q0,
        out_matrix_address0 => grp_Conv2d_1_fu_984_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_1_fu_984_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_1_fu_984_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_1_fu_984_out_matrix_d0);

    grp_Conv2d_3_fu_991 : component Conv2d_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_3_fu_991_ap_start,
        ap_done => grp_Conv2d_3_fu_991_ap_done,
        ap_idle => grp_Conv2d_3_fu_991_ap_idle,
        ap_ready => grp_Conv2d_3_fu_991_ap_ready,
        input_matrix_address0 => grp_Conv2d_3_fu_991_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_3_fu_991_input_matrix_ce0,
        input_matrix_q0 => conv_grad_3_padding_q0,
        kernel_address0 => grp_Conv2d_3_fu_991_kernel_address0,
        kernel_ce0 => grp_Conv2d_3_fu_991_kernel_ce0,
        kernel_q0 => kernel_grad_3_overtu_q0,
        out_matrix_address0 => grp_Conv2d_3_fu_991_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_3_fu_991_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_3_fu_991_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_3_fu_991_out_matrix_d0);

    grp_Conv2d_fu_998 : component Conv2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_fu_998_ap_start,
        ap_done => grp_Conv2d_fu_998_ap_done,
        ap_idle => grp_Conv2d_fu_998_ap_idle,
        ap_ready => grp_Conv2d_fu_998_ap_ready,
        input_matrix_address0 => grp_Conv2d_fu_998_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_fu_998_input_matrix_ce0,
        input_matrix_q0 => mnist_data_q0,
        kernel_address0 => grp_Conv2d_fu_998_kernel_address0,
        kernel_ce0 => grp_Conv2d_fu_998_kernel_ce0,
        kernel_q0 => conv_grad_1_q0,
        out_matrix_address0 => grp_Conv2d_fu_998_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_fu_998_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_fu_998_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_fu_998_out_matrix_d0);

    grp_Conv2d_4_fu_1006 : component Conv2d_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_4_fu_1006_ap_start,
        ap_done => grp_Conv2d_4_fu_1006_ap_done,
        ap_idle => grp_Conv2d_4_fu_1006_ap_idle,
        ap_ready => grp_Conv2d_4_fu_1006_ap_ready,
        kernel_address0 => grp_Conv2d_4_fu_1006_kernel_address0,
        kernel_ce0 => grp_Conv2d_4_fu_1006_kernel_ce0,
        kernel_q0 => grad_0_q0,
        out_matrix_address0 => grp_Conv2d_4_fu_1006_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_4_fu_1006_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_4_fu_1006_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_4_fu_1006_out_matrix_d0,
        conv_out_2_address0 => grp_Conv2d_4_fu_1006_conv_out_2_address0,
        conv_out_2_ce0 => grp_Conv2d_4_fu_1006_conv_out_2_ce0,
        conv_out_2_q0 => conv_out_2_q0);

    grp_Conv2d_2_fu_1014 : component Conv2d_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_2_fu_1014_ap_start,
        ap_done => grp_Conv2d_2_fu_1014_ap_done,
        ap_idle => grp_Conv2d_2_fu_1014_ap_idle,
        ap_ready => grp_Conv2d_2_fu_1014_ap_ready,
        kernel_address0 => grp_Conv2d_2_fu_1014_kernel_address0,
        kernel_ce0 => grp_Conv2d_2_fu_1014_kernel_ce0,
        kernel_q0 => conv_grad_2_q0,
        out_matrix_address0 => grp_Conv2d_2_fu_1014_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_2_fu_1014_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_2_fu_1014_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_2_fu_1014_out_matrix_d0,
        conv_out_1_address0 => grp_Conv2d_2_fu_1014_conv_out_1_address0,
        conv_out_1_ce0 => grp_Conv2d_2_fu_1014_conv_out_1_ce0,
        conv_out_1_q0 => conv_out_1_q0);

    grp_MatrixBackPropagatio_1_fu_1022 : component MatrixBackPropagatio_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MatrixBackPropagatio_1_fu_1022_ap_start,
        ap_done => grp_MatrixBackPropagatio_1_fu_1022_ap_done,
        ap_idle => grp_MatrixBackPropagatio_1_fu_1022_ap_idle,
        ap_ready => grp_MatrixBackPropagatio_1_fu_1022_ap_ready,
        input_matrix_address0 => grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0,
        input_matrix_ce0 => grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0,
        input_matrix_q0 => grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0,
        output_matrix_address0 => grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0,
        output_matrix_ce0 => grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0,
        output_matrix_we0 => grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0,
        output_matrix_d0 => grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0,
        output_matrix_q0 => grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0,
        lr => grp_MatrixBackPropagatio_1_fu_1022_lr);

    grp_Padding_1_fu_1032 : component Padding_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Padding_1_fu_1032_ap_start,
        ap_done => grp_Padding_1_fu_1032_ap_done,
        ap_idle => grp_Padding_1_fu_1032_ap_idle,
        ap_ready => grp_Padding_1_fu_1032_ap_ready,
        input_matrix_address0 => grp_Padding_1_fu_1032_input_matrix_address0,
        input_matrix_ce0 => grp_Padding_1_fu_1032_input_matrix_ce0,
        input_matrix_q0 => grad_0_q0,
        output_matrix_address0 => grp_Padding_1_fu_1032_output_matrix_address0,
        output_matrix_ce0 => grp_Padding_1_fu_1032_output_matrix_ce0,
        output_matrix_we0 => grp_Padding_1_fu_1032_output_matrix_we0,
        output_matrix_d0 => grp_Padding_1_fu_1032_output_matrix_d0,
        output_matrix_address1 => grp_Padding_1_fu_1032_output_matrix_address1,
        output_matrix_ce1 => grp_Padding_1_fu_1032_output_matrix_ce1,
        output_matrix_we1 => grp_Padding_1_fu_1032_output_matrix_we1,
        output_matrix_d1 => grp_Padding_1_fu_1032_output_matrix_d1);

    grp_Padding_fu_1038 : component Padding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Padding_fu_1038_ap_start,
        ap_done => grp_Padding_fu_1038_ap_done,
        ap_idle => grp_Padding_fu_1038_ap_idle,
        ap_ready => grp_Padding_fu_1038_ap_ready,
        input_matrix_address0 => grp_Padding_fu_1038_input_matrix_address0,
        input_matrix_ce0 => grp_Padding_fu_1038_input_matrix_ce0,
        input_matrix_q0 => conv_grad_2_q0,
        output_matrix_address0 => grp_Padding_fu_1038_output_matrix_address0,
        output_matrix_ce0 => grp_Padding_fu_1038_output_matrix_ce0,
        output_matrix_we0 => grp_Padding_fu_1038_output_matrix_we0,
        output_matrix_d0 => grp_Padding_fu_1038_output_matrix_d0,
        output_matrix_address1 => grp_Padding_fu_1038_output_matrix_address1,
        output_matrix_ce1 => grp_Padding_fu_1038_output_matrix_ce1,
        output_matrix_we1 => grp_Padding_fu_1038_output_matrix_we1,
        output_matrix_d1 => grp_Padding_fu_1038_output_matrix_d1);

    grp_OverturnKernel_fu_1044 : component OverturnKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_OverturnKernel_fu_1044_ap_start,
        ap_done => grp_OverturnKernel_fu_1044_ap_done,
        ap_idle => grp_OverturnKernel_fu_1044_ap_idle,
        ap_ready => grp_OverturnKernel_fu_1044_ap_ready,
        input_matrix_address0 => grp_OverturnKernel_fu_1044_input_matrix_address0,
        input_matrix_ce0 => grp_OverturnKernel_fu_1044_input_matrix_ce0,
        input_matrix_q0 => conv_kernel_3_q0,
        output_matrix_address0 => grp_OverturnKernel_fu_1044_output_matrix_address0,
        output_matrix_ce0 => grp_OverturnKernel_fu_1044_output_matrix_ce0,
        output_matrix_we0 => grp_OverturnKernel_fu_1044_output_matrix_we0,
        output_matrix_d0 => grp_OverturnKernel_fu_1044_output_matrix_d0);

    grp_OverturnKernel_fu_1051 : component OverturnKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_OverturnKernel_fu_1051_ap_start,
        ap_done => grp_OverturnKernel_fu_1051_ap_done,
        ap_idle => grp_OverturnKernel_fu_1051_ap_idle,
        ap_ready => grp_OverturnKernel_fu_1051_ap_ready,
        input_matrix_address0 => grp_OverturnKernel_fu_1051_input_matrix_address0,
        input_matrix_ce0 => grp_OverturnKernel_fu_1051_input_matrix_ce0,
        input_matrix_q0 => conv_kernel_2_q0,
        output_matrix_address0 => grp_OverturnKernel_fu_1051_output_matrix_address0,
        output_matrix_ce0 => grp_OverturnKernel_fu_1051_output_matrix_ce0,
        output_matrix_we0 => grp_OverturnKernel_fu_1051_output_matrix_we0,
        output_matrix_d0 => grp_OverturnKernel_fu_1051_output_matrix_d0);

    forw_back_faddfsuxdS_U95 : component forw_back_faddfsuxdS
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1058_p0,
        din1 => grp_fu_1058_p1,
        opcode => grp_fu_1058_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1058_p2);

    forw_back_fmul_32cud_U96 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1069_p0,
        din1 => grp_fu_1069_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1069_p2);

    forw_back_fptrunceOg_U97 : component forw_back_fptrunceOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_1130,
        ce => ap_const_logic_1,
        dout => grp_fu_1073_p1);

    forw_back_fpext_3fYi_U98 : component forw_back_fpext_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1078_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1078_p1);

    forw_back_fcmp_32g8j_U99 : component forw_back_fcmp_32g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1083_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_1083_p2);

    forw_back_dmul_64ibs_U100 : component forw_back_dmul_64ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_1125,
        din1 => ap_const_lv64_3FA999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_1090_p2);

    forw_back_mac_mulyd2_U101 : component forw_back_mac_mulyd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1888_p0,
        din1 => grp_fu_1888_p1,
        din2 => grp_fu_1888_p2,
        dout => grp_fu_1888_p3);

    forw_back_mac_mulzec_U102 : component forw_back_mac_mulzec
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_1896_p0,
        din1 => grp_fu_1896_p1,
        din2 => grp_fu_1896_p2,
        dout => grp_fu_1896_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln129_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((icmp_ln129_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state37) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln75_fu_1376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state37)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state37);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif (((icmp_ln75_fu_1376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state65) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln75_1_fu_1554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state65)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state65);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                elsif (((icmp_ln75_1_fu_1554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_1_fu_984_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_1_fu_984_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                    grp_Conv2d_1_fu_984_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_1_fu_984_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_1_fu_984_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_2_fu_1014_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_2_fu_1014_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (m_axi_lr_in_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                    grp_Conv2d_2_fu_1014_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_2_fu_1014_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_2_fu_1014_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_3_fu_991_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_3_fu_991_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    grp_Conv2d_3_fu_991_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_3_fu_991_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_3_fu_991_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_4_fu_1006_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_4_fu_1006_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then 
                    grp_Conv2d_4_fu_1006_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_4_fu_1006_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_4_fu_1006_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_fu_998_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_fu_998_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                    grp_Conv2d_fu_998_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_fu_998_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_fu_998_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                    grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MatrixBackPropagatio_1_fu_1022_ap_ready = ap_const_logic_1)) then 
                    grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_OverturnKernel_fu_1044_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_OverturnKernel_fu_1044_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then 
                    grp_OverturnKernel_fu_1044_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_OverturnKernel_fu_1044_ap_ready = ap_const_logic_1)) then 
                    grp_OverturnKernel_fu_1044_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_OverturnKernel_fu_1051_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_OverturnKernel_fu_1051_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then 
                    grp_OverturnKernel_fu_1051_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_OverturnKernel_fu_1051_ap_ready = ap_const_logic_1)) then 
                    grp_OverturnKernel_fu_1051_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Padding_1_fu_1032_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Padding_1_fu_1032_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then 
                    grp_Padding_1_fu_1032_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Padding_1_fu_1032_ap_ready = ap_const_logic_1)) then 
                    grp_Padding_1_fu_1032_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Padding_fu_1038_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Padding_fu_1038_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
                    grp_Padding_fu_1038_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Padding_fu_1038_ap_ready = ap_const_logic_1)) then 
                    grp_Padding_fu_1038_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_46_reg_689_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                empty_46_reg_689 <= reg_1095;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln67_fu_1303_p2 = ap_const_lv1_0))) then 
                empty_46_reg_689 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_i101_reg_928_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_1_fu_1800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                i_0_i101_reg_928 <= i_14_reg_2346;
            elsif (((icmp_ln99_fu_1738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
                i_0_i101_reg_928 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i118_reg_962_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_2_fu_1856_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
                i_0_i118_reg_962 <= i_15_reg_2378;
            elsif (((icmp_ln99_1_fu_1784_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                i_0_i118_reg_962 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i16_reg_734_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_reg_2090 = ap_const_lv1_0))) then 
                i_0_i16_reg_734 <= select_ln63_1_reg_2104;
            elsif (((icmp_ln75_fu_1376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_0_i16_reg_734 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i1_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_1340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i1_reg_678 <= i_6_reg_2002;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_i1_reg_678 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i31_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_1_fu_1526_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                i_0_i31_reg_756 <= i_9_reg_2143;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_0_i31_reg_756 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i49_reg_803_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                i_0_i49_reg_803 <= i_11_reg_2175;
            elsif (((icmp_ln67_1_fu_1505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_0_i49_reg_803 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i60_reg_825_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_reg_2221 = ap_const_lv1_0))) then 
                i_0_i60_reg_825 <= select_ln63_3_reg_2235;
            elsif (((icmp_ln75_1_fu_1554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                i_0_i60_reg_825 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_0_i74_reg_847_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_2_fu_1704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                i_0_i74_reg_847 <= i_12_reg_2274;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                i_0_i74_reg_847 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_0_i8_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i_0_i8_reg_712 <= i_8_reg_2044;
            elsif (((icmp_ln67_fu_1303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_0_i8_reg_712 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i92_reg_894_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_1754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                i_0_i92_reg_894 <= i_13_reg_2310;
            elsif ((not(((grp_MatrixBackPropagatio_1_fu_1022_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                i_0_i92_reg_894 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_reg_1953 = ap_const_lv1_0))) then 
                i_0_i_reg_656 <= shl_ln63_mid2_v_v_reg_1967;
            elsif (((icmp_ln129_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i_reg_656 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_634 <= i_5_reg_1934;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_634 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_fu_1433_p2 = ap_const_lv1_0))) then 
                indvar_flatten13_reg_723 <= add_ln61_2_fu_1439_p2;
            elsif (((icmp_ln75_fu_1376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                indvar_flatten13_reg_723 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten26_reg_814_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_fu_1611_p2 = ap_const_lv1_0))) then 
                indvar_flatten26_reg_814 <= add_ln61_4_fu_1617_p2;
            elsif (((icmp_ln75_1_fu_1554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                indvar_flatten26_reg_814 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_fu_1210_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_645 <= add_ln61_fu_1216_p2;
            elsif (((icmp_ln129_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvar_flatten_reg_645 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_i105_reg_951_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) and (icmp_ln99_1_fu_1784_p2 = ap_const_lv1_0))) then 
                j_0_i105_reg_951 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
                j_0_i105_reg_951 <= j_21_reg_2354;
            end if; 
        end if;
    end process;

    j_0_i122_reg_973_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state119) and (icmp_ln99_2_fu_1824_p2 = ap_const_lv1_0))) then 
                j_0_i122_reg_973 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
                j_0_i122_reg_973 <= j_22_reg_2396;
            end if; 
        end if;
    end process;

    j_0_i21_reg_745_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_fu_1433_p2 = ap_const_lv1_0))) then 
                j_0_i21_reg_745 <= j_16_fu_1483_p2;
            elsif (((icmp_ln75_fu_1376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                j_0_i21_reg_745 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i2_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j_0_i2_reg_701 <= j_15_reg_2025;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln67_fu_1303_p2 = ap_const_lv1_0))) then 
                j_0_i2_reg_701 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i36_reg_792_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                j_0_i36_reg_792 <= j_17_reg_2156;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln67_1_fu_1505_p2 = ap_const_lv1_0))) then 
                j_0_i36_reg_792 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i64_reg_836_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_fu_1611_p2 = ap_const_lv1_0))) then 
                j_0_i64_reg_836 <= j_18_fu_1661_p2;
            elsif (((icmp_ln75_1_fu_1554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                j_0_i64_reg_836 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_i79_reg_883_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                j_0_i79_reg_883 <= j_19_reg_2287;
            elsif (((ap_const_boolean_0 = ap_block_state72_io) and (ap_const_logic_1 = ap_CS_fsm_state72) and (icmp_ln67_2_fu_1683_p2 = ap_const_lv1_0))) then 
                j_0_i79_reg_883 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_i93_reg_917_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln99_fu_1738_p2 = ap_const_lv1_0))) then 
                j_0_i93_reg_917 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                j_0_i93_reg_917 <= j_20_reg_2318;
            end if; 
        end if;
    end process;

    j_0_i_reg_667_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_fu_1210_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_667 <= j_fu_1260_p2;
            elsif (((icmp_ln129_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_i_reg_667 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul234_reg_858_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_2_fu_1704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                phi_mul234_reg_858 <= add_ln70_5_reg_2266;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                phi_mul234_reg_858 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    phi_mul236_reg_905_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_1754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                phi_mul236_reg_905 <= add_ln101_4_reg_2302;
            elsif ((not(((grp_MatrixBackPropagatio_1_fu_1022_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                phi_mul236_reg_905 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    phi_mul238_reg_939_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_1_fu_1800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                phi_mul238_reg_939 <= add_ln101_5_reg_2338;
            elsif (((icmp_ln99_fu_1738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
                phi_mul238_reg_939 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_767_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_1_fu_1526_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                phi_mul_reg_767 <= add_ln70_4_reg_2135;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                phi_mul_reg_767 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    storemerge240_reg_870_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                storemerge240_reg_870 <= grp_fu_1058_p2;
            elsif (((ap_const_boolean_0 = ap_block_state72_io) and (ap_const_logic_1 = ap_CS_fsm_state72) and (icmp_ln67_2_fu_1683_p2 = ap_const_lv1_0))) then 
                storemerge240_reg_870 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                storemerge_reg_779 <= grp_fu_1058_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln67_1_fu_1505_p2 = ap_const_lv1_0))) then 
                storemerge_reg_779 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                add_ln101_4_reg_2302 <= add_ln101_4_fu_1732_p2;
                i_13_reg_2310 <= i_13_fu_1744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                add_ln101_5_reg_2338 <= add_ln101_5_fu_1778_p2;
                i_14_reg_2346 <= i_14_fu_1790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_reg_1953 = ap_const_lv1_0))) then
                add_ln63_1_reg_1994 <= add_ln63_1_fu_1293_p2;
                fc_in_3_relu2_0_load_reg_1989 <= fc_in_3_relu2_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln63_1_reg_1994_pp0_iter2_reg <= add_ln63_1_reg_1994;
                add_ln63_1_reg_1994_pp0_iter3_reg <= add_ln63_1_reg_1994_pp0_iter2_reg;
                add_ln63_1_reg_1994_pp0_iter4_reg <= add_ln63_1_reg_1994_pp0_iter3_reg;
                icmp_ln61_reg_1953_pp0_iter2_reg <= icmp_ln61_reg_1953_pp0_iter1_reg;
                icmp_ln61_reg_1953_pp0_iter3_reg <= icmp_ln61_reg_1953_pp0_iter2_reg;
                icmp_ln61_reg_1953_pp0_iter4_reg <= icmp_ln61_reg_1953_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_reg_2090 = ap_const_lv1_0))) then
                add_ln63_2_reg_2130 <= grp_fu_1888_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln63_2_reg_2130_pp1_iter2_reg <= add_ln63_2_reg_2130;
                add_ln63_2_reg_2130_pp1_iter3_reg <= add_ln63_2_reg_2130_pp1_iter2_reg;
                add_ln63_2_reg_2130_pp1_iter4_reg <= add_ln63_2_reg_2130_pp1_iter3_reg;
                icmp_ln61_1_reg_2090_pp1_iter2_reg <= icmp_ln61_1_reg_2090_pp1_iter1_reg;
                icmp_ln61_1_reg_2090_pp1_iter3_reg <= icmp_ln61_1_reg_2090_pp1_iter2_reg;
                icmp_ln61_1_reg_2090_pp1_iter4_reg <= icmp_ln61_1_reg_2090_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_reg_2221 = ap_const_lv1_0))) then
                add_ln63_3_reg_2261 <= grp_fu_1896_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                add_ln63_3_reg_2261_pp2_iter2_reg <= add_ln63_3_reg_2261;
                add_ln63_3_reg_2261_pp2_iter3_reg <= add_ln63_3_reg_2261_pp2_iter2_reg;
                add_ln63_3_reg_2261_pp2_iter4_reg <= add_ln63_3_reg_2261_pp2_iter3_reg;
                icmp_ln61_2_reg_2221_pp2_iter2_reg <= icmp_ln61_2_reg_2221_pp2_iter1_reg;
                icmp_ln61_2_reg_2221_pp2_iter3_reg <= icmp_ln61_2_reg_2221_pp2_iter2_reg;
                icmp_ln61_2_reg_2221_pp2_iter4_reg <= icmp_ln61_2_reg_2221_pp2_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                add_ln70_4_reg_2135 <= add_ln70_4_fu_1499_p2;
                i_9_reg_2143 <= i_9_fu_1511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state72_io) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                add_ln70_5_reg_2266 <= add_ln70_5_fu_1677_p2;
                i_12_reg_2274 <= i_12_fu_1689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                and_ln76_1_reg_2212 <= and_ln76_1_fu_1605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                and_ln76_reg_2081 <= and_ln76_fu_1427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1754_p2 = ap_const_lv1_0))) then
                fc_hidden_layer1_add_2_reg_2323 <= zext_ln101_fu_1772_p1(17 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and (icmp_ln100_1_fu_1800_p2 = ap_const_lv1_0))) then
                fc_hidden_layer2_add_2_reg_2359 <= zext_ln101_1_fu_1818_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state120) and (icmp_ln100_2_fu_1856_p2 = ap_const_lv1_0))) then
                fc_hidden_layer3_add_2_reg_2401 <= zext_ln101_2_fu_1882_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_reg_2221 = ap_const_lv1_0))) then
                fc_in_1_0_load_reg_2256 <= fc_in_1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_reg_2090 = ap_const_lv1_0))) then
                fc_in_2_relu1_0_load_reg_2125 <= fc_in_2_relu1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state72_io) and (ap_const_logic_1 = ap_CS_fsm_state72) and (icmp_ln67_2_fu_1683_p2 = ap_const_lv1_0))) then
                grad_0_addr_reg_2279 <= zext_ln68_2_fu_1695_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                grad_3_addr_reg_1914 <= zext_ln130_fu_1168_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                i_11_reg_2175 <= i_11_fu_1560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then
                i_15_reg_2378 <= i_15_fu_1830_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_5_reg_1934 <= i_5_fu_1194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_6_reg_2002 <= i_6_fu_1309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_8_reg_2044 <= i_8_fu_1382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln129_fu_1188_p2 = ap_const_lv1_0))) then
                icmp_ln130_reg_1939 <= icmp_ln130_fu_1200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln61_1_reg_2090 <= icmp_ln61_1_fu_1433_p2;
                icmp_ln61_1_reg_2090_pp1_iter1_reg <= icmp_ln61_1_reg_2090;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln61_2_reg_2221 <= icmp_ln61_2_fu_1611_p2;
                icmp_ln61_2_reg_2221_pp2_iter1_reg <= icmp_ln61_2_reg_2221;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln61_reg_1953 <= icmp_ln61_fu_1210_p2;
                icmp_ln61_reg_1953_pp0_iter1_reg <= icmp_ln61_reg_1953;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                icmp_ln76_1_reg_2071 <= icmp_ln76_1_fu_1417_p2;
                icmp_ln76_reg_2066 <= icmp_ln76_fu_1411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                icmp_ln76_2_reg_2197 <= icmp_ln76_2_fu_1589_p2;
                icmp_ln76_3_reg_2202 <= icmp_ln76_3_fu_1595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_fu_1210_p2 = ap_const_lv1_0))) then
                j_0_i_mid2_reg_1962 <= j_0_i_mid2_fu_1234_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j_15_reg_2025 <= j_15_fu_1346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                j_17_reg_2156 <= j_17_fu_1532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                j_19_reg_2287 <= j_19_fu_1710_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                j_20_reg_2318 <= j_20_fu_1760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                j_21_reg_2354 <= j_21_fu_1806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state120)) then
                j_22_reg_2396 <= j_22_fu_1862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    lr_in_addr_reg_1924(29 downto 0) <= zext_ln127_fu_1174_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_1095 <= grp_fu_1058_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_reg_1953 = ap_const_lv1_0)))) then
                reg_1106 <= grad_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln61_2_reg_2221_pp2_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln61_1_reg_2090_pp1_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln61_reg_1953_pp0_iter3_reg = ap_const_lv1_0)))) then
                reg_1111 <= grp_fu_1069_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_1119 <= fc_hidden_layer3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_1125 <= grp_fu_1078_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_1130 <= grp_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_reg_2090 = ap_const_lv1_0)))) then
                reg_1135 <= grad_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
                reg_1140 <= fc_hidden_layer2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_reg_2221 = ap_const_lv1_0)))) then
                reg_1146 <= grad_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state103))) then
                reg_1151 <= fc_hidden_layer1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((grp_MatrixBackPropagatio_1_fu_1022_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state97)) or (not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (m_axi_lr_in_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state88)))) then
                reg_1157 <= m_axi_lr_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state91_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state91)) or (not(((grp_Conv2d_2_fu_1014_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state89)))) then
                reg_1163 <= m_axi_lr_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln67_1_fu_1505_p2 = ap_const_lv1_0))) then
                rgrad_1_addr_reg_2148 <= zext_ln68_1_fu_1517_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln67_fu_1303_p2 = ap_const_lv1_0))) then
                rgrad_2_addr_reg_2007 <= zext_ln68_fu_1315_p1(6 - 1 downto 0);
                    shl_ln70_1_reg_2017(6 downto 1) <= shl_ln70_1_fu_1328_p3(6 downto 1);
                    shl_ln_reg_2012(8 downto 3) <= shl_ln_fu_1320_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_fu_1433_p2 = ap_const_lv1_0))) then
                select_ln63_1_reg_2104 <= select_ln63_1_fu_1465_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_fu_1611_p2 = ap_const_lv1_0))) then
                select_ln63_2_reg_2230 <= select_ln63_2_fu_1635_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_fu_1611_p2 = ap_const_lv1_0))) then
                select_ln63_3_reg_2235 <= select_ln63_3_fu_1643_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_fu_1433_p2 = ap_const_lv1_0))) then
                select_ln63_reg_2099 <= select_ln63_fu_1457_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state119) and (icmp_ln99_2_fu_1824_p2 = ap_const_lv1_0))) then
                    shl_ln101_1_reg_2388(6 downto 1) <= shl_ln101_1_fu_1844_p3(6 downto 1);
                    shl_ln2_reg_2383(8 downto 3) <= shl_ln2_fu_1836_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_fu_1210_p2 = ap_const_lv1_0))) then
                shl_ln63_mid2_v_v_reg_1967 <= shl_ln63_mid2_v_v_fu_1242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                wgrad_1_load_reg_2333 <= wgrad_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                wgrad_2_load_reg_2370 <= wgrad_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state121)) then
                wgrad_3_load_reg_2411 <= wgrad_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln130_fu_1200_p2 = ap_const_lv1_0) and (icmp_ln129_fu_1188_p2 = ap_const_lv1_0))) then
                    zext_ln131_reg_1943(3 downto 0) <= zext_ln131_fu_1205_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (icmp_ln75_1_fu_1554_p2 = ap_const_lv1_0))) then
                    zext_ln76_1_reg_2180(7 downto 0) <= zext_ln76_1_fu_1566_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln75_fu_1376_p2 = ap_const_lv1_0))) then
                    zext_ln76_reg_2049(5 downto 0) <= zext_ln76_fu_1388_p1(5 downto 0);
            end if;
        end if;
    end process;
    lr_in_addr_reg_1924(31 downto 30) <= "00";
    zext_ln131_reg_1943(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_2012(2 downto 0) <= "000";
    shl_ln70_1_reg_2017(0) <= '0';
    zext_ln76_reg_2049(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln76_1_reg_2180(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    shl_ln2_reg_2383(2 downto 0) <= "000";
    shl_ln101_1_reg_2388(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_lr_in_ARREADY, m_axi_lr_in_RVALID, ap_CS_fsm_state72, icmp_ln67_2_fu_1683_p2, ap_CS_fsm_state88, ap_CS_fsm_state82, ap_CS_fsm_state89, ap_CS_fsm_state84, ap_CS_fsm_state91, ap_CS_fsm_state97, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter4, ap_enable_reg_pp2_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, grp_MatrixBackPropagatio_1_fu_1022_ap_done, grp_Conv2d_2_fu_1014_ap_done, ap_block_state91_on_subcall_done, icmp_ln129_fu_1188_p2, ap_CS_fsm_state6, icmp_ln61_fu_1210_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state15, icmp_ln67_fu_1303_p2, ap_CS_fsm_state16, icmp_ln69_fu_1340_p2, icmp_ln75_fu_1376_p2, ap_CS_fsm_state26, and_ln76_fu_1427_p2, ap_CS_fsm_state28, icmp_ln61_1_fu_1433_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state44, icmp_ln67_1_fu_1505_p2, ap_CS_fsm_state45, icmp_ln69_1_fu_1526_p2, icmp_ln75_1_fu_1554_p2, ap_CS_fsm_state54, and_ln76_1_fu_1605_p2, ap_CS_fsm_state56, icmp_ln61_2_fu_1611_p2, ap_enable_reg_pp2_iter0, ap_block_state72_io, ap_CS_fsm_state73, icmp_ln69_2_fu_1704_p2, ap_CS_fsm_state98, ap_CS_fsm_state99, icmp_ln100_fu_1754_p2, ap_CS_fsm_state109, ap_CS_fsm_state110, icmp_ln100_1_fu_1800_p2, ap_CS_fsm_state119, icmp_ln99_2_fu_1824_p2, ap_CS_fsm_state120, icmp_ln100_2_fu_1856_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter5, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter5, grp_Conv2d_3_fu_991_ap_done, grp_Conv2d_fu_998_ap_done, grp_Padding_1_fu_1032_ap_done, icmp_ln99_fu_1738_p2, icmp_ln99_1_fu_1784_p2, ap_CS_fsm_state93, ap_CS_fsm_state87, ap_CS_fsm_state95, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_block_state83_on_subcall_done, ap_block_state93_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln129_fu_1188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln61_fu_1210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln61_fu_1210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln67_fu_1303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln69_fu_1340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln75_fu_1376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_lv1_1 = and_ln76_fu_1427_p2) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln61_1_fu_1433_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln61_1_fu_1433_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln67_1_fu_1505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln69_1_fu_1526_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state54 => 
                if (((icmp_ln75_1_fu_1554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_lv1_1 = and_ln76_1_fu_1605_p2) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln61_2_fu_1611_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln61_2_fu_1611_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_boolean_0 = ap_block_state72_io) and (ap_const_logic_1 = ap_CS_fsm_state72) and (icmp_ln67_2_fu_1683_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                elsif (((ap_const_boolean_0 = ap_block_state72_io) and (icmp_ln67_2_fu_1683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((icmp_ln69_2_fu_1704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_boolean_0 = ap_block_state83_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (grp_Padding_1_fu_1032_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and (grp_Conv2d_3_fu_991_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if ((not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (m_axi_lr_in_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                if ((not(((grp_Conv2d_2_fu_1014_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if ((not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state91_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((ap_const_boolean_0 = ap_block_state93_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (grp_Conv2d_fu_998_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if ((not(((grp_MatrixBackPropagatio_1_fu_1022_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                if (((icmp_ln99_fu_1738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state99 => 
                if (((icmp_ln100_fu_1754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state109 => 
                if (((icmp_ln99_1_fu_1784_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then
                    ap_NS_fsm <= ap_ST_fsm_state119;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state110 => 
                if (((icmp_ln100_1_fu_1800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state119 => 
                if (((icmp_ln99_2_fu_1824_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state120;
                end if;
            when ap_ST_fsm_state120 => 
                if (((icmp_ln100_2_fu_1856_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                    ap_NS_fsm <= ap_ST_fsm_state119;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln101_1_fu_1812_p2 <= std_logic_vector(unsigned(phi_mul238_reg_939) + unsigned(j_0_i105_cast_fu_1796_p1));
    add_ln101_2_fu_1868_p2 <= std_logic_vector(unsigned(shl_ln101_1_reg_2388) + unsigned(j_0_i122_cast_fu_1852_p1));
    add_ln101_3_fu_1877_p2 <= std_logic_vector(unsigned(zext_ln101_3_fu_1873_p1) + unsigned(shl_ln2_reg_2383));
    add_ln101_4_fu_1732_p2 <= std_logic_vector(unsigned(phi_mul236_reg_905) + unsigned(ap_const_lv17_B4));
    add_ln101_5_fu_1778_p2 <= std_logic_vector(unsigned(phi_mul238_reg_939) + unsigned(ap_const_lv13_2D));
    add_ln101_fu_1766_p2 <= std_logic_vector(unsigned(phi_mul236_reg_905) + unsigned(j_0_i93_cast_fu_1750_p1));
    add_ln61_2_fu_1439_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_723) + unsigned(ap_const_lv13_1));
    add_ln61_4_fu_1617_p2 <= std_logic_vector(unsigned(indvar_flatten26_reg_814) + unsigned(ap_const_lv17_1));
    add_ln61_fu_1216_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_645) + unsigned(ap_const_lv9_1));
    add_ln63_1_fu_1293_p2 <= std_logic_vector(unsigned(zext_ln63_1_fu_1289_p1) + unsigned(shl_ln63_mid2_fu_1266_p3));
    add_ln63_fu_1283_p2 <= std_logic_vector(unsigned(shl_ln63_1_mid2_fu_1273_p3) + unsigned(j_0_i_cast16_mid2_ca_fu_1280_p1));
    add_ln70_1_fu_1361_p2 <= std_logic_vector(unsigned(zext_ln70_6_fu_1357_p1) + unsigned(shl_ln_reg_2012));
    add_ln70_2_fu_1538_p2 <= std_logic_vector(unsigned(j_0_i36_cast9_fu_1522_p1) + unsigned(phi_mul_reg_767));
    add_ln70_3_fu_1716_p2 <= std_logic_vector(unsigned(j_0_i79_cast5_fu_1700_p1) + unsigned(phi_mul234_reg_858));
    add_ln70_4_fu_1499_p2 <= std_logic_vector(unsigned(phi_mul_reg_767) + unsigned(ap_const_lv13_2D));
    add_ln70_5_fu_1677_p2 <= std_logic_vector(unsigned(phi_mul234_reg_858) + unsigned(ap_const_lv17_B4));
    add_ln70_fu_1352_p2 <= std_logic_vector(unsigned(shl_ln70_1_reg_2017) + unsigned(j_0_i2_cast13_fu_1336_p1));
    and_ln76_1_fu_1605_p2 <= (or_ln76_1_fu_1601_p2 and grp_fu_1083_p2);
    and_ln76_fu_1427_p2 <= (or_ln76_fu_1423_p2 and grp_fu_1083_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(54);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(84);
    ap_CS_fsm_state101 <= ap_CS_fsm(85);
    ap_CS_fsm_state102 <= ap_CS_fsm(86);
    ap_CS_fsm_state103 <= ap_CS_fsm(87);
    ap_CS_fsm_state104 <= ap_CS_fsm(88);
    ap_CS_fsm_state107 <= ap_CS_fsm(91);
    ap_CS_fsm_state108 <= ap_CS_fsm(92);
    ap_CS_fsm_state109 <= ap_CS_fsm(93);
    ap_CS_fsm_state110 <= ap_CS_fsm(94);
    ap_CS_fsm_state111 <= ap_CS_fsm(95);
    ap_CS_fsm_state112 <= ap_CS_fsm(96);
    ap_CS_fsm_state114 <= ap_CS_fsm(98);
    ap_CS_fsm_state115 <= ap_CS_fsm(99);
    ap_CS_fsm_state118 <= ap_CS_fsm(102);
    ap_CS_fsm_state119 <= ap_CS_fsm(103);
    ap_CS_fsm_state120 <= ap_CS_fsm(104);
    ap_CS_fsm_state121 <= ap_CS_fsm(105);
    ap_CS_fsm_state122 <= ap_CS_fsm(106);
    ap_CS_fsm_state123 <= ap_CS_fsm(107);
    ap_CS_fsm_state124 <= ap_CS_fsm(108);
    ap_CS_fsm_state125 <= ap_CS_fsm(109);
    ap_CS_fsm_state128 <= ap_CS_fsm(112);
    ap_CS_fsm_state129 <= ap_CS_fsm(113);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(15);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state34 <= ap_CS_fsm(28);
    ap_CS_fsm_state35 <= ap_CS_fsm(29);
    ap_CS_fsm_state36 <= ap_CS_fsm(30);
    ap_CS_fsm_state43 <= ap_CS_fsm(32);
    ap_CS_fsm_state44 <= ap_CS_fsm(33);
    ap_CS_fsm_state45 <= ap_CS_fsm(34);
    ap_CS_fsm_state46 <= ap_CS_fsm(35);
    ap_CS_fsm_state47 <= ap_CS_fsm(36);
    ap_CS_fsm_state49 <= ap_CS_fsm(38);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(39);
    ap_CS_fsm_state53 <= ap_CS_fsm(42);
    ap_CS_fsm_state54 <= ap_CS_fsm(43);
    ap_CS_fsm_state55 <= ap_CS_fsm(44);
    ap_CS_fsm_state56 <= ap_CS_fsm(45);
    ap_CS_fsm_state57 <= ap_CS_fsm(46);
    ap_CS_fsm_state58 <= ap_CS_fsm(47);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(51);
    ap_CS_fsm_state63 <= ap_CS_fsm(52);
    ap_CS_fsm_state64 <= ap_CS_fsm(53);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(55);
    ap_CS_fsm_state72 <= ap_CS_fsm(56);
    ap_CS_fsm_state73 <= ap_CS_fsm(57);
    ap_CS_fsm_state74 <= ap_CS_fsm(58);
    ap_CS_fsm_state75 <= ap_CS_fsm(59);
    ap_CS_fsm_state77 <= ap_CS_fsm(61);
    ap_CS_fsm_state78 <= ap_CS_fsm(62);
    ap_CS_fsm_state81 <= ap_CS_fsm(65);
    ap_CS_fsm_state82 <= ap_CS_fsm(66);
    ap_CS_fsm_state83 <= ap_CS_fsm(67);
    ap_CS_fsm_state84 <= ap_CS_fsm(68);
    ap_CS_fsm_state85 <= ap_CS_fsm(69);
    ap_CS_fsm_state86 <= ap_CS_fsm(70);
    ap_CS_fsm_state87 <= ap_CS_fsm(71);
    ap_CS_fsm_state88 <= ap_CS_fsm(72);
    ap_CS_fsm_state89 <= ap_CS_fsm(73);
    ap_CS_fsm_state90 <= ap_CS_fsm(74);
    ap_CS_fsm_state91 <= ap_CS_fsm(75);
    ap_CS_fsm_state92 <= ap_CS_fsm(76);
    ap_CS_fsm_state93 <= ap_CS_fsm(77);
    ap_CS_fsm_state94 <= ap_CS_fsm(78);
    ap_CS_fsm_state95 <= ap_CS_fsm(79);
    ap_CS_fsm_state96 <= ap_CS_fsm(80);
    ap_CS_fsm_state97 <= ap_CS_fsm(81);
    ap_CS_fsm_state98 <= ap_CS_fsm(82);
    ap_CS_fsm_state99 <= ap_CS_fsm(83);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state72_io_assign_proc : process(m_axi_lr_in_ARREADY, icmp_ln67_2_fu_1683_p2)
    begin
                ap_block_state72_io <= ((icmp_ln67_2_fu_1683_p2 = ap_const_lv1_1) and (m_axi_lr_in_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state83_on_subcall_done_assign_proc : process(grp_Conv2d_4_fu_1006_ap_done, grp_OverturnKernel_fu_1044_ap_done, grp_OverturnKernel_fu_1051_ap_done)
    begin
                ap_block_state83_on_subcall_done <= ((grp_OverturnKernel_fu_1051_ap_done = ap_const_logic_0) or (grp_OverturnKernel_fu_1044_ap_done = ap_const_logic_0) or (grp_Conv2d_4_fu_1006_ap_done = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state91_on_subcall_done_assign_proc : process(grp_MatrixBackPropagatio_1_fu_1022_ap_done, grp_Padding_fu_1038_ap_done)
    begin
                ap_block_state91_on_subcall_done <= ((grp_Padding_fu_1038_ap_done = ap_const_logic_0) or (grp_MatrixBackPropagatio_1_fu_1022_ap_done = ap_const_logic_0));
    end process;


    ap_block_state93_on_subcall_done_assign_proc : process(grp_MatrixBackPropagatio_1_fu_1022_ap_done, grp_Conv2d_1_fu_984_ap_done)
    begin
                ap_block_state93_on_subcall_done <= ((grp_MatrixBackPropagatio_1_fu_1022_ap_done = ap_const_logic_0) or (grp_Conv2d_1_fu_984_ap_done = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln61_fu_1210_p2)
    begin
        if ((icmp_ln61_fu_1210_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state37_assign_proc : process(icmp_ln61_1_fu_1433_p2)
    begin
        if ((icmp_ln61_1_fu_1433_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state65_assign_proc : process(icmp_ln61_2_fu_1611_p2)
    begin
        if ((icmp_ln61_2_fu_1611_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state65 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state119, icmp_ln99_2_fu_1824_p2)
    begin
        if ((((icmp_ln99_2_fu_1824_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state119)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i16_phi_fu_738_p4_assign_proc : process(i_0_i16_reg_734, icmp_ln61_1_reg_2090, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, select_ln63_1_reg_2104, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_1_reg_2090 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_0_i16_phi_fu_738_p4 <= select_ln63_1_reg_2104;
        else 
            ap_phi_mux_i_0_i16_phi_fu_738_p4 <= i_0_i16_reg_734;
        end if; 
    end process;


    ap_phi_mux_i_0_i60_phi_fu_829_p4_assign_proc : process(i_0_i60_reg_825, icmp_ln61_2_reg_2221, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, select_ln63_3_reg_2235, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_2_reg_2221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i_0_i60_phi_fu_829_p4 <= select_ln63_3_reg_2235;
        else 
            ap_phi_mux_i_0_i60_phi_fu_829_p4 <= i_0_i60_reg_825;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_660_p4_assign_proc : process(i_0_i_reg_656, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln61_reg_1953, shl_ln63_mid2_v_v_reg_1967, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_reg_1953 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_i_phi_fu_660_p4 <= shl_ln63_mid2_v_v_reg_1967;
        else 
            ap_phi_mux_i_0_i_phi_fu_660_p4 <= i_0_i_reg_656;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state119, icmp_ln99_2_fu_1824_p2)
    begin
        if (((icmp_ln99_2_fu_1824_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln76_1_fu_1571_p1 <= fc_out_1_0_q0;
    bitcast_ln76_fu_1393_p1 <= fc_out_2_0_q0;

    conv_grad_1_address0_assign_proc : process(grp_Conv2d_1_fu_984_out_matrix_address0, grp_Conv2d_fu_998_kernel_address0, ap_CS_fsm_state93, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            conv_grad_1_address0 <= grp_Conv2d_fu_998_kernel_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_grad_1_address0 <= grp_Conv2d_1_fu_984_out_matrix_address0;
        else 
            conv_grad_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_grad_1_ce0_assign_proc : process(grp_Conv2d_1_fu_984_out_matrix_ce0, grp_Conv2d_fu_998_kernel_ce0, ap_CS_fsm_state93, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            conv_grad_1_ce0 <= grp_Conv2d_fu_998_kernel_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_grad_1_ce0 <= grp_Conv2d_1_fu_984_out_matrix_ce0;
        else 
            conv_grad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_1_we0_assign_proc : process(grp_Conv2d_1_fu_984_out_matrix_we0, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_grad_1_we0 <= grp_Conv2d_1_fu_984_out_matrix_we0;
        else 
            conv_grad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_address0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state91, grp_Conv2d_3_fu_991_out_matrix_address0, grp_Conv2d_2_fu_1014_kernel_address0, grp_Padding_fu_1038_input_matrix_address0, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_grad_2_address0 <= grp_Padding_fu_1038_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            conv_grad_2_address0 <= grp_Conv2d_2_fu_1014_kernel_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            conv_grad_2_address0 <= grp_Conv2d_3_fu_991_out_matrix_address0;
        else 
            conv_grad_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_grad_2_ce0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state91, grp_Conv2d_3_fu_991_out_matrix_ce0, grp_Conv2d_2_fu_1014_kernel_ce0, grp_Padding_fu_1038_input_matrix_ce0, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_grad_2_ce0 <= grp_Padding_fu_1038_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            conv_grad_2_ce0 <= grp_Conv2d_2_fu_1014_kernel_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            conv_grad_2_ce0 <= grp_Conv2d_3_fu_991_out_matrix_ce0;
        else 
            conv_grad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_address0_assign_proc : process(ap_CS_fsm_state91, grp_Conv2d_1_fu_984_input_matrix_address0, grp_Padding_fu_1038_output_matrix_address0, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_grad_2_padding_address0 <= grp_Padding_fu_1038_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_grad_2_padding_address0 <= grp_Conv2d_1_fu_984_input_matrix_address0;
        else 
            conv_grad_2_padding_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_grad_2_padding_ce0_assign_proc : process(ap_CS_fsm_state91, grp_Conv2d_1_fu_984_input_matrix_ce0, grp_Padding_fu_1038_output_matrix_ce0, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_grad_2_padding_ce0 <= grp_Padding_fu_1038_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_grad_2_padding_ce0 <= grp_Conv2d_1_fu_984_input_matrix_ce0;
        else 
            conv_grad_2_padding_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_ce1_assign_proc : process(ap_CS_fsm_state91, grp_Padding_fu_1038_output_matrix_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_grad_2_padding_ce1 <= grp_Padding_fu_1038_output_matrix_ce1;
        else 
            conv_grad_2_padding_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_we0_assign_proc : process(ap_CS_fsm_state91, grp_Padding_fu_1038_output_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_grad_2_padding_we0 <= grp_Padding_fu_1038_output_matrix_we0;
        else 
            conv_grad_2_padding_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_we1_assign_proc : process(ap_CS_fsm_state91, grp_Padding_fu_1038_output_matrix_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_grad_2_padding_we1 <= grp_Padding_fu_1038_output_matrix_we1;
        else 
            conv_grad_2_padding_we1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_we0_assign_proc : process(grp_Conv2d_3_fu_991_out_matrix_we0, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            conv_grad_2_we0 <= grp_Conv2d_3_fu_991_out_matrix_we0;
        else 
            conv_grad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_3_padding_address0_assign_proc : process(grp_Conv2d_3_fu_991_input_matrix_address0, grp_Padding_1_fu_1032_output_matrix_address0, ap_CS_fsm_state87, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            conv_grad_3_padding_address0 <= grp_Padding_1_fu_1032_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            conv_grad_3_padding_address0 <= grp_Conv2d_3_fu_991_input_matrix_address0;
        else 
            conv_grad_3_padding_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_grad_3_padding_ce0_assign_proc : process(grp_Conv2d_3_fu_991_input_matrix_ce0, grp_Padding_1_fu_1032_output_matrix_ce0, ap_CS_fsm_state87, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            conv_grad_3_padding_ce0 <= grp_Padding_1_fu_1032_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            conv_grad_3_padding_ce0 <= grp_Conv2d_3_fu_991_input_matrix_ce0;
        else 
            conv_grad_3_padding_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_3_padding_ce1_assign_proc : process(grp_Padding_1_fu_1032_output_matrix_ce1, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            conv_grad_3_padding_ce1 <= grp_Padding_1_fu_1032_output_matrix_ce1;
        else 
            conv_grad_3_padding_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_3_padding_we0_assign_proc : process(grp_Padding_1_fu_1032_output_matrix_we0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            conv_grad_3_padding_we0 <= grp_Padding_1_fu_1032_output_matrix_we0;
        else 
            conv_grad_3_padding_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_3_padding_we1_assign_proc : process(grp_Padding_1_fu_1032_output_matrix_we1, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            conv_grad_3_padding_we1 <= grp_Padding_1_fu_1032_output_matrix_we1;
        else 
            conv_grad_3_padding_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel_1_address0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0;

    conv_kernel_1_ce0_assign_proc : process(ap_CS_fsm_state97, grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv_kernel_1_ce0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0;
        else 
            conv_kernel_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel_1_d0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0;

    conv_kernel_1_we0_assign_proc : process(ap_CS_fsm_state97, grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv_kernel_1_we0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0;
        else 
            conv_kernel_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel_2_address0_assign_proc : process(ap_CS_fsm_state91, grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0, grp_OverturnKernel_fu_1051_input_matrix_address0, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            conv_kernel_2_address0 <= grp_OverturnKernel_fu_1051_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_kernel_2_address0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0;
        else 
            conv_kernel_2_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel_2_ce0_assign_proc : process(ap_CS_fsm_state91, grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0, grp_OverturnKernel_fu_1051_input_matrix_ce0, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            conv_kernel_2_ce0 <= grp_OverturnKernel_fu_1051_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_kernel_2_ce0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0;
        else 
            conv_kernel_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel_2_d0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0;

    conv_kernel_2_we0_assign_proc : process(ap_CS_fsm_state91, grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            conv_kernel_2_we0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0;
        else 
            conv_kernel_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel_3_address0_assign_proc : process(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0, grp_OverturnKernel_fu_1044_input_matrix_address0, ap_CS_fsm_state93, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            conv_kernel_3_address0 <= grp_OverturnKernel_fu_1044_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_kernel_3_address0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_address0;
        else 
            conv_kernel_3_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel_3_ce0_assign_proc : process(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0, grp_OverturnKernel_fu_1044_input_matrix_ce0, ap_CS_fsm_state93, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            conv_kernel_3_ce0 <= grp_OverturnKernel_fu_1044_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_kernel_3_ce0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_ce0;
        else 
            conv_kernel_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel_3_d0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_d0;

    conv_kernel_3_we0_assign_proc : process(grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            conv_kernel_3_we0 <= grp_MatrixBackPropagatio_1_fu_1022_output_matrix_we0;
        else 
            conv_kernel_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_address0 <= grp_Conv2d_2_fu_1014_conv_out_1_address0;
    conv_out_1_ce0 <= grp_Conv2d_2_fu_1014_conv_out_1_ce0;
    conv_out_2_address0 <= grp_Conv2d_4_fu_1006_conv_out_2_address0;
    conv_out_2_ce0 <= grp_Conv2d_4_fu_1006_conv_out_2_ce0;

    fc_hidden_layer1_address0_assign_proc : process(ap_CS_fsm_state73, fc_hidden_layer1_add_2_reg_2323, ap_CS_fsm_state108, zext_ln70_4_fu_1722_p1, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            fc_hidden_layer1_address0 <= fc_hidden_layer1_add_2_reg_2323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            fc_hidden_layer1_address0 <= zext_ln70_4_fu_1722_p1(17 - 1 downto 0);
        else 
            fc_hidden_layer1_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer1_ce0_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state108, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            fc_hidden_layer1_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer1_d0 <= reg_1095;

    fc_hidden_layer1_we0_assign_proc : process(ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            fc_hidden_layer1_we0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_address0_assign_proc : process(ap_CS_fsm_state114, ap_CS_fsm_state45, fc_hidden_layer2_add_2_reg_2359, zext_ln70_2_fu_1544_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            fc_hidden_layer2_address0 <= fc_hidden_layer2_add_2_reg_2359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            fc_hidden_layer2_address0 <= zext_ln70_2_fu_1544_p1(13 - 1 downto 0);
        else 
            fc_hidden_layer2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    fc_hidden_layer2_address1 <= fc_hidden_layer2_add_2_reg_2359;

    fc_hidden_layer2_ce0_assign_proc : process(ap_CS_fsm_state114, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state114))) then 
            fc_hidden_layer2_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_ce1_assign_proc : process(ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            fc_hidden_layer2_ce1 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer2_d1 <= grp_fu_1058_p2;

    fc_hidden_layer2_we1_assign_proc : process(ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            fc_hidden_layer2_we1 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer3_address0_assign_proc : process(ap_CS_fsm_state16, fc_hidden_layer3_add_2_reg_2401, ap_CS_fsm_state129, zext_ln70_fu_1366_p1, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state129))) then 
            fc_hidden_layer3_address0 <= fc_hidden_layer3_add_2_reg_2401;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc_hidden_layer3_address0 <= zext_ln70_fu_1366_p1(9 - 1 downto 0);
        else 
            fc_hidden_layer3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer3_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state129, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state129))) then 
            fc_hidden_layer3_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer3_d0 <= reg_1095;

    fc_hidden_layer3_we0_assign_proc : process(ap_CS_fsm_state129)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            fc_hidden_layer3_we0 <= ap_const_logic_1;
        else 
            fc_hidden_layer3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_1_0_address0 <= zext_ln63_10_fu_1651_p1(10 - 1 downto 0);

    fc_in_1_0_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            fc_in_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_2_relu1_0_address0 <= zext_ln63_6_fu_1473_p1(8 - 1 downto 0);

    fc_in_2_relu1_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_3_relu2_0_address0 <= fc_in_3_relu2_0_load_2_fu_1250_p1(6 - 1 downto 0);

    fc_in_3_relu2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fc_in_3_relu2_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_3_relu2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_3_relu2_0_load_2_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln63_mid2_v_v_fu_1242_p3),64));
    fc_out_1_0_address0 <= zext_ln76_1_fu_1566_p1(8 - 1 downto 0);

    fc_out_1_0_ce0_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            fc_out_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_out_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_out_2_0_address0 <= zext_ln76_fu_1388_p1(6 - 1 downto 0);

    fc_out_2_0_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            fc_out_2_0_ce0 <= ap_const_logic_1;
        else 
            fc_out_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_0_address0_assign_proc : process(grad_0_addr_reg_2279, ap_CS_fsm_state73, grp_Conv2d_4_fu_1006_kernel_address0, grp_Padding_1_fu_1032_input_matrix_address0, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grad_0_address0 <= grad_0_addr_reg_2279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grad_0_address0 <= grp_Padding_1_fu_1032_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            grad_0_address0 <= grp_Conv2d_4_fu_1006_kernel_address0;
        else 
            grad_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    grad_0_ce0_assign_proc : process(ap_CS_fsm_state73, grp_Conv2d_4_fu_1006_kernel_ce0, grp_Padding_1_fu_1032_input_matrix_ce0, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grad_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grad_0_ce0 <= grp_Padding_1_fu_1032_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            grad_0_ce0 <= grp_Conv2d_4_fu_1006_kernel_ce0;
        else 
            grad_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_0_we0_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grad_0_we0 <= ap_const_logic_1;
        else 
            grad_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grad_1_addr_1_gep_fu_518_p3 <= zext_ln76_1_reg_2180(8 - 1 downto 0);

    grad_1_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, zext_ln76_1_reg_2180, ap_CS_fsm_state56, ap_enable_reg_pp2_iter0, ap_CS_fsm_state73, ap_CS_fsm_state64, ap_block_pp2_stage0, grad_1_addr_1_gep_fu_518_p3, zext_ln63_7_fu_1656_p1, zext_ln70_5_fu_1727_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grad_1_address0 <= zext_ln70_5_fu_1727_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grad_1_address0 <= zext_ln63_7_fu_1656_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grad_1_address0 <= grad_1_addr_1_gep_fu_518_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grad_1_address0 <= zext_ln76_1_reg_2180(8 - 1 downto 0);
        else 
            grad_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    grad_1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state56, ap_enable_reg_pp2_iter0, ap_CS_fsm_state73, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state64) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            grad_1_ce0 <= ap_const_logic_1;
        else 
            grad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_1_d0_assign_proc : process(ap_CS_fsm_state56, rgrad_1_q0, ap_CS_fsm_state64, grp_fu_1073_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grad_1_d0 <= grp_fu_1073_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grad_1_d0 <= rgrad_1_q0;
        else 
            grad_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grad_1_we0_assign_proc : process(and_ln76_1_fu_1605_p2, and_ln76_1_reg_2212, ap_CS_fsm_state56, ap_CS_fsm_state64)
    begin
        if ((((ap_const_lv1_1 = and_ln76_1_fu_1605_p2) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = and_ln76_1_reg_2212)))) then 
            grad_1_we0 <= ap_const_logic_1;
        else 
            grad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grad_2_addr_1_gep_fu_415_p3 <= zext_ln76_reg_2049(8 - 1 downto 0);

    grad_2_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, zext_ln76_reg_2049, ap_CS_fsm_state28, ap_enable_reg_pp1_iter0, ap_CS_fsm_state45, ap_CS_fsm_state36, ap_block_pp1_stage0, grad_2_addr_1_gep_fu_415_p3, zext_ln63_4_fu_1478_p1, zext_ln70_3_fu_1549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grad_2_address0 <= zext_ln70_3_fu_1549_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grad_2_address0 <= zext_ln63_4_fu_1478_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grad_2_address0 <= grad_2_addr_1_gep_fu_415_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grad_2_address0 <= zext_ln76_reg_2049(8 - 1 downto 0);
        else 
            grad_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    grad_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state28, ap_enable_reg_pp1_iter0, ap_CS_fsm_state45, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            grad_2_ce0 <= ap_const_logic_1;
        else 
            grad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_2_d0_assign_proc : process(ap_CS_fsm_state28, rgrad_2_q0, ap_CS_fsm_state36, grp_fu_1073_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grad_2_d0 <= grp_fu_1073_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grad_2_d0 <= rgrad_2_q0;
        else 
            grad_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grad_2_we0_assign_proc : process(and_ln76_fu_1427_p2, and_ln76_reg_2081, ap_CS_fsm_state28, ap_CS_fsm_state36)
    begin
        if ((((ap_const_lv1_1 = and_ln76_fu_1427_p2) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_const_lv1_0 = and_ln76_reg_2081)))) then 
            grad_2_we0 <= ap_const_logic_1;
        else 
            grad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, grad_3_addr_reg_1914, ap_CS_fsm_state6, zext_ln131_reg_1943, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, ap_CS_fsm_state7, ap_block_pp0_stage0, zext_ln63_fu_1255_p1, zext_ln70_1_fu_1371_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grad_3_address0 <= zext_ln70_1_fu_1371_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grad_3_address0 <= zext_ln63_fu_1255_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grad_3_address0 <= zext_ln131_reg_1943(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grad_3_address0 <= grad_3_addr_reg_1914;
        else 
            grad_3_address0 <= "XXXX";
        end if; 
    end process;


    grad_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grad_3_ce0 <= ap_const_logic_1;
        else 
            grad_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_3_d0_assign_proc : process(probability_result_q0, reg_1095, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grad_3_d0 <= probability_result_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grad_3_d0 <= reg_1095;
        else 
            grad_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grad_3_we0_assign_proc : process(icmp_ln129_fu_1188_p2, ap_CS_fsm_state6, icmp_ln130_fu_1200_p2, icmp_ln130_reg_1939, ap_CS_fsm_state7)
    begin
        if ((((icmp_ln130_fu_1200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln129_fu_1188_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln130_reg_1939 = ap_const_lv1_0)))) then 
            grad_3_we0 <= ap_const_logic_1;
        else 
            grad_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv2d_1_fu_984_ap_start <= grp_Conv2d_1_fu_984_ap_start_reg;
    grp_Conv2d_2_fu_1014_ap_start <= grp_Conv2d_2_fu_1014_ap_start_reg;
    grp_Conv2d_3_fu_991_ap_start <= grp_Conv2d_3_fu_991_ap_start_reg;
    grp_Conv2d_4_fu_1006_ap_start <= grp_Conv2d_4_fu_1006_ap_start_reg;
    grp_Conv2d_fu_998_ap_start <= grp_Conv2d_fu_998_ap_start_reg;
    grp_MatrixBackPropagatio_1_fu_1022_ap_start <= grp_MatrixBackPropagatio_1_fu_1022_ap_start_reg;

    grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0_assign_proc : process(ap_CS_fsm_state91, ap_CS_fsm_state97, kernel_grad_3_q0, kernel_grad_2_q0, kernel_grad_1_q0, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 <= kernel_grad_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 <= kernel_grad_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 <= kernel_grad_2_q0;
        else 
            grp_MatrixBackPropagatio_1_fu_1022_input_matrix_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MatrixBackPropagatio_1_fu_1022_lr_assign_proc : process(ap_CS_fsm_state91, ap_CS_fsm_state97, reg_1157, reg_1163, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_MatrixBackPropagatio_1_fu_1022_lr <= reg_1157;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            grp_MatrixBackPropagatio_1_fu_1022_lr <= reg_1163;
        else 
            grp_MatrixBackPropagatio_1_fu_1022_lr <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0_assign_proc : process(conv_kernel_3_q0, conv_kernel_2_q0, conv_kernel_1_q0, ap_CS_fsm_state91, ap_CS_fsm_state97, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 <= conv_kernel_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 <= conv_kernel_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 <= conv_kernel_2_q0;
        else 
            grp_MatrixBackPropagatio_1_fu_1022_output_matrix_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_OverturnKernel_fu_1044_ap_start <= grp_OverturnKernel_fu_1044_ap_start_reg;
    grp_OverturnKernel_fu_1051_ap_start <= grp_OverturnKernel_fu_1051_ap_start_reg;
    grp_Padding_1_fu_1032_ap_start <= grp_Padding_1_fu_1032_ap_start_reg;
    grp_Padding_fu_1038_ap_start <= grp_Padding_fu_1038_ap_start_reg;

    grp_fu_1058_opcode_assign_proc : process(ap_CS_fsm_state115, ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state50, ap_CS_fsm_state78, ap_CS_fsm_state104, ap_CS_fsm_state125)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            grp_fu_1058_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_1058_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1058_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1058_p0_assign_proc : process(probability_result_q0, fc_hidden_layer2_q0, reg_1119, ap_CS_fsm_state115, reg_1151, ap_CS_fsm_state2, empty_46_reg_689, storemerge_reg_779, storemerge240_reg_870, ap_CS_fsm_state21, ap_CS_fsm_state50, ap_CS_fsm_state78, ap_CS_fsm_state104, ap_CS_fsm_state125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            grp_fu_1058_p0 <= reg_1119;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            grp_fu_1058_p0 <= fc_hidden_layer2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_1058_p0 <= reg_1151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_1058_p0 <= storemerge240_reg_870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1058_p0 <= storemerge_reg_779;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1058_p0 <= empty_46_reg_689;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1058_p0 <= probability_result_q0;
        else 
            grp_fu_1058_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1058_p1_assign_proc : process(reg_1111, ap_CS_fsm_state115, ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state50, ap_CS_fsm_state78, ap_CS_fsm_state104, ap_CS_fsm_state125)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_1058_p1 <= reg_1111;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1058_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_1058_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1069_p0_assign_proc : process(reg_1119, reg_1140, reg_1151, fc_in_3_relu2_0_load_reg_1989, fc_in_2_relu1_0_load_reg_2125, fc_in_1_0_load_reg_2256, wgrad_1_load_reg_2333, wgrad_2_load_reg_2370, wgrad_3_load_reg_2411, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_state18, ap_CS_fsm_state47, ap_CS_fsm_state75, ap_CS_fsm_state101, ap_CS_fsm_state112, ap_CS_fsm_state122)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            grp_fu_1069_p0 <= wgrad_3_load_reg_2411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            grp_fu_1069_p0 <= wgrad_2_load_reg_2370;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_fu_1069_p0 <= wgrad_1_load_reg_2333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_1069_p0 <= reg_1151;
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_1069_p0 <= fc_in_1_0_load_reg_2256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1069_p0 <= reg_1140;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_1069_p0 <= fc_in_2_relu1_0_load_reg_2125;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_1069_p0 <= reg_1119;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_1069_p0 <= fc_in_3_relu2_0_load_reg_1989;
        else 
            grp_fu_1069_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1069_p1_assign_proc : process(reg_1106, reg_1135, reg_1146, reg_1157, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_state18, ap_CS_fsm_state47, ap_CS_fsm_state75, ap_CS_fsm_state101, ap_CS_fsm_state112, ap_CS_fsm_state122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            grp_fu_1069_p1 <= reg_1157;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)))) then 
            grp_fu_1069_p1 <= reg_1146;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            grp_fu_1069_p1 <= reg_1135;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            grp_fu_1069_p1 <= reg_1106;
        else 
            grp_fu_1069_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1078_p0_assign_proc : process(ap_CS_fsm_state28, rgrad_2_q0, ap_CS_fsm_state56, rgrad_1_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1078_p0 <= rgrad_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_1078_p0 <= rgrad_2_q0;
        else 
            grp_fu_1078_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1083_p0_assign_proc : process(fc_out_2_0_q0, fc_out_1_0_q0, ap_CS_fsm_state27, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_1083_p0 <= fc_out_1_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_1083_p0 <= fc_out_2_0_q0;
        else 
            grp_fu_1083_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1888_p0 <= grp_fu_1888_p00(8 - 1 downto 0);
    grp_fu_1888_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_1_reg_2104),13));
    grp_fu_1888_p1 <= ap_const_lv13_2D(7 - 1 downto 0);
    grp_fu_1888_p2 <= grp_fu_1888_p20(6 - 1 downto 0);
    grp_fu_1888_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_reg_2099),13));
    grp_fu_1896_p0 <= grp_fu_1896_p00(10 - 1 downto 0);
    grp_fu_1896_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_3_reg_2235),17));
    grp_fu_1896_p1 <= ap_const_lv17_B4(9 - 1 downto 0);
    grp_fu_1896_p2 <= grp_fu_1896_p20(8 - 1 downto 0);
    grp_fu_1896_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_2_reg_2230),17));
    i_10_fu_1623_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i60_phi_fu_829_p4) + unsigned(ap_const_lv10_1));
    i_11_fu_1560_p2 <= std_logic_vector(unsigned(i_0_i49_reg_803) + unsigned(ap_const_lv8_1));
    i_12_fu_1689_p2 <= std_logic_vector(unsigned(i_0_i74_reg_847) + unsigned(ap_const_lv10_1));
    i_13_fu_1744_p2 <= std_logic_vector(unsigned(i_0_i92_reg_894) + unsigned(ap_const_lv10_1));
    i_14_fu_1790_p2 <= std_logic_vector(unsigned(i_0_i101_reg_928) + unsigned(ap_const_lv8_1));
    i_15_fu_1830_p2 <= std_logic_vector(unsigned(i_0_i118_reg_962) + unsigned(ap_const_lv6_1));
    i_5_fu_1194_p2 <= std_logic_vector(unsigned(i_0_reg_634) + unsigned(ap_const_lv4_1));
    i_6_fu_1309_p2 <= std_logic_vector(unsigned(i_0_i1_reg_678) + unsigned(ap_const_lv6_1));
    i_7_fu_1445_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i16_phi_fu_738_p4) + unsigned(ap_const_lv8_1));
    i_8_fu_1382_p2 <= std_logic_vector(unsigned(i_0_i8_reg_712) + unsigned(ap_const_lv6_1));
    i_9_fu_1511_p2 <= std_logic_vector(unsigned(i_0_i31_reg_756) + unsigned(ap_const_lv8_1));
    i_fu_1222_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_660_p4) + unsigned(ap_const_lv6_1));
    icmp_ln100_1_fu_1800_p2 <= "1" when (j_0_i105_reg_951 = ap_const_lv6_2D) else "0";
    icmp_ln100_2_fu_1856_p2 <= "1" when (j_0_i122_reg_973 = ap_const_lv4_A) else "0";
    icmp_ln100_fu_1754_p2 <= "1" when (j_0_i93_reg_917 = ap_const_lv8_B4) else "0";
    icmp_ln129_fu_1188_p2 <= "1" when (i_0_reg_634 = ap_const_lv4_A) else "0";
    icmp_ln130_fu_1200_p2 <= "1" when (zext_ln129_fu_1184_p1 = label_r) else "0";
    icmp_ln61_1_fu_1433_p2 <= "1" when (indvar_flatten13_reg_723 = ap_const_lv13_1FA4) else "0";
    icmp_ln61_2_fu_1611_p2 <= "1" when (indvar_flatten26_reg_814 = ap_const_lv17_19500) else "0";
    icmp_ln61_fu_1210_p2 <= "1" when (indvar_flatten_reg_645 = ap_const_lv9_1C2) else "0";
    icmp_ln62_1_fu_1451_p2 <= "1" when (j_0_i21_reg_745 = ap_const_lv6_2D) else "0";
    icmp_ln62_2_fu_1629_p2 <= "1" when (j_0_i64_reg_836 = ap_const_lv8_B4) else "0";
    icmp_ln62_fu_1228_p2 <= "1" when (j_0_i_reg_667 = ap_const_lv4_A) else "0";
    icmp_ln67_1_fu_1505_p2 <= "1" when (i_0_i31_reg_756 = ap_const_lv8_B4) else "0";
    icmp_ln67_2_fu_1683_p2 <= "1" when (i_0_i74_reg_847 = ap_const_lv10_240) else "0";
    icmp_ln67_fu_1303_p2 <= "1" when (i_0_i1_reg_678 = ap_const_lv6_2D) else "0";
    icmp_ln69_1_fu_1526_p2 <= "1" when (j_0_i36_reg_792 = ap_const_lv6_2D) else "0";
    icmp_ln69_2_fu_1704_p2 <= "1" when (j_0_i79_reg_883 = ap_const_lv8_B4) else "0";
    icmp_ln69_fu_1340_p2 <= "1" when (j_0_i2_reg_701 = ap_const_lv4_A) else "0";
    icmp_ln75_1_fu_1554_p2 <= "1" when (i_0_i49_reg_803 = ap_const_lv8_B4) else "0";
    icmp_ln75_fu_1376_p2 <= "1" when (i_0_i8_reg_712 = ap_const_lv6_2D) else "0";
    icmp_ln76_1_fu_1417_p2 <= "1" when (trunc_ln76_fu_1407_p1 = ap_const_lv23_0) else "0";
    icmp_ln76_2_fu_1589_p2 <= "0" when (tmp_15_fu_1575_p4 = ap_const_lv8_FF) else "1";
    icmp_ln76_3_fu_1595_p2 <= "1" when (trunc_ln76_1_fu_1585_p1 = ap_const_lv23_0) else "0";
    icmp_ln76_fu_1411_p2 <= "0" when (tmp_s_fu_1397_p4 = ap_const_lv8_FF) else "1";
    icmp_ln99_1_fu_1784_p2 <= "1" when (i_0_i101_reg_928 = ap_const_lv8_B4) else "0";
    icmp_ln99_2_fu_1824_p2 <= "1" when (i_0_i118_reg_962 = ap_const_lv6_2D) else "0";
    icmp_ln99_fu_1738_p2 <= "1" when (i_0_i92_reg_894 = ap_const_lv10_240) else "0";
    j_0_i105_cast_fu_1796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i105_reg_951),13));
    j_0_i122_cast_fu_1852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i122_reg_973),7));
    j_0_i2_cast13_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i2_reg_701),7));
    j_0_i36_cast9_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i36_reg_792),13));
    j_0_i79_cast5_fu_1700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i79_reg_883),17));
    j_0_i93_cast_fu_1750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i93_reg_917),17));
    j_0_i_cast16_mid2_ca_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_mid2_reg_1962),7));
    j_0_i_mid2_fu_1234_p3 <= 
        ap_const_lv4_0 when (icmp_ln62_fu_1228_p2(0) = '1') else 
        j_0_i_reg_667;
    j_15_fu_1346_p2 <= std_logic_vector(unsigned(j_0_i2_reg_701) + unsigned(ap_const_lv4_1));
    j_16_fu_1483_p2 <= std_logic_vector(unsigned(select_ln63_fu_1457_p3) + unsigned(ap_const_lv6_1));
    j_17_fu_1532_p2 <= std_logic_vector(unsigned(j_0_i36_reg_792) + unsigned(ap_const_lv6_1));
    j_18_fu_1661_p2 <= std_logic_vector(unsigned(select_ln63_2_fu_1635_p3) + unsigned(ap_const_lv8_1));
    j_19_fu_1710_p2 <= std_logic_vector(unsigned(j_0_i79_reg_883) + unsigned(ap_const_lv8_1));
    j_20_fu_1760_p2 <= std_logic_vector(unsigned(j_0_i93_reg_917) + unsigned(ap_const_lv8_1));
    j_21_fu_1806_p2 <= std_logic_vector(unsigned(j_0_i105_reg_951) + unsigned(ap_const_lv6_1));
    j_22_fu_1862_p2 <= std_logic_vector(unsigned(j_0_i122_reg_973) + unsigned(ap_const_lv4_1));
    j_fu_1260_p2 <= std_logic_vector(unsigned(j_0_i_mid2_fu_1234_p3) + unsigned(ap_const_lv4_1));

    kernel_grad_1_address0_assign_proc : process(ap_CS_fsm_state97, grp_Conv2d_fu_998_out_matrix_address0, grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            kernel_grad_1_address0 <= grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            kernel_grad_1_address0 <= grp_Conv2d_fu_998_out_matrix_address0;
        else 
            kernel_grad_1_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_1_ce0_assign_proc : process(ap_CS_fsm_state97, grp_Conv2d_fu_998_out_matrix_ce0, grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            kernel_grad_1_ce0 <= grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            kernel_grad_1_ce0 <= grp_Conv2d_fu_998_out_matrix_ce0;
        else 
            kernel_grad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_1_we0_assign_proc : process(grp_Conv2d_fu_998_out_matrix_we0, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            kernel_grad_1_we0 <= grp_Conv2d_fu_998_out_matrix_we0;
        else 
            kernel_grad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_address0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state91, grp_Conv2d_2_fu_1014_out_matrix_address0, grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            kernel_grad_2_address0 <= grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            kernel_grad_2_address0 <= grp_Conv2d_2_fu_1014_out_matrix_address0;
        else 
            kernel_grad_2_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_2_ce0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state91, grp_Conv2d_2_fu_1014_out_matrix_ce0, grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            kernel_grad_2_ce0 <= grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            kernel_grad_2_ce0 <= grp_Conv2d_2_fu_1014_out_matrix_ce0;
        else 
            kernel_grad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_overtu_address0_assign_proc : process(grp_Conv2d_1_fu_984_kernel_address0, grp_OverturnKernel_fu_1051_output_matrix_address0, ap_CS_fsm_state93, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_2_overtu_address0 <= grp_OverturnKernel_fu_1051_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            kernel_grad_2_overtu_address0 <= grp_Conv2d_1_fu_984_kernel_address0;
        else 
            kernel_grad_2_overtu_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_2_overtu_ce0_assign_proc : process(grp_Conv2d_1_fu_984_kernel_ce0, grp_OverturnKernel_fu_1051_output_matrix_ce0, ap_CS_fsm_state93, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_2_overtu_ce0 <= grp_OverturnKernel_fu_1051_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            kernel_grad_2_overtu_ce0 <= grp_Conv2d_1_fu_984_kernel_ce0;
        else 
            kernel_grad_2_overtu_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_overtu_we0_assign_proc : process(grp_OverturnKernel_fu_1051_output_matrix_we0, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_2_overtu_we0 <= grp_OverturnKernel_fu_1051_output_matrix_we0;
        else 
            kernel_grad_2_overtu_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_we0_assign_proc : process(ap_CS_fsm_state89, grp_Conv2d_2_fu_1014_out_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            kernel_grad_2_we0 <= grp_Conv2d_2_fu_1014_out_matrix_we0;
        else 
            kernel_grad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_3_address0_assign_proc : process(grp_Conv2d_4_fu_1006_out_matrix_address0, grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0, ap_CS_fsm_state93, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            kernel_grad_3_address0 <= grp_MatrixBackPropagatio_1_fu_1022_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_3_address0 <= grp_Conv2d_4_fu_1006_out_matrix_address0;
        else 
            kernel_grad_3_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_3_ce0_assign_proc : process(grp_Conv2d_4_fu_1006_out_matrix_ce0, grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0, ap_CS_fsm_state93, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            kernel_grad_3_ce0 <= grp_MatrixBackPropagatio_1_fu_1022_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_3_ce0 <= grp_Conv2d_4_fu_1006_out_matrix_ce0;
        else 
            kernel_grad_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_3_overtu_address0_assign_proc : process(grp_Conv2d_3_fu_991_kernel_address0, grp_OverturnKernel_fu_1044_output_matrix_address0, ap_CS_fsm_state87, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_3_overtu_address0 <= grp_OverturnKernel_fu_1044_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            kernel_grad_3_overtu_address0 <= grp_Conv2d_3_fu_991_kernel_address0;
        else 
            kernel_grad_3_overtu_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_3_overtu_ce0_assign_proc : process(grp_Conv2d_3_fu_991_kernel_ce0, grp_OverturnKernel_fu_1044_output_matrix_ce0, ap_CS_fsm_state87, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_3_overtu_ce0 <= grp_OverturnKernel_fu_1044_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            kernel_grad_3_overtu_ce0 <= grp_Conv2d_3_fu_991_kernel_ce0;
        else 
            kernel_grad_3_overtu_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_3_overtu_we0_assign_proc : process(grp_OverturnKernel_fu_1044_output_matrix_we0, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_3_overtu_we0 <= grp_OverturnKernel_fu_1044_output_matrix_we0;
        else 
            kernel_grad_3_overtu_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_3_we0_assign_proc : process(grp_Conv2d_4_fu_1006_out_matrix_we0, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            kernel_grad_3_we0 <= grp_Conv2d_4_fu_1006_out_matrix_we0;
        else 
            kernel_grad_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lr_in_blk_n_AR_assign_proc : process(m_axi_lr_in_ARREADY, ap_CS_fsm_state72, icmp_ln67_2_fu_1683_p2, ap_CS_fsm_state88, ap_CS_fsm_state82, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((icmp_ln67_2_fu_1683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72)))) then 
            lr_in_blk_n_AR <= m_axi_lr_in_ARREADY;
        else 
            lr_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    lr_in_blk_n_R_assign_proc : process(m_axi_lr_in_RVALID, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            lr_in_blk_n_R <= m_axi_lr_in_RVALID;
        else 
            lr_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_lr_in_ARADDR <= lr_in_addr_reg_1924;
    m_axi_lr_in_ARBURST <= ap_const_lv2_0;
    m_axi_lr_in_ARCACHE <= ap_const_lv4_0;
    m_axi_lr_in_ARID <= ap_const_lv1_0;
    m_axi_lr_in_ARLEN <= ap_const_lv32_1;
    m_axi_lr_in_ARLOCK <= ap_const_lv2_0;
    m_axi_lr_in_ARPROT <= ap_const_lv3_0;
    m_axi_lr_in_ARQOS <= ap_const_lv4_0;
    m_axi_lr_in_ARREGION <= ap_const_lv4_0;
    m_axi_lr_in_ARSIZE <= ap_const_lv3_0;
    m_axi_lr_in_ARUSER <= ap_const_lv1_0;

    m_axi_lr_in_ARVALID_assign_proc : process(m_axi_lr_in_ARREADY, m_axi_lr_in_RVALID, ap_CS_fsm_state72, icmp_ln67_2_fu_1683_p2, ap_CS_fsm_state88, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_block_state72_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state84) and (m_axi_lr_in_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_lr_in_ARREADY = ap_const_logic_1)) or (not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (m_axi_lr_in_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state88)) or ((ap_const_boolean_0 = ap_block_state72_io) and (icmp_ln67_2_fu_1683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72)))) then 
            m_axi_lr_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_lr_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_lr_in_AWADDR <= ap_const_lv32_0;
    m_axi_lr_in_AWBURST <= ap_const_lv2_0;
    m_axi_lr_in_AWCACHE <= ap_const_lv4_0;
    m_axi_lr_in_AWID <= ap_const_lv1_0;
    m_axi_lr_in_AWLEN <= ap_const_lv32_0;
    m_axi_lr_in_AWLOCK <= ap_const_lv2_0;
    m_axi_lr_in_AWPROT <= ap_const_lv3_0;
    m_axi_lr_in_AWQOS <= ap_const_lv4_0;
    m_axi_lr_in_AWREGION <= ap_const_lv4_0;
    m_axi_lr_in_AWSIZE <= ap_const_lv3_0;
    m_axi_lr_in_AWUSER <= ap_const_lv1_0;
    m_axi_lr_in_AWVALID <= ap_const_logic_0;
    m_axi_lr_in_BREADY <= ap_const_logic_0;

    m_axi_lr_in_RREADY_assign_proc : process(m_axi_lr_in_ARREADY, m_axi_lr_in_RVALID, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state97, grp_MatrixBackPropagatio_1_fu_1022_ap_done, grp_Conv2d_2_fu_1014_ap_done, ap_block_state91_on_subcall_done)
    begin
        if (((not(((grp_MatrixBackPropagatio_1_fu_1022_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state97)) or (not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state91_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state91)) or (not(((grp_Conv2d_2_fu_1014_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state89)) or (not(((m_axi_lr_in_RVALID = ap_const_logic_0) or (m_axi_lr_in_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state88)))) then 
            m_axi_lr_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_lr_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_lr_in_WDATA <= ap_const_lv32_0;
    m_axi_lr_in_WID <= ap_const_lv1_0;
    m_axi_lr_in_WLAST <= ap_const_logic_0;
    m_axi_lr_in_WSTRB <= ap_const_lv4_0;
    m_axi_lr_in_WUSER <= ap_const_lv1_0;
    m_axi_lr_in_WVALID <= ap_const_logic_0;
    mnist_data_address0 <= grp_Conv2d_fu_998_input_matrix_address0;
    mnist_data_ce0 <= grp_Conv2d_fu_998_input_matrix_ce0;
    or_ln76_1_fu_1601_p2 <= (icmp_ln76_3_reg_2202 or icmp_ln76_2_reg_2197);
    or_ln76_fu_1423_p2 <= (icmp_ln76_reg_2066 or icmp_ln76_1_reg_2071);

    probability_result_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, zext_ln131_fu_1205_p1, zext_ln130_fu_1168_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            probability_result_address0 <= zext_ln131_fu_1205_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            probability_result_address0 <= zext_ln130_fu_1168_p1(4 - 1 downto 0);
        else 
            probability_result_address0 <= "XXXX";
        end if; 
    end process;


    probability_result_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            probability_result_ce0 <= ap_const_logic_1;
        else 
            probability_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rgrad_1_address0_assign_proc : process(rgrad_1_addr_reg_2148, ap_CS_fsm_state45, zext_ln76_1_reg_2180, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            rgrad_1_address0 <= zext_ln76_1_reg_2180(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            rgrad_1_address0 <= rgrad_1_addr_reg_2148;
        else 
            rgrad_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rgrad_1_ce0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            rgrad_1_ce0 <= ap_const_logic_1;
        else 
            rgrad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rgrad_1_we0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            rgrad_1_we0 <= ap_const_logic_1;
        else 
            rgrad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rgrad_2_address0_assign_proc : process(ap_CS_fsm_state15, rgrad_2_addr_reg_2007, zext_ln76_reg_2049, ap_CS_fsm_state27, ap_CS_fsm_state25, zext_ln68_fu_1315_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            rgrad_2_address0 <= zext_ln76_reg_2049(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            rgrad_2_address0 <= rgrad_2_addr_reg_2007;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rgrad_2_address0 <= zext_ln68_fu_1315_p1(6 - 1 downto 0);
        else 
            rgrad_2_address0 <= "XXXXXX";
        end if; 
    end process;


    rgrad_2_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            rgrad_2_ce0 <= ap_const_logic_1;
        else 
            rgrad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rgrad_2_d0_assign_proc : process(reg_1095, ap_CS_fsm_state15, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            rgrad_2_d0 <= reg_1095;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rgrad_2_d0 <= ap_const_lv32_0;
        else 
            rgrad_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rgrad_2_we0_assign_proc : process(ap_CS_fsm_state15, icmp_ln67_fu_1303_p2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln67_fu_1303_p2 = ap_const_lv1_0)))) then 
            rgrad_2_we0 <= ap_const_logic_1;
        else 
            rgrad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln63_1_fu_1465_p3 <= 
        i_7_fu_1445_p2 when (icmp_ln62_1_fu_1451_p2(0) = '1') else 
        ap_phi_mux_i_0_i16_phi_fu_738_p4;
    select_ln63_2_fu_1635_p3 <= 
        ap_const_lv8_0 when (icmp_ln62_2_fu_1629_p2(0) = '1') else 
        j_0_i64_reg_836;
    select_ln63_3_fu_1643_p3 <= 
        i_10_fu_1623_p2 when (icmp_ln62_2_fu_1629_p2(0) = '1') else 
        ap_phi_mux_i_0_i60_phi_fu_829_p4;
    select_ln63_fu_1457_p3 <= 
        ap_const_lv6_0 when (icmp_ln62_1_fu_1451_p2(0) = '1') else 
        j_0_i21_reg_745;
    shl_ln101_1_fu_1844_p3 <= (i_0_i118_reg_962 & ap_const_lv1_0);
    shl_ln2_fu_1836_p3 <= (i_0_i118_reg_962 & ap_const_lv3_0);
    shl_ln63_1_mid2_fu_1273_p3 <= (shl_ln63_mid2_v_v_reg_1967 & ap_const_lv1_0);
    shl_ln63_mid2_fu_1266_p3 <= (shl_ln63_mid2_v_v_reg_1967 & ap_const_lv3_0);
    shl_ln63_mid2_v_v_fu_1242_p3 <= 
        i_fu_1222_p2 when (icmp_ln62_fu_1228_p2(0) = '1') else 
        ap_phi_mux_i_0_i_phi_fu_660_p4;
    shl_ln70_1_fu_1328_p3 <= (i_0_i1_reg_678 & ap_const_lv1_0);
    shl_ln_fu_1320_p3 <= (i_0_i1_reg_678 & ap_const_lv3_0);
    tmp_15_fu_1575_p4 <= bitcast_ln76_1_fu_1571_p1(30 downto 23);
    tmp_s_fu_1397_p4 <= bitcast_ln76_fu_1393_p1(30 downto 23);
    trunc_ln76_1_fu_1585_p1 <= bitcast_ln76_1_fu_1571_p1(23 - 1 downto 0);
    trunc_ln76_fu_1407_p1 <= bitcast_ln76_fu_1393_p1(23 - 1 downto 0);

    wgrad_1_address0_assign_proc : process(ap_CS_fsm_state99, ap_enable_reg_pp2_iter5, ap_block_pp2_stage0, zext_ln63_8_fu_1673_p1, zext_ln101_fu_1772_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            wgrad_1_address0 <= zext_ln101_fu_1772_p1(17 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wgrad_1_address0 <= zext_ln63_8_fu_1673_p1(17 - 1 downto 0);
        else 
            wgrad_1_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wgrad_1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state99, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1)))) then 
            wgrad_1_ce0 <= ap_const_logic_1;
        else 
            wgrad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_1_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln61_2_reg_2221_pp2_iter4_reg, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (icmp_ln61_2_reg_2221_pp2_iter4_reg = ap_const_lv1_0))) then 
            wgrad_1_we0 <= ap_const_logic_1;
        else 
            wgrad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_2_address0_assign_proc : process(ap_CS_fsm_state110, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, zext_ln63_5_fu_1495_p1, zext_ln101_1_fu_1818_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            wgrad_2_address0 <= zext_ln101_1_fu_1818_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            wgrad_2_address0 <= zext_ln63_5_fu_1495_p1(13 - 1 downto 0);
        else 
            wgrad_2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    wgrad_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state110, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)))) then 
            wgrad_2_ce0 <= ap_const_logic_1;
        else 
            wgrad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_2_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln61_1_reg_2090_pp1_iter4_reg, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln61_1_reg_2090_pp1_iter4_reg = ap_const_lv1_0))) then 
            wgrad_2_we0 <= ap_const_logic_1;
        else 
            wgrad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_3_address0_assign_proc : process(ap_CS_fsm_state120, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, zext_ln63_2_fu_1299_p1, zext_ln101_2_fu_1882_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            wgrad_3_address0 <= zext_ln101_2_fu_1882_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            wgrad_3_address0 <= zext_ln63_2_fu_1299_p1(9 - 1 downto 0);
        else 
            wgrad_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    wgrad_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state120, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state120) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            wgrad_3_ce0 <= ap_const_logic_1;
        else 
            wgrad_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln61_reg_1953_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln61_reg_1953_pp0_iter4_reg = ap_const_lv1_0))) then 
            wgrad_3_we0 <= ap_const_logic_1;
        else 
            wgrad_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln101_1_fu_1818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln101_1_fu_1812_p2),64));
    zext_ln101_2_fu_1882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln101_3_fu_1877_p2),64));
    zext_ln101_3_fu_1873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln101_2_fu_1868_p2),9));
    zext_ln101_fu_1772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln101_fu_1766_p2),64));
    zext_ln127_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lr_in_offset),64));
    zext_ln129_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_634),32));
    zext_ln130_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(label_r),64));
    zext_ln131_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_634),64));
    zext_ln63_10_fu_1651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_3_fu_1643_p3),64));
    zext_ln63_1_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_1283_p2),9));
    zext_ln63_2_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_1_reg_1994_pp0_iter4_reg),64));
    zext_ln63_4_fu_1478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_fu_1457_p3),64));
    zext_ln63_5_fu_1495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_2_reg_2130_pp1_iter4_reg),64));
    zext_ln63_6_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_1_fu_1465_p3),64));
    zext_ln63_7_fu_1656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_2_fu_1635_p3),64));
    zext_ln63_8_fu_1673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_3_reg_2261_pp2_iter4_reg),64));
    zext_ln63_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_mid2_fu_1234_p3),64));
    zext_ln68_1_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i31_reg_756),64));
    zext_ln68_2_fu_1695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i74_reg_847),64));
    zext_ln68_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_678),64));
    zext_ln70_1_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i2_reg_701),64));
    zext_ln70_2_fu_1544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_2_fu_1538_p2),64));
    zext_ln70_3_fu_1549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i36_reg_792),64));
    zext_ln70_4_fu_1722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_3_fu_1716_p2),64));
    zext_ln70_5_fu_1727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i79_reg_883),64));
    zext_ln70_6_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_1352_p2),9));
    zext_ln70_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_1_fu_1361_p2),64));
    zext_ln76_1_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i49_reg_803),64));
    zext_ln76_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i8_reg_712),64));
end behav;
