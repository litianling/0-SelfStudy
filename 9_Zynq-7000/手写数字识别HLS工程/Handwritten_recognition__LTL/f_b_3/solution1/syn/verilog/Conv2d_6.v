// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2d_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_matrix_address0,
        input_matrix_ce0,
        input_matrix_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        out_matrix_address0,
        out_matrix_ce0,
        out_matrix_we0,
        out_matrix_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_matrix_address0;
output   input_matrix_ce0;
input  [31:0] input_matrix_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [9:0] out_matrix_address0;
output   out_matrix_ce0;
output   out_matrix_we0;
output  [31:0] out_matrix_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_matrix_ce0;
reg kernel_ce0;
reg[9:0] out_matrix_address0;
reg out_matrix_ce0;
reg out_matrix_we0;
reg[31:0] out_matrix_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] indvar_flatten_reg_197;
reg   [31:0] col_0_reg_208;
reg   [31:0] empty_reg_217;
reg   [31:0] row_0_reg_229;
wire   [0:0] icmp_ln31_fu_247_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln31_fu_253_p2;
reg   [9:0] add_ln31_reg_653;
wire   [31:0] select_ln31_fu_289_p3;
reg   [31:0] select_ln31_reg_658;
wire   [31:0] select_ln31_11_fu_297_p3;
reg   [31:0] select_ln31_11_reg_663;
wire   [31:0] select_ln31_12_fu_305_p3;
reg   [31:0] select_ln31_12_reg_668;
wire   [4:0] select_ln31_13_fu_313_p3;
reg   [4:0] select_ln31_13_reg_673;
wire   [4:0] select_ln31_16_fu_369_p3;
reg   [4:0] select_ln31_16_reg_678;
wire   [31:0] zext_ln31_fu_377_p1;
reg   [31:0] zext_ln31_reg_683;
wire   [31:0] select_ln31_17_fu_385_p3;
reg   [31:0] select_ln31_17_reg_690;
wire   [31:0] select_ln31_18_fu_393_p3;
reg   [31:0] select_ln31_18_reg_695;
wire   [31:0] select_ln31_19_fu_401_p3;
reg   [31:0] select_ln31_19_reg_700;
wire   [31:0] row_cast_fu_433_p1;
reg   [31:0] row_cast_reg_705;
reg   [9:0] out_matrix_addr_reg_712;
wire   [31:0] zext_ln35_fu_447_p1;
reg   [31:0] zext_ln35_reg_717;
wire   [63:0] mul_ln33_fu_459_p2;
reg   [63:0] mul_ln33_reg_722;
wire   [0:0] icmp_ln34_fu_500_p2;
reg   [0:0] icmp_ln34_reg_727;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln34_reg_727_pp0_iter1_reg;
reg   [0:0] icmp_ln34_reg_727_pp0_iter2_reg;
wire   [63:0] add_ln34_fu_505_p2;
reg   [63:0] add_ln34_reg_731;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln35_fu_522_p3;
reg   [31:0] select_ln35_reg_736;
wire   [31:0] select_ln34_fu_585_p3;
reg   [31:0] select_ln34_reg_741;
reg   [31:0] input_matrix_load_reg_756;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] kernel_load_reg_761;
wire   [31:0] row_2_fu_615_p2;
reg   [31:0] row_2_reg_766;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_243_p2;
reg   [31:0] tmp_reg_771;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp_s_reg_776;
reg    ap_enable_reg_pp0_iter2;
wire   [4:0] j_fu_620_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln32_6_fu_625_p2;
wire   [31:0] add_ln32_7_fu_630_p2;
wire   [31:0] add_ln32_8_fu_635_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] indvar_flatten42_reg_98;
reg   [31:0] phi_ln31_reg_109;
reg   [31:0] phi_ln31_2_reg_120;
reg   [31:0] indvars_iv12_reg_131;
reg   [4:0] col_reg_142;
reg   [31:0] phi_ln32_reg_153;
reg   [31:0] phi_ln32_2_reg_164;
reg   [31:0] indvars_iv19_reg_175;
reg   [4:0] row_reg_186;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_201_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_col_0_phi_fu_211_p4;
reg   [31:0] ap_phi_mux_empty_phi_fu_221_p4;
wire    ap_block_pp0_stage1;
reg   [31:0] ap_phi_mux_row_0_phi_fu_232_p4;
wire   [63:0] zext_ln33_fu_437_p1;
wire  signed [63:0] sext_ln36_fu_599_p1;
wire  signed [63:0] sext_ln36_1_fu_610_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [0:0] icmp_ln32_fu_283_p2;
wire   [31:0] add_ln31_7_fu_265_p2;
wire   [31:0] add_ln31_8_fu_271_p2;
wire   [0:0] icmp_ln31_3_fu_321_p2;
wire   [31:0] add_ln31_9_fu_277_p2;
wire   [31:0] select_ln31_14_fu_327_p3;
wire   [0:0] icmp_ln31_4_fu_341_p2;
wire   [31:0] select_ln3134_fu_347_p3;
wire   [31:0] add_ln31_10_fu_335_p2;
wire   [31:0] add_ln3133_fu_355_p2;
wire   [4:0] i_fu_259_p2;
wire   [0:0] icmp_ln32_2_fu_409_p2;
wire   [31:0] select_ln32_fu_415_p3;
wire   [9:0] grp_fu_640_p3;
wire   [4:0] add_ln35_fu_441_p2;
wire   [31:0] select_ln31_15_fu_361_p3;
wire   [31:0] add_ln32_fu_423_p2;
wire   [31:0] mul_ln33_fu_459_p0;
wire   [31:0] mul_ln33_fu_459_p1;
wire   [31:0] shl_ln36_fu_465_p2;
wire   [31:0] shl_ln36_6_fu_471_p2;
wire   [31:0] sub_ln36_fu_483_p2;
wire   [31:0] shl_ln36_7_fu_488_p2;
wire   [0:0] icmp_ln35_fu_517_p2;
wire   [31:0] col_4_fu_511_p2;
wire   [31:0] shl_ln36_8_fu_529_p2;
wire   [31:0] shl_ln36_9_fu_535_p2;
wire   [31:0] sub_ln36_4_fu_477_p2;
wire   [31:0] sub_ln36_6_fu_541_p2;
wire   [31:0] sub_ln36_7_fu_555_p2;
wire   [31:0] shl_ln36_10_fu_560_p2;
wire   [31:0] sub_ln36_5_fu_494_p2;
wire   [31:0] sub_ln36_8_fu_566_p2;
wire   [31:0] select_ln35_4_fu_572_p3;
wire   [31:0] select_ln35_3_fu_547_p3;
wire   [31:0] add_ln36_fu_593_p2;
wire   [31:0] sub_ln35_fu_580_p2;
wire   [31:0] add_ln36_2_fu_604_p2;
wire    ap_block_pp0_stage3;
wire   [4:0] grp_fu_640_p0;
wire   [5:0] grp_fu_640_p1;
wire   [4:0] grp_fu_640_p2;
reg   [6:0] ap_NS_fsm;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_640_p00;
wire   [9:0] grp_fu_640_p20;
wire   [63:0] mul_ln33_fu_459_p00;
wire   [63:0] mul_ln33_fu_459_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_empty_phi_fu_221_p4),
    .din1(tmp_reg_771),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_matrix_load_reg_756),
    .din1(kernel_load_reg_761),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

forw_back_mac_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
forw_back_mac_muldEe_U10(
    .din0(grp_fu_640_p0),
    .din1(grp_fu_640_p1),
    .din2(grp_fu_640_p2),
    .dout(grp_fu_640_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_0_reg_208 <= select_ln34_reg_741;
    end else if (((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_reg_208 <= zext_ln31_fu_377_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        col_reg_142 <= select_ln31_16_reg_678;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_reg_142 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_reg_217 <= tmp_s_reg_776;
    end else if (((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_217 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten42_reg_98 <= add_ln31_reg_653;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten42_reg_98 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_197 <= add_ln34_reg_731;
    end else if (((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_197 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv12_reg_131 <= select_ln31_19_reg_700;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv12_reg_131 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv19_reg_175 <= add_ln32_6_fu_625_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv19_reg_175 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln31_2_reg_120 <= select_ln31_18_reg_695;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln31_2_reg_120 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln31_reg_109 <= select_ln31_17_reg_690;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln31_reg_109 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln32_2_reg_164 <= add_ln32_7_fu_630_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln32_2_reg_164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln32_reg_153 <= add_ln32_8_fu_635_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln32_reg_153 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_0_reg_229 <= row_2_reg_766;
    end else if (((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_229 <= row_cast_fu_433_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        row_reg_186 <= j_fu_620_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_reg_186 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_653 <= add_ln31_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln34_reg_731 <= add_ln34_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln34_reg_727 <= icmp_ln34_fu_500_p2;
        icmp_ln34_reg_727_pp0_iter1_reg <= icmp_ln34_reg_727;
        icmp_ln34_reg_727_pp0_iter2_reg <= icmp_ln34_reg_727_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_matrix_load_reg_756 <= input_matrix_q0;
        kernel_load_reg_761 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln33_reg_722 <= mul_ln33_fu_459_p2;
        out_matrix_addr_reg_712 <= zext_ln33_fu_437_p1;
        row_cast_reg_705[4 : 0] <= row_cast_fu_433_p1[4 : 0];
        select_ln31_11_reg_663 <= select_ln31_11_fu_297_p3;
        select_ln31_12_reg_668 <= select_ln31_12_fu_305_p3;
        select_ln31_13_reg_673 <= select_ln31_13_fu_313_p3;
        select_ln31_16_reg_678 <= select_ln31_16_fu_369_p3;
        select_ln31_17_reg_690 <= select_ln31_17_fu_385_p3;
        select_ln31_18_reg_695 <= select_ln31_18_fu_393_p3;
        select_ln31_19_reg_700 <= select_ln31_19_fu_401_p3;
        select_ln31_reg_658 <= select_ln31_fu_289_p3;
        zext_ln31_reg_683[4 : 0] <= zext_ln31_fu_377_p1[4 : 0];
        zext_ln35_reg_717[4 : 0] <= zext_ln35_fu_447_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        row_2_reg_766 <= row_2_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln34_reg_741 <= select_ln34_fu_585_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln35_reg_736 <= select_ln35_fu_522_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_771 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_727_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_s_reg_776 <= grp_fu_238_p2;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_500_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_0_phi_fu_211_p4 = select_ln34_reg_741;
    end else begin
        ap_phi_mux_col_0_phi_fu_211_p4 = col_0_reg_208;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_727_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_empty_phi_fu_221_p4 = tmp_s_reg_776;
    end else begin
        ap_phi_mux_empty_phi_fu_221_p4 = empty_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_201_p4 = add_ln34_reg_731;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_201_p4 = indvar_flatten_reg_197;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_727 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_row_0_phi_fu_232_p4 = row_2_reg_766;
    end else begin
        ap_phi_mux_row_0_phi_fu_232_p4 = row_0_reg_229;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_matrix_ce0 = 1'b1;
    end else begin
        input_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_matrix_address0 = out_matrix_addr_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_address0 = zext_ln33_fu_437_p1;
    end else begin
        out_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        out_matrix_ce0 = 1'b1;
    end else begin
        out_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_matrix_d0 = tmp_s_reg_776;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_d0 = 32'd0;
    end else begin
        out_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln34_reg_727_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        out_matrix_we0 = 1'b1;
    end else begin
        out_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln34_fu_500_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln34_fu_500_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln3133_fu_355_p2 = (phi_ln31_reg_109 + select_ln3134_fu_347_p3);

assign add_ln31_10_fu_335_p2 = (add_ln31_9_fu_277_p2 + select_ln31_14_fu_327_p3);

assign add_ln31_7_fu_265_p2 = (indvars_iv12_reg_131 + 32'd1);

assign add_ln31_8_fu_271_p2 = (phi_ln31_2_reg_120 + 32'd1);

assign add_ln31_9_fu_277_p2 = ($signed(phi_ln31_reg_109) + $signed(32'd4294967295));

assign add_ln31_fu_253_p2 = (indvar_flatten42_reg_98 + 10'd1);

assign add_ln32_6_fu_625_p2 = (select_ln31_12_reg_668 + 32'd1);

assign add_ln32_7_fu_630_p2 = (select_ln31_11_reg_663 + 32'd1);

assign add_ln32_8_fu_635_p2 = ($signed(select_ln31_reg_658) + $signed(32'd4294967295));

assign add_ln32_fu_423_p2 = (select_ln31_fu_289_p3 + select_ln32_fu_415_p3);

assign add_ln34_fu_505_p2 = (64'd1 + ap_phi_mux_indvar_flatten_phi_fu_201_p4);

assign add_ln35_fu_441_p2 = (select_ln31_13_fu_313_p3 + 5'd3);

assign add_ln36_2_fu_604_p2 = (sub_ln35_fu_580_p2 + select_ln35_fu_522_p3);

assign add_ln36_fu_593_p2 = (select_ln35_fu_522_p3 + select_ln35_3_fu_547_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_4_fu_511_p2 = (32'd1 + ap_phi_mux_col_0_phi_fu_211_p4);

assign grp_fu_640_p0 = grp_fu_640_p00;

assign grp_fu_640_p00 = select_ln31_16_fu_369_p3;

assign grp_fu_640_p1 = 10'd26;

assign grp_fu_640_p2 = grp_fu_640_p20;

assign grp_fu_640_p20 = select_ln31_13_fu_313_p3;

assign i_fu_259_p2 = (col_reg_142 + 5'd1);

assign icmp_ln31_3_fu_321_p2 = (($signed(add_ln31_7_fu_265_p2) > $signed(add_ln31_8_fu_271_p2)) ? 1'b1 : 1'b0);

assign icmp_ln31_4_fu_341_p2 = (($signed(indvars_iv12_reg_131) > $signed(phi_ln31_2_reg_120)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_247_p2 = ((indvar_flatten42_reg_98 == 10'd676) ? 1'b1 : 1'b0);

assign icmp_ln32_2_fu_409_p2 = (($signed(select_ln31_12_fu_305_p3) > $signed(select_ln31_11_fu_297_p3)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_283_p2 = ((row_reg_186 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_500_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_201_p4 == mul_ln33_reg_722) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_517_p2 = (($signed(ap_phi_mux_row_0_phi_fu_232_p4) < $signed(zext_ln35_reg_717)) ? 1'b1 : 1'b0);

assign input_matrix_address0 = sext_ln36_fu_599_p1;

assign j_fu_620_p2 = (select_ln31_13_reg_673 + 5'd1);

assign kernel_address0 = sext_ln36_1_fu_610_p1;

assign mul_ln33_fu_459_p0 = mul_ln33_fu_459_p00;

assign mul_ln33_fu_459_p00 = add_ln32_fu_423_p2;

assign mul_ln33_fu_459_p1 = mul_ln33_fu_459_p10;

assign mul_ln33_fu_459_p10 = select_ln31_15_fu_361_p3;

assign mul_ln33_fu_459_p2 = (mul_ln33_fu_459_p0 * mul_ln33_fu_459_p1);

assign row_2_fu_615_p2 = (32'd1 + select_ln35_reg_736);

assign row_cast_fu_433_p1 = select_ln31_13_fu_313_p3;

assign select_ln3134_fu_347_p3 = ((icmp_ln31_4_fu_341_p2[0:0] === 1'b1) ? indvars_iv12_reg_131 : phi_ln31_2_reg_120);

assign select_ln31_11_fu_297_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? 32'd0 : phi_ln32_2_reg_164);

assign select_ln31_12_fu_305_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? 32'd3 : indvars_iv19_reg_175);

assign select_ln31_13_fu_313_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? 5'd0 : row_reg_186);

assign select_ln31_14_fu_327_p3 = ((icmp_ln31_3_fu_321_p2[0:0] === 1'b1) ? add_ln31_7_fu_265_p2 : add_ln31_8_fu_271_p2);

assign select_ln31_15_fu_361_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? add_ln31_10_fu_335_p2 : add_ln3133_fu_355_p2);

assign select_ln31_16_fu_369_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? i_fu_259_p2 : col_reg_142);

assign select_ln31_17_fu_385_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? add_ln31_9_fu_277_p2 : phi_ln31_reg_109);

assign select_ln31_18_fu_393_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? add_ln31_8_fu_271_p2 : phi_ln31_2_reg_120);

assign select_ln31_19_fu_401_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? add_ln31_7_fu_265_p2 : indvars_iv12_reg_131);

assign select_ln31_fu_289_p3 = ((icmp_ln32_fu_283_p2[0:0] === 1'b1) ? 32'd0 : phi_ln32_reg_153);

assign select_ln32_fu_415_p3 = ((icmp_ln32_2_fu_409_p2[0:0] === 1'b1) ? select_ln31_12_fu_305_p3 : select_ln31_11_fu_297_p3);

assign select_ln34_fu_585_p3 = ((icmp_ln35_fu_517_p2[0:0] === 1'b1) ? ap_phi_mux_col_0_phi_fu_211_p4 : col_4_fu_511_p2);

assign select_ln35_3_fu_547_p3 = ((icmp_ln35_fu_517_p2[0:0] === 1'b1) ? sub_ln36_4_fu_477_p2 : sub_ln36_6_fu_541_p2);

assign select_ln35_4_fu_572_p3 = ((icmp_ln35_fu_517_p2[0:0] === 1'b1) ? sub_ln36_5_fu_494_p2 : sub_ln36_8_fu_566_p2);

assign select_ln35_fu_522_p3 = ((icmp_ln35_fu_517_p2[0:0] === 1'b1) ? ap_phi_mux_row_0_phi_fu_232_p4 : row_cast_reg_705);

assign sext_ln36_1_fu_610_p1 = $signed(add_ln36_2_fu_604_p2);

assign sext_ln36_fu_599_p1 = $signed(add_ln36_fu_593_p2);

assign shl_ln36_10_fu_560_p2 = sub_ln36_7_fu_555_p2 << 32'd2;

assign shl_ln36_6_fu_471_p2 = ap_phi_mux_col_0_phi_fu_211_p4 << 32'd2;

assign shl_ln36_7_fu_488_p2 = sub_ln36_fu_483_p2 << 32'd2;

assign shl_ln36_8_fu_529_p2 = col_4_fu_511_p2 << 32'd5;

assign shl_ln36_9_fu_535_p2 = col_4_fu_511_p2 << 32'd2;

assign shl_ln36_fu_465_p2 = ap_phi_mux_col_0_phi_fu_211_p4 << 32'd5;

assign sub_ln35_fu_580_p2 = (select_ln35_4_fu_572_p3 - row_cast_reg_705);

assign sub_ln36_4_fu_477_p2 = (shl_ln36_fu_465_p2 - shl_ln36_6_fu_471_p2);

assign sub_ln36_5_fu_494_p2 = (shl_ln36_7_fu_488_p2 - sub_ln36_fu_483_p2);

assign sub_ln36_6_fu_541_p2 = (shl_ln36_8_fu_529_p2 - shl_ln36_9_fu_535_p2);

assign sub_ln36_7_fu_555_p2 = (col_4_fu_511_p2 - zext_ln31_reg_683);

assign sub_ln36_8_fu_566_p2 = (shl_ln36_10_fu_560_p2 - sub_ln36_7_fu_555_p2);

assign sub_ln36_fu_483_p2 = (ap_phi_mux_col_0_phi_fu_211_p4 - zext_ln31_reg_683);

assign zext_ln31_fu_377_p1 = select_ln31_16_fu_369_p3;

assign zext_ln33_fu_437_p1 = grp_fu_640_p3;

assign zext_ln35_fu_447_p1 = add_ln35_fu_441_p2;

always @ (posedge ap_clk) begin
    zext_ln31_reg_683[31:5] <= 27'b000000000000000000000000000;
    row_cast_reg_705[31:5] <= 27'b000000000000000000000000000;
    zext_ln35_reg_717[31:5] <= 27'b000000000000000000000000000;
end

endmodule //Conv2d_6
