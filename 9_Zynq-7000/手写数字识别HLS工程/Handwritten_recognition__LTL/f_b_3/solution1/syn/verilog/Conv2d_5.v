// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2d_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_matrix_address0,
        input_matrix_ce0,
        input_matrix_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        out_matrix_address0,
        out_matrix_ce0,
        out_matrix_we0,
        out_matrix_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_matrix_address0;
output   input_matrix_ce0;
input  [31:0] input_matrix_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [9:0] out_matrix_address0;
output   out_matrix_ce0;
output   out_matrix_we0;
output  [31:0] out_matrix_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_matrix_ce0;
reg kernel_ce0;
reg[9:0] out_matrix_address0;
reg out_matrix_ce0;
reg out_matrix_we0;
reg[31:0] out_matrix_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] indvar_flatten_reg_201;
reg   [31:0] col_0_reg_212;
reg   [31:0] empty_reg_221;
reg   [31:0] row_0_reg_233;
wire   [0:0] icmp_ln31_fu_281_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln31_fu_287_p2;
reg   [9:0] add_ln31_reg_685;
wire   [31:0] select_ln31_fu_323_p3;
reg   [31:0] select_ln31_reg_690;
wire   [31:0] select_ln31_20_fu_331_p3;
reg   [31:0] select_ln31_20_reg_695;
wire   [31:0] select_ln31_21_fu_339_p3;
reg   [31:0] select_ln31_21_reg_700;
wire   [4:0] select_ln31_22_fu_347_p3;
reg   [4:0] select_ln31_22_reg_705;
wire   [4:0] select_ln31_25_fu_403_p3;
reg   [4:0] select_ln31_25_reg_710;
wire   [31:0] zext_ln31_fu_411_p1;
reg   [31:0] zext_ln31_reg_715;
wire   [31:0] select_ln31_27_fu_453_p3;
reg   [31:0] select_ln31_27_reg_722;
wire   [31:0] select_ln31_28_fu_461_p3;
reg   [31:0] select_ln31_28_reg_727;
wire   [31:0] select_ln31_29_fu_469_p3;
reg   [31:0] select_ln31_29_reg_732;
wire   [31:0] row_cast_fu_501_p1;
reg   [31:0] row_cast_reg_737;
reg   [9:0] out_matrix_addr_reg_744;
wire   [31:0] zext_ln35_fu_526_p1;
reg   [31:0] zext_ln35_reg_749;
wire   [63:0] mul_ln33_fu_538_p2;
reg   [63:0] mul_ln33_reg_754;
wire   [0:0] icmp_ln34_fu_561_p2;
reg   [0:0] icmp_ln34_reg_759;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln34_reg_759_pp0_iter1_reg;
reg   [0:0] icmp_ln34_reg_759_pp0_iter2_reg;
wire   [63:0] add_ln34_fu_566_p2;
reg   [63:0] add_ln34_reg_763;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln35_fu_583_p3;
reg   [31:0] select_ln35_reg_768;
wire  signed [31:0] select_ln35_5_fu_590_p3;
reg  signed [31:0] select_ln35_5_reg_773;
reg   [31:0] input_matrix_load_reg_788;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] kernel_load_reg_793;
wire   [31:0] row_3_fu_656_p2;
reg   [31:0] row_3_reg_798;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] tmp_reg_803;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] tmp_s_reg_808;
reg    ap_enable_reg_pp0_iter2;
wire   [4:0] j_fu_661_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln32_10_fu_666_p2;
wire   [31:0] add_ln32_11_fu_671_p2;
wire   [31:0] add_ln32_12_fu_676_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] indvar_flatten42_reg_102;
reg   [31:0] phi_ln31_reg_113;
reg   [31:0] phi_ln31_3_reg_124;
reg   [31:0] indvars_iv12_reg_135;
reg   [4:0] col_reg_146;
reg   [31:0] phi_ln32_reg_157;
reg   [31:0] phi_ln32_3_reg_168;
reg   [31:0] indvars_iv19_reg_179;
reg   [4:0] row_reg_190;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_205_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_col_0_phi_fu_215_p4;
reg   [31:0] ap_phi_mux_empty_phi_fu_225_p4;
wire    ap_block_pp0_stage1;
reg   [31:0] ap_phi_mux_row_0_phi_fu_236_p4;
wire   [63:0] zext_ln33_fu_515_p1;
wire  signed [63:0] sext_ln36_fu_640_p1;
wire  signed [63:0] sext_ln36_1_fu_651_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [9:0] shl_ln_fu_251_p3;
wire   [7:0] shl_ln33_2_fu_263_p3;
wire   [10:0] zext_ln33_4_fu_259_p1;
wire   [10:0] zext_ln33_5_fu_271_p1;
wire   [0:0] icmp_ln32_fu_317_p2;
wire   [31:0] add_ln31_12_fu_299_p2;
wire   [31:0] add_ln31_13_fu_305_p2;
wire   [0:0] icmp_ln31_5_fu_355_p2;
wire   [31:0] select_ln31_23_fu_361_p3;
wire   [31:0] add_ln31_14_fu_311_p2;
wire   [0:0] icmp_ln3134_fu_375_p2;
wire   [31:0] select_ln3133_fu_381_p3;
wire   [31:0] add_ln31_15_fu_369_p2;
wire   [31:0] add_ln3132_fu_389_p2;
wire   [4:0] i_fu_293_p2;
wire   [9:0] shl_ln33_mid1_fu_415_p3;
wire   [7:0] shl_ln33_2_mid1_fu_427_p3;
wire   [10:0] zext_ln33_9_fu_423_p1;
wire   [10:0] zext_ln33_10_fu_435_p1;
wire   [10:0] sub_ln33_2_fu_439_p2;
wire   [10:0] sub_ln33_fu_275_p2;
wire   [0:0] icmp_ln32_3_fu_477_p2;
wire   [31:0] select_ln32_fu_483_p3;
wire   [10:0] row_cast1_fu_497_p1;
wire   [10:0] select_ln31_26_fu_445_p3;
wire   [10:0] add_ln33_fu_505_p2;
wire  signed [31:0] sext_ln33_fu_511_p1;
wire   [4:0] add_ln35_fu_520_p2;
wire   [31:0] select_ln31_24_fu_395_p3;
wire   [31:0] add_ln32_fu_491_p2;
wire   [31:0] mul_ln33_fu_538_p0;
wire   [31:0] mul_ln33_fu_538_p1;
wire   [31:0] sub_ln36_fu_544_p2;
wire   [31:0] shl_ln36_fu_549_p2;
wire   [0:0] icmp_ln35_fu_578_p2;
wire   [31:0] col_5_fu_572_p2;
wire   [31:0] sub_ln36_9_fu_604_p2;
wire   [31:0] shl_ln36_11_fu_609_p2;
wire   [31:0] sub_ln36_6_fu_555_p2;
wire   [31:0] sub_ln36_10_fu_615_p2;
wire   [31:0] select_ln35_6_fu_621_p3;
wire   [31:0] mul_ln35_fu_598_p2;
wire   [31:0] add_ln36_fu_634_p2;
wire   [31:0] sub_ln35_fu_629_p2;
wire   [31:0] add_ln36_2_fu_645_p2;
wire    ap_block_pp0_stage3;
reg   [6:0] ap_NS_fsm;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] mul_ln33_fu_538_p00;
wire   [63:0] mul_ln33_fu_538_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_empty_phi_fu_225_p4),
    .din1(tmp_reg_803),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_matrix_load_reg_788),
    .din1(kernel_load_reg_793),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_0_reg_212 <= select_ln35_5_reg_773;
    end else if (((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_reg_212 <= zext_ln31_fu_411_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        col_reg_146 <= select_ln31_25_reg_710;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_reg_146 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_reg_221 <= tmp_s_reg_808;
    end else if (((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_221 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten42_reg_102 <= add_ln31_reg_685;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten42_reg_102 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_201 <= add_ln34_reg_763;
    end else if (((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_201 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv12_reg_135 <= select_ln31_29_reg_732;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv12_reg_135 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv19_reg_179 <= add_ln32_10_fu_666_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv19_reg_179 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln31_3_reg_124 <= select_ln31_28_reg_727;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln31_3_reg_124 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln31_reg_113 <= select_ln31_27_reg_722;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln31_reg_113 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln32_3_reg_168 <= add_ln32_11_fu_671_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln32_3_reg_168 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln32_reg_157 <= add_ln32_12_fu_676_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln32_reg_157 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_0_reg_233 <= row_3_reg_798;
    end else if (((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_233 <= row_cast_fu_501_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        row_reg_190 <= j_fu_661_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_reg_190 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_reg_685 <= add_ln31_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln34_reg_763 <= add_ln34_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln34_reg_759 <= icmp_ln34_fu_561_p2;
        icmp_ln34_reg_759_pp0_iter1_reg <= icmp_ln34_reg_759;
        icmp_ln34_reg_759_pp0_iter2_reg <= icmp_ln34_reg_759_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_matrix_load_reg_788 <= input_matrix_q0;
        kernel_load_reg_793 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln33_reg_754 <= mul_ln33_fu_538_p2;
        out_matrix_addr_reg_744 <= zext_ln33_fu_515_p1;
        row_cast_reg_737[4 : 0] <= row_cast_fu_501_p1[4 : 0];
        select_ln31_20_reg_695 <= select_ln31_20_fu_331_p3;
        select_ln31_21_reg_700 <= select_ln31_21_fu_339_p3;
        select_ln31_22_reg_705 <= select_ln31_22_fu_347_p3;
        select_ln31_25_reg_710 <= select_ln31_25_fu_403_p3;
        select_ln31_27_reg_722 <= select_ln31_27_fu_453_p3;
        select_ln31_28_reg_727 <= select_ln31_28_fu_461_p3;
        select_ln31_29_reg_732 <= select_ln31_29_fu_469_p3;
        select_ln31_reg_690 <= select_ln31_fu_323_p3;
        zext_ln31_reg_715[4 : 0] <= zext_ln31_fu_411_p1[4 : 0];
        zext_ln35_reg_749[4 : 0] <= zext_ln35_fu_526_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        row_3_reg_798 <= row_3_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln35_5_reg_773 <= select_ln35_5_fu_590_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln35_reg_768 <= select_ln35_fu_583_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_803 <= grp_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_759_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_s_reg_808 <= grp_fu_242_p2;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_561_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_0_phi_fu_215_p4 = select_ln35_5_reg_773;
    end else begin
        ap_phi_mux_col_0_phi_fu_215_p4 = col_0_reg_212;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_759_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_empty_phi_fu_225_p4 = tmp_s_reg_808;
    end else begin
        ap_phi_mux_empty_phi_fu_225_p4 = empty_reg_221;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_205_p4 = add_ln34_reg_763;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_205_p4 = indvar_flatten_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_759 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_row_0_phi_fu_236_p4 = row_3_reg_798;
    end else begin
        ap_phi_mux_row_0_phi_fu_236_p4 = row_0_reg_233;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_matrix_ce0 = 1'b1;
    end else begin
        input_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_matrix_address0 = out_matrix_addr_reg_744;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_address0 = zext_ln33_fu_515_p1;
    end else begin
        out_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        out_matrix_ce0 = 1'b1;
    end else begin
        out_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_matrix_d0 = tmp_s_reg_808;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_d0 = 32'd0;
    end else begin
        out_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln34_reg_759_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        out_matrix_we0 = 1'b1;
    end else begin
        out_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln34_fu_561_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln34_fu_561_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln3132_fu_389_p2 = (select_ln3133_fu_381_p3 + phi_ln31_reg_113);

assign add_ln31_12_fu_299_p2 = (indvars_iv12_reg_135 + 32'd1);

assign add_ln31_13_fu_305_p2 = (phi_ln31_3_reg_124 + 32'd1);

assign add_ln31_14_fu_311_p2 = ($signed(phi_ln31_reg_113) + $signed(32'd4294967295));

assign add_ln31_15_fu_369_p2 = (select_ln31_23_fu_361_p3 + add_ln31_14_fu_311_p2);

assign add_ln31_fu_287_p2 = (indvar_flatten42_reg_102 + 10'd1);

assign add_ln32_10_fu_666_p2 = (select_ln31_21_reg_700 + 32'd1);

assign add_ln32_11_fu_671_p2 = (select_ln31_20_reg_695 + 32'd1);

assign add_ln32_12_fu_676_p2 = ($signed(select_ln31_reg_690) + $signed(32'd4294967295));

assign add_ln32_fu_491_p2 = (select_ln32_fu_483_p3 + select_ln31_fu_323_p3);

assign add_ln33_fu_505_p2 = (row_cast1_fu_497_p1 + select_ln31_26_fu_445_p3);

assign add_ln34_fu_566_p2 = (64'd1 + ap_phi_mux_indvar_flatten_phi_fu_205_p4);

assign add_ln35_fu_520_p2 = (select_ln31_22_fu_347_p3 + 5'd3);

assign add_ln36_2_fu_645_p2 = (sub_ln35_fu_629_p2 + select_ln35_fu_583_p3);

assign add_ln36_fu_634_p2 = (select_ln35_fu_583_p3 + mul_ln35_fu_598_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_5_fu_572_p2 = (32'd1 + ap_phi_mux_col_0_phi_fu_215_p4);

assign i_fu_293_p2 = (col_reg_146 + 5'd1);

assign icmp_ln3134_fu_375_p2 = (($signed(indvars_iv12_reg_135) > $signed(phi_ln31_3_reg_124)) ? 1'b1 : 1'b0);

assign icmp_ln31_5_fu_355_p2 = (($signed(add_ln31_12_fu_299_p2) > $signed(add_ln31_13_fu_305_p2)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_281_p2 = ((indvar_flatten42_reg_102 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln32_3_fu_477_p2 = (($signed(select_ln31_21_fu_339_p3) > $signed(select_ln31_20_fu_331_p3)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_317_p2 = ((row_reg_190 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_561_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_205_p4 == mul_ln33_reg_754) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_578_p2 = (($signed(ap_phi_mux_row_0_phi_fu_236_p4) < $signed(zext_ln35_reg_749)) ? 1'b1 : 1'b0);

assign input_matrix_address0 = sext_ln36_fu_640_p1;

assign j_fu_661_p2 = (select_ln31_22_reg_705 + 5'd1);

assign kernel_address0 = sext_ln36_1_fu_651_p1;

assign mul_ln33_fu_538_p0 = mul_ln33_fu_538_p00;

assign mul_ln33_fu_538_p00 = select_ln31_24_fu_395_p3;

assign mul_ln33_fu_538_p1 = mul_ln33_fu_538_p10;

assign mul_ln33_fu_538_p10 = add_ln32_fu_491_p2;

assign mul_ln33_fu_538_p2 = (mul_ln33_fu_538_p0 * mul_ln33_fu_538_p1);

assign mul_ln35_fu_598_p2 = ($signed({{1'b0}, {32'd26}}) * $signed(select_ln35_5_fu_590_p3));

assign row_3_fu_656_p2 = (32'd1 + select_ln35_reg_768);

assign row_cast1_fu_497_p1 = select_ln31_22_fu_347_p3;

assign row_cast_fu_501_p1 = select_ln31_22_fu_347_p3;

assign select_ln3133_fu_381_p3 = ((icmp_ln3134_fu_375_p2[0:0] === 1'b1) ? indvars_iv12_reg_135 : phi_ln31_3_reg_124);

assign select_ln31_20_fu_331_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? 32'd0 : phi_ln32_3_reg_168);

assign select_ln31_21_fu_339_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? 32'd3 : indvars_iv19_reg_179);

assign select_ln31_22_fu_347_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? 5'd0 : row_reg_190);

assign select_ln31_23_fu_361_p3 = ((icmp_ln31_5_fu_355_p2[0:0] === 1'b1) ? add_ln31_12_fu_299_p2 : add_ln31_13_fu_305_p2);

assign select_ln31_24_fu_395_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? add_ln31_15_fu_369_p2 : add_ln3132_fu_389_p2);

assign select_ln31_25_fu_403_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? i_fu_293_p2 : col_reg_146);

assign select_ln31_26_fu_445_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? sub_ln33_2_fu_439_p2 : sub_ln33_fu_275_p2);

assign select_ln31_27_fu_453_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? add_ln31_14_fu_311_p2 : phi_ln31_reg_113);

assign select_ln31_28_fu_461_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? add_ln31_13_fu_305_p2 : phi_ln31_3_reg_124);

assign select_ln31_29_fu_469_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? add_ln31_12_fu_299_p2 : indvars_iv12_reg_135);

assign select_ln31_fu_323_p3 = ((icmp_ln32_fu_317_p2[0:0] === 1'b1) ? 32'd0 : phi_ln32_reg_157);

assign select_ln32_fu_483_p3 = ((icmp_ln32_3_fu_477_p2[0:0] === 1'b1) ? select_ln31_21_fu_339_p3 : select_ln31_20_fu_331_p3);

assign select_ln35_5_fu_590_p3 = ((icmp_ln35_fu_578_p2[0:0] === 1'b1) ? ap_phi_mux_col_0_phi_fu_215_p4 : col_5_fu_572_p2);

assign select_ln35_6_fu_621_p3 = ((icmp_ln35_fu_578_p2[0:0] === 1'b1) ? sub_ln36_6_fu_555_p2 : sub_ln36_10_fu_615_p2);

assign select_ln35_fu_583_p3 = ((icmp_ln35_fu_578_p2[0:0] === 1'b1) ? ap_phi_mux_row_0_phi_fu_236_p4 : row_cast_reg_737);

assign sext_ln33_fu_511_p1 = $signed(add_ln33_fu_505_p2);

assign sext_ln36_1_fu_651_p1 = $signed(add_ln36_2_fu_645_p2);

assign sext_ln36_fu_640_p1 = $signed(add_ln36_fu_634_p2);

assign shl_ln33_2_fu_263_p3 = {{col_reg_146}, {3'd0}};

assign shl_ln33_2_mid1_fu_427_p3 = {{i_fu_293_p2}, {3'd0}};

assign shl_ln33_mid1_fu_415_p3 = {{i_fu_293_p2}, {5'd0}};

assign shl_ln36_11_fu_609_p2 = sub_ln36_9_fu_604_p2 << 32'd2;

assign shl_ln36_fu_549_p2 = sub_ln36_fu_544_p2 << 32'd2;

assign shl_ln_fu_251_p3 = {{col_reg_146}, {5'd0}};

assign sub_ln33_2_fu_439_p2 = (zext_ln33_9_fu_423_p1 - zext_ln33_10_fu_435_p1);

assign sub_ln33_fu_275_p2 = (zext_ln33_4_fu_259_p1 - zext_ln33_5_fu_271_p1);

assign sub_ln35_fu_629_p2 = (select_ln35_6_fu_621_p3 - row_cast_reg_737);

assign sub_ln36_10_fu_615_p2 = (shl_ln36_11_fu_609_p2 - sub_ln36_9_fu_604_p2);

assign sub_ln36_6_fu_555_p2 = (shl_ln36_fu_549_p2 - sub_ln36_fu_544_p2);

assign sub_ln36_9_fu_604_p2 = (col_5_fu_572_p2 - zext_ln31_reg_715);

assign sub_ln36_fu_544_p2 = (ap_phi_mux_col_0_phi_fu_215_p4 - zext_ln31_reg_715);

assign zext_ln31_fu_411_p1 = select_ln31_25_fu_403_p3;

assign zext_ln33_10_fu_435_p1 = shl_ln33_2_mid1_fu_427_p3;

assign zext_ln33_4_fu_259_p1 = shl_ln_fu_251_p3;

assign zext_ln33_5_fu_271_p1 = shl_ln33_2_fu_263_p3;

assign zext_ln33_9_fu_423_p1 = shl_ln33_mid1_fu_415_p3;

assign zext_ln33_fu_515_p1 = $unsigned(sext_ln33_fu_511_p1);

assign zext_ln35_fu_526_p1 = add_ln35_fu_520_p2;

always @ (posedge ap_clk) begin
    zext_ln31_reg_715[31:5] <= 27'b000000000000000000000000000;
    row_cast_reg_737[31:5] <= 27'b000000000000000000000000000;
    zext_ln35_reg_749[31:5] <= 27'b000000000000000000000000000;
end

endmodule //Conv2d_5
