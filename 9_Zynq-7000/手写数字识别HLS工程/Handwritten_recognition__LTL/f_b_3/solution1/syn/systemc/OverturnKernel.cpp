// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "OverturnKernel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic OverturnKernel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic OverturnKernel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> OverturnKernel::ap_ST_fsm_state1 = "1";
const sc_lv<4> OverturnKernel::ap_ST_fsm_state2 = "10";
const sc_lv<4> OverturnKernel::ap_ST_fsm_state3 = "100";
const sc_lv<4> OverturnKernel::ap_ST_fsm_state4 = "1000";
const sc_lv<32> OverturnKernel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> OverturnKernel::ap_const_lv32_1 = "1";
const sc_lv<1> OverturnKernel::ap_const_lv1_0 = "0";
const sc_lv<32> OverturnKernel::ap_const_lv32_2 = "10";
const sc_lv<2> OverturnKernel::ap_const_lv2_0 = "00";
const sc_lv<1> OverturnKernel::ap_const_lv1_1 = "1";
const sc_lv<32> OverturnKernel::ap_const_lv32_3 = "11";
const sc_lv<2> OverturnKernel::ap_const_lv2_3 = "11";
const sc_lv<2> OverturnKernel::ap_const_lv2_1 = "1";
const sc_lv<2> OverturnKernel::ap_const_lv2_2 = "10";
const sc_lv<5> OverturnKernel::ap_const_lv5_2 = "10";
const bool OverturnKernel::ap_const_boolean_1 = true;

OverturnKernel::OverturnKernel(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln85_1_fu_153_p2);
    sensitive << ( sub_ln85_2_fu_147_p2 );

    SC_METHOD(thread_add_ln85_fu_175_p2);
    sensitive << ( sub_ln85_1_reg_210 );
    sensitive << ( zext_ln84_fu_159_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln83_fu_95_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln83_fu_95_p2 );

    SC_METHOD(thread_i_fu_101_p2);
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_icmp_ln83_fu_95_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_icmp_ln84_fu_163_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_80 );

    SC_METHOD(thread_input_matrix_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln85_fu_184_p1 );

    SC_METHOD(thread_input_matrix_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_fu_169_p2);
    sensitive << ( j_0_reg_80 );

    SC_METHOD(thread_output_matrix_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln85_1_fu_197_p1 );

    SC_METHOD(thread_output_matrix_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_matrix_d0);
    sensitive << ( input_matrix_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_matrix_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sext_ln85_1_fu_194_p1);
    sensitive << ( sub_ln85_3_reg_233 );

    SC_METHOD(thread_sext_ln85_fu_180_p1);
    sensitive << ( add_ln85_fu_175_p2 );

    SC_METHOD(thread_shl_ln85_1_fu_135_p3);
    sensitive << ( sub_ln85_fu_125_p2 );

    SC_METHOD(thread_shl_ln_fu_107_p3);
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_sub_ln85_1_fu_119_p2);
    sensitive << ( zext_ln85_2_fu_115_p1 );
    sensitive << ( zext_ln83_fu_91_p1 );

    SC_METHOD(thread_sub_ln85_2_fu_147_p2);
    sensitive << ( zext_ln85_4_fu_143_p1 );
    sensitive << ( zext_ln85_3_fu_131_p1 );

    SC_METHOD(thread_sub_ln85_3_fu_189_p2);
    sensitive << ( add_ln85_1_reg_215 );
    sensitive << ( zext_ln84_fu_159_p1 );

    SC_METHOD(thread_sub_ln85_fu_125_p2);
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_zext_ln83_fu_91_p1);
    sensitive << ( i_0_reg_69 );

    SC_METHOD(thread_zext_ln84_fu_159_p1);
    sensitive << ( j_0_reg_80 );

    SC_METHOD(thread_zext_ln85_1_fu_197_p1);
    sensitive << ( sext_ln85_1_fu_194_p1 );

    SC_METHOD(thread_zext_ln85_2_fu_115_p1);
    sensitive << ( shl_ln_fu_107_p3 );

    SC_METHOD(thread_zext_ln85_3_fu_131_p1);
    sensitive << ( sub_ln85_fu_125_p2 );

    SC_METHOD(thread_zext_ln85_4_fu_143_p1);
    sensitive << ( shl_ln85_1_fu_135_p3 );

    SC_METHOD(thread_zext_ln85_fu_184_p1);
    sensitive << ( sext_ln85_fu_180_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln83_fu_95_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln84_fu_163_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "OverturnKernel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_matrix_address0, "(port)input_matrix_address0");
    sc_trace(mVcdFile, input_matrix_ce0, "(port)input_matrix_ce0");
    sc_trace(mVcdFile, input_matrix_q0, "(port)input_matrix_q0");
    sc_trace(mVcdFile, output_matrix_address0, "(port)output_matrix_address0");
    sc_trace(mVcdFile, output_matrix_ce0, "(port)output_matrix_ce0");
    sc_trace(mVcdFile, output_matrix_we0, "(port)output_matrix_we0");
    sc_trace(mVcdFile, output_matrix_d0, "(port)output_matrix_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_101_p2, "i_fu_101_p2");
    sc_trace(mVcdFile, i_reg_205, "i_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sub_ln85_1_fu_119_p2, "sub_ln85_1_fu_119_p2");
    sc_trace(mVcdFile, sub_ln85_1_reg_210, "sub_ln85_1_reg_210");
    sc_trace(mVcdFile, icmp_ln83_fu_95_p2, "icmp_ln83_fu_95_p2");
    sc_trace(mVcdFile, add_ln85_1_fu_153_p2, "add_ln85_1_fu_153_p2");
    sc_trace(mVcdFile, add_ln85_1_reg_215, "add_ln85_1_reg_215");
    sc_trace(mVcdFile, j_fu_169_p2, "j_fu_169_p2");
    sc_trace(mVcdFile, j_reg_223, "j_reg_223");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln84_fu_163_p2, "icmp_ln84_fu_163_p2");
    sc_trace(mVcdFile, sub_ln85_3_fu_189_p2, "sub_ln85_3_fu_189_p2");
    sc_trace(mVcdFile, sub_ln85_3_reg_233, "sub_ln85_3_reg_233");
    sc_trace(mVcdFile, i_0_reg_69, "i_0_reg_69");
    sc_trace(mVcdFile, j_0_reg_80, "j_0_reg_80");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln85_fu_184_p1, "zext_ln85_fu_184_p1");
    sc_trace(mVcdFile, zext_ln85_1_fu_197_p1, "zext_ln85_1_fu_197_p1");
    sc_trace(mVcdFile, shl_ln_fu_107_p3, "shl_ln_fu_107_p3");
    sc_trace(mVcdFile, zext_ln85_2_fu_115_p1, "zext_ln85_2_fu_115_p1");
    sc_trace(mVcdFile, zext_ln83_fu_91_p1, "zext_ln83_fu_91_p1");
    sc_trace(mVcdFile, sub_ln85_fu_125_p2, "sub_ln85_fu_125_p2");
    sc_trace(mVcdFile, shl_ln85_1_fu_135_p3, "shl_ln85_1_fu_135_p3");
    sc_trace(mVcdFile, zext_ln85_4_fu_143_p1, "zext_ln85_4_fu_143_p1");
    sc_trace(mVcdFile, zext_ln85_3_fu_131_p1, "zext_ln85_3_fu_131_p1");
    sc_trace(mVcdFile, sub_ln85_2_fu_147_p2, "sub_ln85_2_fu_147_p2");
    sc_trace(mVcdFile, zext_ln84_fu_159_p1, "zext_ln84_fu_159_p1");
    sc_trace(mVcdFile, add_ln85_fu_175_p2, "add_ln85_fu_175_p2");
    sc_trace(mVcdFile, sext_ln85_fu_180_p1, "sext_ln85_fu_180_p1");
    sc_trace(mVcdFile, sext_ln85_1_fu_194_p1, "sext_ln85_1_fu_194_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

OverturnKernel::~OverturnKernel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void OverturnKernel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln84_fu_163_p2.read(), ap_const_lv1_1))) {
        i_0_reg_69 = i_reg_205.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_69 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln83_fu_95_p2.read(), ap_const_lv1_0))) {
        j_0_reg_80 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_80 = j_reg_223.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln83_fu_95_p2.read(), ap_const_lv1_0))) {
        add_ln85_1_reg_215 = add_ln85_1_fu_153_p2.read();
        sub_ln85_1_reg_210 = sub_ln85_1_fu_119_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_205 = i_fu_101_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_223 = j_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln84_fu_163_p2.read()))) {
        sub_ln85_3_reg_233 = sub_ln85_3_fu_189_p2.read();
    }
}

void OverturnKernel::thread_add_ln85_1_fu_153_p2() {
    add_ln85_1_fu_153_p2 = (!sub_ln85_2_fu_147_p2.read().is_01() || !ap_const_lv5_2.is_01())? sc_lv<5>(): (sc_biguint<5>(sub_ln85_2_fu_147_p2.read()) + sc_biguint<5>(ap_const_lv5_2));
}

void OverturnKernel::thread_add_ln85_fu_175_p2() {
    add_ln85_fu_175_p2 = (!sub_ln85_1_reg_210.read().is_01() || !zext_ln84_fu_159_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(sub_ln85_1_reg_210.read()) + sc_biguint<5>(zext_ln84_fu_159_p1.read()));
}

void OverturnKernel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void OverturnKernel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void OverturnKernel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void OverturnKernel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void OverturnKernel::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln83_fu_95_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void OverturnKernel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void OverturnKernel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln83_fu_95_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void OverturnKernel::thread_i_fu_101_p2() {
    i_fu_101_p2 = (!i_0_reg_69.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_69.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void OverturnKernel::thread_icmp_ln83_fu_95_p2() {
    icmp_ln83_fu_95_p2 = (!i_0_reg_69.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_69.read() == ap_const_lv2_3);
}

void OverturnKernel::thread_icmp_ln84_fu_163_p2() {
    icmp_ln84_fu_163_p2 = (!j_0_reg_80.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_80.read() == ap_const_lv2_3);
}

void OverturnKernel::thread_input_matrix_address0() {
    input_matrix_address0 =  (sc_lv<4>) (zext_ln85_fu_184_p1.read());
}

void OverturnKernel::thread_input_matrix_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_matrix_ce0 = ap_const_logic_1;
    } else {
        input_matrix_ce0 = ap_const_logic_0;
    }
}

void OverturnKernel::thread_j_fu_169_p2() {
    j_fu_169_p2 = (!j_0_reg_80.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_0_reg_80.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void OverturnKernel::thread_output_matrix_address0() {
    output_matrix_address0 =  (sc_lv<4>) (zext_ln85_1_fu_197_p1.read());
}

void OverturnKernel::thread_output_matrix_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        output_matrix_ce0 = ap_const_logic_1;
    } else {
        output_matrix_ce0 = ap_const_logic_0;
    }
}

void OverturnKernel::thread_output_matrix_d0() {
    output_matrix_d0 = input_matrix_q0.read();
}

void OverturnKernel::thread_output_matrix_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        output_matrix_we0 = ap_const_logic_1;
    } else {
        output_matrix_we0 = ap_const_logic_0;
    }
}

void OverturnKernel::thread_sext_ln85_1_fu_194_p1() {
    sext_ln85_1_fu_194_p1 = esl_sext<32,5>(sub_ln85_3_reg_233.read());
}

void OverturnKernel::thread_sext_ln85_fu_180_p1() {
    sext_ln85_fu_180_p1 = esl_sext<32,5>(add_ln85_fu_175_p2.read());
}

void OverturnKernel::thread_shl_ln85_1_fu_135_p3() {
    shl_ln85_1_fu_135_p3 = esl_concat<2,2>(sub_ln85_fu_125_p2.read(), ap_const_lv2_0);
}

void OverturnKernel::thread_shl_ln_fu_107_p3() {
    shl_ln_fu_107_p3 = esl_concat<2,2>(i_0_reg_69.read(), ap_const_lv2_0);
}

void OverturnKernel::thread_sub_ln85_1_fu_119_p2() {
    sub_ln85_1_fu_119_p2 = (!zext_ln85_2_fu_115_p1.read().is_01() || !zext_ln83_fu_91_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln85_2_fu_115_p1.read()) - sc_biguint<5>(zext_ln83_fu_91_p1.read()));
}

void OverturnKernel::thread_sub_ln85_2_fu_147_p2() {
    sub_ln85_2_fu_147_p2 = (!zext_ln85_4_fu_143_p1.read().is_01() || !zext_ln85_3_fu_131_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln85_4_fu_143_p1.read()) - sc_biguint<5>(zext_ln85_3_fu_131_p1.read()));
}

void OverturnKernel::thread_sub_ln85_3_fu_189_p2() {
    sub_ln85_3_fu_189_p2 = (!add_ln85_1_reg_215.read().is_01() || !zext_ln84_fu_159_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(add_ln85_1_reg_215.read()) - sc_biguint<5>(zext_ln84_fu_159_p1.read()));
}

void OverturnKernel::thread_sub_ln85_fu_125_p2() {
    sub_ln85_fu_125_p2 = (!ap_const_lv2_2.is_01() || !i_0_reg_69.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_2) - sc_biguint<2>(i_0_reg_69.read()));
}

void OverturnKernel::thread_zext_ln83_fu_91_p1() {
    zext_ln83_fu_91_p1 = esl_zext<5,2>(i_0_reg_69.read());
}

void OverturnKernel::thread_zext_ln84_fu_159_p1() {
    zext_ln84_fu_159_p1 = esl_zext<5,2>(j_0_reg_80.read());
}

void OverturnKernel::thread_zext_ln85_1_fu_197_p1() {
    zext_ln85_1_fu_197_p1 = esl_zext<64,32>(sext_ln85_1_fu_194_p1.read());
}

void OverturnKernel::thread_zext_ln85_2_fu_115_p1() {
    zext_ln85_2_fu_115_p1 = esl_zext<5,4>(shl_ln_fu_107_p3.read());
}

void OverturnKernel::thread_zext_ln85_3_fu_131_p1() {
    zext_ln85_3_fu_131_p1 = esl_zext<5,2>(sub_ln85_fu_125_p2.read());
}

void OverturnKernel::thread_zext_ln85_4_fu_143_p1() {
    zext_ln85_4_fu_143_p1 = esl_zext<5,4>(shl_ln85_1_fu_135_p3.read());
}

void OverturnKernel::thread_zext_ln85_fu_184_p1() {
    zext_ln85_fu_184_p1 = esl_zext<64,32>(sext_ln85_fu_180_p1.read());
}

void OverturnKernel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln83_fu_95_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln84_fu_163_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

