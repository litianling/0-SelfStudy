-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backward is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    label_r : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_AWVALID : OUT STD_LOGIC;
    m_axi_lr_in_AWREADY : IN STD_LOGIC;
    m_axi_lr_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_WVALID : OUT STD_LOGIC;
    m_axi_lr_in_WREADY : IN STD_LOGIC;
    m_axi_lr_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_WLAST : OUT STD_LOGIC;
    m_axi_lr_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_ARVALID : OUT STD_LOGIC;
    m_axi_lr_in_ARREADY : IN STD_LOGIC;
    m_axi_lr_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_lr_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_lr_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_RVALID : IN STD_LOGIC;
    m_axi_lr_in_RREADY : OUT STD_LOGIC;
    m_axi_lr_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_lr_in_RLAST : IN STD_LOGIC;
    m_axi_lr_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_BVALID : IN STD_LOGIC;
    m_axi_lr_in_BREADY : OUT STD_LOGIC;
    m_axi_lr_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_lr_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_lr_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    lr_in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    probability_result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    probability_result_ce0 : OUT STD_LOGIC;
    probability_result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_2_relu1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fc_in_2_relu1_0_ce0 : OUT STD_LOGIC;
    fc_in_2_relu1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fc_hidden_layer2_ce0 : OUT STD_LOGIC;
    fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fc_hidden_layer2_ce1 : OUT STD_LOGIC;
    fc_hidden_layer2_we1 : OUT STD_LOGIC;
    fc_hidden_layer2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_out_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fc_out_1_0_ce0 : OUT STD_LOGIC;
    fc_out_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_in_1_0_ce0 : OUT STD_LOGIC;
    fc_in_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    fc_hidden_layer1_ce0 : OUT STD_LOGIC;
    fc_hidden_layer1_we0 : OUT STD_LOGIC;
    fc_hidden_layer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_locate_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    max_poo_locate_2_ce0 : OUT STD_LOGIC;
    max_poo_locate_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_poo_out_1_ce0 : OUT STD_LOGIC;
    max_poo_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_2_ce0 : OUT STD_LOGIC;
    conv_kernel_2_we0 : OUT STD_LOGIC;
    conv_kernel_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_locate_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_poo_locate_1_ce0 : OUT STD_LOGIC;
    max_poo_locate_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mnist_data_ce0 : OUT STD_LOGIC;
    mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_1_ce0 : OUT STD_LOGIC;
    conv_kernel_1_we0 : OUT STD_LOGIC;
    conv_kernel_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of backward is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (95 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (95 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (95 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (95 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (95 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (95 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (95 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (95 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (95 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (95 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (95 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (95 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_3FA999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lr_in_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal icmp_ln107_fu_1218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lr_in_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_fu_716_ap_ready : STD_LOGIC;
    signal grp_MatrixBackPropagatio_fu_716_ap_done : STD_LOGIC;
    signal grad_2_addr_reg_1463 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lr_in_addr_reg_1473 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_851_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_1482 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln155_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_1487 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln156_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_reg_1491 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_873_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1504 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln73_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_884_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1514 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal shl_ln75_1_fu_892_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln75_1_reg_1519 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc_in_2_relu1_0_load_reg_1524 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_910_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1532 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln74_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_1_fu_930_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_1_reg_1542 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_fu_945_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_1550 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal rgrad_1_addr_reg_1555 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln79_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_956_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln2_reg_1560 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln82_1_fu_964_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln82_1_reg_1565 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_10_fu_982_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_10_reg_1573 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln81_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_1018_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1591 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal zext_ln88_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_reg_1596 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln87_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln88_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_1613 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_1_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_1_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln88_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln88_reg_1628 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal rgrad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_reg_1637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_776_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_reg_1642 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_6_fu_1075_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_reg_1650 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln73_1_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln75_2_fu_1086_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln75_2_reg_1660 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal shl_ln75_3_fu_1094_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln75_3_reg_1665 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_in_1_0_load_reg_1670 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_11_fu_1112_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_11_reg_1678 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln74_1_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_3_fu_1132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_3_reg_1688 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_fu_1147_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_8_reg_1696 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grad_0_addr_reg_1701 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln79_1_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln82_2_fu_1158_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln82_2_reg_1706 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln82_3_fu_1166_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln82_3_reg_1711 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_12_fu_1184_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_12_reg_1719 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln81_1_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_1224_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_9_reg_1737 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state61_io : BOOLEAN;
    signal sub_ln109_fu_1242_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln109_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln109_fu_1276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln109_reg_1747 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_13_fu_1292_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_13_reg_1755 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln108_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln109_3_fu_1312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln109_3_reg_1765 : STD_LOGIC_VECTOR (4 downto 0);
    signal lr_in_addr_read_1_reg_1770 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPooBackPropagatio_1_fu_731_ap_ready : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_1_fu_731_ap_done : STD_LOGIC;
    signal i_10_fu_1331_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_10_reg_1778 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal shl_ln4_fu_1337_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln4_reg_1783 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln123_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln125_1_fu_1345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln125_1_reg_1788 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_14_fu_1363_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_14_reg_1796 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal fc_hidden_layer1_add_2_reg_1801 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln124_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wgrad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_1_load_reg_1811 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal i_11_fu_1395_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_11_reg_1819 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal shl_ln125_2_fu_1401_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln125_2_reg_1824 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln123_1_fu_1389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln125_3_fu_1409_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln125_3_reg_1829 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_15_fu_1427_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_15_reg_1837 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal fc_hidden_layer2_add_2_reg_1842 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln124_1_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wgrad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_2_load_reg_1853 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grad_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grad_2_ce0 : STD_LOGIC;
    signal grad_2_we0 : STD_LOGIC;
    signal grad_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal wgrad_2_ce0 : STD_LOGIC;
    signal wgrad_2_we0 : STD_LOGIC;
    signal rgrad_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rgrad_1_ce0 : STD_LOGIC;
    signal rgrad_1_we0 : STD_LOGIC;
    signal rgrad_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grad_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grad_1_ce0 : STD_LOGIC;
    signal grad_1_we0 : STD_LOGIC;
    signal grad_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wgrad_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal wgrad_1_ce0 : STD_LOGIC;
    signal wgrad_1_we0 : STD_LOGIC;
    signal grad_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grad_0_ce0 : STD_LOGIC;
    signal grad_0_we0 : STD_LOGIC;
    signal grad_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grad_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_grad_2_ce0 : STD_LOGIC;
    signal conv_grad_2_we0 : STD_LOGIC;
    signal conv_grad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_2_ce1 : STD_LOGIC;
    signal conv_grad_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_grad_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_2_ce0 : STD_LOGIC;
    signal kernel_grad_2_we0 : STD_LOGIC;
    signal kernel_grad_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_2_padding_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_grad_2_padding_ce0 : STD_LOGIC;
    signal conv_grad_2_padding_we0 : STD_LOGIC;
    signal conv_grad_2_padding_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_2_padding_ce1 : STD_LOGIC;
    signal conv_grad_2_padding_we1 : STD_LOGIC;
    signal kernel_grad_2_overtu_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_2_overtu_ce0 : STD_LOGIC;
    signal kernel_grad_2_overtu_we0 : STD_LOGIC;
    signal kernel_grad_2_overtu_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_grad_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pool_grad_1_ce0 : STD_LOGIC;
    signal pool_grad_1_we0 : STD_LOGIC;
    signal pool_grad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_grad_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_grad_1_ce0 : STD_LOGIC;
    signal conv_grad_1_we0 : STD_LOGIC;
    signal conv_grad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_grad_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_grad_1_ce0 : STD_LOGIC;
    signal kernel_grad_1_we0 : STD_LOGIC;
    signal kernel_grad_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_1_fu_693_ap_start : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_ap_done : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_ap_idle : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_ap_ready : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_input_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_1_fu_693_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_1_fu_693_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_out_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_1_fu_693_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_1_fu_693_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_fu_700_ap_start : STD_LOGIC;
    signal grp_Conv2d_fu_700_ap_done : STD_LOGIC;
    signal grp_Conv2d_fu_700_ap_idle : STD_LOGIC;
    signal grp_Conv2d_fu_700_ap_ready : STD_LOGIC;
    signal grp_Conv2d_fu_700_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_fu_700_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_fu_700_kernel_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_fu_700_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_fu_700_out_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_fu_700_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_fu_700_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_fu_700_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_2_fu_708_ap_start : STD_LOGIC;
    signal grp_Conv2d_2_fu_708_ap_done : STD_LOGIC;
    signal grp_Conv2d_2_fu_708_ap_idle : STD_LOGIC;
    signal grp_Conv2d_2_fu_708_ap_ready : STD_LOGIC;
    signal grp_Conv2d_2_fu_708_kernel_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_2_fu_708_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_2_fu_708_out_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_2_fu_708_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_2_fu_708_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_2_fu_708_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_2_fu_708_max_poo_out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_2_fu_708_max_poo_out_1_ce0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_fu_716_ap_start : STD_LOGIC;
    signal grp_MatrixBackPropagatio_fu_716_ap_idle : STD_LOGIC;
    signal grp_MatrixBackPropagatio_fu_716_input_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MatrixBackPropagatio_fu_716_input_matrix_ce0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_fu_716_input_matrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_fu_716_output_matrix_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_MatrixBackPropagatio_fu_716_output_matrix_ce0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_fu_716_output_matrix_we0 : STD_LOGIC;
    signal grp_MatrixBackPropagatio_fu_716_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_fu_716_output_matrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MatrixBackPropagatio_fu_716_lr : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_fu_725_ap_start : STD_LOGIC;
    signal grp_Padding_fu_725_ap_done : STD_LOGIC;
    signal grp_Padding_fu_725_ap_idle : STD_LOGIC;
    signal grp_Padding_fu_725_ap_ready : STD_LOGIC;
    signal grp_Padding_fu_725_input_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Padding_fu_725_input_matrix_ce0 : STD_LOGIC;
    signal grp_Padding_fu_725_input_matrix_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Padding_fu_725_input_matrix_ce1 : STD_LOGIC;
    signal grp_Padding_fu_725_output_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Padding_fu_725_output_matrix_ce0 : STD_LOGIC;
    signal grp_Padding_fu_725_output_matrix_we0 : STD_LOGIC;
    signal grp_Padding_fu_725_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_fu_725_output_matrix_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Padding_fu_725_output_matrix_ce1 : STD_LOGIC;
    signal grp_Padding_fu_725_output_matrix_we1 : STD_LOGIC;
    signal grp_Padding_fu_725_output_matrix_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPooBackPropagatio_1_fu_731_ap_start : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_1_fu_731_ap_idle : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_1_fu_731_input_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPooBackPropagatio_1_fu_731_input_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_1_fu_731_output_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_MaxPooBackPropagatio_1_fu_731_output_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_1_fu_731_output_matrix_we0 : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_1_fu_731_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPooBackPropagatio_1_fu_731_max_poo_locate_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPooBackPropagatio_1_fu_731_max_poo_locate_1_ce0 : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_ap_start : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_ap_done : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_ap_idle : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_ap_ready : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_input_matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_MaxPooBackPropagatio_fu_739_input_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_output_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPooBackPropagatio_fu_739_output_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_output_matrix_we0 : STD_LOGIC;
    signal grp_MaxPooBackPropagatio_fu_739_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPooBackPropagatio_fu_739_max_poo_locate_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_MaxPooBackPropagatio_fu_739_max_poo_locate_2_ce0 : STD_LOGIC;
    signal i_0_reg_491 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i_reg_502 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_i_reg_514 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_0_i1_reg_525 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_38_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i2_reg_548 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i8_reg_559 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i_0_i15_reg_570 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i20_reg_582 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal i_0_i31_reg_593 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_46_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal j_0_i36_reg_616 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i49_reg_627 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal j_0_i51_reg_638 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal i_0_i58_reg_649 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i60_reg_660 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal i_0_i69_reg_671 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_i73_reg_682 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_Conv2d_1_fu_693_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_Conv2d_fu_700_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_Conv2d_2_fu_708_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_MatrixBackPropagatio_fu_716_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_Padding_fu_725_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_MaxPooBackPropagatio_1_fu_731_ap_start_reg : STD_LOGIC := '0';
    signal grp_MaxPooBackPropagatio_fu_739_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal zext_ln155_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_2_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_1_fu_1007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grad_1_addr_1_gep_fu_361_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln75_3_fu_1081_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_4_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_5_fu_1137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_1_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_2_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_3_fu_1209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_fu_1307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_1_fu_1320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_fu_1383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_1_fu_1447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_747_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_fu_758_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_758_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln154_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i_cast20_fu_900_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln75_fu_921_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln75_6_fu_926_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_i2_cast17_fu_972_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln82_fu_988_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln82_4_fu_993_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln82_1_fu_997_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln88_fu_1029_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1033_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln88_fu_1043_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln88_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i20_cast14_fu_1102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_2_fu_1123_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln75_7_fu_1128_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_i36_cast11_fu_1174_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln82_2_fu_1190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln82_5_fu_1195_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln82_3_fu_1199_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln3_fu_1230_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln109_2_fu_1238_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln107_fu_1214_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln109_1_fu_1248_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln109_1_fu_1258_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln109_4_fu_1266_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln109_3_fu_1254_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln109_2_fu_1270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln108_fu_1282_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln109_1_fu_1298_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln109_fu_1303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln109_1_fu_1317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i60_cast_fu_1353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_fu_1369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln125_2_fu_1374_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln125_1_fu_1378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_i73_cast_fu_1417_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln125_2_fu_1433_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln125_3_fu_1438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_3_fu_1442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_747_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_state73_on_subcall_done : BOOLEAN;

    component Conv2d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        kernel_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_poo_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_poo_out_1_ce0 : OUT STD_LOGIC;
        max_poo_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixBackPropagatio IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        lr : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Padding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_matrix_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_matrix_ce1 : OUT STD_LOGIC;
        input_matrix_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_matrix_ce1 : OUT STD_LOGIC;
        output_matrix_we1 : OUT STD_LOGIC;
        output_matrix_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MaxPooBackPropagatio_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_poo_locate_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_poo_locate_1_ce0 : OUT STD_LOGIC;
        max_poo_locate_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MaxPooBackPropagatio IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_poo_locate_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        max_poo_locate_2_ce0 : OUT STD_LOGIC;
        max_poo_locate_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_faddfsuudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fptruncg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fpext_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_fcmp_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component forw_back_dmul_64jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backward_grad_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_wgrad_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_rgrad_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_wgrad_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_grad_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_conv_grancg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_kernel_gocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_conv_grapcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_pool_grarcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward_conv_grasc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grad_2_U : component backward_grad_2
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_2_address0,
        ce0 => grad_2_ce0,
        we0 => grad_2_we0,
        d0 => grad_2_d0,
        q0 => grad_2_q0);

    wgrad_2_U : component backward_wgrad_2
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wgrad_2_address0,
        ce0 => wgrad_2_ce0,
        we0 => wgrad_2_we0,
        d0 => reg_795,
        q0 => wgrad_2_q0);

    rgrad_1_U : component backward_rgrad_1
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rgrad_1_address0,
        ce0 => rgrad_1_ce0,
        we0 => rgrad_1_we0,
        d0 => rgrad_1_d0,
        q0 => rgrad_1_q0);

    grad_1_U : component backward_rgrad_1
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_1_address0,
        ce0 => grad_1_ce0,
        we0 => grad_1_we0,
        d0 => grad_1_d0,
        q0 => grad_1_q0);

    wgrad_1_U : component backward_wgrad_1
    generic map (
        DataWidth => 32,
        AddressRange => 720,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wgrad_1_address0,
        ce0 => wgrad_1_ce0,
        we0 => wgrad_1_we0,
        d0 => reg_795,
        q0 => wgrad_1_q0);

    grad_0_U : component backward_grad_0
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grad_0_address0,
        ce0 => grad_0_ce0,
        we0 => grad_0_we0,
        d0 => grad_0_d0,
        q0 => grad_0_q0);

    conv_grad_2_U : component backward_conv_grancg
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_grad_2_address0,
        ce0 => conv_grad_2_ce0,
        we0 => conv_grad_2_we0,
        d0 => grp_MaxPooBackPropagatio_fu_739_output_matrix_d0,
        q0 => conv_grad_2_q0,
        address1 => grp_Padding_fu_725_input_matrix_address1,
        ce1 => conv_grad_2_ce1,
        q1 => conv_grad_2_q1);

    kernel_grad_2_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_2_address0,
        ce0 => kernel_grad_2_ce0,
        we0 => kernel_grad_2_we0,
        d0 => grp_Conv2d_2_fu_708_out_matrix_d0,
        q0 => kernel_grad_2_q0);

    conv_grad_2_padding_U : component backward_conv_grapcA
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_grad_2_padding_address0,
        ce0 => conv_grad_2_padding_ce0,
        we0 => conv_grad_2_padding_we0,
        d0 => grp_Padding_fu_725_output_matrix_d0,
        q0 => conv_grad_2_padding_q0,
        address1 => grp_Padding_fu_725_output_matrix_address1,
        ce1 => conv_grad_2_padding_ce1,
        we1 => conv_grad_2_padding_we1,
        d1 => grp_Padding_fu_725_output_matrix_d1);

    kernel_grad_2_overtu_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_2_overtu_address0,
        ce0 => kernel_grad_2_overtu_ce0,
        we0 => kernel_grad_2_overtu_we0,
        d0 => conv_kernel_2_q0,
        q0 => kernel_grad_2_overtu_q0);

    pool_grad_1_U : component backward_pool_grarcU
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool_grad_1_address0,
        ce0 => pool_grad_1_ce0,
        we0 => pool_grad_1_we0,
        d0 => grp_Conv2d_1_fu_693_out_matrix_d0,
        q0 => pool_grad_1_q0);

    conv_grad_1_U : component backward_conv_grasc4
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_grad_1_address0,
        ce0 => conv_grad_1_ce0,
        we0 => conv_grad_1_we0,
        d0 => grp_MaxPooBackPropagatio_1_fu_731_output_matrix_d0,
        q0 => conv_grad_1_q0);

    kernel_grad_1_U : component backward_kernel_gocq
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_grad_1_address0,
        ce0 => kernel_grad_1_ce0,
        we0 => kernel_grad_1_we0,
        d0 => grp_Conv2d_fu_700_out_matrix_d0,
        q0 => kernel_grad_1_q0);

    grp_Conv2d_1_fu_693 : component Conv2d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_1_fu_693_ap_start,
        ap_done => grp_Conv2d_1_fu_693_ap_done,
        ap_idle => grp_Conv2d_1_fu_693_ap_idle,
        ap_ready => grp_Conv2d_1_fu_693_ap_ready,
        input_matrix_address0 => grp_Conv2d_1_fu_693_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_1_fu_693_input_matrix_ce0,
        input_matrix_q0 => conv_grad_2_padding_q0,
        kernel_address0 => grp_Conv2d_1_fu_693_kernel_address0,
        kernel_ce0 => grp_Conv2d_1_fu_693_kernel_ce0,
        kernel_q0 => kernel_grad_2_overtu_q0,
        out_matrix_address0 => grp_Conv2d_1_fu_693_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_1_fu_693_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_1_fu_693_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_1_fu_693_out_matrix_d0);

    grp_Conv2d_fu_700 : component Conv2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_fu_700_ap_start,
        ap_done => grp_Conv2d_fu_700_ap_done,
        ap_idle => grp_Conv2d_fu_700_ap_idle,
        ap_ready => grp_Conv2d_fu_700_ap_ready,
        input_matrix_address0 => grp_Conv2d_fu_700_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_fu_700_input_matrix_ce0,
        input_matrix_q0 => mnist_data_q0,
        kernel_address0 => grp_Conv2d_fu_700_kernel_address0,
        kernel_ce0 => grp_Conv2d_fu_700_kernel_ce0,
        kernel_q0 => conv_grad_1_q0,
        out_matrix_address0 => grp_Conv2d_fu_700_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_fu_700_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_fu_700_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_fu_700_out_matrix_d0);

    grp_Conv2d_2_fu_708 : component Conv2d_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_2_fu_708_ap_start,
        ap_done => grp_Conv2d_2_fu_708_ap_done,
        ap_idle => grp_Conv2d_2_fu_708_ap_idle,
        ap_ready => grp_Conv2d_2_fu_708_ap_ready,
        kernel_address0 => grp_Conv2d_2_fu_708_kernel_address0,
        kernel_ce0 => grp_Conv2d_2_fu_708_kernel_ce0,
        kernel_q0 => conv_grad_2_q0,
        out_matrix_address0 => grp_Conv2d_2_fu_708_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_2_fu_708_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_2_fu_708_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_2_fu_708_out_matrix_d0,
        max_poo_out_1_address0 => grp_Conv2d_2_fu_708_max_poo_out_1_address0,
        max_poo_out_1_ce0 => grp_Conv2d_2_fu_708_max_poo_out_1_ce0,
        max_poo_out_1_q0 => max_poo_out_1_q0);

    grp_MatrixBackPropagatio_fu_716 : component MatrixBackPropagatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MatrixBackPropagatio_fu_716_ap_start,
        ap_done => grp_MatrixBackPropagatio_fu_716_ap_done,
        ap_idle => grp_MatrixBackPropagatio_fu_716_ap_idle,
        ap_ready => grp_MatrixBackPropagatio_fu_716_ap_ready,
        input_matrix_address0 => grp_MatrixBackPropagatio_fu_716_input_matrix_address0,
        input_matrix_ce0 => grp_MatrixBackPropagatio_fu_716_input_matrix_ce0,
        input_matrix_q0 => grp_MatrixBackPropagatio_fu_716_input_matrix_q0,
        output_matrix_address0 => grp_MatrixBackPropagatio_fu_716_output_matrix_address0,
        output_matrix_ce0 => grp_MatrixBackPropagatio_fu_716_output_matrix_ce0,
        output_matrix_we0 => grp_MatrixBackPropagatio_fu_716_output_matrix_we0,
        output_matrix_d0 => grp_MatrixBackPropagatio_fu_716_output_matrix_d0,
        output_matrix_q0 => grp_MatrixBackPropagatio_fu_716_output_matrix_q0,
        lr => grp_MatrixBackPropagatio_fu_716_lr);

    grp_Padding_fu_725 : component Padding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Padding_fu_725_ap_start,
        ap_done => grp_Padding_fu_725_ap_done,
        ap_idle => grp_Padding_fu_725_ap_idle,
        ap_ready => grp_Padding_fu_725_ap_ready,
        input_matrix_address0 => grp_Padding_fu_725_input_matrix_address0,
        input_matrix_ce0 => grp_Padding_fu_725_input_matrix_ce0,
        input_matrix_q0 => conv_grad_2_q0,
        input_matrix_address1 => grp_Padding_fu_725_input_matrix_address1,
        input_matrix_ce1 => grp_Padding_fu_725_input_matrix_ce1,
        input_matrix_q1 => conv_grad_2_q1,
        output_matrix_address0 => grp_Padding_fu_725_output_matrix_address0,
        output_matrix_ce0 => grp_Padding_fu_725_output_matrix_ce0,
        output_matrix_we0 => grp_Padding_fu_725_output_matrix_we0,
        output_matrix_d0 => grp_Padding_fu_725_output_matrix_d0,
        output_matrix_address1 => grp_Padding_fu_725_output_matrix_address1,
        output_matrix_ce1 => grp_Padding_fu_725_output_matrix_ce1,
        output_matrix_we1 => grp_Padding_fu_725_output_matrix_we1,
        output_matrix_d1 => grp_Padding_fu_725_output_matrix_d1);

    grp_MaxPooBackPropagatio_1_fu_731 : component MaxPooBackPropagatio_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPooBackPropagatio_1_fu_731_ap_start,
        ap_done => grp_MaxPooBackPropagatio_1_fu_731_ap_done,
        ap_idle => grp_MaxPooBackPropagatio_1_fu_731_ap_idle,
        ap_ready => grp_MaxPooBackPropagatio_1_fu_731_ap_ready,
        input_matrix_address0 => grp_MaxPooBackPropagatio_1_fu_731_input_matrix_address0,
        input_matrix_ce0 => grp_MaxPooBackPropagatio_1_fu_731_input_matrix_ce0,
        input_matrix_q0 => pool_grad_1_q0,
        output_matrix_address0 => grp_MaxPooBackPropagatio_1_fu_731_output_matrix_address0,
        output_matrix_ce0 => grp_MaxPooBackPropagatio_1_fu_731_output_matrix_ce0,
        output_matrix_we0 => grp_MaxPooBackPropagatio_1_fu_731_output_matrix_we0,
        output_matrix_d0 => grp_MaxPooBackPropagatio_1_fu_731_output_matrix_d0,
        max_poo_locate_1_address0 => grp_MaxPooBackPropagatio_1_fu_731_max_poo_locate_1_address0,
        max_poo_locate_1_ce0 => grp_MaxPooBackPropagatio_1_fu_731_max_poo_locate_1_ce0,
        max_poo_locate_1_q0 => max_poo_locate_1_q0);

    grp_MaxPooBackPropagatio_fu_739 : component MaxPooBackPropagatio
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPooBackPropagatio_fu_739_ap_start,
        ap_done => grp_MaxPooBackPropagatio_fu_739_ap_done,
        ap_idle => grp_MaxPooBackPropagatio_fu_739_ap_idle,
        ap_ready => grp_MaxPooBackPropagatio_fu_739_ap_ready,
        input_matrix_address0 => grp_MaxPooBackPropagatio_fu_739_input_matrix_address0,
        input_matrix_ce0 => grp_MaxPooBackPropagatio_fu_739_input_matrix_ce0,
        input_matrix_q0 => grad_0_q0,
        output_matrix_address0 => grp_MaxPooBackPropagatio_fu_739_output_matrix_address0,
        output_matrix_ce0 => grp_MaxPooBackPropagatio_fu_739_output_matrix_ce0,
        output_matrix_we0 => grp_MaxPooBackPropagatio_fu_739_output_matrix_we0,
        output_matrix_d0 => grp_MaxPooBackPropagatio_fu_739_output_matrix_d0,
        max_poo_locate_2_address0 => grp_MaxPooBackPropagatio_fu_739_max_poo_locate_2_address0,
        max_poo_locate_2_ce0 => grp_MaxPooBackPropagatio_fu_739_max_poo_locate_2_ce0,
        max_poo_locate_2_q0 => max_poo_locate_2_q0);

    forw_back_faddfsuudo_U85 : component forw_back_faddfsuudo
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_747_p0,
        din1 => grp_fu_747_p1,
        opcode => grp_fu_747_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_747_p2);

    forw_back_fmul_32cud_U86 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_758_p0,
        din1 => grp_fu_758_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_758_p2);

    forw_back_fptruncg8j_U87 : component forw_back_fptruncg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_i_reg_1642,
        ce => ap_const_logic_1,
        dout => grp_fu_762_p1);

    forw_back_fpext_3hbi_U88 : component forw_back_fpext_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rgrad_1_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_766_p1);

    forw_back_fcmp_32eOg_U89 : component forw_back_fcmp_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fc_out_1_0_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_770_p2);

    forw_back_dmul_64jbC_U90 : component forw_back_dmul_64jbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i3_reg_1637,
        din1 => ap_const_lv64_3FA999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_776_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Conv2d_1_fu_693_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_1_fu_693_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then 
                    grp_Conv2d_1_fu_693_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_1_fu_693_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_1_fu_693_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_2_fu_708_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_2_fu_708_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_Conv2d_2_fu_708_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_2_fu_708_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_2_fu_708_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_fu_700_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_fu_700_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    grp_Conv2d_fu_700_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_fu_700_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_fu_700_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MatrixBackPropagatio_fu_716_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MatrixBackPropagatio_fu_716_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    grp_MatrixBackPropagatio_fu_716_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MatrixBackPropagatio_fu_716_ap_ready = ap_const_logic_1)) then 
                    grp_MatrixBackPropagatio_fu_716_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPooBackPropagatio_1_fu_731_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPooBackPropagatio_1_fu_731_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (m_axi_lr_in_RVALID = ap_const_logic_1))) then 
                    grp_MaxPooBackPropagatio_1_fu_731_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPooBackPropagatio_1_fu_731_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPooBackPropagatio_1_fu_731_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPooBackPropagatio_fu_739_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPooBackPropagatio_fu_739_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln79_1_fu_1141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    grp_MaxPooBackPropagatio_fu_739_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPooBackPropagatio_fu_739_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPooBackPropagatio_fu_739_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Padding_fu_725_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Padding_fu_725_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                    grp_Padding_fu_725_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Padding_fu_725_ap_ready = ap_const_logic_1)) then 
                    grp_Padding_fu_725_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_38_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                empty_38_reg_536 <= grp_fu_747_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln79_fu_939_p2 = ap_const_lv1_0))) then 
                empty_38_reg_536 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    empty_46_reg_604_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                empty_46_reg_604 <= reg_781;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0))) then 
                empty_46_reg_604 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_i15_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_1_fu_1106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i_0_i15_reg_570 <= i_6_reg_1650;
            elsif (((icmp_ln87_fu_1012_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_0_i15_reg_570 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i1_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_0_i1_reg_525 <= i_5_reg_1550;
            elsif (((icmp_ln73_fu_867_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_i1_reg_525 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i31_reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_1_fu_1178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_0_i31_reg_593 <= i_8_reg_1696;
            elsif (((icmp_ln73_1_fu_1069_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i_0_i31_reg_593 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i49_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_1286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                i_0_i49_reg_627 <= i_9_reg_1737;
            elsif (((grp_Padding_fu_725_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                i_0_i49_reg_627 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_0_i58_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_1357_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                i_0_i58_reg_649 <= i_10_reg_1778;
            elsif ((not(((grp_MatrixBackPropagatio_fu_716_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                i_0_i58_reg_649 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i69_reg_671_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_1_fu_1421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                i_0_i69_reg_671 <= i_11_reg_1819;
            elsif (((icmp_ln123_fu_1325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                i_0_i69_reg_671 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i8_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i_0_i8_reg_559 <= i_7_reg_1591;
            elsif (((icmp_ln79_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i8_reg_559 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_904_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_i_reg_502 <= i_reg_1504;
            elsif (((icmp_ln154_fu_845_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i_reg_502 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_491 <= i_4_reg_1482;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_491 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i20_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                j_0_i20_reg_582 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j_0_i20_reg_582 <= j_11_reg_1678;
            end if; 
        end if;
    end process;

    j_0_i2_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j_0_i2_reg_548 <= j_10_reg_1573;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln79_fu_939_p2 = ap_const_lv1_0))) then 
                j_0_i2_reg_548 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i36_reg_616_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                j_0_i36_reg_616 <= j_12_reg_1719;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0))) then 
                j_0_i36_reg_616 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_i51_reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61) and (icmp_ln107_fu_1218_p2 = ap_const_lv1_0))) then 
                j_0_i51_reg_638 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                j_0_i51_reg_638 <= j_13_reg_1755;
            end if; 
        end if;
    end process;

    j_0_i60_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (icmp_ln123_fu_1325_p2 = ap_const_lv1_0))) then 
                j_0_i60_reg_660 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                j_0_i60_reg_660 <= j_14_reg_1796;
            end if; 
        end if;
    end process;

    j_0_i73_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln123_1_fu_1389_p2 = ap_const_lv1_0))) then 
                j_0_i73_reg_682 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
                j_0_i73_reg_682 <= j_15_reg_1837;
            end if; 
        end if;
    end process;

    j_0_i_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_i_reg_514 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_0_i_reg_514 <= j_reg_1532;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61) and (icmp_ln107_fu_1218_p2 = ap_const_lv1_0))) then
                add_ln109_reg_1747 <= add_ln109_fu_1276_p2;
                sub_ln109_reg_1742 <= sub_ln109_fu_1242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln74_fu_904_p2 = ap_const_lv1_0))) then
                add_ln75_1_reg_1542 <= add_ln75_1_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln74_1_fu_1106_p2 = ap_const_lv1_0))) then
                add_ln75_3_reg_1688 <= add_ln75_3_fu_1132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                and_ln88_reg_1628 <= and_ln88_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) and (icmp_ln124_fu_1357_p2 = ap_const_lv1_0))) then
                fc_hidden_layer1_add_2_reg_1801 <= zext_ln125_fu_1383_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) and (icmp_ln124_1_fu_1421_p2 = ap_const_lv1_0))) then
                fc_hidden_layer2_add_2_reg_1842 <= zext_ln125_1_fu_1447_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                fc_in_1_0_load_reg_1670 <= fc_in_1_0_q0;
                    shl_ln75_2_reg_1660(9 downto 4) <= shl_ln75_2_fu_1086_p3(9 downto 4);
                    shl_ln75_3_reg_1665(7 downto 2) <= shl_ln75_3_fu_1094_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fc_in_2_relu1_0_load_reg_1524 <= fc_in_2_relu1_0_q0;
                    shl_ln75_1_reg_1519(5 downto 1) <= shl_ln75_1_fu_892_p3(5 downto 1);
                    shl_ln_reg_1514(7 downto 3) <= shl_ln_fu_884_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0))) then
                grad_0_addr_reg_1701 <= zext_ln80_1_fu_1153_p1(6 - 1 downto 0);
                    shl_ln82_2_reg_1706(9 downto 4) <= shl_ln82_2_fu_1158_p3(9 downto 4);
                    shl_ln82_3_reg_1711(7 downto 2) <= shl_ln82_3_fu_1166_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                grad_2_addr_reg_1463 <= zext_ln155_fu_825_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                i_10_reg_1778 <= i_10_fu_1331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                i_11_reg_1819 <= i_11_fu_1395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_4_reg_1482 <= i_4_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_5_reg_1550 <= i_5_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                i_6_reg_1650 <= i_6_fu_1075_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_7_reg_1591 <= i_7_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                i_8_reg_1696 <= i_8_fu_1147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                i_9_reg_1737 <= i_9_fu_1224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_1504 <= i_fu_873_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln154_fu_845_p2 = ap_const_lv1_0))) then
                icmp_ln155_reg_1487 <= icmp_ln155_fu_857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                icmp_ln88_1_reg_1618 <= icmp_ln88_1_fu_1053_p2;
                icmp_ln88_reg_1613 <= icmp_ln88_fu_1047_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_10_reg_1573 <= j_10_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                j_11_reg_1678 <= j_11_fu_1112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                j_12_reg_1719 <= j_12_fu_1184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                j_13_reg_1755 <= j_13_fu_1292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                j_14_reg_1796 <= j_14_fu_1363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                j_15_reg_1837 <= j_15_fu_1427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_reg_1532 <= j_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_MaxPooBackPropagatio_1_fu_731_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                lr_in_addr_read_1_reg_1770 <= m_axi_lr_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    lr_in_addr_reg_1473(29 downto 0) <= zext_ln152_fu_831_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_781 <= grp_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_790 <= grad_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_795 <= grp_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_802 <= fc_hidden_layer2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
                reg_808 <= grad_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state81))) then
                reg_813 <= fc_hidden_layer1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((grp_MatrixBackPropagatio_fu_716_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (m_axi_lr_in_RVALID = ap_const_logic_1)))) then
                reg_819 <= m_axi_lr_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln79_fu_939_p2 = ap_const_lv1_0))) then
                rgrad_1_addr_reg_1555 <= zext_ln80_fu_951_p1(5 - 1 downto 0);
                    shl_ln2_reg_1560(7 downto 3) <= shl_ln2_fu_956_p3(7 downto 3);
                    shl_ln82_1_reg_1565(5 downto 1) <= shl_ln82_1_fu_964_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (icmp_ln123_fu_1325_p2 = ap_const_lv1_0))) then
                    shl_ln125_1_reg_1788(7 downto 2) <= shl_ln125_1_fu_1345_p3(7 downto 2);
                    shl_ln4_reg_1783(9 downto 4) <= shl_ln4_fu_1337_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln123_1_fu_1389_p2 = ap_const_lv1_0))) then
                    shl_ln125_2_reg_1824(7 downto 3) <= shl_ln125_2_fu_1401_p3(7 downto 3);
                    shl_ln125_3_reg_1829(5 downto 1) <= shl_ln125_3_fu_1409_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) and (icmp_ln108_fu_1286_p2 = ap_const_lv1_0))) then
                sub_ln109_3_reg_1765 <= sub_ln109_3_fu_1312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_2_i_reg_1642 <= grp_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_i3_reg_1637 <= grp_fu_766_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                wgrad_1_load_reg_1811 <= wgrad_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                wgrad_2_load_reg_1853 <= wgrad_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln154_fu_845_p2 = ap_const_lv1_0) and (icmp_ln155_fu_857_p2 = ap_const_lv1_0))) then
                    zext_ln156_reg_1491(3 downto 0) <= zext_ln156_fu_862_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln87_fu_1012_p2 = ap_const_lv1_0))) then
                    zext_ln88_reg_1596(4 downto 0) <= zext_ln88_fu_1024_p1(4 downto 0);
            end if;
        end if;
    end process;
    lr_in_addr_reg_1473(31 downto 30) <= "00";
    zext_ln156_reg_1491(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_1514(2 downto 0) <= "000";
    shl_ln75_1_reg_1519(0) <= '0';
    shl_ln2_reg_1560(2 downto 0) <= "000";
    shl_ln82_1_reg_1565(0) <= '0';
    zext_ln88_reg_1596(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    shl_ln75_2_reg_1660(3 downto 0) <= "0000";
    shl_ln75_3_reg_1665(1 downto 0) <= "00";
    shl_ln82_2_reg_1706(3 downto 0) <= "0000";
    shl_ln82_3_reg_1711(1 downto 0) <= "00";
    shl_ln4_reg_1783(3 downto 0) <= "0000";
    shl_ln125_1_reg_1788(1 downto 0) <= "00";
    shl_ln125_2_reg_1824(2 downto 0) <= "000";
    shl_ln125_3_reg_1829(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_lr_in_ARREADY, m_axi_lr_in_RVALID, ap_CS_fsm_state61, icmp_ln107_fu_1218_p2, ap_CS_fsm_state70, ap_CS_fsm_state64, ap_CS_fsm_state71, ap_CS_fsm_state68, ap_CS_fsm_state75, grp_MatrixBackPropagatio_fu_716_ap_done, ap_CS_fsm_state6, icmp_ln154_fu_845_p2, ap_CS_fsm_state8, icmp_ln73_fu_867_p2, ap_CS_fsm_state10, icmp_ln74_fu_904_p2, ap_CS_fsm_state16, icmp_ln79_fu_939_p2, ap_CS_fsm_state17, icmp_ln81_fu_976_p2, ap_CS_fsm_state26, icmp_ln87_fu_1012_p2, and_ln88_fu_1063_p2, ap_CS_fsm_state28, ap_CS_fsm_state37, icmp_ln73_1_fu_1069_p2, ap_CS_fsm_state39, icmp_ln74_1_fu_1106_p2, ap_CS_fsm_state45, icmp_ln79_1_fu_1141_p2, ap_CS_fsm_state46, icmp_ln81_1_fu_1178_p2, ap_block_state61_io, ap_CS_fsm_state62, icmp_ln108_fu_1286_p2, grp_MaxPooBackPropagatio_1_fu_731_ap_done, ap_CS_fsm_state76, icmp_ln123_fu_1325_p2, ap_CS_fsm_state77, icmp_ln124_fu_1357_p2, ap_CS_fsm_state87, icmp_ln123_1_fu_1389_p2, ap_CS_fsm_state88, icmp_ln124_1_fu_1421_p2, grp_Conv2d_1_fu_693_ap_done, grp_Conv2d_2_fu_708_ap_done, grp_Padding_fu_725_ap_done, grp_MaxPooBackPropagatio_fu_739_ap_done, ap_CS_fsm_state60, ap_CS_fsm_state69, ap_CS_fsm_state73, ap_CS_fsm_state58, ap_CS_fsm_state56, ap_block_state73_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln154_fu_845_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln73_fu_867_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln74_fu_904_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln79_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln81_fu_976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln87_fu_1012_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_lv1_1 = and_ln88_fu_1063_p2) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln73_1_fu_1069_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((icmp_ln74_1_fu_1106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln81_1_fu_1178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state56 => 
                if (((grp_MaxPooBackPropagatio_fu_739_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_Conv2d_2_fu_708_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((grp_Padding_fu_725_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_boolean_0 = ap_block_state61_io) and (ap_const_logic_1 = ap_CS_fsm_state61) and (icmp_ln107_fu_1218_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                elsif (((ap_const_boolean_0 = ap_block_state61_io) and (icmp_ln107_fu_1218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln108_fu_1286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (m_axi_lr_in_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                if (((grp_Conv2d_1_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (m_axi_lr_in_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if ((not(((grp_MaxPooBackPropagatio_1_fu_731_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (ap_const_boolean_0 = ap_block_state73_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if ((not(((grp_MatrixBackPropagatio_fu_716_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                if (((icmp_ln123_fu_1325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                if (((icmp_ln124_fu_1357_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state87 => 
                if (((icmp_ln123_1_fu_1389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state88 => 
                if (((icmp_ln124_1_fu_1421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln109_1_fu_1298_p2 <= std_logic_vector(unsigned(sub_ln109_reg_1742) + unsigned(zext_ln108_fu_1282_p1));
    add_ln109_fu_1276_p2 <= std_logic_vector(unsigned(sub_ln109_2_fu_1270_p2) + unsigned(ap_const_lv5_2));
    add_ln125_1_fu_1378_p2 <= std_logic_vector(unsigned(zext_ln125_2_fu_1374_p1) + unsigned(shl_ln4_reg_1783));
    add_ln125_2_fu_1433_p2 <= std_logic_vector(unsigned(shl_ln125_3_reg_1829) + unsigned(j_0_i73_cast_fu_1417_p1));
    add_ln125_3_fu_1442_p2 <= std_logic_vector(unsigned(zext_ln125_3_fu_1438_p1) + unsigned(shl_ln125_2_reg_1824));
    add_ln125_fu_1369_p2 <= std_logic_vector(unsigned(shl_ln125_1_reg_1788) + unsigned(j_0_i60_cast_fu_1353_p1));
    add_ln75_1_fu_930_p2 <= std_logic_vector(unsigned(zext_ln75_6_fu_926_p1) + unsigned(shl_ln_reg_1514));
    add_ln75_2_fu_1123_p2 <= std_logic_vector(unsigned(shl_ln75_3_reg_1665) + unsigned(j_0_i20_cast14_fu_1102_p1));
    add_ln75_3_fu_1132_p2 <= std_logic_vector(unsigned(zext_ln75_7_fu_1128_p1) + unsigned(shl_ln75_2_reg_1660));
    add_ln75_fu_921_p2 <= std_logic_vector(unsigned(shl_ln75_1_reg_1519) + unsigned(j_0_i_cast20_fu_900_p1));
    add_ln82_1_fu_997_p2 <= std_logic_vector(unsigned(zext_ln82_4_fu_993_p1) + unsigned(shl_ln2_reg_1560));
    add_ln82_2_fu_1190_p2 <= std_logic_vector(unsigned(shl_ln82_3_reg_1711) + unsigned(j_0_i36_cast11_fu_1174_p1));
    add_ln82_3_fu_1199_p2 <= std_logic_vector(unsigned(zext_ln82_5_fu_1195_p1) + unsigned(shl_ln82_2_reg_1706));
    add_ln82_fu_988_p2 <= std_logic_vector(unsigned(shl_ln82_1_reg_1565) + unsigned(j_0_i2_cast17_fu_972_p1));
    and_ln88_fu_1063_p2 <= (or_ln88_fu_1059_p2 and grp_fu_770_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);

    ap_block_state61_io_assign_proc : process(m_axi_lr_in_ARREADY, icmp_ln107_fu_1218_p2)
    begin
                ap_block_state61_io <= ((m_axi_lr_in_ARREADY = ap_const_logic_0) and (icmp_ln107_fu_1218_p2 = ap_const_lv1_1));
    end process;


    ap_block_state73_on_subcall_done_assign_proc : process(grp_MatrixBackPropagatio_fu_716_ap_done, grp_Conv2d_fu_700_ap_done)
    begin
                ap_block_state73_on_subcall_done <= ((grp_Conv2d_fu_700_ap_done = ap_const_logic_0) or (grp_MatrixBackPropagatio_fu_716_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state87, icmp_ln123_1_fu_1389_p2)
    begin
        if ((((icmp_ln123_1_fu_1389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state87, icmp_ln123_1_fu_1389_p2)
    begin
        if (((icmp_ln123_1_fu_1389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln88_fu_1029_p1 <= fc_out_1_0_q0;

    conv_grad_1_address0_assign_proc : process(ap_CS_fsm_state71, grp_Conv2d_fu_700_kernel_address0, grp_MaxPooBackPropagatio_1_fu_731_output_matrix_address0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            conv_grad_1_address0 <= grp_MaxPooBackPropagatio_1_fu_731_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            conv_grad_1_address0 <= grp_Conv2d_fu_700_kernel_address0;
        else 
            conv_grad_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_grad_1_ce0_assign_proc : process(ap_CS_fsm_state71, grp_Conv2d_fu_700_kernel_ce0, grp_MaxPooBackPropagatio_1_fu_731_output_matrix_ce0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            conv_grad_1_ce0 <= grp_MaxPooBackPropagatio_1_fu_731_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            conv_grad_1_ce0 <= grp_Conv2d_fu_700_kernel_ce0;
        else 
            conv_grad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_1_we0_assign_proc : process(ap_CS_fsm_state71, grp_MaxPooBackPropagatio_1_fu_731_output_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            conv_grad_1_we0 <= grp_MaxPooBackPropagatio_1_fu_731_output_matrix_we0;
        else 
            conv_grad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_address0_assign_proc : process(grp_Conv2d_2_fu_708_kernel_address0, grp_Padding_fu_725_input_matrix_address0, grp_MaxPooBackPropagatio_fu_739_output_matrix_address0, ap_CS_fsm_state60, ap_CS_fsm_state58, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            conv_grad_2_address0 <= grp_MaxPooBackPropagatio_fu_739_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_address0 <= grp_Padding_fu_725_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            conv_grad_2_address0 <= grp_Conv2d_2_fu_708_kernel_address0;
        else 
            conv_grad_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_grad_2_ce0_assign_proc : process(grp_Conv2d_2_fu_708_kernel_ce0, grp_Padding_fu_725_input_matrix_ce0, grp_MaxPooBackPropagatio_fu_739_output_matrix_ce0, ap_CS_fsm_state60, ap_CS_fsm_state58, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            conv_grad_2_ce0 <= grp_MaxPooBackPropagatio_fu_739_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_ce0 <= grp_Padding_fu_725_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            conv_grad_2_ce0 <= grp_Conv2d_2_fu_708_kernel_ce0;
        else 
            conv_grad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_ce1_assign_proc : process(grp_Padding_fu_725_input_matrix_ce1, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_ce1 <= grp_Padding_fu_725_input_matrix_ce1;
        else 
            conv_grad_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_address0_assign_proc : process(grp_Conv2d_1_fu_693_input_matrix_address0, grp_Padding_fu_725_output_matrix_address0, ap_CS_fsm_state60, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_padding_address0 <= grp_Padding_fu_725_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            conv_grad_2_padding_address0 <= grp_Conv2d_1_fu_693_input_matrix_address0;
        else 
            conv_grad_2_padding_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_grad_2_padding_ce0_assign_proc : process(grp_Conv2d_1_fu_693_input_matrix_ce0, grp_Padding_fu_725_output_matrix_ce0, ap_CS_fsm_state60, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_padding_ce0 <= grp_Padding_fu_725_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            conv_grad_2_padding_ce0 <= grp_Conv2d_1_fu_693_input_matrix_ce0;
        else 
            conv_grad_2_padding_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_ce1_assign_proc : process(grp_Padding_fu_725_output_matrix_ce1, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_padding_ce1 <= grp_Padding_fu_725_output_matrix_ce1;
        else 
            conv_grad_2_padding_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_we0_assign_proc : process(grp_Padding_fu_725_output_matrix_we0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_padding_we0 <= grp_Padding_fu_725_output_matrix_we0;
        else 
            conv_grad_2_padding_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_padding_we1_assign_proc : process(grp_Padding_fu_725_output_matrix_we1, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            conv_grad_2_padding_we1 <= grp_Padding_fu_725_output_matrix_we1;
        else 
            conv_grad_2_padding_we1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_grad_2_we0_assign_proc : process(grp_MaxPooBackPropagatio_fu_739_output_matrix_we0, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            conv_grad_2_we0 <= grp_MaxPooBackPropagatio_fu_739_output_matrix_we0;
        else 
            conv_grad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel_1_address0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_address0;

    conv_kernel_1_ce0_assign_proc : process(ap_CS_fsm_state75, grp_MatrixBackPropagatio_fu_716_output_matrix_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            conv_kernel_1_ce0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_ce0;
        else 
            conv_kernel_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel_1_d0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_d0;

    conv_kernel_1_we0_assign_proc : process(ap_CS_fsm_state75, grp_MatrixBackPropagatio_fu_716_output_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            conv_kernel_1_we0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_we0;
        else 
            conv_kernel_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel_2_address0_assign_proc : process(ap_CS_fsm_state62, grp_MatrixBackPropagatio_fu_716_output_matrix_address0, ap_CS_fsm_state73, zext_ln109_fu_1307_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            conv_kernel_2_address0 <= zext_ln109_fu_1307_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            conv_kernel_2_address0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_address0;
        else 
            conv_kernel_2_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel_2_ce0_assign_proc : process(ap_CS_fsm_state62, grp_MatrixBackPropagatio_fu_716_output_matrix_ce0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            conv_kernel_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            conv_kernel_2_ce0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_ce0;
        else 
            conv_kernel_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_kernel_2_d0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_d0;

    conv_kernel_2_we0_assign_proc : process(grp_MatrixBackPropagatio_fu_716_output_matrix_we0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            conv_kernel_2_we0 <= grp_MatrixBackPropagatio_fu_716_output_matrix_we0;
        else 
            conv_kernel_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer1_address0_assign_proc : process(ap_CS_fsm_state46, fc_hidden_layer1_add_2_reg_1801, ap_CS_fsm_state86, zext_ln82_2_fu_1204_p1, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            fc_hidden_layer1_address0 <= fc_hidden_layer1_add_2_reg_1801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer1_address0 <= zext_ln82_2_fu_1204_p1(10 - 1 downto 0);
        else 
            fc_hidden_layer1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer1_ce0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state86, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            fc_hidden_layer1_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer1_d0 <= reg_781;

    fc_hidden_layer1_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            fc_hidden_layer1_we0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_address0_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state17, fc_hidden_layer2_add_2_reg_1842, zext_ln82_fu_1002_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            fc_hidden_layer2_address0 <= fc_hidden_layer2_add_2_reg_1842;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc_hidden_layer2_address0 <= zext_ln82_fu_1002_p1(8 - 1 downto 0);
        else 
            fc_hidden_layer2_address0 <= "XXXXXXXX";
        end if; 
    end process;

    fc_hidden_layer2_address1 <= fc_hidden_layer2_add_2_reg_1842;

    fc_hidden_layer2_ce0_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            fc_hidden_layer2_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_ce1_assign_proc : process(ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            fc_hidden_layer2_ce1 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer2_d1 <= grp_fu_747_p2;

    fc_hidden_layer2_we1_assign_proc : process(ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            fc_hidden_layer2_we1 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_1_0_address0 <= zext_ln75_3_fu_1081_p1(6 - 1 downto 0);

    fc_in_1_0_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            fc_in_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_2_relu1_0_address0 <= zext_ln75_fu_879_p1(5 - 1 downto 0);

    fc_in_2_relu1_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_out_1_0_address0 <= zext_ln88_fu_1024_p1(5 - 1 downto 0);

    fc_out_1_0_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            fc_out_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_out_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_0_address0_assign_proc : process(ap_CS_fsm_state45, grad_0_addr_reg_1701, icmp_ln79_1_fu_1141_p2, grp_MaxPooBackPropagatio_fu_739_input_matrix_address0, ap_CS_fsm_state55, ap_CS_fsm_state56, zext_ln80_1_fu_1153_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grad_0_address0 <= grad_0_addr_reg_1701;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0))) then 
            grad_0_address0 <= zext_ln80_1_fu_1153_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grad_0_address0 <= grp_MaxPooBackPropagatio_fu_739_input_matrix_address0;
        else 
            grad_0_address0 <= "XXXXXX";
        end if; 
    end process;


    grad_0_ce0_assign_proc : process(ap_CS_fsm_state45, icmp_ln79_1_fu_1141_p2, grp_MaxPooBackPropagatio_fu_739_input_matrix_ce0, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0)))) then 
            grad_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grad_0_ce0 <= grp_MaxPooBackPropagatio_fu_739_input_matrix_ce0;
        else 
            grad_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_0_d0_assign_proc : process(reg_781, ap_CS_fsm_state45, icmp_ln79_1_fu_1141_p2, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grad_0_d0 <= reg_781;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0))) then 
            grad_0_d0 <= ap_const_lv32_0;
        else 
            grad_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grad_0_we0_assign_proc : process(ap_CS_fsm_state45, icmp_ln79_1_fu_1141_p2, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln79_1_fu_1141_p2 = ap_const_lv1_0)))) then 
            grad_0_we0 <= ap_const_logic_1;
        else 
            grad_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grad_1_addr_1_gep_fu_361_p3 <= zext_ln88_reg_1596(5 - 1 downto 0);

    grad_1_address0_assign_proc : process(zext_ln88_reg_1596, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state46, ap_CS_fsm_state36, grad_1_addr_1_gep_fu_361_p3, zext_ln75_4_fu_1118_p1, zext_ln82_3_fu_1209_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grad_1_address0 <= zext_ln82_3_fu_1209_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grad_1_address0 <= zext_ln75_4_fu_1118_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grad_1_address0 <= grad_1_addr_1_gep_fu_361_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grad_1_address0 <= zext_ln88_reg_1596(5 - 1 downto 0);
        else 
            grad_1_address0 <= "XXXXX";
        end if; 
    end process;


    grad_1_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state46, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grad_1_ce0 <= ap_const_logic_1;
        else 
            grad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_1_d0_assign_proc : process(ap_CS_fsm_state28, rgrad_1_q0, ap_CS_fsm_state36, grp_fu_762_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grad_1_d0 <= grp_fu_762_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grad_1_d0 <= rgrad_1_q0;
        else 
            grad_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grad_1_we0_assign_proc : process(and_ln88_fu_1063_p2, and_ln88_reg_1628, ap_CS_fsm_state28, ap_CS_fsm_state36)
    begin
        if ((((ap_const_lv1_1 = and_ln88_fu_1063_p2) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_const_lv1_0 = and_ln88_reg_1628)))) then 
            grad_1_we0 <= ap_const_logic_1;
        else 
            grad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_2_address0_assign_proc : process(grad_2_addr_reg_1463, ap_CS_fsm_state6, zext_ln156_reg_1491, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state7, zext_ln75_1_fu_916_p1, zext_ln82_1_fu_1007_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grad_2_address0 <= zext_ln82_1_fu_1007_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grad_2_address0 <= zext_ln75_1_fu_916_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grad_2_address0 <= zext_ln156_reg_1491(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grad_2_address0 <= grad_2_addr_reg_1463;
        else 
            grad_2_address0 <= "XXXX";
        end if; 
    end process;


    grad_2_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grad_2_ce0 <= ap_const_logic_1;
        else 
            grad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grad_2_d0_assign_proc : process(probability_result_q0, reg_781, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grad_2_d0 <= probability_result_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grad_2_d0 <= reg_781;
        else 
            grad_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grad_2_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln155_fu_857_p2, icmp_ln155_reg_1487, icmp_ln154_fu_845_p2, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln155_reg_1487 = ap_const_lv1_0)) or ((icmp_ln155_fu_857_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln154_fu_845_p2 = ap_const_lv1_0)))) then 
            grad_2_we0 <= ap_const_logic_1;
        else 
            grad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv2d_1_fu_693_ap_start <= grp_Conv2d_1_fu_693_ap_start_reg;
    grp_Conv2d_2_fu_708_ap_start <= grp_Conv2d_2_fu_708_ap_start_reg;
    grp_Conv2d_fu_700_ap_start <= grp_Conv2d_fu_700_ap_start_reg;
    grp_MatrixBackPropagatio_fu_716_ap_start <= grp_MatrixBackPropagatio_fu_716_ap_start_reg;

    grp_MatrixBackPropagatio_fu_716_input_matrix_q0_assign_proc : process(ap_CS_fsm_state75, kernel_grad_2_q0, kernel_grad_1_q0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_MatrixBackPropagatio_fu_716_input_matrix_q0 <= kernel_grad_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_MatrixBackPropagatio_fu_716_input_matrix_q0 <= kernel_grad_2_q0;
        else 
            grp_MatrixBackPropagatio_fu_716_input_matrix_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MatrixBackPropagatio_fu_716_lr_assign_proc : process(ap_CS_fsm_state75, reg_819, lr_in_addr_read_1_reg_1770, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_MatrixBackPropagatio_fu_716_lr <= reg_819;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_MatrixBackPropagatio_fu_716_lr <= lr_in_addr_read_1_reg_1770;
        else 
            grp_MatrixBackPropagatio_fu_716_lr <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MatrixBackPropagatio_fu_716_output_matrix_q0_assign_proc : process(conv_kernel_2_q0, conv_kernel_1_q0, ap_CS_fsm_state75, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_MatrixBackPropagatio_fu_716_output_matrix_q0 <= conv_kernel_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_MatrixBackPropagatio_fu_716_output_matrix_q0 <= conv_kernel_2_q0;
        else 
            grp_MatrixBackPropagatio_fu_716_output_matrix_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_MaxPooBackPropagatio_1_fu_731_ap_start <= grp_MaxPooBackPropagatio_1_fu_731_ap_start_reg;
    grp_MaxPooBackPropagatio_fu_739_ap_start <= grp_MaxPooBackPropagatio_fu_739_ap_start_reg;
    grp_Padding_fu_725_ap_start <= grp_Padding_fu_725_ap_start_reg;

    grp_fu_747_opcode_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state2, ap_CS_fsm_state22, ap_CS_fsm_state51, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            grp_fu_747_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_747_opcode <= ap_const_lv2_0;
        else 
            grp_fu_747_opcode <= "XX";
        end if; 
    end process;


    grp_fu_747_p0_assign_proc : process(probability_result_q0, fc_hidden_layer2_q0, ap_CS_fsm_state93, reg_813, ap_CS_fsm_state2, empty_38_reg_536, empty_46_reg_604, ap_CS_fsm_state22, ap_CS_fsm_state51, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_747_p0 <= fc_hidden_layer2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_747_p0 <= reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_747_p0 <= empty_46_reg_604;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_747_p0 <= empty_38_reg_536;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_747_p0 <= probability_result_q0;
        else 
            grp_fu_747_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_747_p1_assign_proc : process(reg_795, ap_CS_fsm_state93, ap_CS_fsm_state2, ap_CS_fsm_state22, ap_CS_fsm_state51, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_747_p1 <= reg_795;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_747_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_747_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_758_p0_assign_proc : process(reg_802, reg_813, fc_in_2_relu1_0_load_reg_1524, fc_in_1_0_load_reg_1670, wgrad_1_load_reg_1811, wgrad_2_load_reg_1853, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state79, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_758_p0 <= wgrad_2_load_reg_1853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_758_p0 <= wgrad_1_load_reg_1811;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_758_p0 <= reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_758_p0 <= fc_in_1_0_load_reg_1670;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_758_p0 <= reg_802;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_758_p0 <= fc_in_2_relu1_0_load_reg_1524;
        else 
            grp_fu_758_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_758_p1_assign_proc : process(reg_790, reg_808, reg_819, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state79, ap_CS_fsm_state90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            grp_fu_758_p1 <= reg_819;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_fu_758_p1 <= reg_808;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_758_p1 <= reg_790;
        else 
            grp_fu_758_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_fu_1331_p2 <= std_logic_vector(unsigned(i_0_i58_reg_649) + unsigned(ap_const_lv6_1));
    i_11_fu_1395_p2 <= std_logic_vector(unsigned(i_0_i69_reg_671) + unsigned(ap_const_lv5_1));
    i_4_fu_851_p2 <= std_logic_vector(unsigned(i_0_reg_491) + unsigned(ap_const_lv4_1));
    i_5_fu_945_p2 <= std_logic_vector(unsigned(i_0_i1_reg_525) + unsigned(ap_const_lv5_1));
    i_6_fu_1075_p2 <= std_logic_vector(unsigned(i_0_i15_reg_570) + unsigned(ap_const_lv6_1));
    i_7_fu_1018_p2 <= std_logic_vector(unsigned(i_0_i8_reg_559) + unsigned(ap_const_lv5_1));
    i_8_fu_1147_p2 <= std_logic_vector(unsigned(i_0_i31_reg_593) + unsigned(ap_const_lv6_1));
    i_9_fu_1224_p2 <= std_logic_vector(unsigned(i_0_i49_reg_627) + unsigned(ap_const_lv2_1));
    i_fu_873_p2 <= std_logic_vector(unsigned(i_0_i_reg_502) + unsigned(ap_const_lv5_1));
    icmp_ln107_fu_1218_p2 <= "1" when (i_0_i49_reg_627 = ap_const_lv2_3) else "0";
    icmp_ln108_fu_1286_p2 <= "1" when (j_0_i51_reg_638 = ap_const_lv2_3) else "0";
    icmp_ln123_1_fu_1389_p2 <= "1" when (i_0_i69_reg_671 = ap_const_lv5_14) else "0";
    icmp_ln123_fu_1325_p2 <= "1" when (i_0_i58_reg_649 = ap_const_lv6_24) else "0";
    icmp_ln124_1_fu_1421_p2 <= "1" when (j_0_i73_reg_682 = ap_const_lv4_A) else "0";
    icmp_ln124_fu_1357_p2 <= "1" when (j_0_i60_reg_660 = ap_const_lv5_14) else "0";
    icmp_ln154_fu_845_p2 <= "1" when (i_0_reg_491 = ap_const_lv4_A) else "0";
    icmp_ln155_fu_857_p2 <= "1" when (zext_ln154_fu_841_p1 = label_r) else "0";
    icmp_ln73_1_fu_1069_p2 <= "1" when (i_0_i15_reg_570 = ap_const_lv6_24) else "0";
    icmp_ln73_fu_867_p2 <= "1" when (i_0_i_reg_502 = ap_const_lv5_14) else "0";
    icmp_ln74_1_fu_1106_p2 <= "1" when (j_0_i20_reg_582 = ap_const_lv5_14) else "0";
    icmp_ln74_fu_904_p2 <= "1" when (j_0_i_reg_514 = ap_const_lv4_A) else "0";
    icmp_ln79_1_fu_1141_p2 <= "1" when (i_0_i31_reg_593 = ap_const_lv6_24) else "0";
    icmp_ln79_fu_939_p2 <= "1" when (i_0_i1_reg_525 = ap_const_lv5_14) else "0";
    icmp_ln81_1_fu_1178_p2 <= "1" when (j_0_i36_reg_616 = ap_const_lv5_14) else "0";
    icmp_ln81_fu_976_p2 <= "1" when (j_0_i2_reg_548 = ap_const_lv4_A) else "0";
    icmp_ln87_fu_1012_p2 <= "1" when (i_0_i8_reg_559 = ap_const_lv5_14) else "0";
    icmp_ln88_1_fu_1053_p2 <= "1" when (trunc_ln88_fu_1043_p1 = ap_const_lv23_0) else "0";
    icmp_ln88_fu_1047_p2 <= "0" when (tmp_s_fu_1033_p4 = ap_const_lv8_FF) else "1";
    j_0_i20_cast14_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i20_reg_582),8));
    j_0_i2_cast17_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i2_reg_548),6));
    j_0_i36_cast11_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i36_reg_616),8));
    j_0_i60_cast_fu_1353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i60_reg_660),8));
    j_0_i73_cast_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i73_reg_682),6));
    j_0_i_cast20_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_514),6));
    j_10_fu_982_p2 <= std_logic_vector(unsigned(j_0_i2_reg_548) + unsigned(ap_const_lv4_1));
    j_11_fu_1112_p2 <= std_logic_vector(unsigned(j_0_i20_reg_582) + unsigned(ap_const_lv5_1));
    j_12_fu_1184_p2 <= std_logic_vector(unsigned(j_0_i36_reg_616) + unsigned(ap_const_lv5_1));
    j_13_fu_1292_p2 <= std_logic_vector(unsigned(j_0_i51_reg_638) + unsigned(ap_const_lv2_1));
    j_14_fu_1363_p2 <= std_logic_vector(unsigned(j_0_i60_reg_660) + unsigned(ap_const_lv5_1));
    j_15_fu_1427_p2 <= std_logic_vector(unsigned(j_0_i73_reg_682) + unsigned(ap_const_lv4_1));
    j_fu_910_p2 <= std_logic_vector(unsigned(j_0_i_reg_514) + unsigned(ap_const_lv4_1));

    kernel_grad_1_address0_assign_proc : process(ap_CS_fsm_state75, grp_Conv2d_fu_700_out_matrix_address0, grp_MatrixBackPropagatio_fu_716_input_matrix_address0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            kernel_grad_1_address0 <= grp_MatrixBackPropagatio_fu_716_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            kernel_grad_1_address0 <= grp_Conv2d_fu_700_out_matrix_address0;
        else 
            kernel_grad_1_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_1_ce0_assign_proc : process(ap_CS_fsm_state75, grp_Conv2d_fu_700_out_matrix_ce0, grp_MatrixBackPropagatio_fu_716_input_matrix_ce0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            kernel_grad_1_ce0 <= grp_MatrixBackPropagatio_fu_716_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            kernel_grad_1_ce0 <= grp_Conv2d_fu_700_out_matrix_ce0;
        else 
            kernel_grad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_1_we0_assign_proc : process(grp_Conv2d_fu_700_out_matrix_we0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            kernel_grad_1_we0 <= grp_Conv2d_fu_700_out_matrix_we0;
        else 
            kernel_grad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_address0_assign_proc : process(grp_Conv2d_2_fu_708_out_matrix_address0, grp_MatrixBackPropagatio_fu_716_input_matrix_address0, ap_CS_fsm_state73, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            kernel_grad_2_address0 <= grp_MatrixBackPropagatio_fu_716_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            kernel_grad_2_address0 <= grp_Conv2d_2_fu_708_out_matrix_address0;
        else 
            kernel_grad_2_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_2_ce0_assign_proc : process(grp_Conv2d_2_fu_708_out_matrix_ce0, grp_MatrixBackPropagatio_fu_716_input_matrix_ce0, ap_CS_fsm_state73, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            kernel_grad_2_ce0 <= grp_MatrixBackPropagatio_fu_716_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            kernel_grad_2_ce0 <= grp_Conv2d_2_fu_708_out_matrix_ce0;
        else 
            kernel_grad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_overtu_address0_assign_proc : process(grp_Conv2d_1_fu_693_kernel_address0, ap_CS_fsm_state63, ap_CS_fsm_state69, zext_ln109_1_fu_1320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            kernel_grad_2_overtu_address0 <= zext_ln109_1_fu_1320_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            kernel_grad_2_overtu_address0 <= grp_Conv2d_1_fu_693_kernel_address0;
        else 
            kernel_grad_2_overtu_address0 <= "XXXX";
        end if; 
    end process;


    kernel_grad_2_overtu_ce0_assign_proc : process(grp_Conv2d_1_fu_693_kernel_ce0, ap_CS_fsm_state63, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            kernel_grad_2_overtu_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            kernel_grad_2_overtu_ce0 <= grp_Conv2d_1_fu_693_kernel_ce0;
        else 
            kernel_grad_2_overtu_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_overtu_we0_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            kernel_grad_2_overtu_we0 <= ap_const_logic_1;
        else 
            kernel_grad_2_overtu_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_grad_2_we0_assign_proc : process(grp_Conv2d_2_fu_708_out_matrix_we0, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            kernel_grad_2_we0 <= grp_Conv2d_2_fu_708_out_matrix_we0;
        else 
            kernel_grad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lr_in_blk_n_AR_assign_proc : process(m_axi_lr_in_ARREADY, ap_CS_fsm_state61, icmp_ln107_fu_1218_p2, ap_CS_fsm_state64, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln107_fu_1218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)))) then 
            lr_in_blk_n_AR <= m_axi_lr_in_ARREADY;
        else 
            lr_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    lr_in_blk_n_R_assign_proc : process(m_axi_lr_in_RVALID, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            lr_in_blk_n_R <= m_axi_lr_in_RVALID;
        else 
            lr_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_lr_in_ARADDR <= lr_in_addr_reg_1473;
    m_axi_lr_in_ARBURST <= ap_const_lv2_0;
    m_axi_lr_in_ARCACHE <= ap_const_lv4_0;
    m_axi_lr_in_ARID <= ap_const_lv1_0;
    m_axi_lr_in_ARLEN <= ap_const_lv32_1;
    m_axi_lr_in_ARLOCK <= ap_const_lv2_0;
    m_axi_lr_in_ARPROT <= ap_const_lv3_0;
    m_axi_lr_in_ARQOS <= ap_const_lv4_0;
    m_axi_lr_in_ARREGION <= ap_const_lv4_0;
    m_axi_lr_in_ARSIZE <= ap_const_lv3_0;
    m_axi_lr_in_ARUSER <= ap_const_lv1_0;

    m_axi_lr_in_ARVALID_assign_proc : process(m_axi_lr_in_ARREADY, ap_CS_fsm_state61, icmp_ln107_fu_1218_p2, ap_CS_fsm_state64, ap_CS_fsm_state68, ap_block_state61_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state68) and (m_axi_lr_in_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (m_axi_lr_in_ARREADY = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_state61_io) and (icmp_ln107_fu_1218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)))) then 
            m_axi_lr_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_lr_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_lr_in_AWADDR <= ap_const_lv32_0;
    m_axi_lr_in_AWBURST <= ap_const_lv2_0;
    m_axi_lr_in_AWCACHE <= ap_const_lv4_0;
    m_axi_lr_in_AWID <= ap_const_lv1_0;
    m_axi_lr_in_AWLEN <= ap_const_lv32_0;
    m_axi_lr_in_AWLOCK <= ap_const_lv2_0;
    m_axi_lr_in_AWPROT <= ap_const_lv3_0;
    m_axi_lr_in_AWQOS <= ap_const_lv4_0;
    m_axi_lr_in_AWREGION <= ap_const_lv4_0;
    m_axi_lr_in_AWSIZE <= ap_const_lv3_0;
    m_axi_lr_in_AWUSER <= ap_const_lv1_0;
    m_axi_lr_in_AWVALID <= ap_const_logic_0;
    m_axi_lr_in_BREADY <= ap_const_logic_0;

    m_axi_lr_in_RREADY_assign_proc : process(m_axi_lr_in_RVALID, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state75, grp_MatrixBackPropagatio_fu_716_ap_done, grp_MaxPooBackPropagatio_1_fu_731_ap_done)
    begin
        if (((not(((grp_MatrixBackPropagatio_fu_716_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75)) or (not(((grp_MaxPooBackPropagatio_1_fu_731_ap_done = ap_const_logic_0) or (m_axi_lr_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((ap_const_logic_1 = ap_CS_fsm_state70) and (m_axi_lr_in_RVALID = ap_const_logic_1)))) then 
            m_axi_lr_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_lr_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_lr_in_WDATA <= ap_const_lv32_0;
    m_axi_lr_in_WID <= ap_const_lv1_0;
    m_axi_lr_in_WLAST <= ap_const_logic_0;
    m_axi_lr_in_WSTRB <= ap_const_lv4_0;
    m_axi_lr_in_WUSER <= ap_const_lv1_0;
    m_axi_lr_in_WVALID <= ap_const_logic_0;
    max_poo_locate_1_address0 <= grp_MaxPooBackPropagatio_1_fu_731_max_poo_locate_1_address0;
    max_poo_locate_1_ce0 <= grp_MaxPooBackPropagatio_1_fu_731_max_poo_locate_1_ce0;
    max_poo_locate_2_address0 <= grp_MaxPooBackPropagatio_fu_739_max_poo_locate_2_address0;
    max_poo_locate_2_ce0 <= grp_MaxPooBackPropagatio_fu_739_max_poo_locate_2_ce0;
    max_poo_out_1_address0 <= grp_Conv2d_2_fu_708_max_poo_out_1_address0;
    max_poo_out_1_ce0 <= grp_Conv2d_2_fu_708_max_poo_out_1_ce0;
    mnist_data_address0 <= grp_Conv2d_fu_700_input_matrix_address0;
    mnist_data_ce0 <= grp_Conv2d_fu_700_input_matrix_ce0;
    or_ln88_fu_1059_p2 <= (icmp_ln88_reg_1613 or icmp_ln88_1_reg_1618);

    pool_grad_1_address0_assign_proc : process(ap_CS_fsm_state71, grp_Conv2d_1_fu_693_out_matrix_address0, grp_MaxPooBackPropagatio_1_fu_731_input_matrix_address0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            pool_grad_1_address0 <= grp_MaxPooBackPropagatio_1_fu_731_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            pool_grad_1_address0 <= grp_Conv2d_1_fu_693_out_matrix_address0;
        else 
            pool_grad_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    pool_grad_1_ce0_assign_proc : process(ap_CS_fsm_state71, grp_Conv2d_1_fu_693_out_matrix_ce0, grp_MaxPooBackPropagatio_1_fu_731_input_matrix_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            pool_grad_1_ce0 <= grp_MaxPooBackPropagatio_1_fu_731_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            pool_grad_1_ce0 <= grp_Conv2d_1_fu_693_out_matrix_ce0;
        else 
            pool_grad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_grad_1_we0_assign_proc : process(grp_Conv2d_1_fu_693_out_matrix_we0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            pool_grad_1_we0 <= grp_Conv2d_1_fu_693_out_matrix_we0;
        else 
            pool_grad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    probability_result_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, zext_ln156_fu_862_p1, zext_ln155_fu_825_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            probability_result_address0 <= zext_ln156_fu_862_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            probability_result_address0 <= zext_ln155_fu_825_p1(4 - 1 downto 0);
        else 
            probability_result_address0 <= "XXXX";
        end if; 
    end process;


    probability_result_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            probability_result_ce0 <= ap_const_logic_1;
        else 
            probability_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rgrad_1_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state16, rgrad_1_addr_reg_1555, zext_ln88_reg_1596, ap_CS_fsm_state27, zext_ln80_fu_951_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            rgrad_1_address0 <= zext_ln88_reg_1596(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            rgrad_1_address0 <= rgrad_1_addr_reg_1555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            rgrad_1_address0 <= zext_ln80_fu_951_p1(5 - 1 downto 0);
        else 
            rgrad_1_address0 <= "XXXXX";
        end if; 
    end process;


    rgrad_1_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            rgrad_1_ce0 <= ap_const_logic_1;
        else 
            rgrad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rgrad_1_d0_assign_proc : process(grp_fu_747_p2, ap_CS_fsm_state25, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            rgrad_1_d0 <= grp_fu_747_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            rgrad_1_d0 <= ap_const_lv32_0;
        else 
            rgrad_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rgrad_1_we0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state16, icmp_ln79_fu_939_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln79_fu_939_p2 = ap_const_lv1_0)))) then 
            rgrad_1_we0 <= ap_const_logic_1;
        else 
            rgrad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln109_1_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln109_3_reg_1765),32));

        sext_ln109_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln109_1_fu_1298_p2),32));

    shl_ln109_1_fu_1258_p3 <= (sub_ln109_1_fu_1248_p2 & ap_const_lv2_0);
    shl_ln125_1_fu_1345_p3 <= (i_0_i58_reg_649 & ap_const_lv2_0);
    shl_ln125_2_fu_1401_p3 <= (i_0_i69_reg_671 & ap_const_lv3_0);
    shl_ln125_3_fu_1409_p3 <= (i_0_i69_reg_671 & ap_const_lv1_0);
    shl_ln2_fu_956_p3 <= (i_0_i1_reg_525 & ap_const_lv3_0);
    shl_ln3_fu_1230_p3 <= (i_0_i49_reg_627 & ap_const_lv2_0);
    shl_ln4_fu_1337_p3 <= (i_0_i58_reg_649 & ap_const_lv4_0);
    shl_ln75_1_fu_892_p3 <= (i_0_i_reg_502 & ap_const_lv1_0);
    shl_ln75_2_fu_1086_p3 <= (i_0_i15_reg_570 & ap_const_lv4_0);
    shl_ln75_3_fu_1094_p3 <= (i_0_i15_reg_570 & ap_const_lv2_0);
    shl_ln82_1_fu_964_p3 <= (i_0_i1_reg_525 & ap_const_lv1_0);
    shl_ln82_2_fu_1158_p3 <= (i_0_i31_reg_593 & ap_const_lv4_0);
    shl_ln82_3_fu_1166_p3 <= (i_0_i31_reg_593 & ap_const_lv2_0);
    shl_ln_fu_884_p3 <= (i_0_i_reg_502 & ap_const_lv3_0);
    sub_ln109_1_fu_1248_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(i_0_i49_reg_627));
    sub_ln109_2_fu_1270_p2 <= std_logic_vector(unsigned(zext_ln109_4_fu_1266_p1) - unsigned(zext_ln109_3_fu_1254_p1));
    sub_ln109_3_fu_1312_p2 <= std_logic_vector(unsigned(add_ln109_reg_1747) - unsigned(zext_ln108_fu_1282_p1));
    sub_ln109_fu_1242_p2 <= std_logic_vector(unsigned(zext_ln109_2_fu_1238_p1) - unsigned(zext_ln107_fu_1214_p1));
    tmp_s_fu_1033_p4 <= bitcast_ln88_fu_1029_p1(30 downto 23);
    trunc_ln88_fu_1043_p1 <= bitcast_ln88_fu_1029_p1(23 - 1 downto 0);

    wgrad_1_address0_assign_proc : process(ap_CS_fsm_state77, ap_CS_fsm_state44, zext_ln75_5_fu_1137_p1, zext_ln125_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            wgrad_1_address0 <= zext_ln125_fu_1383_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            wgrad_1_address0 <= zext_ln75_5_fu_1137_p1(10 - 1 downto 0);
        else 
            wgrad_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    wgrad_1_ce0_assign_proc : process(ap_CS_fsm_state77, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            wgrad_1_ce0 <= ap_const_logic_1;
        else 
            wgrad_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_1_we0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            wgrad_1_we0 <= ap_const_logic_1;
        else 
            wgrad_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_2_address0_assign_proc : process(ap_CS_fsm_state88, ap_CS_fsm_state15, zext_ln75_2_fu_935_p1, zext_ln125_1_fu_1447_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            wgrad_2_address0 <= zext_ln125_1_fu_1447_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wgrad_2_address0 <= zext_ln75_2_fu_935_p1(9 - 1 downto 0);
        else 
            wgrad_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    wgrad_2_ce0_assign_proc : process(ap_CS_fsm_state88, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            wgrad_2_ce0 <= ap_const_logic_1;
        else 
            wgrad_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wgrad_2_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wgrad_2_we0 <= ap_const_logic_1;
        else 
            wgrad_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln107_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i49_reg_627),5));
    zext_ln108_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i51_reg_638),5));
    zext_ln109_1_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln109_1_fu_1317_p1),64));
    zext_ln109_2_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_1230_p3),5));
    zext_ln109_3_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln109_1_fu_1248_p2),5));
    zext_ln109_4_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln109_1_fu_1258_p3),5));
    zext_ln109_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln109_fu_1303_p1),64));
    zext_ln125_1_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_3_fu_1442_p2),64));
    zext_ln125_2_fu_1374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_fu_1369_p2),10));
    zext_ln125_3_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_2_fu_1433_p2),8));
    zext_ln125_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_1_fu_1378_p2),64));
    zext_ln152_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lr_in_offset),64));
    zext_ln154_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_491),32));
    zext_ln155_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(label_r),64));
    zext_ln156_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_491),64));
    zext_ln75_1_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_514),64));
    zext_ln75_2_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_reg_1542),64));
    zext_ln75_3_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i15_reg_570),64));
    zext_ln75_4_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i20_reg_582),64));
    zext_ln75_5_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_3_reg_1688),64));
    zext_ln75_6_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_921_p2),8));
    zext_ln75_7_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_2_fu_1123_p2),10));
    zext_ln75_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_502),64));
    zext_ln80_1_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i31_reg_593),64));
    zext_ln80_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_525),64));
    zext_ln82_1_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i2_reg_548),64));
    zext_ln82_2_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_3_fu_1199_p2),64));
    zext_ln82_3_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i36_reg_616),64));
    zext_ln82_4_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_fu_988_p2),8));
    zext_ln82_5_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_2_fu_1190_p2),10));
    zext_ln82_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_1_fu_997_p2),64));
    zext_ln88_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i8_reg_559),64));
end behav;
