// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_matrix_address0,
        input_matrix_ce0,
        input_matrix_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        out_matrix_address0,
        out_matrix_ce0,
        out_matrix_we0,
        out_matrix_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_matrix_address0;
output   input_matrix_ce0;
input  [31:0] input_matrix_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [7:0] out_matrix_address0;
output   out_matrix_ce0;
output   out_matrix_we0;
output  [31:0] out_matrix_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_matrix_ce0;
reg kernel_ce0;
reg[7:0] out_matrix_address0;
reg out_matrix_ce0;
reg out_matrix_we0;
reg[31:0] out_matrix_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] indvar_flatten_reg_201;
reg   [31:0] col_0_reg_212;
reg   [31:0] empty_reg_221;
reg   [31:0] row_0_reg_233;
wire   [0:0] icmp_ln28_fu_281_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln28_fu_287_p2;
reg   [7:0] add_ln28_reg_689;
wire   [31:0] select_ln28_fu_323_p3;
reg   [31:0] select_ln28_reg_694;
wire   [31:0] select_ln28_21_fu_331_p3;
reg   [31:0] select_ln28_21_reg_699;
wire   [31:0] select_ln28_22_fu_339_p3;
reg   [31:0] select_ln28_22_reg_704;
wire   [3:0] select_ln28_23_fu_347_p3;
reg   [3:0] select_ln28_23_reg_709;
wire   [3:0] select_ln28_26_fu_403_p3;
reg   [3:0] select_ln28_26_reg_714;
wire   [31:0] zext_ln28_fu_411_p1;
reg   [31:0] zext_ln28_reg_719;
wire   [31:0] select_ln28_28_fu_453_p3;
reg   [31:0] select_ln28_28_reg_726;
wire   [31:0] select_ln28_29_fu_461_p3;
reg   [31:0] select_ln28_29_reg_731;
wire   [31:0] select_ln28_30_fu_469_p3;
reg   [31:0] select_ln28_30_reg_736;
wire   [31:0] row_cast_fu_505_p1;
reg   [31:0] row_cast_reg_741;
reg   [7:0] out_matrix_addr_reg_748;
wire   [31:0] zext_ln32_fu_530_p1;
reg   [31:0] zext_ln32_reg_753;
wire   [63:0] mul_ln30_fu_542_p2;
reg   [63:0] mul_ln30_reg_758;
wire   [0:0] icmp_ln31_fu_565_p2;
reg   [0:0] icmp_ln31_reg_763;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln31_reg_763_pp0_iter1_reg;
reg   [0:0] icmp_ln31_reg_763_pp0_iter2_reg;
wire   [63:0] add_ln31_fu_570_p2;
reg   [63:0] add_ln31_reg_767;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln32_fu_587_p3;
reg   [31:0] select_ln32_reg_772;
wire   [31:0] select_ln32_5_fu_594_p3;
reg   [31:0] select_ln32_5_reg_777;
reg   [31:0] input_matrix_load_reg_792;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] kernel_load_reg_797;
wire   [31:0] row_6_fu_660_p2;
reg   [31:0] row_6_reg_802;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] tmp_reg_807;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] tmp_s_reg_812;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] j_fu_665_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln29_11_fu_670_p2;
wire   [31:0] add_ln29_12_fu_675_p2;
wire   [31:0] add_ln29_13_fu_680_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [7:0] indvar_flatten42_reg_102;
reg   [31:0] phi_ln28_reg_113;
reg   [31:0] phi_ln28_3_reg_124;
reg   [31:0] indvars_iv12_reg_135;
reg   [3:0] col_reg_146;
reg   [31:0] phi_ln29_reg_157;
reg   [31:0] phi_ln29_3_reg_168;
reg   [31:0] indvars_iv19_reg_179;
reg   [3:0] row_reg_190;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_205_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_col_0_phi_fu_215_p4;
reg   [31:0] ap_phi_mux_empty_phi_fu_225_p4;
wire    ap_block_pp0_stage1;
reg   [31:0] ap_phi_mux_row_0_phi_fu_236_p4;
wire   [63:0] zext_ln30_fu_519_p1;
wire  signed [63:0] sext_ln33_fu_644_p1;
wire  signed [63:0] sext_ln33_1_fu_655_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [7:0] shl_ln_fu_251_p3;
wire   [4:0] shl_ln30_3_fu_263_p3;
wire   [8:0] zext_ln30_6_fu_259_p1;
wire   [8:0] zext_ln30_7_fu_271_p1;
wire   [0:0] icmp_ln29_fu_317_p2;
wire   [31:0] add_ln28_13_fu_299_p2;
wire   [31:0] add_ln28_14_fu_305_p2;
wire   [0:0] icmp_ln28_5_fu_355_p2;
wire   [31:0] select_ln28_24_fu_361_p3;
wire   [31:0] add_ln28_15_fu_311_p2;
wire   [0:0] icmp_ln28_6_fu_375_p2;
wire   [31:0] select_ln2877_fu_381_p3;
wire   [31:0] add_ln28_16_fu_369_p2;
wire   [31:0] add_ln2876_fu_389_p2;
wire   [3:0] i_fu_293_p2;
wire   [7:0] shl_ln30_mid1_fu_415_p3;
wire   [4:0] shl_ln30_3_mid1_fu_427_p3;
wire   [8:0] zext_ln30_12_fu_423_p1;
wire   [8:0] zext_ln30_13_fu_435_p1;
wire   [8:0] sub_ln30_4_fu_439_p2;
wire   [8:0] sub_ln30_fu_275_p2;
wire   [0:0] icmp_ln29_3_fu_477_p2;
wire   [31:0] select_ln29_fu_483_p3;
wire   [8:0] row_cast1_fu_501_p1;
wire   [8:0] select_ln28_27_fu_445_p3;
wire   [8:0] add_ln30_fu_509_p2;
wire  signed [31:0] sext_ln30_fu_515_p1;
wire   [4:0] row_cast2_fu_497_p1;
wire   [4:0] add_ln32_fu_524_p2;
wire   [31:0] select_ln28_25_fu_395_p3;
wire   [31:0] add_ln29_fu_491_p2;
wire   [31:0] mul_ln30_fu_542_p0;
wire   [31:0] mul_ln30_fu_542_p1;
wire   [31:0] sub_ln33_fu_548_p2;
wire   [31:0] shl_ln33_fu_553_p2;
wire   [0:0] icmp_ln32_fu_582_p2;
wire   [31:0] col_8_fu_576_p2;
wire   [31:0] sub_ln33_12_fu_608_p2;
wire   [31:0] shl_ln33_11_fu_613_p2;
wire   [31:0] sub_ln33_8_fu_559_p2;
wire   [31:0] sub_ln33_13_fu_619_p2;
wire   [31:0] select_ln32_6_fu_625_p3;
wire   [31:0] shl_ln32_fu_602_p2;
wire   [31:0] add_ln33_fu_638_p2;
wire   [31:0] sub_ln32_fu_633_p2;
wire   [31:0] add_ln33_2_fu_649_p2;
wire    ap_block_pp0_stage3;
reg   [6:0] ap_NS_fsm;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] mul_ln30_fu_542_p00;
wire   [63:0] mul_ln30_fu_542_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_empty_phi_fu_225_p4),
    .din1(tmp_reg_807),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_matrix_load_reg_792),
    .din1(kernel_load_reg_797),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_0_reg_212 <= select_ln32_5_reg_777;
    end else if (((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_reg_212 <= zext_ln28_fu_411_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        col_reg_146 <= select_ln28_26_reg_714;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_reg_146 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_reg_221 <= tmp_s_reg_812;
    end else if (((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_221 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten42_reg_102 <= add_ln28_reg_689;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten42_reg_102 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_201 <= add_ln31_reg_767;
    end else if (((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_201 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv12_reg_135 <= select_ln28_30_reg_736;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv12_reg_135 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv19_reg_179 <= add_ln29_11_fu_670_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv19_reg_179 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln28_3_reg_124 <= select_ln28_29_reg_731;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln28_3_reg_124 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln28_reg_113 <= select_ln28_28_reg_726;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln28_reg_113 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln29_3_reg_168 <= add_ln29_12_fu_675_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln29_3_reg_168 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln29_reg_157 <= add_ln29_13_fu_680_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln29_reg_157 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_0_reg_233 <= row_6_reg_802;
    end else if (((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_233 <= row_cast_fu_505_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        row_reg_190 <= j_fu_665_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_reg_190 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln28_reg_689 <= add_ln28_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln31_reg_767 <= add_ln31_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln31_reg_763 <= icmp_ln31_fu_565_p2;
        icmp_ln31_reg_763_pp0_iter1_reg <= icmp_ln31_reg_763;
        icmp_ln31_reg_763_pp0_iter2_reg <= icmp_ln31_reg_763_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_matrix_load_reg_792 <= input_matrix_q0;
        kernel_load_reg_797 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln30_reg_758 <= mul_ln30_fu_542_p2;
        out_matrix_addr_reg_748 <= zext_ln30_fu_519_p1;
        row_cast_reg_741[3 : 0] <= row_cast_fu_505_p1[3 : 0];
        select_ln28_21_reg_699 <= select_ln28_21_fu_331_p3;
        select_ln28_22_reg_704 <= select_ln28_22_fu_339_p3;
        select_ln28_23_reg_709 <= select_ln28_23_fu_347_p3;
        select_ln28_26_reg_714 <= select_ln28_26_fu_403_p3;
        select_ln28_28_reg_726 <= select_ln28_28_fu_453_p3;
        select_ln28_29_reg_731 <= select_ln28_29_fu_461_p3;
        select_ln28_30_reg_736 <= select_ln28_30_fu_469_p3;
        select_ln28_reg_694 <= select_ln28_fu_323_p3;
        zext_ln28_reg_719[3 : 0] <= zext_ln28_fu_411_p1[3 : 0];
        zext_ln32_reg_753[4 : 0] <= zext_ln32_fu_530_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        row_6_reg_802 <= row_6_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln32_5_reg_777 <= select_ln32_5_fu_594_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln32_reg_772 <= select_ln32_fu_587_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_807 <= grp_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_763_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_s_reg_812 <= grp_fu_242_p2;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_565_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln28_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_0_phi_fu_215_p4 = select_ln32_5_reg_777;
    end else begin
        ap_phi_mux_col_0_phi_fu_215_p4 = col_0_reg_212;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_763_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_empty_phi_fu_225_p4 = tmp_s_reg_812;
    end else begin
        ap_phi_mux_empty_phi_fu_225_p4 = empty_reg_221;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_205_p4 = add_ln31_reg_767;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_205_p4 = indvar_flatten_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_row_0_phi_fu_236_p4 = row_6_reg_802;
    end else begin
        ap_phi_mux_row_0_phi_fu_236_p4 = row_0_reg_233;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_matrix_ce0 = 1'b1;
    end else begin
        input_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_matrix_address0 = out_matrix_addr_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_address0 = zext_ln30_fu_519_p1;
    end else begin
        out_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        out_matrix_ce0 = 1'b1;
    end else begin
        out_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_matrix_d0 = tmp_s_reg_812;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_matrix_d0 = 32'd0;
    end else begin
        out_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln28_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln31_reg_763_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        out_matrix_we0 = 1'b1;
    end else begin
        out_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln31_fu_565_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln31_fu_565_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2876_fu_389_p2 = (select_ln2877_fu_381_p3 + phi_ln28_reg_113);

assign add_ln28_13_fu_299_p2 = (indvars_iv12_reg_135 + 32'd1);

assign add_ln28_14_fu_305_p2 = (phi_ln28_3_reg_124 + 32'd1);

assign add_ln28_15_fu_311_p2 = ($signed(phi_ln28_reg_113) + $signed(32'd4294967295));

assign add_ln28_16_fu_369_p2 = (select_ln28_24_fu_361_p3 + add_ln28_15_fu_311_p2);

assign add_ln28_fu_287_p2 = (indvar_flatten42_reg_102 + 8'd1);

assign add_ln29_11_fu_670_p2 = (select_ln28_22_reg_704 + 32'd1);

assign add_ln29_12_fu_675_p2 = (select_ln28_21_reg_699 + 32'd1);

assign add_ln29_13_fu_680_p2 = ($signed(select_ln28_reg_694) + $signed(32'd4294967295));

assign add_ln29_fu_491_p2 = (select_ln29_fu_483_p3 + select_ln28_fu_323_p3);

assign add_ln30_fu_509_p2 = (row_cast1_fu_501_p1 + select_ln28_27_fu_445_p3);

assign add_ln31_fu_570_p2 = (64'd1 + ap_phi_mux_indvar_flatten_phi_fu_205_p4);

assign add_ln32_fu_524_p2 = (row_cast2_fu_497_p1 + 5'd3);

assign add_ln33_2_fu_649_p2 = (sub_ln32_fu_633_p2 + select_ln32_fu_587_p3);

assign add_ln33_fu_638_p2 = (select_ln32_fu_587_p3 + shl_ln32_fu_602_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_8_fu_576_p2 = (32'd1 + ap_phi_mux_col_0_phi_fu_215_p4);

assign i_fu_293_p2 = (col_reg_146 + 4'd1);

assign icmp_ln28_5_fu_355_p2 = (($signed(add_ln28_13_fu_299_p2) > $signed(add_ln28_14_fu_305_p2)) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_375_p2 = (($signed(indvars_iv12_reg_135) > $signed(phi_ln28_3_reg_124)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_281_p2 = ((indvar_flatten42_reg_102 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_477_p2 = (($signed(select_ln28_22_fu_339_p3) > $signed(select_ln28_21_fu_331_p3)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_317_p2 = ((row_reg_190 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_565_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_205_p4 == mul_ln30_reg_758) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_582_p2 = (($signed(ap_phi_mux_row_0_phi_fu_236_p4) < $signed(zext_ln32_reg_753)) ? 1'b1 : 1'b0);

assign input_matrix_address0 = sext_ln33_fu_644_p1;

assign j_fu_665_p2 = (select_ln28_23_reg_709 + 4'd1);

assign kernel_address0 = sext_ln33_1_fu_655_p1;

assign mul_ln30_fu_542_p0 = mul_ln30_fu_542_p00;

assign mul_ln30_fu_542_p00 = select_ln28_25_fu_395_p3;

assign mul_ln30_fu_542_p1 = mul_ln30_fu_542_p10;

assign mul_ln30_fu_542_p10 = add_ln29_fu_491_p2;

assign mul_ln30_fu_542_p2 = (mul_ln30_fu_542_p0 * mul_ln30_fu_542_p1);

assign row_6_fu_660_p2 = (32'd1 + select_ln32_reg_772);

assign row_cast1_fu_501_p1 = select_ln28_23_fu_347_p3;

assign row_cast2_fu_497_p1 = select_ln28_23_fu_347_p3;

assign row_cast_fu_505_p1 = select_ln28_23_fu_347_p3;

assign select_ln2877_fu_381_p3 = ((icmp_ln28_6_fu_375_p2[0:0] === 1'b1) ? indvars_iv12_reg_135 : phi_ln28_3_reg_124);

assign select_ln28_21_fu_331_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? 32'd0 : phi_ln29_3_reg_168);

assign select_ln28_22_fu_339_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? 32'd3 : indvars_iv19_reg_179);

assign select_ln28_23_fu_347_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? 4'd0 : row_reg_190);

assign select_ln28_24_fu_361_p3 = ((icmp_ln28_5_fu_355_p2[0:0] === 1'b1) ? add_ln28_13_fu_299_p2 : add_ln28_14_fu_305_p2);

assign select_ln28_25_fu_395_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? add_ln28_16_fu_369_p2 : add_ln2876_fu_389_p2);

assign select_ln28_26_fu_403_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? i_fu_293_p2 : col_reg_146);

assign select_ln28_27_fu_445_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? sub_ln30_4_fu_439_p2 : sub_ln30_fu_275_p2);

assign select_ln28_28_fu_453_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? add_ln28_15_fu_311_p2 : phi_ln28_reg_113);

assign select_ln28_29_fu_461_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? add_ln28_14_fu_305_p2 : phi_ln28_3_reg_124);

assign select_ln28_30_fu_469_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? add_ln28_13_fu_299_p2 : indvars_iv12_reg_135);

assign select_ln28_fu_323_p3 = ((icmp_ln29_fu_317_p2[0:0] === 1'b1) ? 32'd0 : phi_ln29_reg_157);

assign select_ln29_fu_483_p3 = ((icmp_ln29_3_fu_477_p2[0:0] === 1'b1) ? select_ln28_22_fu_339_p3 : select_ln28_21_fu_331_p3);

assign select_ln32_5_fu_594_p3 = ((icmp_ln32_fu_582_p2[0:0] === 1'b1) ? ap_phi_mux_col_0_phi_fu_215_p4 : col_8_fu_576_p2);

assign select_ln32_6_fu_625_p3 = ((icmp_ln32_fu_582_p2[0:0] === 1'b1) ? sub_ln33_8_fu_559_p2 : sub_ln33_13_fu_619_p2);

assign select_ln32_fu_587_p3 = ((icmp_ln32_fu_582_p2[0:0] === 1'b1) ? ap_phi_mux_row_0_phi_fu_236_p4 : row_cast_reg_741);

assign sext_ln30_fu_515_p1 = $signed(add_ln30_fu_509_p2);

assign sext_ln33_1_fu_655_p1 = $signed(add_ln33_2_fu_649_p2);

assign sext_ln33_fu_644_p1 = $signed(add_ln33_fu_638_p2);

assign shl_ln30_3_fu_263_p3 = {{col_reg_146}, {1'd0}};

assign shl_ln30_3_mid1_fu_427_p3 = {{i_fu_293_p2}, {1'd0}};

assign shl_ln30_mid1_fu_415_p3 = {{i_fu_293_p2}, {4'd0}};

assign shl_ln32_fu_602_p2 = select_ln32_5_fu_594_p3 << 32'd4;

assign shl_ln33_11_fu_613_p2 = sub_ln33_12_fu_608_p2 << 32'd2;

assign shl_ln33_fu_553_p2 = sub_ln33_fu_548_p2 << 32'd2;

assign shl_ln_fu_251_p3 = {{col_reg_146}, {4'd0}};

assign sub_ln30_4_fu_439_p2 = (zext_ln30_12_fu_423_p1 - zext_ln30_13_fu_435_p1);

assign sub_ln30_fu_275_p2 = (zext_ln30_6_fu_259_p1 - zext_ln30_7_fu_271_p1);

assign sub_ln32_fu_633_p2 = (select_ln32_6_fu_625_p3 - row_cast_reg_741);

assign sub_ln33_12_fu_608_p2 = (col_8_fu_576_p2 - zext_ln28_reg_719);

assign sub_ln33_13_fu_619_p2 = (shl_ln33_11_fu_613_p2 - sub_ln33_12_fu_608_p2);

assign sub_ln33_8_fu_559_p2 = (shl_ln33_fu_553_p2 - sub_ln33_fu_548_p2);

assign sub_ln33_fu_548_p2 = (ap_phi_mux_col_0_phi_fu_215_p4 - zext_ln28_reg_719);

assign zext_ln28_fu_411_p1 = select_ln28_26_fu_403_p3;

assign zext_ln30_12_fu_423_p1 = shl_ln30_mid1_fu_415_p3;

assign zext_ln30_13_fu_435_p1 = shl_ln30_3_mid1_fu_427_p3;

assign zext_ln30_6_fu_259_p1 = shl_ln_fu_251_p3;

assign zext_ln30_7_fu_271_p1 = shl_ln30_3_fu_263_p3;

assign zext_ln30_fu_519_p1 = $unsigned(sext_ln30_fu_515_p1);

assign zext_ln32_fu_530_p1 = add_ln32_fu_524_p2;

always @ (posedge ap_clk) begin
    zext_ln28_reg_719[31:4] <= 28'b0000000000000000000000000000;
    row_cast_reg_741[31:4] <= 28'b0000000000000000000000000000;
    zext_ln32_reg_753[31:5] <= 27'b000000000000000000000000000;
end

endmodule //Conv2d_1
