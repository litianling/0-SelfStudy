-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mnist_data_ce0 : OUT STD_LOGIC;
    mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_1_ce0 : OUT STD_LOGIC;
    conv_kernel_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_poo_out_1_ce0 : OUT STD_LOGIC;
    max_poo_out_1_we0 : OUT STD_LOGIC;
    max_poo_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_poo_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_locate_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_poo_locate_1_ce0 : OUT STD_LOGIC;
    max_poo_locate_1_we0 : OUT STD_LOGIC;
    max_poo_locate_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_2_ce0 : OUT STD_LOGIC;
    conv_kernel_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_locate_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    max_poo_locate_2_ce0 : OUT STD_LOGIC;
    max_poo_locate_2_we0 : OUT STD_LOGIC;
    max_poo_locate_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_in_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_in_1_0_ce0 : OUT STD_LOGIC;
    fc_in_1_0_we0 : OUT STD_LOGIC;
    fc_in_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_in_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_1_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_in_1_0_ce1 : OUT STD_LOGIC;
    fc_in_1_0_we1 : OUT STD_LOGIC;
    fc_in_1_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_out_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fc_out_1_0_ce0 : OUT STD_LOGIC;
    fc_out_1_0_we0 : OUT STD_LOGIC;
    fc_out_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_out_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    fc_hidden_layer1_ce0 : OUT STD_LOGIC;
    fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_2_relu1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fc_in_2_relu1_0_ce0 : OUT STD_LOGIC;
    fc_in_2_relu1_0_we0 : OUT STD_LOGIC;
    fc_in_2_relu1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_in_2_relu1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fc_hidden_layer2_ce0 : OUT STD_LOGIC;
    fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    probability_result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    probability_result_ce0 : OUT STD_LOGIC;
    probability_result_we0 : OUT STD_LOGIC;
    probability_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of forward is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (106 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (106 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (106 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (106 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (106 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (106 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (106 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (106 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (106 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (106 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (106 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv64_3FA999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_1_ce0 : STD_LOGIC;
    signal conv_out_1_we0 : STD_LOGIC;
    signal conv_out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out_2_ce0 : STD_LOGIC;
    signal conv_out_2_we0 : STD_LOGIC;
    signal conv_out_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_poo_out_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal max_poo_out_2_ce0 : STD_LOGIC;
    signal max_poo_out_2_we0 : STD_LOGIC;
    signal max_poo_out_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_poo_out_2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal max_poo_out_2_ce1 : STD_LOGIC;
    signal max_poo_out_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_out_2_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_out_2_0_ce0 : STD_LOGIC;
    signal fc_out_2_0_we0 : STD_LOGIC;
    signal fc_out_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_370 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_610 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal icmp_ln52_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_622_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1028 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal sub_ln54_fu_652_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln54_reg_1033 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln54_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_1041 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_1051 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_2_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_2_reg_1061 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln54_3_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_3_reg_1071 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_4_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_4_reg_1081 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state11_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal zext_ln54_5_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_5_reg_1091 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_i_cast8_fu_734_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_i_cast8_reg_1101 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_2_fu_744_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_1109 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc_out_1_0_addr_reg_1114 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln58_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_761_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_1122 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln60_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_in_1_0_load_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal fc_hidden_layer1_loa_reg_1142 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_814_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_reg_1150 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln67_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_1155 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln66_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_out_1_0_load_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_14_reg_1173 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal j_0_i14_cast5_fu_916_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i14_cast5_reg_1178 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal j_5_fu_926_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_1186 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_out_2_0_addr_2_reg_1191 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln58_1_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_943_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1199 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln60_1_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_in_2_relu1_0_load_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal fc_hidden_layer2_loa_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_996_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1227 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal icmp_ln143_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1237 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal j_fu_1013_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1245 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal zext_ln146_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_reg_1250 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln145_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1260 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1265 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_MaxPool2d_fu_526_ap_ready : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal grp_Conv2d_4_fu_496_ap_start : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_ap_done : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_ap_idle : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_ap_ready : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_4_fu_496_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_4_fu_496_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_out_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_4_fu_496_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_496_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_3_fu_506_ap_start : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_ap_done : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_ap_idle : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_ap_ready : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_input_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_3_fu_506_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_3_fu_506_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_out_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_3_fu_506_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_506_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_1_fu_516_ap_start : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_ap_done : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_ap_idle : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_ap_ready : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_output_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPool2d_1_fu_516_output_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_output_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_1_fu_516_locate_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPool2d_1_fu_516_locate_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_locate_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_516_locate_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_1_fu_516_conv_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_MaxPool2d_1_fu_516_conv_out_1_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_ap_start : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_ap_idle : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_output_matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_MaxPool2d_fu_526_output_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_output_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_fu_526_locate_matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_MaxPool2d_fu_526_locate_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_locate_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_526_locate_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_fu_526_conv_out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPool2d_fu_526_conv_out_2_ce0 : STD_LOGIC;
    signal ap_phi_mux_i_0_i_phi_fu_374_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_0_i_reg_381 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal storemerge_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i4_reg_405 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i7_reg_416 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal j_0_i14_reg_427 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge269_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i18_reg_451 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_462 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_probability_sum_0_phi_fu_477_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal probability_sum_0_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_485 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_Conv2d_4_fu_496_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Conv2d_3_fu_506_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_MaxPool2d_1_fu_516_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_MaxPool2d_fu_526_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln59_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_1_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_2_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_3_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_536_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_542_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_546_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_fu_550_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal shl_ln_fu_628_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln54_1_fu_640_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln54_6_fu_636_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln54_7_fu_648_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln54_fu_658_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln54_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_678_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln54_1_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_1_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln54_2_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_2_fu_706_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln54_3_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_3_fu_720_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln54_4_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln61_1_fu_780_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_fu_788_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_772_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln61_4_fu_793_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_1_fu_797_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln23_fu_825_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_1_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_828_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_838_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_1_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_846_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_1_fu_856_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_3_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_1_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_1_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln61_3_fu_962_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_2_fu_970_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln61_2_fu_954_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_5_fu_975_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_3_fu_979_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (106 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv2d_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MaxPool2d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        locate_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        locate_matrix_ce0 : OUT STD_LOGIC;
        locate_matrix_we0 : OUT STD_LOGIC;
        locate_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_1_ce0 : OUT STD_LOGIC;
        conv_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MaxPool2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        locate_matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        locate_matrix_ce0 : OUT STD_LOGIC;
        locate_matrix_we0 : OUT STD_LOGIC;
        locate_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out_2_ce0 : OUT STD_LOGIC;
        conv_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fptruncg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fpext_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_fcmp_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component forw_back_dadd_64ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_dmul_64jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_ddiv_64kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_dexp_64lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forward_conv_out_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_conv_out_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_max_poo_ofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_fc_out_2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_out_1_U : component forward_conv_out_1
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_out_1_address0,
        ce0 => conv_out_1_ce0,
        we0 => conv_out_1_we0,
        d0 => grp_Conv2d_4_fu_496_out_matrix_d0,
        q0 => conv_out_1_q0);

    conv_out_2_U : component forward_conv_out_2
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_out_2_address0,
        ce0 => conv_out_2_ce0,
        we0 => conv_out_2_we0,
        d0 => grp_Conv2d_3_fu_506_out_matrix_d0,
        q0 => conv_out_2_q0);

    max_poo_out_2_U : component forward_max_poo_ofYi
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_poo_out_2_address0,
        ce0 => max_poo_out_2_ce0,
        we0 => max_poo_out_2_we0,
        d0 => grp_MaxPool2d_fu_526_output_matrix_d0,
        q0 => max_poo_out_2_q0,
        address1 => max_poo_out_2_address1,
        ce1 => max_poo_out_2_ce1,
        q1 => max_poo_out_2_q1);

    fc_out_2_0_U : component forward_fc_out_2_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_out_2_0_address0,
        ce0 => fc_out_2_0_ce0,
        we0 => fc_out_2_0_we0,
        d0 => storemerge269_reg_438,
        q0 => fc_out_2_0_q0);

    grp_Conv2d_4_fu_496 : component Conv2d_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_4_fu_496_ap_start,
        ap_done => grp_Conv2d_4_fu_496_ap_done,
        ap_idle => grp_Conv2d_4_fu_496_ap_idle,
        ap_ready => grp_Conv2d_4_fu_496_ap_ready,
        input_matrix_address0 => grp_Conv2d_4_fu_496_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_4_fu_496_input_matrix_ce0,
        input_matrix_q0 => mnist_data_q0,
        kernel_address0 => grp_Conv2d_4_fu_496_kernel_address0,
        kernel_ce0 => grp_Conv2d_4_fu_496_kernel_ce0,
        kernel_q0 => conv_kernel_1_q0,
        out_matrix_address0 => grp_Conv2d_4_fu_496_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_4_fu_496_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_4_fu_496_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_4_fu_496_out_matrix_d0);

    grp_Conv2d_3_fu_506 : component Conv2d_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_3_fu_506_ap_start,
        ap_done => grp_Conv2d_3_fu_506_ap_done,
        ap_idle => grp_Conv2d_3_fu_506_ap_idle,
        ap_ready => grp_Conv2d_3_fu_506_ap_ready,
        input_matrix_address0 => grp_Conv2d_3_fu_506_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_3_fu_506_input_matrix_ce0,
        input_matrix_q0 => max_poo_out_1_q0,
        kernel_address0 => grp_Conv2d_3_fu_506_kernel_address0,
        kernel_ce0 => grp_Conv2d_3_fu_506_kernel_ce0,
        kernel_q0 => conv_kernel_2_q0,
        out_matrix_address0 => grp_Conv2d_3_fu_506_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_3_fu_506_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_3_fu_506_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_3_fu_506_out_matrix_d0);

    grp_MaxPool2d_1_fu_516 : component MaxPool2d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPool2d_1_fu_516_ap_start,
        ap_done => grp_MaxPool2d_1_fu_516_ap_done,
        ap_idle => grp_MaxPool2d_1_fu_516_ap_idle,
        ap_ready => grp_MaxPool2d_1_fu_516_ap_ready,
        output_matrix_address0 => grp_MaxPool2d_1_fu_516_output_matrix_address0,
        output_matrix_ce0 => grp_MaxPool2d_1_fu_516_output_matrix_ce0,
        output_matrix_we0 => grp_MaxPool2d_1_fu_516_output_matrix_we0,
        output_matrix_d0 => grp_MaxPool2d_1_fu_516_output_matrix_d0,
        locate_matrix_address0 => grp_MaxPool2d_1_fu_516_locate_matrix_address0,
        locate_matrix_ce0 => grp_MaxPool2d_1_fu_516_locate_matrix_ce0,
        locate_matrix_we0 => grp_MaxPool2d_1_fu_516_locate_matrix_we0,
        locate_matrix_d0 => grp_MaxPool2d_1_fu_516_locate_matrix_d0,
        conv_out_1_address0 => grp_MaxPool2d_1_fu_516_conv_out_1_address0,
        conv_out_1_ce0 => grp_MaxPool2d_1_fu_516_conv_out_1_ce0,
        conv_out_1_q0 => conv_out_1_q0);

    grp_MaxPool2d_fu_526 : component MaxPool2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPool2d_fu_526_ap_start,
        ap_done => grp_MaxPool2d_fu_526_ap_done,
        ap_idle => grp_MaxPool2d_fu_526_ap_idle,
        ap_ready => grp_MaxPool2d_fu_526_ap_ready,
        output_matrix_address0 => grp_MaxPool2d_fu_526_output_matrix_address0,
        output_matrix_ce0 => grp_MaxPool2d_fu_526_output_matrix_ce0,
        output_matrix_we0 => grp_MaxPool2d_fu_526_output_matrix_we0,
        output_matrix_d0 => grp_MaxPool2d_fu_526_output_matrix_d0,
        locate_matrix_address0 => grp_MaxPool2d_fu_526_locate_matrix_address0,
        locate_matrix_ce0 => grp_MaxPool2d_fu_526_locate_matrix_ce0,
        locate_matrix_we0 => grp_MaxPool2d_fu_526_locate_matrix_we0,
        locate_matrix_d0 => grp_MaxPool2d_fu_526_locate_matrix_d0,
        conv_out_2_address0 => grp_MaxPool2d_fu_526_conv_out_2_address0,
        conv_out_2_ce0 => grp_MaxPool2d_fu_526_conv_out_2_ce0,
        conv_out_2_q0 => conv_out_2_q0);

    forw_back_fadd_32bkb_U25 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_536_p0,
        din1 => reg_580,
        ce => ap_const_logic_1,
        dout => grp_fu_536_p2);

    forw_back_fmul_32cud_U26 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_542_p0,
        din1 => grp_fu_542_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p2);

    forw_back_fptruncg8j_U27 : component forw_back_fptruncg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_546_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_546_p1);

    forw_back_fpext_3hbi_U28 : component forw_back_fpext_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_550_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p1);

    forw_back_fcmp_32eOg_U29 : component forw_back_fcmp_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fc_out_1_0_load_reg_1165,
        din1 => grp_fu_546_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_557_p2);

    forw_back_dadd_64ibs_U30 : component forw_back_dadd_64ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_591,
        din1 => reg_610,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p2);

    forw_back_dmul_64jbC_U31 : component forw_back_dmul_64jbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_591,
        din1 => ap_const_lv64_3FA999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p2);

    forw_back_ddiv_64kbM_U32 : component forw_back_ddiv_64kbM
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_610,
        din1 => reg_591,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p2);

    forw_back_dexp_64lbW_U33 : component forw_back_dexp_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => grp_fu_575_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_MaxPool2d_fu_526_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_MaxPool2d_fu_526_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_3_fu_506_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_3_fu_506_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_Conv2d_3_fu_506_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_3_fu_506_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_3_fu_506_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_4_fu_496_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_4_fu_496_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_Conv2d_4_fu_496_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_4_fu_496_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_4_fu_496_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPool2d_1_fu_516_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPool2d_1_fu_516_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_MaxPool2d_1_fu_516_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPool2d_1_fu_516_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPool2d_1_fu_516_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPool2d_fu_526_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPool2d_fu_526_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_MaxPool2d_fu_526_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPool2d_fu_526_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPool2d_fu_526_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i18_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_0_i18_reg_451 <= i_3_reg_1199;
            elsif (((icmp_ln58_1_fu_920_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                i_0_i18_reg_451 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i4_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_i4_reg_405 <= i_2_reg_1122;
            elsif (((icmp_ln58_fu_738_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_0_i4_reg_405 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_370 <= i_1_reg_1028;
            elsif (((grp_MaxPool2d_fu_526_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_i_reg_370 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_1_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                i_0_reg_462 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                i_0_reg_462 <= i_reg_1227;
            end if; 
        end if;
    end process;

    j_0_i14_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_1_fu_937_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                j_0_i14_reg_427 <= j_5_reg_1186;
            elsif (((icmp_ln66_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_0_i14_reg_427 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i7_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                j_0_i7_reg_416 <= j_4_reg_1150;
            elsif (((icmp_ln58_fu_738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_0_i7_reg_416 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_755_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j_0_i_reg_381 <= j_2_reg_1109;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_0_i_reg_381 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                j_0_reg_485 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                j_0_reg_485 <= j_reg_1245;
            end if; 
        end if;
    end process;

    probability_sum_0_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_1_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                probability_sum_0_reg_473 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                probability_sum_0_reg_473 <= grp_fu_546_p1;
            end if; 
        end if;
    end process;

    storemerge269_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                storemerge269_reg_438 <= grp_fu_536_p2;
            elsif (((icmp_ln58_1_fu_920_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                storemerge269_reg_438 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                storemerge_reg_392 <= grp_fu_536_p2;
            elsif (((icmp_ln58_fu_738_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                storemerge_reg_392 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                fc_hidden_layer1_loa_reg_1142 <= fc_hidden_layer1_q0;
                fc_in_1_0_load_reg_1137 <= fc_in_1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                fc_hidden_layer2_loa_reg_1219 <= fc_hidden_layer2_q0;
                fc_in_2_relu1_0_load_reg_1214 <= fc_in_2_relu1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_738_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                fc_out_1_0_addr_reg_1114 <= zext_ln59_fu_750_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                fc_out_1_0_load_reg_1165 <= fc_out_1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_1_fu_920_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                fc_out_2_0_addr_2_reg_1191 <= zext_ln59_1_fu_932_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_1028 <= i_1_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_2_reg_1122 <= i_2_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                i_3_reg_1199 <= i_3_fu_943_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                i_reg_1227 <= i_fu_996_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln52_reg_1024 <= icmp_ln52_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                    j_0_i14_cast5_reg_1178(3 downto 0) <= j_0_i14_cast5_fu_916_p1(3 downto 0);
                j_5_reg_1186 <= j_5_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    j_0_i_cast8_reg_1101(4 downto 0) <= j_0_i_cast8_fu_734_p1(4 downto 0);
                j_2_reg_1109 <= j_2_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                j_4_reg_1150 <= j_4_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                j_reg_1245 <= j_fu_1013_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_580 <= grp_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_591 <= grp_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_599 <= grp_fu_546_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state60))) then
                reg_610 <= grp_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    sub_ln54_reg_1033(6 downto 1) <= sub_ln54_fu_652_p2(6 downto 1);
                    zext_ln54_1_reg_1051(31 downto 1) <= zext_ln54_1_fu_673_p1(31 downto 1);
                    zext_ln54_reg_1041(31 downto 1) <= zext_ln54_fu_662_p1(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                tmp_6_reg_1237 <= grp_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                tmp_8_reg_1260 <= grp_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_i1_14_reg_1173 <= grp_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                tmp_s_reg_1265 <= grp_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1007_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    zext_ln146_reg_1250(3 downto 0) <= zext_ln146_fu_1019_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln54_2_reg_1061(31 downto 1) <= zext_ln54_2_fu_687_p1(31 downto 1);
                    zext_ln54_3_reg_1071(31 downto 1) <= zext_ln54_3_fu_701_p1(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    zext_ln54_4_reg_1081(31 downto 1) <= zext_ln54_4_fu_715_p1(31 downto 1);
                    zext_ln54_5_reg_1091(31 downto 1) <= zext_ln54_5_fu_729_p1(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    zext_ln67_reg_1155(4 downto 0) <= zext_ln67_fu_820_p1(4 downto 0);
            end if;
        end if;
    end process;
    sub_ln54_reg_1033(0) <= '0';
    zext_ln54_reg_1041(0) <= '0';
    zext_ln54_reg_1041(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln54_1_reg_1051(0) <= '1';
    zext_ln54_1_reg_1051(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln54_2_reg_1061(0) <= '0';
    zext_ln54_2_reg_1061(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln54_3_reg_1071(0) <= '1';
    zext_ln54_3_reg_1071(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln54_4_reg_1081(0) <= '0';
    zext_ln54_4_reg_1081(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln54_5_reg_1091(0) <= '1';
    zext_ln54_5_reg_1091(63 downto 32) <= "00000000000000000000000000000000";
    j_0_i_cast8_reg_1101(7 downto 5) <= "000";
    zext_ln67_reg_1155(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    j_0_i14_cast5_reg_1178(5 downto 4) <= "00";
    zext_ln146_reg_1250(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln52_fu_616_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state14, icmp_ln58_fu_738_p2, ap_CS_fsm_state15, icmp_ln60_fu_755_p2, ap_CS_fsm_state24, icmp_ln66_fu_808_p2, ap_CS_fsm_state35, icmp_ln58_1_fu_920_p2, ap_CS_fsm_state36, icmp_ln60_1_fu_937_p2, ap_CS_fsm_state45, icmp_ln143_fu_990_p2, ap_CS_fsm_state69, icmp_ln145_fu_1007_p2, ap_CS_fsm_state8, grp_MaxPool2d_fu_526_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, grp_Conv2d_4_fu_496_ap_done, grp_Conv2d_3_fu_506_ap_done, grp_MaxPool2d_1_fu_516_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Conv2d_4_fu_496_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_MaxPool2d_1_fu_516_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_Conv2d_3_fu_506_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_MaxPool2d_fu_526_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln52_fu_616_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln52_fu_616_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln58_fu_738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln60_fu_755_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln66_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln58_1_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln60_1_fu_937_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln143_fu_990_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((icmp_ln145_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln54_1_fu_692_p2 <= std_logic_vector(signed(sub_ln54_reg_1033) + signed(ap_const_lv7_3));
    add_ln54_2_fu_706_p2 <= std_logic_vector(signed(sub_ln54_reg_1033) + signed(ap_const_lv7_4));
    add_ln54_3_fu_720_p2 <= std_logic_vector(signed(sub_ln54_reg_1033) + signed(ap_const_lv7_5));
    add_ln54_fu_678_p2 <= std_logic_vector(signed(sub_ln54_reg_1033) + signed(ap_const_lv7_2));
    add_ln61_1_fu_797_p2 <= std_logic_vector(unsigned(shl_ln1_fu_772_p3) + unsigned(zext_ln61_4_fu_793_p1));
    add_ln61_2_fu_970_p2 <= std_logic_vector(unsigned(j_0_i14_cast5_reg_1178) + unsigned(shl_ln61_3_fu_962_p3));
    add_ln61_3_fu_979_p2 <= std_logic_vector(unsigned(shl_ln61_2_fu_954_p3) + unsigned(zext_ln61_5_fu_975_p1));
    add_ln61_fu_788_p2 <= std_logic_vector(unsigned(j_0_i_cast8_reg_1101) + unsigned(shl_ln61_1_fu_780_p3));
    and_ln23_1_fu_902_p2 <= (grp_fu_557_p2 and and_ln23_fu_896_p2);
    and_ln23_fu_896_p2 <= (or_ln23_fu_872_p2 and or_ln23_1_fu_890_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state106 <= ap_CS_fsm(104);
    ap_CS_fsm_state107 <= ap_CS_fsm(105);
    ap_CS_fsm_state108 <= ap_CS_fsm(106);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(32);
    ap_CS_fsm_state35 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(34);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(39);
    ap_CS_fsm_state44 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(43);
    ap_CS_fsm_state46 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state59 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(58);
    ap_CS_fsm_state61 <= ap_CS_fsm(59);
    ap_CS_fsm_state65 <= ap_CS_fsm(63);
    ap_CS_fsm_state66 <= ap_CS_fsm(64);
    ap_CS_fsm_state67 <= ap_CS_fsm(65);
    ap_CS_fsm_state68 <= ap_CS_fsm(66);
    ap_CS_fsm_state69 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(68);
    ap_CS_fsm_state71 <= ap_CS_fsm(69);
    ap_CS_fsm_state72 <= ap_CS_fsm(70);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state84 <= ap_CS_fsm(82);
    ap_CS_fsm_state85 <= ap_CS_fsm(83);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln52_fu_616_p2)
    begin
        if ((icmp_ln52_fu_616_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state69, icmp_ln145_fu_1007_p2)
    begin
        if ((((icmp_ln145_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_374_p4_assign_proc : process(i_0_i_reg_370, icmp_ln52_reg_1024, ap_CS_fsm_pp0_stage0, i_1_reg_1028, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_i_phi_fu_374_p4 <= i_1_reg_1028;
        else 
            ap_phi_mux_i_0_i_phi_fu_374_p4 <= i_0_i_reg_370;
        end if; 
    end process;

    ap_phi_mux_probability_sum_0_phi_fu_477_p4 <= probability_sum_0_reg_473;

    ap_ready_assign_proc : process(ap_CS_fsm_state69, icmp_ln145_fu_1007_p2)
    begin
        if (((icmp_ln145_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln23_1_fu_842_p1 <= reg_599;
    bitcast_ln23_fu_825_p1 <= fc_out_1_0_load_reg_1165;
    conv_kernel_1_address0 <= grp_Conv2d_4_fu_496_kernel_address0;
    conv_kernel_1_ce0 <= grp_Conv2d_4_fu_496_kernel_ce0;
    conv_kernel_2_address0 <= grp_Conv2d_3_fu_506_kernel_address0;
    conv_kernel_2_ce0 <= grp_Conv2d_3_fu_506_kernel_ce0;

    conv_out_1_address0_assign_proc : process(grp_Conv2d_4_fu_496_out_matrix_address0, grp_MaxPool2d_1_fu_516_conv_out_1_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out_1_address0 <= grp_MaxPool2d_1_fu_516_conv_out_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out_1_address0 <= grp_Conv2d_4_fu_496_out_matrix_address0;
        else 
            conv_out_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_out_1_ce0_assign_proc : process(grp_Conv2d_4_fu_496_out_matrix_ce0, grp_MaxPool2d_1_fu_516_conv_out_1_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out_1_ce0 <= grp_MaxPool2d_1_fu_516_conv_out_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out_1_ce0 <= grp_Conv2d_4_fu_496_out_matrix_ce0;
        else 
            conv_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_1_we0_assign_proc : process(grp_Conv2d_4_fu_496_out_matrix_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out_1_we0 <= grp_Conv2d_4_fu_496_out_matrix_we0;
        else 
            conv_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_2_address0_assign_proc : process(ap_CS_fsm_state8, grp_Conv2d_3_fu_506_out_matrix_address0, grp_MaxPool2d_fu_526_conv_out_2_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_2_address0 <= grp_MaxPool2d_fu_526_conv_out_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_2_address0 <= grp_Conv2d_3_fu_506_out_matrix_address0;
        else 
            conv_out_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out_2_ce0_assign_proc : process(ap_CS_fsm_state8, grp_Conv2d_3_fu_506_out_matrix_ce0, grp_MaxPool2d_fu_526_conv_out_2_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_2_ce0 <= grp_MaxPool2d_fu_526_conv_out_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_2_ce0 <= grp_Conv2d_3_fu_506_out_matrix_ce0;
        else 
            conv_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_2_we0_assign_proc : process(grp_Conv2d_3_fu_506_out_matrix_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_2_we0 <= grp_Conv2d_3_fu_506_out_matrix_we0;
        else 
            conv_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer1_address0 <= zext_ln61_1_fu_803_p1(10 - 1 downto 0);

    fc_hidden_layer1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_hidden_layer1_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer2_address0 <= zext_ln61_3_fu_985_p1(8 - 1 downto 0);

    fc_hidden_layer2_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fc_hidden_layer2_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_1_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln54_reg_1041, zext_ln54_2_reg_1061, ap_CS_fsm_pp0_stage1, zext_ln54_4_reg_1081, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln61_fu_767_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_in_1_0_address0 <= zext_ln61_fu_767_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fc_in_1_0_address0 <= zext_ln54_4_reg_1081(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            fc_in_1_0_address0 <= zext_ln54_2_reg_1061(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            fc_in_1_0_address0 <= zext_ln54_reg_1041(6 - 1 downto 0);
        else 
            fc_in_1_0_address0 <= "XXXXXX";
        end if; 
    end process;


    fc_in_1_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln54_1_reg_1051, ap_CS_fsm_pp0_stage1, zext_ln54_3_reg_1071, ap_CS_fsm_pp0_stage2, zext_ln54_5_reg_1091, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fc_in_1_0_address1 <= zext_ln54_5_reg_1091(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            fc_in_1_0_address1 <= zext_ln54_3_reg_1071(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            fc_in_1_0_address1 <= zext_ln54_1_reg_1051(6 - 1 downto 0);
        else 
            fc_in_1_0_address1 <= "XXXXXX";
        end if; 
    end process;


    fc_in_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            fc_in_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_1_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            fc_in_1_0_ce1 <= ap_const_logic_1;
        else 
            fc_in_1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_1_0_d0 <= max_poo_out_2_q0;
    fc_in_1_0_d1 <= max_poo_out_2_q1;

    fc_in_1_0_we0_assign_proc : process(icmp_ln52_reg_1024, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            fc_in_1_0_we0 <= ap_const_logic_1;
        else 
            fc_in_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_1_0_we1_assign_proc : process(icmp_ln52_reg_1024, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            fc_in_1_0_we1 <= ap_const_logic_1;
        else 
            fc_in_1_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_2_relu1_0_address0_assign_proc : process(zext_ln67_reg_1155, ap_CS_fsm_state36, ap_CS_fsm_state34, zext_ln61_2_fu_949_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fc_in_2_relu1_0_address0 <= zext_ln61_2_fu_949_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            fc_in_2_relu1_0_address0 <= zext_ln67_reg_1155(5 - 1 downto 0);
        else 
            fc_in_2_relu1_0_address0 <= "XXXXX";
        end if; 
    end process;


    fc_in_2_relu1_0_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_2_relu1_0_d0 <= 
        fc_out_1_0_load_reg_1165 when (and_ln23_1_fu_902_p2(0) = '1') else 
        reg_599;

    fc_in_2_relu1_0_we0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            fc_in_2_relu1_0_we0 <= ap_const_logic_1;
        else 
            fc_in_2_relu1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_1_0_address0_assign_proc : process(fc_out_1_0_addr_reg_1114, ap_CS_fsm_state15, ap_CS_fsm_state24, zext_ln67_fu_820_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            fc_out_1_0_address0 <= zext_ln67_fu_820_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_out_1_0_address0 <= fc_out_1_0_addr_reg_1114;
        else 
            fc_out_1_0_address0 <= "XXXXX";
        end if; 
    end process;


    fc_out_1_0_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            fc_out_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_out_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_out_1_0_d0 <= storemerge_reg_392;

    fc_out_1_0_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_out_1_0_we0 <= ap_const_logic_1;
        else 
            fc_out_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_2_0_address0_assign_proc : process(fc_out_2_0_addr_2_reg_1191, ap_CS_fsm_state36, ap_CS_fsm_state45, ap_CS_fsm_state69, zext_ln146_fu_1019_p1, zext_ln144_fu_1002_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fc_out_2_0_address0 <= zext_ln146_fu_1019_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            fc_out_2_0_address0 <= zext_ln144_fu_1002_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fc_out_2_0_address0 <= fc_out_2_0_addr_2_reg_1191;
        else 
            fc_out_2_0_address0 <= "XXXX";
        end if; 
    end process;


    fc_out_2_0_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state45, ap_CS_fsm_state69)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            fc_out_2_0_ce0 <= ap_const_logic_1;
        else 
            fc_out_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_2_0_we0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fc_out_2_0_we0 <= ap_const_logic_1;
        else 
            fc_out_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv2d_3_fu_506_ap_start <= grp_Conv2d_3_fu_506_ap_start_reg;
    grp_Conv2d_4_fu_496_ap_start <= grp_Conv2d_4_fu_496_ap_start_reg;
    grp_MaxPool2d_1_fu_516_ap_start <= grp_MaxPool2d_1_fu_516_ap_start_reg;
    grp_MaxPool2d_fu_526_ap_start <= grp_MaxPool2d_fu_526_ap_start_reg;

    grp_fu_536_p0_assign_proc : process(storemerge_reg_392, storemerge269_reg_438, ap_CS_fsm_state20, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_536_p0 <= storemerge269_reg_438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_536_p0 <= storemerge_reg_392;
        else 
            grp_fu_536_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_542_p0_assign_proc : process(fc_in_1_0_load_reg_1137, fc_in_2_relu1_0_load_reg_1214, ap_CS_fsm_state17, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_542_p0 <= fc_in_2_relu1_0_load_reg_1214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_542_p0 <= fc_in_1_0_load_reg_1137;
        else 
            grp_fu_542_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_542_p1_assign_proc : process(fc_hidden_layer1_loa_reg_1142, fc_hidden_layer2_loa_reg_1219, ap_CS_fsm_state17, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_542_p1 <= fc_hidden_layer2_loa_reg_1219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_542_p1 <= fc_hidden_layer1_loa_reg_1142;
        else 
            grp_fu_542_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_546_p0_assign_proc : process(tmp_i1_14_reg_1173, tmp_6_reg_1237, tmp_s_reg_1265, ap_CS_fsm_state32, ap_CS_fsm_state66, ap_CS_fsm_state107)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            grp_fu_546_p0 <= tmp_s_reg_1265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_546_p0 <= tmp_6_reg_1237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_546_p0 <= tmp_i1_14_reg_1173;
        else 
            grp_fu_546_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_550_p0_assign_proc : process(fc_out_1_0_q0, fc_out_2_0_q0, ap_CS_fsm_state46, ap_CS_fsm_state70, ap_CS_fsm_state25, ap_CS_fsm_state45, ap_phi_mux_probability_sum_0_phi_fu_477_p4, probability_sum_0_reg_473, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_550_p0 <= probability_sum_0_reg_473;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            grp_fu_550_p0 <= fc_out_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_550_p0 <= ap_phi_mux_probability_sum_0_phi_fu_477_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_550_p0 <= fc_out_1_0_q0;
        else 
            grp_fu_550_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_575_p1_assign_proc : process(reg_591, tmp_8_reg_1260, ap_CS_fsm_state48, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_575_p1 <= tmp_8_reg_1260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_575_p1 <= reg_591;
        else 
            grp_fu_575_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_622_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_374_p4) + unsigned(ap_const_lv3_1));
    i_2_fu_761_p2 <= std_logic_vector(unsigned(i_0_i4_reg_405) + unsigned(ap_const_lv6_1));
    i_3_fu_943_p2 <= std_logic_vector(unsigned(i_0_i18_reg_451) + unsigned(ap_const_lv5_1));
    i_fu_996_p2 <= std_logic_vector(unsigned(i_0_reg_462) + unsigned(ap_const_lv4_1));
    icmp_ln143_fu_990_p2 <= "1" when (i_0_reg_462 = ap_const_lv4_A) else "0";
    icmp_ln145_fu_1007_p2 <= "1" when (j_0_reg_485 = ap_const_lv4_A) else "0";
    icmp_ln23_1_fu_866_p2 <= "1" when (trunc_ln23_fu_838_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_2_fu_878_p2 <= "0" when (tmp_7_fu_846_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_3_fu_884_p2 <= "1" when (trunc_ln23_1_fu_856_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_860_p2 <= "0" when (tmp_2_fu_828_p4 = ap_const_lv8_FF) else "1";
    icmp_ln52_fu_616_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_374_p4 = ap_const_lv3_6) else "0";
    icmp_ln58_1_fu_920_p2 <= "1" when (j_0_i14_reg_427 = ap_const_lv4_A) else "0";
    icmp_ln58_fu_738_p2 <= "1" when (j_0_i_reg_381 = ap_const_lv5_14) else "0";
    icmp_ln60_1_fu_937_p2 <= "1" when (i_0_i18_reg_451 = ap_const_lv5_14) else "0";
    icmp_ln60_fu_755_p2 <= "1" when (i_0_i4_reg_405 = ap_const_lv6_24) else "0";
    icmp_ln66_fu_808_p2 <= "1" when (j_0_i7_reg_416 = ap_const_lv5_14) else "0";
    j_0_i14_cast5_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i14_reg_427),6));
    j_0_i_cast8_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_381),8));
    j_2_fu_744_p2 <= std_logic_vector(unsigned(j_0_i_reg_381) + unsigned(ap_const_lv5_1));
    j_4_fu_814_p2 <= std_logic_vector(unsigned(j_0_i7_reg_416) + unsigned(ap_const_lv5_1));
    j_5_fu_926_p2 <= std_logic_vector(unsigned(j_0_i14_reg_427) + unsigned(ap_const_lv4_1));
    j_fu_1013_p2 <= std_logic_vector(unsigned(j_0_reg_485) + unsigned(ap_const_lv4_1));
    max_poo_locate_1_address0 <= grp_MaxPool2d_1_fu_516_locate_matrix_address0;
    max_poo_locate_1_ce0 <= grp_MaxPool2d_1_fu_516_locate_matrix_ce0;
    max_poo_locate_1_d0 <= grp_MaxPool2d_1_fu_516_locate_matrix_d0;
    max_poo_locate_1_we0 <= grp_MaxPool2d_1_fu_516_locate_matrix_we0;
    max_poo_locate_2_address0 <= grp_MaxPool2d_fu_526_locate_matrix_address0;
    max_poo_locate_2_ce0 <= grp_MaxPool2d_fu_526_locate_matrix_ce0;
    max_poo_locate_2_d0 <= grp_MaxPool2d_fu_526_locate_matrix_d0;
    max_poo_locate_2_we0 <= grp_MaxPool2d_fu_526_locate_matrix_we0;

    max_poo_out_1_address0_assign_proc : process(grp_Conv2d_3_fu_506_input_matrix_address0, grp_MaxPool2d_1_fu_516_output_matrix_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_poo_out_1_address0 <= grp_MaxPool2d_1_fu_516_output_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_poo_out_1_address0 <= grp_Conv2d_3_fu_506_input_matrix_address0;
        else 
            max_poo_out_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_poo_out_1_ce0_assign_proc : process(grp_Conv2d_3_fu_506_input_matrix_ce0, grp_MaxPool2d_1_fu_516_output_matrix_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_poo_out_1_ce0 <= grp_MaxPool2d_1_fu_516_output_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_poo_out_1_ce0 <= grp_Conv2d_3_fu_506_input_matrix_ce0;
        else 
            max_poo_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_poo_out_1_d0 <= grp_MaxPool2d_1_fu_516_output_matrix_d0;

    max_poo_out_1_we0_assign_proc : process(grp_MaxPool2d_1_fu_516_output_matrix_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_poo_out_1_we0 <= grp_MaxPool2d_1_fu_516_output_matrix_we0;
        else 
            max_poo_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_out_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln54_fu_662_p1, zext_ln54_2_fu_687_p1, ap_CS_fsm_pp0_stage1, zext_ln54_4_fu_715_p1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state8, grp_MaxPool2d_fu_526_output_matrix_address0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            max_poo_out_2_address0 <= zext_ln54_4_fu_715_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            max_poo_out_2_address0 <= zext_ln54_2_fu_687_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_poo_out_2_address0 <= zext_ln54_fu_662_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_poo_out_2_address0 <= grp_MaxPool2d_fu_526_output_matrix_address0;
        else 
            max_poo_out_2_address0 <= "XXXXXX";
        end if; 
    end process;


    max_poo_out_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln54_1_fu_673_p1, ap_CS_fsm_pp0_stage1, zext_ln54_3_fu_701_p1, ap_CS_fsm_pp0_stage2, zext_ln54_5_fu_729_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                max_poo_out_2_address1 <= zext_ln54_5_fu_729_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                max_poo_out_2_address1 <= zext_ln54_3_fu_701_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                max_poo_out_2_address1 <= zext_ln54_1_fu_673_p1(6 - 1 downto 0);
            else 
                max_poo_out_2_address1 <= "XXXXXX";
            end if;
        else 
            max_poo_out_2_address1 <= "XXXXXX";
        end if; 
    end process;


    max_poo_out_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_state8, grp_MaxPool2d_fu_526_output_matrix_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            max_poo_out_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_poo_out_2_ce0 <= grp_MaxPool2d_fu_526_output_matrix_ce0;
        else 
            max_poo_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_out_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            max_poo_out_2_ce1 <= ap_const_logic_1;
        else 
            max_poo_out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_out_2_we0_assign_proc : process(ap_CS_fsm_state8, grp_MaxPool2d_fu_526_output_matrix_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_poo_out_2_we0 <= grp_MaxPool2d_fu_526_output_matrix_we0;
        else 
            max_poo_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mnist_data_address0 <= grp_Conv2d_4_fu_496_input_matrix_address0;
    mnist_data_ce0 <= grp_Conv2d_4_fu_496_input_matrix_ce0;
    or_ln23_1_fu_890_p2 <= (icmp_ln23_3_fu_884_p2 or icmp_ln23_2_fu_878_p2);
    or_ln23_fu_872_p2 <= (icmp_ln23_fu_860_p2 or icmp_ln23_1_fu_866_p2);
    or_ln54_fu_667_p2 <= (sext_ln54_fu_658_p1 or ap_const_lv32_1);
    probability_result_address0 <= zext_ln146_reg_1250(4 - 1 downto 0);

    probability_result_ce0_assign_proc : process(ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            probability_result_ce0 <= ap_const_logic_1;
        else 
            probability_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    probability_result_d0 <= grp_fu_546_p1;

    probability_result_we0_assign_proc : process(ap_CS_fsm_state108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            probability_result_we0 <= ap_const_logic_1;
        else 
            probability_result_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln54_1_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_678_p2),32));

        sext_ln54_2_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_1_fu_692_p2),32));

        sext_ln54_3_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_2_fu_706_p2),32));

        sext_ln54_4_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_3_fu_720_p2),32));

        sext_ln54_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_652_p2),32));

    shl_ln1_fu_772_p3 <= (i_0_i4_reg_405 & ap_const_lv4_0);
    shl_ln54_1_fu_640_p3 <= (ap_phi_mux_i_0_i_phi_fu_374_p4 & ap_const_lv1_0);
    shl_ln61_1_fu_780_p3 <= (i_0_i4_reg_405 & ap_const_lv2_0);
    shl_ln61_2_fu_954_p3 <= (i_0_i18_reg_451 & ap_const_lv3_0);
    shl_ln61_3_fu_962_p3 <= (i_0_i18_reg_451 & ap_const_lv1_0);
    shl_ln_fu_628_p3 <= (ap_phi_mux_i_0_i_phi_fu_374_p4 & ap_const_lv3_0);
    sub_ln54_fu_652_p2 <= std_logic_vector(unsigned(zext_ln54_6_fu_636_p1) - unsigned(zext_ln54_7_fu_648_p1));
    tmp_2_fu_828_p4 <= bitcast_ln23_fu_825_p1(30 downto 23);
    tmp_7_fu_846_p4 <= bitcast_ln23_1_fu_842_p1(30 downto 23);
    trunc_ln23_1_fu_856_p1 <= bitcast_ln23_1_fu_842_p1(23 - 1 downto 0);
    trunc_ln23_fu_838_p1 <= bitcast_ln23_fu_825_p1(23 - 1 downto 0);
    zext_ln144_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_462),64));
    zext_ln146_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_485),64));
    zext_ln54_1_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_fu_667_p2),64));
    zext_ln54_2_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln54_1_fu_683_p1),64));
    zext_ln54_3_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln54_2_fu_697_p1),64));
    zext_ln54_4_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln54_3_fu_711_p1),64));
    zext_ln54_5_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln54_4_fu_725_p1),64));
    zext_ln54_6_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_628_p3),7));
    zext_ln54_7_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_1_fu_640_p3),7));
    zext_ln54_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln54_fu_658_p1),64));
    zext_ln59_1_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i14_reg_427),64));
    zext_ln59_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_381),64));
    zext_ln61_1_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_1_fu_797_p2),64));
    zext_ln61_2_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i18_reg_451),64));
    zext_ln61_3_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_3_fu_979_p2),64));
    zext_ln61_4_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_788_p2),10));
    zext_ln61_5_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_2_fu_970_p2),8));
    zext_ln61_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i4_reg_405),64));
    zext_ln67_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i7_reg_416),64));
end behav;
