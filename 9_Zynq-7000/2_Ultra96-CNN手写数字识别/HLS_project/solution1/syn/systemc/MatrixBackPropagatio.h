// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _MatrixBackPropagatio_HH_
#define _MatrixBackPropagatio_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "forw_back_fsub_32mb6.h"
#include "forw_back_fmul_32cud.h"

namespace ap_rtl {

struct MatrixBackPropagatio : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > input_matrix_address0;
    sc_out< sc_logic > input_matrix_ce0;
    sc_in< sc_lv<32> > input_matrix_q0;
    sc_out< sc_lv<4> > output_matrix_address0;
    sc_out< sc_logic > output_matrix_ce0;
    sc_out< sc_logic > output_matrix_we0;
    sc_out< sc_lv<32> > output_matrix_d0;
    sc_in< sc_lv<32> > output_matrix_q0;
    sc_in< sc_lv<32> > lr;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    MatrixBackPropagatio(sc_module_name name);
    SC_HAS_PROCESS(MatrixBackPropagatio);

    ~MatrixBackPropagatio();

    sc_trace_file* mVcdFile;

    forw_back_fsub_32mb6<1,4,32,32,32>* forw_back_fsub_32mb6_U79;
    forw_back_fmul_32cud<1,3,32,32,32>* forw_back_fmul_32cud_U80;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i_fu_105_p2;
    sc_signal< sc_lv<2> > i_reg_168;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > sub_ln125_fu_123_p2;
    sc_signal< sc_lv<5> > sub_ln125_reg_173;
    sc_signal< sc_lv<1> > icmp_ln123_fu_99_p2;
    sc_signal< sc_lv<2> > j_fu_139_p2;
    sc_signal< sc_lv<2> > j_reg_181;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > output_matrix_addr_reg_186;
    sc_signal< sc_lv<1> > icmp_ln124_fu_133_p2;
    sc_signal< sc_lv<32> > input_matrix_load_reg_196;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_91_p2;
    sc_signal< sc_lv<32> > tmp_reg_201;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<2> > i_0_reg_63;
    sc_signal< sc_lv<2> > j_0_reg_74;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<64> > zext_ln125_fu_154_p1;
    sc_signal< sc_lv<32> > grp_fu_85_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > shl_ln_fu_111_p3;
    sc_signal< sc_lv<5> > zext_ln125_4_fu_119_p1;
    sc_signal< sc_lv<5> > i_0_cast1_fu_95_p1;
    sc_signal< sc_lv<5> > j_0_cast_fu_129_p1;
    sc_signal< sc_lv<5> > add_ln125_fu_145_p2;
    sc_signal< sc_lv<32> > sext_ln125_fu_150_p1;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln125_fu_145_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_0_cast1_fu_95_p1();
    void thread_i_fu_105_p2();
    void thread_icmp_ln123_fu_99_p2();
    void thread_icmp_ln124_fu_133_p2();
    void thread_input_matrix_address0();
    void thread_input_matrix_ce0();
    void thread_j_0_cast_fu_129_p1();
    void thread_j_fu_139_p2();
    void thread_output_matrix_address0();
    void thread_output_matrix_ce0();
    void thread_output_matrix_d0();
    void thread_output_matrix_we0();
    void thread_sext_ln125_fu_150_p1();
    void thread_shl_ln_fu_111_p3();
    void thread_sub_ln125_fu_123_p2();
    void thread_zext_ln125_4_fu_119_p1();
    void thread_zext_ln125_fu_154_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
