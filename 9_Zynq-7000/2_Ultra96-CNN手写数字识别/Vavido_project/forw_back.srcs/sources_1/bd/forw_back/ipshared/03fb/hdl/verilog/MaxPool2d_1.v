// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MaxPool2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_matrix_address0,
        output_matrix_ce0,
        output_matrix_we0,
        output_matrix_d0,
        locate_matrix_address0,
        locate_matrix_ce0,
        locate_matrix_we0,
        locate_matrix_d0,
        conv_out_1_address0,
        conv_out_1_ce0,
        conv_out_1_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] output_matrix_address0;
output   output_matrix_ce0;
output   output_matrix_we0;
output  [31:0] output_matrix_d0;
output  [7:0] locate_matrix_address0;
output   locate_matrix_ce0;
output   locate_matrix_we0;
output  [31:0] locate_matrix_d0;
output  [9:0] conv_out_1_address0;
output   conv_out_1_ce0;
input  [31:0] conv_out_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_matrix_ce0;
reg output_matrix_we0;
reg locate_matrix_ce0;
reg locate_matrix_we0;
reg conv_out_1_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_213_p2;
reg   [3:0] i_reg_572;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln41_fu_227_p1;
reg   [31:0] zext_ln41_reg_577;
wire   [0:0] icmp_ln38_fu_207_p2;
wire   [31:0] zext_ln41_2_fu_241_p1;
reg   [31:0] zext_ln41_2_reg_582;
wire   [8:0] sub_ln45_fu_257_p2;
reg   [8:0] sub_ln45_reg_587;
wire   [3:0] j_fu_273_p2;
reg   [3:0] j_reg_595;
wire    ap_CS_fsm_state3;
wire   [31:0] zext_ln42_fu_287_p1;
reg   [31:0] zext_ln42_reg_600;
wire   [0:0] icmp_ln39_fu_267_p2;
wire   [31:0] zext_ln42_1_fu_297_p1;
reg   [31:0] zext_ln42_1_reg_605;
reg   [7:0] output_matrix_addr_reg_610;
reg   [7:0] locate_matrix_addr_reg_615;
wire   [31:0] sub_ln43_fu_333_p2;
reg   [31:0] sub_ln43_reg_623;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln41_fu_316_p2;
wire   [31:0] col_1_fu_344_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln42_fu_339_p2;
wire  signed [31:0] add_ln43_fu_350_p2;
reg  signed [31:0] add_ln43_reg_636;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_195_p1;
reg   [31:0] tmp_s_reg_646;
reg   [31:0] conv_out_1_load_reg_652;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln43_2_fu_377_p2;
reg   [0:0] icmp_ln43_2_reg_658;
wire   [0:0] icmp_ln43_3_fu_383_p2;
reg   [0:0] icmp_ln43_3_reg_663;
wire   [7:0] tmp_V_fu_392_p4;
reg   [7:0] tmp_V_reg_668;
wire    ap_CS_fsm_state10;
wire   [22:0] tmp_V_1_fu_402_p1;
reg   [22:0] tmp_V_1_reg_674;
wire   [0:0] and_ln43_1_fu_434_p2;
reg   [0:0] and_ln43_1_reg_679;
reg   [0:0] p_Result_s_reg_683;
wire   [31:0] row_1_fu_563_p2;
wire    ap_CS_fsm_state13;
reg   [3:0] i_0_reg_117;
reg   [3:0] j_0_reg_128;
wire    ap_CS_fsm_state16;
reg   [31:0] max_num_0_reg_139;
reg   [31:0] col_0_reg_151;
reg   [31:0] max_num_1_reg_161;
reg   [31:0] ap_phi_mux_max_num_2_phi_fu_187_p4;
reg   [31:0] row_0_reg_173;
wire   [31:0] p_Val2_6_fu_555_p3;
reg   [31:0] max_num_2_reg_183;
wire   [63:0] zext_ln45_fu_310_p1;
wire  signed [63:0] sext_ln43_fu_355_p1;
reg   [31:0] grp_fu_195_p0;
wire   [4:0] col_fu_219_p3;
wire   [4:0] add_ln41_fu_235_p2;
wire   [7:0] shl_ln_fu_245_p3;
wire   [8:0] zext_ln45_1_fu_253_p1;
wire   [8:0] zext_ln41_1_fu_231_p1;
wire   [4:0] row_fu_279_p3;
wire   [4:0] add_ln42_fu_291_p2;
wire   [8:0] j_0_cast3_fu_263_p1;
wire   [8:0] add_ln45_fu_301_p2;
wire  signed [31:0] sext_ln45_fu_306_p1;
wire   [31:0] shl_ln43_fu_321_p2;
wire   [31:0] shl_ln43_1_fu_327_p2;
wire   [31:0] bitcast_ln43_1_fu_360_p1;
wire   [7:0] tmp_12_fu_363_p4;
wire   [22:0] trunc_ln43_1_fu_373_p1;
wire   [31:0] p_Val2_s_fu_389_p1;
wire   [0:0] icmp_ln43_1_fu_412_p2;
wire   [0:0] icmp_ln43_fu_406_p2;
wire   [0:0] or_ln43_fu_418_p2;
wire   [0:0] or_ln43_1_fu_424_p2;
wire   [0:0] and_ln43_fu_428_p2;
wire   [0:0] grp_fu_202_p2;
wire   [24:0] mantissa_V_fu_448_p4;
wire   [8:0] zext_ln339_fu_461_p1;
wire   [8:0] add_ln339_fu_464_p2;
wire   [7:0] sub_ln1311_fu_478_p2;
wire   [0:0] isNeg_fu_470_p3;
wire  signed [8:0] sext_ln1311_fu_483_p1;
wire  signed [8:0] ush_fu_487_p3;
wire  signed [31:0] sext_ln1311_1_fu_495_p1;
wire  signed [24:0] sext_ln1311_2_fu_499_p1;
wire   [78:0] zext_ln682_fu_457_p1;
wire   [78:0] zext_ln1287_fu_503_p1;
wire   [24:0] r_V_fu_507_p2;
wire   [0:0] tmp_4_fu_519_p3;
wire   [78:0] r_V_1_fu_513_p2;
wire   [31:0] zext_ln662_fu_527_p1;
wire   [31:0] tmp_6_fu_531_p4;
wire   [31:0] p_Val2_5_fu_541_p3;
wire   [31:0] result_V_1_fu_549_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

forw_back_sitofp_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_sitofp_dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_195_p0),
    .ce(1'b1),
    .dout(grp_fu_195_p1)
);

forw_back_fcmp_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
forw_back_fcmp_32eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_1_q0),
    .din1(tmp_s_reg_646),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        col_0_reg_151 <= col_1_fu_344_p2;
    end else if (((icmp_ln39_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_reg_151 <= zext_ln41_reg_577;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_117 <= i_reg_572;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_117 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_128 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        j_0_reg_128 <= j_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_num_0_reg_139 <= max_num_1_reg_161;
    end else if (((icmp_ln39_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_num_0_reg_139 <= 32'd4294966297;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        max_num_1_reg_161 <= ap_phi_mux_max_num_2_phi_fu_187_p4;
    end else if (((icmp_ln41_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        max_num_1_reg_161 <= max_num_0_reg_139;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln43_1_fu_434_p2) & (1'b1 == ap_CS_fsm_state10))) begin
        max_num_2_reg_183 <= max_num_1_reg_161;
    end else if (((1'd1 == and_ln43_1_reg_679) & (1'b1 == ap_CS_fsm_state13))) begin
        max_num_2_reg_183 <= p_Val2_6_fu_555_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        row_0_reg_173 <= row_1_fu_563_p2;
    end else if (((icmp_ln41_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_0_reg_173 <= zext_ln42_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln43_reg_636 <= add_ln43_fu_350_p2;
        tmp_s_reg_646 <= grp_fu_195_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        and_ln43_1_reg_679 <= and_ln43_1_fu_434_p2;
        tmp_V_1_reg_674 <= tmp_V_1_fu_402_p1;
        tmp_V_reg_668 <= {{p_Val2_s_fu_389_p1[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_1_load_reg_652 <= conv_out_1_q0;
        icmp_ln43_2_reg_658 <= icmp_ln43_2_fu_377_p2;
        icmp_ln43_3_reg_663 <= icmp_ln43_3_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_572 <= i_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_595 <= j_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        locate_matrix_addr_reg_615 <= zext_ln45_fu_310_p1;
        output_matrix_addr_reg_610 <= zext_ln45_fu_310_p1;
        zext_ln42_1_reg_605[4 : 1] <= zext_ln42_1_fu_297_p1[4 : 1];
        zext_ln42_reg_600[4 : 1] <= zext_ln42_fu_287_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln43_1_fu_434_p2) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Result_s_reg_683 <= p_Val2_s_fu_389_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln43_reg_623[31 : 2] <= sub_ln43_fu_333_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln45_reg_587[8 : 1] <= sub_ln45_fu_257_p2[8 : 1];
        zext_ln41_2_reg_582[4 : 1] <= zext_ln41_2_fu_241_p1[4 : 1];
        zext_ln41_reg_577[4 : 1] <= zext_ln41_fu_227_p1[4 : 1];
    end
end

always @ (*) begin
    if ((((icmp_ln38_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln43_1_reg_679) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_phi_mux_max_num_2_phi_fu_187_p4 = p_Val2_6_fu_555_p3;
    end else begin
        ap_phi_mux_max_num_2_phi_fu_187_p4 = max_num_2_reg_183;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_1_ce0 = 1'b1;
    end else begin
        conv_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_195_p0 = add_ln43_reg_636;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_195_p0 = max_num_1_reg_161;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_195_p0 = max_num_0_reg_139;
    end else begin
        grp_fu_195_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        locate_matrix_ce0 = 1'b1;
    end else begin
        locate_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln43_1_reg_679) & (1'b1 == ap_CS_fsm_state13))) begin
        locate_matrix_we0 = 1'b1;
    end else begin
        locate_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_matrix_ce0 = 1'b1;
    end else begin
        output_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_matrix_we0 = 1'b1;
    end else begin
        output_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln41_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln42_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'd0 == and_ln43_1_fu_434_p2) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_464_p2 = ($signed(zext_ln339_fu_461_p1) + $signed(9'd385));

assign add_ln41_fu_235_p2 = (col_fu_219_p3 + 5'd2);

assign add_ln42_fu_291_p2 = (row_fu_279_p3 + 5'd2);

assign add_ln43_fu_350_p2 = (row_0_reg_173 + sub_ln43_reg_623);

assign add_ln45_fu_301_p2 = (j_0_cast3_fu_263_p1 + sub_ln45_reg_587);

assign and_ln43_1_fu_434_p2 = (grp_fu_202_p2 & and_ln43_fu_428_p2);

assign and_ln43_fu_428_p2 = (or_ln43_fu_418_p2 & or_ln43_1_fu_424_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln43_1_fu_360_p1 = tmp_s_reg_646;

assign col_1_fu_344_p2 = (col_0_reg_151 + 32'd1);

assign col_fu_219_p3 = {{i_0_reg_117}, {1'd0}};

assign conv_out_1_address0 = sext_ln43_fu_355_p1;

assign i_fu_213_p2 = (i_0_reg_117 + 4'd1);

assign icmp_ln38_fu_207_p2 = ((i_0_reg_117 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_267_p2 = ((j_0_reg_128 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_316_p2 = (($signed(col_0_reg_151) < $signed(zext_ln41_2_reg_582)) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_339_p2 = (($signed(row_0_reg_173) < $signed(zext_ln42_1_reg_605)) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_412_p2 = ((tmp_V_1_fu_402_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_2_fu_377_p2 = ((tmp_12_fu_363_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln43_3_fu_383_p2 = ((trunc_ln43_1_fu_373_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_406_p2 = ((tmp_V_fu_392_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_470_p3 = add_ln339_fu_464_p2[32'd8];

assign j_0_cast3_fu_263_p1 = j_0_reg_128;

assign j_fu_273_p2 = (j_0_reg_128 + 4'd1);

assign locate_matrix_address0 = locate_matrix_addr_reg_615;

assign locate_matrix_d0 = grp_fu_195_p1;

assign mantissa_V_fu_448_p4 = {{{{1'd1}, {tmp_V_1_reg_674}}}, {1'd0}};

assign or_ln43_1_fu_424_p2 = (icmp_ln43_3_reg_663 | icmp_ln43_2_reg_658);

assign or_ln43_fu_418_p2 = (icmp_ln43_fu_406_p2 | icmp_ln43_1_fu_412_p2);

assign output_matrix_address0 = output_matrix_addr_reg_610;

assign output_matrix_d0 = grp_fu_195_p1;

assign p_Val2_5_fu_541_p3 = ((isNeg_fu_470_p3[0:0] === 1'b1) ? zext_ln662_fu_527_p1 : tmp_6_fu_531_p4);

assign p_Val2_6_fu_555_p3 = ((p_Result_s_reg_683[0:0] === 1'b1) ? result_V_1_fu_549_p2 : p_Val2_5_fu_541_p3);

assign p_Val2_s_fu_389_p1 = conv_out_1_load_reg_652;

assign r_V_1_fu_513_p2 = zext_ln682_fu_457_p1 << zext_ln1287_fu_503_p1;

assign r_V_fu_507_p2 = mantissa_V_fu_448_p4 >> sext_ln1311_2_fu_499_p1;

assign result_V_1_fu_549_p2 = (32'd0 - p_Val2_5_fu_541_p3);

assign row_1_fu_563_p2 = (row_0_reg_173 + 32'd1);

assign row_fu_279_p3 = {{j_0_reg_128}, {1'd0}};

assign sext_ln1311_1_fu_495_p1 = ush_fu_487_p3;

assign sext_ln1311_2_fu_499_p1 = ush_fu_487_p3;

assign sext_ln1311_fu_483_p1 = $signed(sub_ln1311_fu_478_p2);

assign sext_ln43_fu_355_p1 = add_ln43_fu_350_p2;

assign sext_ln45_fu_306_p1 = $signed(add_ln45_fu_301_p2);

assign shl_ln43_1_fu_327_p2 = col_0_reg_151 << 32'd2;

assign shl_ln43_fu_321_p2 = col_0_reg_151 << 32'd5;

assign shl_ln_fu_245_p3 = {{i_0_reg_117}, {4'd0}};

assign sub_ln1311_fu_478_p2 = (8'd127 - tmp_V_reg_668);

assign sub_ln43_fu_333_p2 = (shl_ln43_fu_321_p2 - shl_ln43_1_fu_327_p2);

assign sub_ln45_fu_257_p2 = (zext_ln45_1_fu_253_p1 - zext_ln41_1_fu_231_p1);

assign tmp_12_fu_363_p4 = {{bitcast_ln43_1_fu_360_p1[30:23]}};

assign tmp_4_fu_519_p3 = r_V_fu_507_p2[32'd24];

assign tmp_6_fu_531_p4 = {{r_V_1_fu_513_p2[55:24]}};

assign tmp_V_1_fu_402_p1 = p_Val2_s_fu_389_p1[22:0];

assign tmp_V_fu_392_p4 = {{p_Val2_s_fu_389_p1[30:23]}};

assign trunc_ln43_1_fu_373_p1 = bitcast_ln43_1_fu_360_p1[22:0];

assign ush_fu_487_p3 = ((isNeg_fu_470_p3[0:0] === 1'b1) ? sext_ln1311_fu_483_p1 : add_ln339_fu_464_p2);

assign zext_ln1287_fu_503_p1 = $unsigned(sext_ln1311_1_fu_495_p1);

assign zext_ln339_fu_461_p1 = tmp_V_reg_668;

assign zext_ln41_1_fu_231_p1 = col_fu_219_p3;

assign zext_ln41_2_fu_241_p1 = add_ln41_fu_235_p2;

assign zext_ln41_fu_227_p1 = col_fu_219_p3;

assign zext_ln42_1_fu_297_p1 = add_ln42_fu_291_p2;

assign zext_ln42_fu_287_p1 = row_fu_279_p3;

assign zext_ln45_1_fu_253_p1 = shl_ln_fu_245_p3;

assign zext_ln45_fu_310_p1 = $unsigned(sext_ln45_fu_306_p1);

assign zext_ln662_fu_527_p1 = tmp_4_fu_519_p3;

assign zext_ln682_fu_457_p1 = mantissa_V_fu_448_p4;

always @ (posedge ap_clk) begin
    zext_ln41_reg_577[0] <= 1'b0;
    zext_ln41_reg_577[31:5] <= 27'b000000000000000000000000000;
    zext_ln41_2_reg_582[0] <= 1'b0;
    zext_ln41_2_reg_582[31:5] <= 27'b000000000000000000000000000;
    sub_ln45_reg_587[0] <= 1'b0;
    zext_ln42_reg_600[0] <= 1'b0;
    zext_ln42_reg_600[31:5] <= 27'b000000000000000000000000000;
    zext_ln42_1_reg_605[0] <= 1'b0;
    zext_ln42_1_reg_605[31:5] <= 27'b000000000000000000000000000;
    sub_ln43_reg_623[1:0] <= 2'b00;
end

endmodule //MaxPool2d_1
