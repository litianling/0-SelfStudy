-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Padding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_matrix_ce0 : OUT STD_LOGIC;
    input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_matrix_ce0 : OUT STD_LOGIC;
    output_matrix_we0 : OUT STD_LOGIC;
    output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Padding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_114_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_271 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_124_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln113_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln116_fu_154_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln116_reg_286 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln115_1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_1_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_191_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal and_ln115_2_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_2_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln116_2_reg_313 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_82 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_93 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln118_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_1_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_176_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln118_fu_120_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln5_fu_142_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln118_1_fu_132_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln116_2_fu_150_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_160_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_197_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln115_2_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_3_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_1_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln114_1_fu_181_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln116_fu_240_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln116_fu_246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln116_1_fu_250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln116_1_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_82 <= i_reg_271;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_82 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln113_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_93 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_93 <= j_reg_299;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln115_2_fu_229_p2) and (icmp_ln114_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln116_2_reg_313 <= grp_fu_104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln115_2_reg_304 <= and_ln115_2_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_271 <= i_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln113_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln115_1_reg_291 <= icmp_ln115_1_fu_170_p2;
                icmp_ln115_reg_281 <= icmp_ln115_fu_136_p2;
                    shl_ln_reg_276(7 downto 4) <= shl_ln_fu_124_p3(7 downto 4);
                    sub_ln116_reg_286(8 downto 2) <= sub_ln116_fu_154_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_299 <= j_fu_191_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_276(3 downto 0) <= "0000";
    sub_ln116_reg_286(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln113_fu_108_p2, ap_CS_fsm_state3, icmp_ln114_fu_185_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln113_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln114_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln116_1_fu_250_p2 <= std_logic_vector(signed(sext_ln116_fu_246_p1) + signed(sub_ln116_reg_286));
    add_ln116_fu_240_p2 <= std_logic_vector(unsigned(zext_ln114_1_fu_181_p1) + unsigned(ap_const_lv6_26));
    and_ln115_1_fu_224_p2 <= (icmp_ln115_reg_281 and icmp_ln115_3_fu_213_p2);
    and_ln115_2_fu_229_p2 <= (and_ln115_fu_219_p2 and and_ln115_1_fu_224_p2);
    and_ln115_fu_219_p2 <= (icmp_ln115_2_fu_207_p2 and icmp_ln115_1_reg_291);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln113_fu_108_p2)
    begin
        if ((((icmp_ln113_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln113_fu_108_p2)
    begin
        if (((icmp_ln113_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_104_p2 <= std_logic_vector(unsigned(shl_ln_reg_276) + unsigned(zext_ln114_fu_176_p1));
    i_fu_114_p2 <= std_logic_vector(unsigned(i_0_reg_82) + unsigned(ap_const_lv5_1));
    icmp_ln113_fu_108_p2 <= "1" when (i_0_reg_82 = ap_const_lv5_10) else "0";
    icmp_ln114_fu_185_p2 <= "1" when (j_0_reg_93 = ap_const_lv5_10) else "0";
    icmp_ln115_1_fu_170_p2 <= "0" when (tmp_1_fu_160_p4 = ap_const_lv4_0) else "1";
    icmp_ln115_2_fu_207_p2 <= "0" when (tmp_2_fu_197_p4 = ap_const_lv4_0) else "1";
    icmp_ln115_3_fu_213_p2 <= "1" when (unsigned(j_0_reg_93) < unsigned(ap_const_lv5_E)) else "0";
    icmp_ln115_fu_136_p2 <= "1" when (unsigned(i_0_reg_82) < unsigned(ap_const_lv5_E)) else "0";
    input_matrix_address0 <= zext_ln116_fu_259_p1(8 - 1 downto 0);

    input_matrix_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_matrix_ce0 <= ap_const_logic_1;
        else 
            input_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_191_p2 <= std_logic_vector(unsigned(j_0_reg_93) + unsigned(ap_const_lv5_1));

    output_matrix_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln118_fu_235_p1, zext_ln116_1_fu_264_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_matrix_address0 <= zext_ln116_1_fu_264_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_matrix_address0 <= zext_ln118_fu_235_p1(8 - 1 downto 0);
        else 
            output_matrix_address0 <= "XXXXXXXX";
        end if; 
    end process;


    output_matrix_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_matrix_ce0 <= ap_const_logic_1;
        else 
            output_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_matrix_d0_assign_proc : process(input_matrix_q0, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_matrix_d0 <= input_matrix_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_matrix_d0 <= ap_const_lv32_0;
        else 
            output_matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_matrix_we0_assign_proc : process(ap_CS_fsm_state3, and_ln115_2_fu_229_p2, and_ln115_2_reg_304, icmp_ln114_fu_185_p2, ap_CS_fsm_state4)
    begin
        if ((((ap_const_lv1_1 = and_ln115_2_reg_304) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln114_fu_185_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln115_2_fu_229_p2) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_matrix_we0 <= ap_const_logic_1;
        else 
            output_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln116_1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln116_1_fu_250_p2),32));

        sext_ln116_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln116_fu_240_p2),9));

    shl_ln5_fu_142_p3 <= (trunc_ln118_fu_120_p1 & ap_const_lv2_0);
    shl_ln_fu_124_p3 <= (trunc_ln118_fu_120_p1 & ap_const_lv4_0);
    sub_ln116_fu_154_p2 <= std_logic_vector(unsigned(zext_ln118_1_fu_132_p1) - unsigned(zext_ln116_2_fu_150_p1));
    tmp_1_fu_160_p4 <= i_0_reg_82(4 downto 1);
    tmp_2_fu_197_p4 <= j_0_reg_93(4 downto 1);
    trunc_ln118_fu_120_p1 <= i_0_reg_82(4 - 1 downto 0);
    zext_ln114_1_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_93),6));
    zext_ln114_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_93),8));
    zext_ln116_1_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_2_reg_313),64));
    zext_ln116_2_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_142_p3),9));
    zext_ln116_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln116_1_fu_255_p1),64));
    zext_ln118_1_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_124_p3),9));
    zext_ln118_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_104_p2),64));
end behav;
