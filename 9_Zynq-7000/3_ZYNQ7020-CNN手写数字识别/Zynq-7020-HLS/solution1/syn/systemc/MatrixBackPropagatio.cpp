// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "MatrixBackPropagatio.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic MatrixBackPropagatio::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic MatrixBackPropagatio::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state1 = "1";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state2 = "10";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state3 = "100";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state4 = "1000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state5 = "10000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state6 = "100000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> MatrixBackPropagatio::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_1 = "1";
const sc_lv<1> MatrixBackPropagatio::ap_const_lv1_0 = "0";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_2 = "10";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_3 = "11";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_6 = "110";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_B = "1011";
const sc_lv<2> MatrixBackPropagatio::ap_const_lv2_0 = "00";
const sc_lv<1> MatrixBackPropagatio::ap_const_lv1_1 = "1";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_C = "1100";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_5 = "101";
const sc_lv<32> MatrixBackPropagatio::ap_const_lv32_7 = "111";
const sc_lv<2> MatrixBackPropagatio::ap_const_lv2_3 = "11";
const sc_lv<2> MatrixBackPropagatio::ap_const_lv2_1 = "1";
const bool MatrixBackPropagatio::ap_const_boolean_1 = true;

MatrixBackPropagatio::MatrixBackPropagatio(sc_module_name name) : sc_module(name), mVcdFile(0) {
    forw_back_fsub_32mb6_U79 = new forw_back_fsub_32mb6<1,5,32,32,32>("forw_back_fsub_32mb6_U79");
    forw_back_fsub_32mb6_U79->clk(ap_clk);
    forw_back_fsub_32mb6_U79->reset(ap_rst);
    forw_back_fsub_32mb6_U79->din0(output_matrix_load_reg_195);
    forw_back_fsub_32mb6_U79->din1(tmp_reg_190);
    forw_back_fsub_32mb6_U79->ce(ap_var_for_const0);
    forw_back_fsub_32mb6_U79->dout(grp_fu_75_p2);
    forw_back_fmul_32cud_U80 = new forw_back_fmul_32cud<1,4,32,32,32>("forw_back_fmul_32cud_U80");
    forw_back_fmul_32cud_U80->clk(ap_clk);
    forw_back_fmul_32cud_U80->reset(ap_rst);
    forw_back_fmul_32cud_U80->din0(input_matrix_q0);
    forw_back_fmul_32cud_U80->din1(lr);
    forw_back_fmul_32cud_U80->ce(ap_var_for_const0);
    forw_back_fmul_32cud_U80->dout(grp_fu_79_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln125_fu_134_p2);
    sensitive << ( sub_ln125_reg_162 );
    sensitive << ( j_0_cast_fu_118_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln123_fu_88_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln123_fu_88_p2 );

    SC_METHOD(thread_i_0_cast1_fu_84_p1);
    sensitive << ( i_0_reg_53 );

    SC_METHOD(thread_i_fu_94_p2);
    sensitive << ( i_0_reg_53 );

    SC_METHOD(thread_icmp_ln123_fu_88_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_53 );

    SC_METHOD(thread_icmp_ln124_fu_122_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_64 );

    SC_METHOD(thread_input_matrix_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln125_fu_143_p1 );

    SC_METHOD(thread_input_matrix_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_0_cast_fu_118_p1);
    sensitive << ( j_0_reg_64 );

    SC_METHOD(thread_j_fu_128_p2);
    sensitive << ( j_0_reg_64 );

    SC_METHOD(thread_output_matrix_address0);
    sensitive << ( output_matrix_addr_reg_175 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_output_matrix_ce0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_output_matrix_d0);
    sensitive << ( tmp_s_reg_200 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_output_matrix_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_sext_ln125_fu_139_p1);
    sensitive << ( add_ln125_fu_134_p2 );

    SC_METHOD(thread_shl_ln_fu_100_p3);
    sensitive << ( i_0_reg_53 );

    SC_METHOD(thread_sub_ln125_fu_112_p2);
    sensitive << ( zext_ln125_4_fu_108_p1 );
    sensitive << ( i_0_cast1_fu_84_p1 );

    SC_METHOD(thread_zext_ln125_4_fu_108_p1);
    sensitive << ( shl_ln_fu_100_p3 );

    SC_METHOD(thread_zext_ln125_fu_143_p1);
    sensitive << ( sext_ln125_fu_139_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln123_fu_88_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln124_fu_122_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "MatrixBackPropagatio_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_matrix_address0, "(port)input_matrix_address0");
    sc_trace(mVcdFile, input_matrix_ce0, "(port)input_matrix_ce0");
    sc_trace(mVcdFile, input_matrix_q0, "(port)input_matrix_q0");
    sc_trace(mVcdFile, output_matrix_address0, "(port)output_matrix_address0");
    sc_trace(mVcdFile, output_matrix_ce0, "(port)output_matrix_ce0");
    sc_trace(mVcdFile, output_matrix_we0, "(port)output_matrix_we0");
    sc_trace(mVcdFile, output_matrix_d0, "(port)output_matrix_d0");
    sc_trace(mVcdFile, output_matrix_q0, "(port)output_matrix_q0");
    sc_trace(mVcdFile, lr, "(port)lr");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_94_p2, "i_fu_94_p2");
    sc_trace(mVcdFile, i_reg_157, "i_reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sub_ln125_fu_112_p2, "sub_ln125_fu_112_p2");
    sc_trace(mVcdFile, sub_ln125_reg_162, "sub_ln125_reg_162");
    sc_trace(mVcdFile, icmp_ln123_fu_88_p2, "icmp_ln123_fu_88_p2");
    sc_trace(mVcdFile, j_fu_128_p2, "j_fu_128_p2");
    sc_trace(mVcdFile, j_reg_170, "j_reg_170");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, output_matrix_addr_reg_175, "output_matrix_addr_reg_175");
    sc_trace(mVcdFile, icmp_ln124_fu_122_p2, "icmp_ln124_fu_122_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_79_p2, "grp_fu_79_p2");
    sc_trace(mVcdFile, tmp_reg_190, "tmp_reg_190");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, output_matrix_load_reg_195, "output_matrix_load_reg_195");
    sc_trace(mVcdFile, grp_fu_75_p2, "grp_fu_75_p2");
    sc_trace(mVcdFile, tmp_s_reg_200, "tmp_s_reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i_0_reg_53, "i_0_reg_53");
    sc_trace(mVcdFile, j_0_reg_64, "j_0_reg_64");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, zext_ln125_fu_143_p1, "zext_ln125_fu_143_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, shl_ln_fu_100_p3, "shl_ln_fu_100_p3");
    sc_trace(mVcdFile, zext_ln125_4_fu_108_p1, "zext_ln125_4_fu_108_p1");
    sc_trace(mVcdFile, i_0_cast1_fu_84_p1, "i_0_cast1_fu_84_p1");
    sc_trace(mVcdFile, j_0_cast_fu_118_p1, "j_0_cast_fu_118_p1");
    sc_trace(mVcdFile, add_ln125_fu_134_p2, "add_ln125_fu_134_p2");
    sc_trace(mVcdFile, sext_ln125_fu_139_p1, "sext_ln125_fu_139_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

MatrixBackPropagatio::~MatrixBackPropagatio() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete forw_back_fsub_32mb6_U79;
    delete forw_back_fmul_32cud_U80;
}

void MatrixBackPropagatio::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void MatrixBackPropagatio::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln124_fu_122_p2.read(), ap_const_lv1_1))) {
        i_0_reg_53 = i_reg_157.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_53 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln123_fu_88_p2.read(), ap_const_lv1_0))) {
        j_0_reg_64 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        j_0_reg_64 = j_reg_170.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_157 = i_fu_94_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_170 = j_fu_128_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln124_fu_122_p2.read()))) {
        output_matrix_addr_reg_175 =  (sc_lv<4>) (zext_ln125_fu_143_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        output_matrix_load_reg_195 = output_matrix_q0.read();
        tmp_reg_190 = grp_fu_79_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln123_fu_88_p2.read(), ap_const_lv1_0))) {
        sub_ln125_reg_162 = sub_ln125_fu_112_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_s_reg_200 = grp_fu_75_p2.read();
    }
}

void MatrixBackPropagatio::thread_add_ln125_fu_134_p2() {
    add_ln125_fu_134_p2 = (!sub_ln125_reg_162.read().is_01() || !j_0_cast_fu_118_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(sub_ln125_reg_162.read()) + sc_biguint<5>(j_0_cast_fu_118_p1.read()));
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void MatrixBackPropagatio::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void MatrixBackPropagatio::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln123_fu_88_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void MatrixBackPropagatio::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void MatrixBackPropagatio::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln123_fu_88_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void MatrixBackPropagatio::thread_i_0_cast1_fu_84_p1() {
    i_0_cast1_fu_84_p1 = esl_zext<5,2>(i_0_reg_53.read());
}

void MatrixBackPropagatio::thread_i_fu_94_p2() {
    i_fu_94_p2 = (!i_0_reg_53.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_53.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void MatrixBackPropagatio::thread_icmp_ln123_fu_88_p2() {
    icmp_ln123_fu_88_p2 = (!i_0_reg_53.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_53.read() == ap_const_lv2_3);
}

void MatrixBackPropagatio::thread_icmp_ln124_fu_122_p2() {
    icmp_ln124_fu_122_p2 = (!j_0_reg_64.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_64.read() == ap_const_lv2_3);
}

void MatrixBackPropagatio::thread_input_matrix_address0() {
    input_matrix_address0 =  (sc_lv<4>) (zext_ln125_fu_143_p1.read());
}

void MatrixBackPropagatio::thread_input_matrix_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_matrix_ce0 = ap_const_logic_1;
    } else {
        input_matrix_ce0 = ap_const_logic_0;
    }
}

void MatrixBackPropagatio::thread_j_0_cast_fu_118_p1() {
    j_0_cast_fu_118_p1 = esl_zext<5,2>(j_0_reg_64.read());
}

void MatrixBackPropagatio::thread_j_fu_128_p2() {
    j_fu_128_p2 = (!j_0_reg_64.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_0_reg_64.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void MatrixBackPropagatio::thread_output_matrix_address0() {
    output_matrix_address0 = output_matrix_addr_reg_175.read();
}

void MatrixBackPropagatio::thread_output_matrix_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        output_matrix_ce0 = ap_const_logic_1;
    } else {
        output_matrix_ce0 = ap_const_logic_0;
    }
}

void MatrixBackPropagatio::thread_output_matrix_d0() {
    output_matrix_d0 = tmp_s_reg_200.read();
}

void MatrixBackPropagatio::thread_output_matrix_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        output_matrix_we0 = ap_const_logic_1;
    } else {
        output_matrix_we0 = ap_const_logic_0;
    }
}

void MatrixBackPropagatio::thread_sext_ln125_fu_139_p1() {
    sext_ln125_fu_139_p1 = esl_sext<32,5>(add_ln125_fu_134_p2.read());
}

void MatrixBackPropagatio::thread_shl_ln_fu_100_p3() {
    shl_ln_fu_100_p3 = esl_concat<2,2>(i_0_reg_53.read(), ap_const_lv2_0);
}

void MatrixBackPropagatio::thread_sub_ln125_fu_112_p2() {
    sub_ln125_fu_112_p2 = (!zext_ln125_4_fu_108_p1.read().is_01() || !i_0_cast1_fu_84_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln125_4_fu_108_p1.read()) - sc_biguint<5>(i_0_cast1_fu_84_p1.read()));
}

void MatrixBackPropagatio::thread_zext_ln125_4_fu_108_p1() {
    zext_ln125_4_fu_108_p1 = esl_zext<5,4>(shl_ln_fu_100_p3.read());
}

void MatrixBackPropagatio::thread_zext_ln125_fu_143_p1() {
    zext_ln125_fu_143_p1 = esl_zext<64,32>(sext_ln125_fu_139_p1.read());
}

void MatrixBackPropagatio::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln123_fu_88_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln124_fu_122_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXX";
            break;
    }
}

}

