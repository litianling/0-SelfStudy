// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Padding.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Padding::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Padding::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Padding::ap_ST_fsm_state1 = "1";
const sc_lv<4> Padding::ap_ST_fsm_state2 = "10";
const sc_lv<4> Padding::ap_ST_fsm_state3 = "100";
const sc_lv<4> Padding::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Padding::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Padding::ap_const_lv32_1 = "1";
const sc_lv<1> Padding::ap_const_lv1_0 = "0";
const sc_lv<32> Padding::ap_const_lv32_2 = "10";
const sc_lv<1> Padding::ap_const_lv1_1 = "1";
const sc_lv<5> Padding::ap_const_lv5_0 = "00000";
const sc_lv<32> Padding::ap_const_lv32_3 = "11";
const sc_lv<5> Padding::ap_const_lv5_10 = "10000";
const sc_lv<5> Padding::ap_const_lv5_1 = "1";
const sc_lv<4> Padding::ap_const_lv4_0 = "0000";
const sc_lv<5> Padding::ap_const_lv5_E = "1110";
const sc_lv<2> Padding::ap_const_lv2_0 = "00";
const sc_lv<32> Padding::ap_const_lv32_4 = "100";
const sc_lv<6> Padding::ap_const_lv6_26 = "100110";
const bool Padding::ap_const_boolean_1 = true;

Padding::Padding(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln116_1_fu_250_p2);
    sensitive << ( sub_ln116_reg_286 );
    sensitive << ( sext_ln116_fu_246_p1 );

    SC_METHOD(thread_add_ln116_fu_240_p2);
    sensitive << ( zext_ln114_1_fu_181_p1 );

    SC_METHOD(thread_and_ln115_1_fu_224_p2);
    sensitive << ( icmp_ln115_reg_281 );
    sensitive << ( icmp_ln115_3_fu_213_p2 );

    SC_METHOD(thread_and_ln115_2_fu_229_p2);
    sensitive << ( and_ln115_1_fu_224_p2 );
    sensitive << ( and_ln115_fu_219_p2 );

    SC_METHOD(thread_and_ln115_fu_219_p2);
    sensitive << ( icmp_ln115_1_reg_291 );
    sensitive << ( icmp_ln115_2_fu_207_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_108_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_108_p2 );

    SC_METHOD(thread_grp_fu_104_p2);
    sensitive << ( shl_ln_reg_276 );
    sensitive << ( zext_ln114_fu_176_p1 );

    SC_METHOD(thread_i_fu_114_p2);
    sensitive << ( i_0_reg_82 );

    SC_METHOD(thread_icmp_ln113_fu_108_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_82 );

    SC_METHOD(thread_icmp_ln114_fu_185_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_93 );

    SC_METHOD(thread_icmp_ln115_1_fu_170_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_108_p2 );
    sensitive << ( tmp_1_fu_160_p4 );

    SC_METHOD(thread_icmp_ln115_2_fu_207_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln114_fu_185_p2 );
    sensitive << ( tmp_2_fu_197_p4 );

    SC_METHOD(thread_icmp_ln115_3_fu_213_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln114_fu_185_p2 );
    sensitive << ( j_0_reg_93 );

    SC_METHOD(thread_icmp_ln115_fu_136_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_108_p2 );
    sensitive << ( i_0_reg_82 );

    SC_METHOD(thread_input_matrix_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln116_fu_259_p1 );

    SC_METHOD(thread_input_matrix_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_fu_191_p2);
    sensitive << ( j_0_reg_93 );

    SC_METHOD(thread_output_matrix_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln118_fu_235_p1 );
    sensitive << ( zext_ln116_1_fu_264_p1 );

    SC_METHOD(thread_output_matrix_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_matrix_d0);
    sensitive << ( input_matrix_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_matrix_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( and_ln115_2_fu_229_p2 );
    sensitive << ( and_ln115_2_reg_304 );
    sensitive << ( icmp_ln114_fu_185_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sext_ln116_1_fu_255_p1);
    sensitive << ( add_ln116_1_fu_250_p2 );

    SC_METHOD(thread_sext_ln116_fu_246_p1);
    sensitive << ( add_ln116_fu_240_p2 );

    SC_METHOD(thread_shl_ln5_fu_142_p3);
    sensitive << ( trunc_ln118_fu_120_p1 );

    SC_METHOD(thread_shl_ln_fu_124_p3);
    sensitive << ( trunc_ln118_fu_120_p1 );

    SC_METHOD(thread_sub_ln116_fu_154_p2);
    sensitive << ( zext_ln118_1_fu_132_p1 );
    sensitive << ( zext_ln116_2_fu_150_p1 );

    SC_METHOD(thread_tmp_1_fu_160_p4);
    sensitive << ( i_0_reg_82 );

    SC_METHOD(thread_tmp_2_fu_197_p4);
    sensitive << ( j_0_reg_93 );

    SC_METHOD(thread_trunc_ln118_fu_120_p1);
    sensitive << ( i_0_reg_82 );

    SC_METHOD(thread_zext_ln114_1_fu_181_p1);
    sensitive << ( j_0_reg_93 );

    SC_METHOD(thread_zext_ln114_fu_176_p1);
    sensitive << ( j_0_reg_93 );

    SC_METHOD(thread_zext_ln116_1_fu_264_p1);
    sensitive << ( add_ln116_2_reg_313 );

    SC_METHOD(thread_zext_ln116_2_fu_150_p1);
    sensitive << ( shl_ln5_fu_142_p3 );

    SC_METHOD(thread_zext_ln116_fu_259_p1);
    sensitive << ( sext_ln116_1_fu_255_p1 );

    SC_METHOD(thread_zext_ln118_1_fu_132_p1);
    sensitive << ( shl_ln_fu_124_p3 );

    SC_METHOD(thread_zext_ln118_fu_235_p1);
    sensitive << ( grp_fu_104_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln113_fu_108_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln114_fu_185_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Padding_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_matrix_address0, "(port)input_matrix_address0");
    sc_trace(mVcdFile, input_matrix_ce0, "(port)input_matrix_ce0");
    sc_trace(mVcdFile, input_matrix_q0, "(port)input_matrix_q0");
    sc_trace(mVcdFile, output_matrix_address0, "(port)output_matrix_address0");
    sc_trace(mVcdFile, output_matrix_ce0, "(port)output_matrix_ce0");
    sc_trace(mVcdFile, output_matrix_we0, "(port)output_matrix_we0");
    sc_trace(mVcdFile, output_matrix_d0, "(port)output_matrix_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_114_p2, "i_fu_114_p2");
    sc_trace(mVcdFile, i_reg_271, "i_reg_271");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, shl_ln_fu_124_p3, "shl_ln_fu_124_p3");
    sc_trace(mVcdFile, shl_ln_reg_276, "shl_ln_reg_276");
    sc_trace(mVcdFile, icmp_ln113_fu_108_p2, "icmp_ln113_fu_108_p2");
    sc_trace(mVcdFile, icmp_ln115_fu_136_p2, "icmp_ln115_fu_136_p2");
    sc_trace(mVcdFile, icmp_ln115_reg_281, "icmp_ln115_reg_281");
    sc_trace(mVcdFile, sub_ln116_fu_154_p2, "sub_ln116_fu_154_p2");
    sc_trace(mVcdFile, sub_ln116_reg_286, "sub_ln116_reg_286");
    sc_trace(mVcdFile, icmp_ln115_1_fu_170_p2, "icmp_ln115_1_fu_170_p2");
    sc_trace(mVcdFile, icmp_ln115_1_reg_291, "icmp_ln115_1_reg_291");
    sc_trace(mVcdFile, j_fu_191_p2, "j_fu_191_p2");
    sc_trace(mVcdFile, j_reg_299, "j_reg_299");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, and_ln115_2_fu_229_p2, "and_ln115_2_fu_229_p2");
    sc_trace(mVcdFile, and_ln115_2_reg_304, "and_ln115_2_reg_304");
    sc_trace(mVcdFile, icmp_ln114_fu_185_p2, "icmp_ln114_fu_185_p2");
    sc_trace(mVcdFile, grp_fu_104_p2, "grp_fu_104_p2");
    sc_trace(mVcdFile, add_ln116_2_reg_313, "add_ln116_2_reg_313");
    sc_trace(mVcdFile, i_0_reg_82, "i_0_reg_82");
    sc_trace(mVcdFile, j_0_reg_93, "j_0_reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln118_fu_235_p1, "zext_ln118_fu_235_p1");
    sc_trace(mVcdFile, zext_ln116_fu_259_p1, "zext_ln116_fu_259_p1");
    sc_trace(mVcdFile, zext_ln116_1_fu_264_p1, "zext_ln116_1_fu_264_p1");
    sc_trace(mVcdFile, zext_ln114_fu_176_p1, "zext_ln114_fu_176_p1");
    sc_trace(mVcdFile, trunc_ln118_fu_120_p1, "trunc_ln118_fu_120_p1");
    sc_trace(mVcdFile, shl_ln5_fu_142_p3, "shl_ln5_fu_142_p3");
    sc_trace(mVcdFile, zext_ln118_1_fu_132_p1, "zext_ln118_1_fu_132_p1");
    sc_trace(mVcdFile, zext_ln116_2_fu_150_p1, "zext_ln116_2_fu_150_p1");
    sc_trace(mVcdFile, tmp_1_fu_160_p4, "tmp_1_fu_160_p4");
    sc_trace(mVcdFile, tmp_2_fu_197_p4, "tmp_2_fu_197_p4");
    sc_trace(mVcdFile, icmp_ln115_2_fu_207_p2, "icmp_ln115_2_fu_207_p2");
    sc_trace(mVcdFile, icmp_ln115_3_fu_213_p2, "icmp_ln115_3_fu_213_p2");
    sc_trace(mVcdFile, and_ln115_1_fu_224_p2, "and_ln115_1_fu_224_p2");
    sc_trace(mVcdFile, and_ln115_fu_219_p2, "and_ln115_fu_219_p2");
    sc_trace(mVcdFile, zext_ln114_1_fu_181_p1, "zext_ln114_1_fu_181_p1");
    sc_trace(mVcdFile, add_ln116_fu_240_p2, "add_ln116_fu_240_p2");
    sc_trace(mVcdFile, sext_ln116_fu_246_p1, "sext_ln116_fu_246_p1");
    sc_trace(mVcdFile, add_ln116_1_fu_250_p2, "add_ln116_1_fu_250_p2");
    sc_trace(mVcdFile, sext_ln116_1_fu_255_p1, "sext_ln116_1_fu_255_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Padding::~Padding() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Padding::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln114_fu_185_p2.read(), ap_const_lv1_1))) {
        i_0_reg_82 = i_reg_271.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_82 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln113_fu_108_p2.read(), ap_const_lv1_0))) {
        j_0_reg_93 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_93 = j_reg_299.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln114_fu_185_p2.read()) && esl_seteq<1,1,1>(and_ln115_2_fu_229_p2.read(), ap_const_lv1_1))) {
        add_ln116_2_reg_313 = grp_fu_104_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln114_fu_185_p2.read()))) {
        and_ln115_2_reg_304 = and_ln115_2_fu_229_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_271 = i_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln113_fu_108_p2.read(), ap_const_lv1_0))) {
        icmp_ln115_1_reg_291 = icmp_ln115_1_fu_170_p2.read();
        icmp_ln115_reg_281 = icmp_ln115_fu_136_p2.read();
        shl_ln_reg_276 = shl_ln_fu_124_p3.read();
        sub_ln116_reg_286 = sub_ln116_fu_154_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_299 = j_fu_191_p2.read();
    }
}

void Padding::thread_add_ln116_1_fu_250_p2() {
    add_ln116_1_fu_250_p2 = (!sext_ln116_fu_246_p1.read().is_01() || !sub_ln116_reg_286.read().is_01())? sc_lv<9>(): (sc_bigint<9>(sext_ln116_fu_246_p1.read()) + sc_biguint<9>(sub_ln116_reg_286.read()));
}

void Padding::thread_add_ln116_fu_240_p2() {
    add_ln116_fu_240_p2 = (!zext_ln114_1_fu_181_p1.read().is_01() || !ap_const_lv6_26.is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln114_1_fu_181_p1.read()) + sc_bigint<6>(ap_const_lv6_26));
}

void Padding::thread_and_ln115_1_fu_224_p2() {
    and_ln115_1_fu_224_p2 = (icmp_ln115_3_fu_213_p2.read() & icmp_ln115_reg_281.read());
}

void Padding::thread_and_ln115_2_fu_229_p2() {
    and_ln115_2_fu_229_p2 = (and_ln115_1_fu_224_p2.read() & and_ln115_fu_219_p2.read());
}

void Padding::thread_and_ln115_fu_219_p2() {
    and_ln115_fu_219_p2 = (icmp_ln115_2_fu_207_p2.read() & icmp_ln115_1_reg_291.read());
}

void Padding::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Padding::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Padding::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Padding::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Padding::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln113_fu_108_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Padding::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Padding::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln113_fu_108_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Padding::thread_grp_fu_104_p2() {
    grp_fu_104_p2 = (!shl_ln_reg_276.read().is_01() || !zext_ln114_fu_176_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(shl_ln_reg_276.read()) + sc_biguint<8>(zext_ln114_fu_176_p1.read()));
}

void Padding::thread_i_fu_114_p2() {
    i_fu_114_p2 = (!i_0_reg_82.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_82.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Padding::thread_icmp_ln113_fu_108_p2() {
    icmp_ln113_fu_108_p2 = (!i_0_reg_82.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_82.read() == ap_const_lv5_10);
}

void Padding::thread_icmp_ln114_fu_185_p2() {
    icmp_ln114_fu_185_p2 = (!j_0_reg_93.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_93.read() == ap_const_lv5_10);
}

void Padding::thread_icmp_ln115_1_fu_170_p2() {
    icmp_ln115_1_fu_170_p2 = (!tmp_1_fu_160_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_160_p4.read() != ap_const_lv4_0);
}

void Padding::thread_icmp_ln115_2_fu_207_p2() {
    icmp_ln115_2_fu_207_p2 = (!tmp_2_fu_197_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_197_p4.read() != ap_const_lv4_0);
}

void Padding::thread_icmp_ln115_3_fu_213_p2() {
    icmp_ln115_3_fu_213_p2 = (!j_0_reg_93.read().is_01() || !ap_const_lv5_E.is_01())? sc_lv<1>(): (sc_biguint<5>(j_0_reg_93.read()) < sc_biguint<5>(ap_const_lv5_E));
}

void Padding::thread_icmp_ln115_fu_136_p2() {
    icmp_ln115_fu_136_p2 = (!i_0_reg_82.read().is_01() || !ap_const_lv5_E.is_01())? sc_lv<1>(): (sc_biguint<5>(i_0_reg_82.read()) < sc_biguint<5>(ap_const_lv5_E));
}

void Padding::thread_input_matrix_address0() {
    input_matrix_address0 =  (sc_lv<8>) (zext_ln116_fu_259_p1.read());
}

void Padding::thread_input_matrix_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_matrix_ce0 = ap_const_logic_1;
    } else {
        input_matrix_ce0 = ap_const_logic_0;
    }
}

void Padding::thread_j_fu_191_p2() {
    j_fu_191_p2 = (!j_0_reg_93.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_0_reg_93.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Padding::thread_output_matrix_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        output_matrix_address0 =  (sc_lv<8>) (zext_ln116_1_fu_264_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        output_matrix_address0 =  (sc_lv<8>) (zext_ln118_fu_235_p1.read());
    } else {
        output_matrix_address0 = "XXXXXXXX";
    }
}

void Padding::thread_output_matrix_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        output_matrix_ce0 = ap_const_logic_1;
    } else {
        output_matrix_ce0 = ap_const_logic_0;
    }
}

void Padding::thread_output_matrix_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        output_matrix_d0 = input_matrix_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        output_matrix_d0 = ap_const_lv32_0;
    } else {
        output_matrix_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Padding::thread_output_matrix_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln114_fu_185_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln115_2_fu_229_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(and_ln115_2_reg_304.read(), ap_const_lv1_1)))) {
        output_matrix_we0 = ap_const_logic_1;
    } else {
        output_matrix_we0 = ap_const_logic_0;
    }
}

void Padding::thread_sext_ln116_1_fu_255_p1() {
    sext_ln116_1_fu_255_p1 = esl_sext<32,9>(add_ln116_1_fu_250_p2.read());
}

void Padding::thread_sext_ln116_fu_246_p1() {
    sext_ln116_fu_246_p1 = esl_sext<9,6>(add_ln116_fu_240_p2.read());
}

void Padding::thread_shl_ln5_fu_142_p3() {
    shl_ln5_fu_142_p3 = esl_concat<4,2>(trunc_ln118_fu_120_p1.read(), ap_const_lv2_0);
}

void Padding::thread_shl_ln_fu_124_p3() {
    shl_ln_fu_124_p3 = esl_concat<4,4>(trunc_ln118_fu_120_p1.read(), ap_const_lv4_0);
}

void Padding::thread_sub_ln116_fu_154_p2() {
    sub_ln116_fu_154_p2 = (!zext_ln118_1_fu_132_p1.read().is_01() || !zext_ln116_2_fu_150_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln118_1_fu_132_p1.read()) - sc_biguint<9>(zext_ln116_2_fu_150_p1.read()));
}

void Padding::thread_tmp_1_fu_160_p4() {
    tmp_1_fu_160_p4 = i_0_reg_82.read().range(4, 1);
}

void Padding::thread_tmp_2_fu_197_p4() {
    tmp_2_fu_197_p4 = j_0_reg_93.read().range(4, 1);
}

void Padding::thread_trunc_ln118_fu_120_p1() {
    trunc_ln118_fu_120_p1 = i_0_reg_82.read().range(4-1, 0);
}

void Padding::thread_zext_ln114_1_fu_181_p1() {
    zext_ln114_1_fu_181_p1 = esl_zext<6,5>(j_0_reg_93.read());
}

void Padding::thread_zext_ln114_fu_176_p1() {
    zext_ln114_fu_176_p1 = esl_zext<8,5>(j_0_reg_93.read());
}

void Padding::thread_zext_ln116_1_fu_264_p1() {
    zext_ln116_1_fu_264_p1 = esl_zext<64,8>(add_ln116_2_reg_313.read());
}

void Padding::thread_zext_ln116_2_fu_150_p1() {
    zext_ln116_2_fu_150_p1 = esl_zext<9,6>(shl_ln5_fu_142_p3.read());
}

void Padding::thread_zext_ln116_fu_259_p1() {
    zext_ln116_fu_259_p1 = esl_zext<64,32>(sext_ln116_1_fu_255_p1.read());
}

void Padding::thread_zext_ln118_1_fu_132_p1() {
    zext_ln118_1_fu_132_p1 = esl_zext<9,8>(shl_ln_fu_124_p3.read());
}

void Padding::thread_zext_ln118_fu_235_p1() {
    zext_ln118_fu_235_p1 = esl_zext<64,8>(grp_fu_104_p2.read());
}

void Padding::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln113_fu_108_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln114_fu_185_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

