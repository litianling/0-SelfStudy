// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2d_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_matrix_address0,
        input_matrix_ce0,
        input_matrix_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        out_matrix_address0,
        out_matrix_ce0,
        out_matrix_we0,
        out_matrix_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_matrix_address0;
output   input_matrix_ce0;
input  [31:0] input_matrix_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [7:0] out_matrix_address0;
output   out_matrix_ce0;
output   out_matrix_we0;
output  [31:0] out_matrix_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_matrix_ce0;
reg kernel_ce0;
reg[7:0] out_matrix_address0;
reg out_matrix_ce0;
reg out_matrix_we0;
reg[31:0] out_matrix_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] col_cast3_fu_159_p1;
reg   [31:0] col_cast3_reg_340;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_169_p2;
reg   [3:0] i_reg_349;
wire   [8:0] sub_ln30_fu_199_p2;
reg   [8:0] sub_ln30_reg_354;
wire   [0:0] icmp_ln28_fu_163_p2;
wire   [31:0] zext_ln31_fu_211_p1;
reg   [31:0] zext_ln31_reg_359;
wire   [31:0] zext_ln32_3_fu_219_p1;
reg   [31:0] zext_ln32_3_reg_364;
wire    ap_CS_fsm_state3;
wire   [3:0] j_fu_229_p2;
reg   [3:0] j_reg_373;
reg   [7:0] out_matrix_addr_reg_378;
wire   [0:0] icmp_ln29_fu_223_p2;
wire   [31:0] zext_ln32_4_fu_255_p1;
reg   [31:0] zext_ln32_4_reg_383;
wire   [31:0] sub_ln33_4_fu_276_p2;
reg   [31:0] sub_ln33_4_reg_391;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln31_fu_259_p2;
wire   [31:0] sub_ln33_2_fu_299_p2;
reg   [31:0] sub_ln33_2_reg_396;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln32_fu_304_p2;
wire   [31:0] add_ln33_2_fu_319_p2;
reg   [31:0] add_ln33_2_reg_409;
wire   [31:0] row_4_fu_324_p2;
reg   [31:0] row_4_reg_414;
wire   [31:0] col_4_fu_330_p2;
reg   [31:0] input_matrix_load_reg_424;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] tmp_reg_439;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] tmp_s_reg_444;
wire    ap_CS_fsm_state15;
reg   [3:0] col_reg_84;
reg   [3:0] row_reg_95;
reg   [31:0] empty_148_reg_106;
reg   [31:0] col_0_reg_118;
reg   [31:0] empty_149_reg_128;
wire    ap_CS_fsm_state16;
reg   [31:0] row_0_reg_140;
wire   [63:0] zext_ln30_fu_244_p1;
wire  signed [63:0] sext_ln33_fu_314_p1;
wire  signed [63:0] sext_ln33_1_fu_336_p1;
wire    ap_CS_fsm_state11;
wire   [7:0] shl_ln_fu_175_p3;
wire   [5:0] shl_ln30_2_fu_187_p3;
wire   [8:0] zext_ln30_3_fu_183_p1;
wire   [8:0] zext_ln30_4_fu_195_p1;
wire   [3:0] add_ln31_fu_205_p2;
wire   [8:0] zext_ln32_fu_215_p1;
wire   [8:0] add_ln30_fu_235_p2;
wire  signed [31:0] sext_ln30_fu_240_p1;
wire   [3:0] add_ln32_fu_249_p2;
wire   [31:0] shl_ln33_fu_264_p2;
wire   [31:0] shl_ln33_3_fu_270_p2;
wire   [31:0] sub_ln33_fu_282_p2;
wire   [31:0] shl_ln33_4_fu_287_p2;
wire   [31:0] sub_ln33_5_fu_293_p2;
wire   [31:0] add_ln33_fu_309_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_149_reg_128),
    .din1(tmp_reg_439),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_matrix_load_reg_424),
    .din1(kernel_q0),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        col_0_reg_118 <= col_4_fu_330_p2;
    end else if (((icmp_ln29_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_reg_118 <= col_cast3_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_84 <= i_reg_349;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_reg_84 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_148_reg_106 <= empty_149_reg_128;
    end else if (((icmp_ln29_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_148_reg_106 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_149_reg_128 <= empty_148_reg_106;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        empty_149_reg_128 <= tmp_s_reg_444;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_0_reg_140 <= zext_ln32_3_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        row_0_reg_140 <= row_4_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        row_reg_95 <= j_reg_373;
    end else if (((icmp_ln28_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_reg_95 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln33_2_reg_409 <= add_ln33_2_fu_319_p2;
        row_4_reg_414 <= row_4_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        col_cast3_reg_340[3 : 0] <= col_cast3_fu_159_p1[3 : 0];
        i_reg_349 <= i_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_matrix_load_reg_424 <= input_matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_373 <= j_fu_229_p2;
        zext_ln32_3_reg_364[3 : 0] <= zext_ln32_3_fu_219_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_matrix_addr_reg_378 <= zext_ln30_fu_244_p1;
        zext_ln32_4_reg_383[3 : 0] <= zext_ln32_4_fu_255_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln30_reg_354[8 : 2] <= sub_ln30_fu_199_p2[8 : 2];
        zext_ln31_reg_359[3 : 0] <= zext_ln31_fu_211_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln33_2_reg_396 <= sub_ln33_2_fu_299_p2;
        sub_ln33_4_reg_391[31 : 1] <= sub_ln33_4_fu_276_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_reg_439 <= grp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_s_reg_444 <= grp_fu_149_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln28_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_matrix_ce0 = 1'b1;
    end else begin
        input_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_matrix_address0 = out_matrix_addr_reg_378;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_matrix_address0 = zext_ln30_fu_244_p1;
    end else begin
        out_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state16))) begin
        out_matrix_ce0 = 1'b1;
    end else begin
        out_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_matrix_d0 = tmp_s_reg_444;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_matrix_d0 = 32'd0;
    end else begin
        out_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((icmp_ln29_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_matrix_we0 = 1'b1;
    end else begin
        out_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln29_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln31_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln32_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_235_p2 = (sub_ln30_reg_354 + zext_ln32_fu_215_p1);

assign add_ln31_fu_205_p2 = (col_reg_84 + 4'd3);

assign add_ln32_fu_249_p2 = (row_reg_95 + 4'd3);

assign add_ln33_2_fu_319_p2 = (sub_ln33_2_reg_396 + row_0_reg_140);

assign add_ln33_fu_309_p2 = (row_0_reg_140 + sub_ln33_4_reg_391);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign col_4_fu_330_p2 = (col_0_reg_118 + 32'd1);

assign col_cast3_fu_159_p1 = col_reg_84;

assign i_fu_169_p2 = (col_reg_84 + 4'd1);

assign icmp_ln28_fu_163_p2 = ((col_reg_84 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_223_p2 = ((row_reg_95 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_259_p2 = (($signed(col_0_reg_118) < $signed(zext_ln31_reg_359)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_304_p2 = (($signed(row_0_reg_140) < $signed(zext_ln32_4_reg_383)) ? 1'b1 : 1'b0);

assign input_matrix_address0 = sext_ln33_fu_314_p1;

assign j_fu_229_p2 = (row_reg_95 + 4'd1);

assign kernel_address0 = sext_ln33_1_fu_336_p1;

assign row_4_fu_324_p2 = (row_0_reg_140 + 32'd1);

assign sext_ln30_fu_240_p1 = $signed(add_ln30_fu_235_p2);

assign sext_ln33_1_fu_336_p1 = $signed(add_ln33_2_reg_409);

assign sext_ln33_fu_314_p1 = $signed(add_ln33_fu_309_p2);

assign shl_ln30_2_fu_187_p3 = {{col_reg_84}, {2'd0}};

assign shl_ln33_3_fu_270_p2 = col_0_reg_118 << 32'd1;

assign shl_ln33_4_fu_287_p2 = sub_ln33_fu_282_p2 << 32'd2;

assign shl_ln33_fu_264_p2 = col_0_reg_118 << 32'd4;

assign shl_ln_fu_175_p3 = {{col_reg_84}, {4'd0}};

assign sub_ln30_fu_199_p2 = (zext_ln30_3_fu_183_p1 - zext_ln30_4_fu_195_p1);

assign sub_ln33_2_fu_299_p2 = (sub_ln33_5_fu_293_p2 - zext_ln32_3_reg_364);

assign sub_ln33_4_fu_276_p2 = (shl_ln33_fu_264_p2 - shl_ln33_3_fu_270_p2);

assign sub_ln33_5_fu_293_p2 = (shl_ln33_4_fu_287_p2 - sub_ln33_fu_282_p2);

assign sub_ln33_fu_282_p2 = (col_0_reg_118 - col_cast3_reg_340);

assign zext_ln30_3_fu_183_p1 = shl_ln_fu_175_p3;

assign zext_ln30_4_fu_195_p1 = shl_ln30_2_fu_187_p3;

assign zext_ln30_fu_244_p1 = $unsigned(sext_ln30_fu_240_p1);

assign zext_ln31_fu_211_p1 = add_ln31_fu_205_p2;

assign zext_ln32_3_fu_219_p1 = row_reg_95;

assign zext_ln32_4_fu_255_p1 = add_ln32_fu_249_p2;

assign zext_ln32_fu_215_p1 = row_reg_95;

always @ (posedge ap_clk) begin
    col_cast3_reg_340[31:4] <= 28'b0000000000000000000000000000;
    sub_ln30_reg_354[1:0] <= 2'b00;
    zext_ln31_reg_359[31:4] <= 28'b0000000000000000000000000000;
    zext_ln32_3_reg_364[31:4] <= 28'b0000000000000000000000000000;
    zext_ln32_4_reg_383[31:4] <= 28'b0000000000000000000000000000;
    sub_ln33_4_reg_391[0] <= 1'b0;
end

endmodule //Conv2d_3
