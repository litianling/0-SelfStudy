// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_matrix_address0,
        input_matrix_ce0,
        input_matrix_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        out_matrix_address0,
        out_matrix_ce0,
        out_matrix_we0,
        out_matrix_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_matrix_address0;
output   input_matrix_ce0;
input  [31:0] input_matrix_q0;
output  [9:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [3:0] out_matrix_address0;
output   out_matrix_ce0;
output   out_matrix_we0;
output  [31:0] out_matrix_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_matrix_ce0;
reg kernel_ce0;
reg[3:0] out_matrix_address0;
reg out_matrix_ce0;
reg out_matrix_we0;
reg[31:0] out_matrix_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] col_cast6_fu_186_p1;
reg   [2:0] col_cast6_reg_400;
wire    ap_CS_fsm_state2;
wire   [3:0] col_cast_fu_194_p1;
reg   [3:0] col_cast_reg_405;
wire   [1:0] i_fu_204_p2;
reg   [1:0] i_reg_413;
wire   [4:0] sub_ln30_fu_222_p2;
reg   [4:0] sub_ln30_reg_418;
wire   [0:0] icmp_ln28_fu_198_p2;
wire   [2:0] zext_ln32_10_fu_232_p1;
reg   [2:0] zext_ln32_10_reg_423;
wire    ap_CS_fsm_state3;
wire   [8:0] zext_ln32_11_fu_236_p1;
reg   [8:0] zext_ln32_11_reg_428;
wire   [1:0] j_fu_246_p2;
reg   [1:0] j_reg_436;
reg   [3:0] out_matrix_addr_reg_441;
wire   [0:0] icmp_ln29_fu_240_p2;
wire   [2:0] add_ln28_fu_266_p2;
wire   [8:0] sub_ln33_9_fu_306_p2;
reg   [8:0] sub_ln33_9_reg_454;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln31_fu_276_p2;
wire   [8:0] sub_ln33_5_fu_343_p2;
reg   [8:0] sub_ln33_5_reg_459;
wire   [2:0] add_ln29_fu_348_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln32_fu_358_p2;
wire   [2:0] row_7_fu_388_p2;
reg   [2:0] row_7_reg_482;
wire   [2:0] col_7_fu_394_p2;
reg   [31:0] input_matrix_load_reg_492;
wire    ap_CS_fsm_state6;
reg   [31:0] kernel_load_reg_497;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] tmp_reg_502;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_177_p2;
reg   [31:0] tmp_s_reg_507;
wire    ap_CS_fsm_state15;
reg   [2:0] indvars_iv5_reg_88;
reg   [1:0] col_reg_100;
reg   [2:0] indvars_iv_reg_111;
reg   [1:0] row_reg_123;
reg   [31:0] empty_162_reg_134;
reg   [2:0] col_0_reg_146;
reg   [31:0] empty_164_reg_156;
wire    ap_CS_fsm_state16;
reg   [2:0] row_0_reg_168;
wire   [63:0] zext_ln30_fu_261_p1;
wire   [63:0] zext_ln33_fu_373_p1;
wire  signed [63:0] sext_ln33_1_fu_383_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire   [3:0] shl_ln_fu_210_p3;
wire   [4:0] zext_ln30_8_fu_218_p1;
wire   [4:0] col_cast5_fu_190_p1;
wire   [4:0] zext_ln32_fu_228_p1;
wire   [4:0] add_ln30_fu_252_p2;
wire  signed [31:0] sext_ln30_fu_257_p1;
wire   [7:0] shl_ln2_fu_282_p3;
wire   [3:0] shl_ln33_9_fu_294_p3;
wire   [8:0] zext_ln33_3_fu_290_p1;
wire   [8:0] zext_ln33_4_fu_302_p1;
wire   [3:0] col_0_cast2_fu_272_p1;
wire   [3:0] sub_ln33_fu_312_p2;
wire   [5:0] shl_ln33_1_fu_325_p3;
wire   [8:0] shl_ln33_s_fu_317_p3;
wire  signed [8:0] sext_ln33_fu_333_p1;
wire   [8:0] sub_ln33_10_fu_337_p2;
wire   [8:0] row_0_cast_fu_354_p1;
wire   [8:0] add_ln33_fu_364_p2;
wire  signed [31:0] sext_ln33_3_fu_369_p1;
wire   [8:0] add_ln33_2_fu_378_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

forw_back_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fadd_32bkb_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_164_reg_156),
    .din1(tmp_reg_502),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

forw_back_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_fmul_32cud_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_matrix_load_reg_492),
    .din1(kernel_load_reg_497),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        col_0_reg_146 <= col_7_fu_394_p2;
    end else if (((icmp_ln29_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_reg_146 <= col_cast6_reg_400;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_reg_100 <= 2'd0;
    end else if (((icmp_ln29_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_100 <= i_reg_413;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_162_reg_134 <= empty_164_reg_156;
    end else if (((icmp_ln29_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_162_reg_134 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_164_reg_156 <= empty_162_reg_134;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        empty_164_reg_156 <= tmp_s_reg_507;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv5_reg_88 <= 3'd3;
    end else if (((icmp_ln29_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv5_reg_88 <= add_ln28_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv_reg_111 <= 3'd3;
    end else if (((icmp_ln31_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        indvars_iv_reg_111 <= add_ln29_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        row_0_reg_168 <= zext_ln32_10_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        row_0_reg_168 <= row_7_reg_482;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_reg_123 <= 2'd0;
    end else if (((icmp_ln31_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_reg_123 <= j_reg_436;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        col_cast6_reg_400[1 : 0] <= col_cast6_fu_186_p1[1 : 0];
        col_cast_reg_405[1 : 0] <= col_cast_fu_194_p1[1 : 0];
        i_reg_413 <= i_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_matrix_load_reg_492 <= input_matrix_q0;
        kernel_load_reg_497 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_436 <= j_fu_246_p2;
        zext_ln32_10_reg_423[1 : 0] <= zext_ln32_10_fu_232_p1[1 : 0];
        zext_ln32_11_reg_428[1 : 0] <= zext_ln32_11_fu_236_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_matrix_addr_reg_441 <= zext_ln30_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        row_7_reg_482 <= row_7_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln30_reg_418 <= sub_ln30_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln33_5_reg_459 <= sub_ln33_5_fu_343_p2;
        sub_ln33_9_reg_454[8 : 1] <= sub_ln33_9_fu_306_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_reg_502 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_s_reg_507 <= grp_fu_177_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln28_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_matrix_ce0 = 1'b1;
    end else begin
        input_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_matrix_address0 = out_matrix_addr_reg_441;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_matrix_address0 = zext_ln30_fu_261_p1;
    end else begin
        out_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state16))) begin
        out_matrix_ce0 = 1'b1;
    end else begin
        out_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_matrix_d0 = tmp_s_reg_507;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_matrix_d0 = 32'd0;
    end else begin
        out_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((icmp_ln29_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_matrix_we0 = 1'b1;
    end else begin
        out_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln29_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln31_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln32_fu_358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_266_p2 = (indvars_iv5_reg_88 + 3'd1);

assign add_ln29_fu_348_p2 = (indvars_iv_reg_111 + 3'd1);

assign add_ln30_fu_252_p2 = (sub_ln30_reg_418 + zext_ln32_fu_228_p1);

assign add_ln33_2_fu_378_p2 = (row_0_cast_fu_354_p1 + sub_ln33_5_reg_459);

assign add_ln33_fu_364_p2 = (sub_ln33_9_reg_454 + row_0_cast_fu_354_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign col_0_cast2_fu_272_p1 = col_0_reg_146;

assign col_7_fu_394_p2 = (col_0_reg_146 + 3'd1);

assign col_cast5_fu_190_p1 = col_reg_100;

assign col_cast6_fu_186_p1 = col_reg_100;

assign col_cast_fu_194_p1 = col_reg_100;

assign i_fu_204_p2 = (col_reg_100 + 2'd1);

assign icmp_ln28_fu_198_p2 = ((indvars_iv5_reg_88 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_240_p2 = ((indvars_iv_reg_111 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_276_p2 = ((col_0_reg_146 == indvars_iv5_reg_88) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_358_p2 = ((row_0_reg_168 == indvars_iv_reg_111) ? 1'b1 : 1'b0);

assign input_matrix_address0 = zext_ln33_fu_373_p1;

assign j_fu_246_p2 = (row_reg_123 + 2'd1);

assign kernel_address0 = sext_ln33_1_fu_383_p1;

assign row_0_cast_fu_354_p1 = row_0_reg_168;

assign row_7_fu_388_p2 = (row_0_reg_168 + 3'd1);

assign sext_ln30_fu_257_p1 = $signed(add_ln30_fu_252_p2);

assign sext_ln33_1_fu_383_p1 = $signed(add_ln33_2_fu_378_p2);

assign sext_ln33_3_fu_369_p1 = $signed(add_ln33_fu_364_p2);

assign sext_ln33_fu_333_p1 = $signed(shl_ln33_1_fu_325_p3);

assign shl_ln2_fu_282_p3 = {{col_0_reg_146}, {5'd0}};

assign shl_ln33_1_fu_325_p3 = {{sub_ln33_fu_312_p2}, {2'd0}};

assign shl_ln33_9_fu_294_p3 = {{col_0_reg_146}, {1'd0}};

assign shl_ln33_s_fu_317_p3 = {{sub_ln33_fu_312_p2}, {5'd0}};

assign shl_ln_fu_210_p3 = {{col_reg_100}, {2'd0}};

assign sub_ln30_fu_222_p2 = (zext_ln30_8_fu_218_p1 - col_cast5_fu_190_p1);

assign sub_ln33_10_fu_337_p2 = ($signed(shl_ln33_s_fu_317_p3) - $signed(sext_ln33_fu_333_p1));

assign sub_ln33_5_fu_343_p2 = (sub_ln33_10_fu_337_p2 - zext_ln32_11_reg_428);

assign sub_ln33_9_fu_306_p2 = (zext_ln33_3_fu_290_p1 - zext_ln33_4_fu_302_p1);

assign sub_ln33_fu_312_p2 = (col_0_cast2_fu_272_p1 - col_cast_reg_405);

assign zext_ln30_8_fu_218_p1 = shl_ln_fu_210_p3;

assign zext_ln30_fu_261_p1 = $unsigned(sext_ln30_fu_257_p1);

assign zext_ln32_10_fu_232_p1 = row_reg_123;

assign zext_ln32_11_fu_236_p1 = row_reg_123;

assign zext_ln32_fu_228_p1 = row_reg_123;

assign zext_ln33_3_fu_290_p1 = shl_ln2_fu_282_p3;

assign zext_ln33_4_fu_302_p1 = shl_ln33_9_fu_294_p3;

assign zext_ln33_fu_373_p1 = $unsigned(sext_ln33_3_fu_369_p1);

always @ (posedge ap_clk) begin
    col_cast6_reg_400[2] <= 1'b0;
    col_cast_reg_405[3:2] <= 2'b00;
    zext_ln32_10_reg_423[2] <= 1'b0;
    zext_ln32_11_reg_428[8:2] <= 7'b0000000;
    sub_ln33_9_reg_454[0] <= 1'b0;
end

endmodule //Conv2d
