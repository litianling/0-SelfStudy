// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="forw_back,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.195200,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=91,HLS_SYN_FF=17645,HLS_SYN_LUT=30286,HLS_VERSION=2019_1}" *)

module forw_back (
        ap_clk,
        ap_rst_n,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 79'd1;
parameter    ap_ST_fsm_state2 = 79'd2;
parameter    ap_ST_fsm_pp0_stage0 = 79'd4;
parameter    ap_ST_fsm_state6 = 79'd8;
parameter    ap_ST_fsm_state7 = 79'd16;
parameter    ap_ST_fsm_state8 = 79'd32;
parameter    ap_ST_fsm_state9 = 79'd64;
parameter    ap_ST_fsm_state10 = 79'd128;
parameter    ap_ST_fsm_pp1_stage0 = 79'd256;
parameter    ap_ST_fsm_state14 = 79'd512;
parameter    ap_ST_fsm_state15 = 79'd1024;
parameter    ap_ST_fsm_state16 = 79'd2048;
parameter    ap_ST_fsm_state17 = 79'd4096;
parameter    ap_ST_fsm_state18 = 79'd8192;
parameter    ap_ST_fsm_pp2_stage0 = 79'd16384;
parameter    ap_ST_fsm_state22 = 79'd32768;
parameter    ap_ST_fsm_state23 = 79'd65536;
parameter    ap_ST_fsm_state24 = 79'd131072;
parameter    ap_ST_fsm_state25 = 79'd262144;
parameter    ap_ST_fsm_state26 = 79'd524288;
parameter    ap_ST_fsm_pp3_stage0 = 79'd1048576;
parameter    ap_ST_fsm_state30 = 79'd2097152;
parameter    ap_ST_fsm_state31 = 79'd4194304;
parameter    ap_ST_fsm_state32 = 79'd8388608;
parameter    ap_ST_fsm_state33 = 79'd16777216;
parameter    ap_ST_fsm_state34 = 79'd33554432;
parameter    ap_ST_fsm_state35 = 79'd67108864;
parameter    ap_ST_fsm_pp4_stage0 = 79'd134217728;
parameter    ap_ST_fsm_state39 = 79'd268435456;
parameter    ap_ST_fsm_state40 = 79'd536870912;
parameter    ap_ST_fsm_state41 = 79'd1073741824;
parameter    ap_ST_fsm_state42 = 79'd2147483648;
parameter    ap_ST_fsm_state43 = 79'd4294967296;
parameter    ap_ST_fsm_state44 = 79'd8589934592;
parameter    ap_ST_fsm_state45 = 79'd17179869184;
parameter    ap_ST_fsm_state46 = 79'd34359738368;
parameter    ap_ST_fsm_state47 = 79'd68719476736;
parameter    ap_ST_fsm_state48 = 79'd137438953472;
parameter    ap_ST_fsm_state49 = 79'd274877906944;
parameter    ap_ST_fsm_state50 = 79'd549755813888;
parameter    ap_ST_fsm_state51 = 79'd1099511627776;
parameter    ap_ST_fsm_state52 = 79'd2199023255552;
parameter    ap_ST_fsm_state53 = 79'd4398046511104;
parameter    ap_ST_fsm_state54 = 79'd8796093022208;
parameter    ap_ST_fsm_pp5_stage0 = 79'd17592186044416;
parameter    ap_ST_fsm_state58 = 79'd35184372088832;
parameter    ap_ST_fsm_state59 = 79'd70368744177664;
parameter    ap_ST_fsm_state60 = 79'd140737488355328;
parameter    ap_ST_fsm_state61 = 79'd281474976710656;
parameter    ap_ST_fsm_state62 = 79'd562949953421312;
parameter    ap_ST_fsm_state63 = 79'd1125899906842624;
parameter    ap_ST_fsm_state64 = 79'd2251799813685248;
parameter    ap_ST_fsm_state65 = 79'd4503599627370496;
parameter    ap_ST_fsm_pp6_stage0 = 79'd9007199254740992;
parameter    ap_ST_fsm_state69 = 79'd18014398509481984;
parameter    ap_ST_fsm_state70 = 79'd36028797018963968;
parameter    ap_ST_fsm_state71 = 79'd72057594037927936;
parameter    ap_ST_fsm_state72 = 79'd144115188075855872;
parameter    ap_ST_fsm_state73 = 79'd288230376151711744;
parameter    ap_ST_fsm_state74 = 79'd576460752303423488;
parameter    ap_ST_fsm_state75 = 79'd1152921504606846976;
parameter    ap_ST_fsm_pp7_stage0 = 79'd2305843009213693952;
parameter    ap_ST_fsm_state79 = 79'd4611686018427387904;
parameter    ap_ST_fsm_state80 = 79'd9223372036854775808;
parameter    ap_ST_fsm_state81 = 79'd18446744073709551616;
parameter    ap_ST_fsm_state82 = 79'd36893488147419103232;
parameter    ap_ST_fsm_state83 = 79'd73786976294838206464;
parameter    ap_ST_fsm_state84 = 79'd147573952589676412928;
parameter    ap_ST_fsm_state85 = 79'd295147905179352825856;
parameter    ap_ST_fsm_pp8_stage0 = 79'd590295810358705651712;
parameter    ap_ST_fsm_state89 = 79'd1180591620717411303424;
parameter    ap_ST_fsm_state90 = 79'd2361183241434822606848;
parameter    ap_ST_fsm_state91 = 79'd4722366482869645213696;
parameter    ap_ST_fsm_state92 = 79'd9444732965739290427392;
parameter    ap_ST_fsm_state93 = 79'd18889465931478580854784;
parameter    ap_ST_fsm_state94 = 79'd37778931862957161709568;
parameter    ap_ST_fsm_state95 = 79'd75557863725914323419136;
parameter    ap_ST_fsm_pp9_stage0 = 79'd151115727451828646838272;
parameter    ap_ST_fsm_state99 = 79'd302231454903657293676544;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_AWADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_AWID;
output  [7:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [C_M_AXI_DATA_AWUSER_WIDTH - 1:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_WDATA;
output  [C_M_AXI_DATA_WSTRB_WIDTH - 1:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_WID;
output  [C_M_AXI_DATA_WUSER_WIDTH - 1:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_ARADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_ARID;
output  [7:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [C_M_AXI_DATA_ARUSER_WIDTH - 1:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_RID;
input  [C_M_AXI_DATA_RUSER_WIDTH - 1:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_BID;
input  [C_M_AXI_DATA_BUSER_WIDTH - 1:0] m_axi_data_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [78:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] flag;
wire   [31:0] in_r;
wire   [31:0] conv1;
wire   [31:0] conv2;
wire   [31:0] fc1;
wire   [31:0] fc2;
wire   [31:0] out_r;
wire   [31:0] label_r;
wire   [31:0] lr;
reg   [3:0] conv_kernel_1_address0;
reg    conv_kernel_1_ce0;
reg    conv_kernel_1_we0;
reg   [31:0] conv_kernel_1_d0;
wire   [31:0] conv_kernel_1_q0;
reg   [3:0] conv_kernel_2_address0;
reg    conv_kernel_2_ce0;
reg    conv_kernel_2_we0;
reg   [31:0] conv_kernel_2_d0;
wire   [31:0] conv_kernel_2_q0;
reg   [9:0] fc_hidden_layer1_address0;
reg    fc_hidden_layer1_ce0;
reg    fc_hidden_layer1_we0;
reg   [31:0] fc_hidden_layer1_d0;
wire   [31:0] fc_hidden_layer1_q0;
reg   [7:0] fc_hidden_layer2_address0;
reg    fc_hidden_layer2_ce0;
reg    fc_hidden_layer2_we0;
reg   [31:0] fc_hidden_layer2_d0;
wire   [31:0] fc_hidden_layer2_q0;
reg   [9:0] mnist_data_address0;
reg    mnist_data_ce0;
reg    mnist_data_we0;
wire   [31:0] mnist_data_q0;
reg   [7:0] max_poo_out_1_address0;
reg    max_poo_out_1_ce0;
reg    max_poo_out_1_we0;
wire   [31:0] max_poo_out_1_q0;
reg   [7:0] max_poo_locate_1_address0;
reg    max_poo_locate_1_ce0;
reg    max_poo_locate_1_we0;
wire   [31:0] max_poo_locate_1_q0;
reg   [5:0] max_poo_locate_2_address0;
reg    max_poo_locate_2_ce0;
reg    max_poo_locate_2_we0;
wire   [31:0] max_poo_locate_2_q0;
reg   [5:0] fc_in_1_0_address0;
reg    fc_in_1_0_ce0;
reg    fc_in_1_0_we0;
wire   [31:0] fc_in_1_0_q0;
reg   [4:0] fc_out_1_0_address0;
reg    fc_out_1_0_ce0;
reg    fc_out_1_0_we0;
wire   [31:0] fc_out_1_0_q0;
reg   [4:0] fc_in_2_relu1_0_address0;
reg    fc_in_2_relu1_0_ce0;
reg    fc_in_2_relu1_0_we0;
wire   [31:0] fc_in_2_relu1_0_q0;
reg   [3:0] probability_result_address0;
reg    probability_result_ce0;
reg    probability_result_we0;
wire   [31:0] probability_result_q0;
reg    data_blk_n_AW;
wire    ap_CS_fsm_state35;
reg    data_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln232_reg_1143;
reg   [0:0] icmp_ln232_reg_1143_pp4_iter1_reg;
reg    data_blk_n_B;
wire    ap_CS_fsm_state43;
reg    data_blk_n_AR;
wire    ap_CS_fsm_state89;
reg    data_blk_n_R;
wire    ap_CS_fsm_pp9_stage0;
reg    ap_enable_reg_pp9_iter1;
wire    ap_block_pp9_stage0;
reg   [0:0] icmp_ln219_reg_1218;
wire    ap_CS_fsm_state26;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln238_reg_1124;
reg   [0:0] icmp_ln238_reg_1124_pp3_iter1_reg;
wire    ap_CS_fsm_state34;
reg   [0:0] icmp_ln221_reg_1051;
reg   [0:0] icmp_ln224_reg_1055;
reg   [0:0] icmp_ln227_reg_1059;
reg   [0:0] icmp_ln231_reg_1063;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter1;
wire    ap_block_pp8_stage0;
reg   [0:0] icmp_ln218_reg_1204;
wire    ap_CS_fsm_state18;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln237_reg_1105;
reg   [0:0] icmp_ln237_reg_1105_pp2_iter1_reg;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter1;
wire    ap_block_pp7_stage0;
reg   [0:0] icmp_ln217_reg_1190;
wire    ap_CS_fsm_state10;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln236_reg_1086;
reg   [0:0] icmp_ln236_reg_1086_pp1_iter1_reg;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln216_reg_1176;
wire    ap_CS_fsm_state2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln235_reg_1067;
reg   [0:0] icmp_ln235_reg_1067_pp0_iter1_reg;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln222_reg_1162;
reg    data_AWVALID;
wire    data_AWREADY;
reg   [31:0] data_AWADDR;
reg   [31:0] data_AWLEN;
reg    data_WVALID;
wire    data_WREADY;
reg   [31:0] data_WDATA;
reg    data_ARVALID;
wire    data_ARREADY;
reg   [31:0] data_ARADDR;
reg   [0:0] data_ARID;
reg   [31:0] data_ARLEN;
reg   [2:0] data_ARSIZE;
reg   [1:0] data_ARBURST;
reg   [1:0] data_ARLOCK;
reg   [3:0] data_ARCACHE;
reg   [2:0] data_ARPROT;
reg   [3:0] data_ARQOS;
reg   [3:0] data_ARREGION;
reg   [0:0] data_ARUSER;
wire    data_RVALID;
reg    data_RREADY;
wire   [31:0] data_RDATA;
wire    data_RLAST;
wire   [0:0] data_RID;
wire   [0:0] data_RUSER;
wire   [1:0] data_RRESP;
wire    data_BVALID;
reg    data_BREADY;
wire   [1:0] data_BRESP;
wire   [0:0] data_BID;
wire   [0:0] data_BUSER;
reg   [3:0] phi_ln235_reg_484;
reg   [3:0] phi_ln236_reg_495;
reg   [9:0] phi_ln237_reg_506;
reg   [7:0] phi_ln238_reg_517;
reg   [3:0] phi_ln232_reg_528;
reg   [9:0] phi_ln222_reg_539;
reg   [9:0] phi_ln222_reg_539_pp5_iter1_reg;
wire    ap_block_state55_pp5_stage0_iter0;
reg    ap_block_state56_pp5_stage0_iter1;
wire    ap_block_state57_pp5_stage0_iter2;
reg    ap_block_pp5_stage0_11001;
reg   [3:0] phi_ln216_reg_551;
reg   [3:0] phi_ln216_reg_551_pp6_iter1_reg;
wire    ap_block_state66_pp6_stage0_iter0;
reg    ap_block_state67_pp6_stage0_iter1;
wire    ap_block_state68_pp6_stage0_iter2;
reg    ap_block_pp6_stage0_11001;
reg   [3:0] phi_ln217_reg_563;
reg   [3:0] phi_ln217_reg_563_pp7_iter1_reg;
wire    ap_block_state76_pp7_stage0_iter0;
reg    ap_block_state77_pp7_stage0_iter1;
wire    ap_block_state78_pp7_stage0_iter2;
reg    ap_block_pp7_stage0_11001;
reg   [9:0] phi_ln218_reg_575;
reg   [9:0] phi_ln218_reg_575_pp8_iter1_reg;
wire    ap_block_state86_pp8_stage0_iter0;
reg    ap_block_state87_pp8_stage0_iter1;
wire    ap_block_state88_pp8_stage0_iter2;
reg    ap_block_pp8_stage0_11001;
reg   [7:0] phi_ln219_reg_587;
reg   [7:0] phi_ln219_reg_587_pp9_iter1_reg;
wire    ap_block_state96_pp9_stage0_iter0;
reg    ap_block_state97_pp9_stage0_iter1;
wire    ap_block_state98_pp9_stage0_iter2;
reg    ap_block_pp9_stage0_11001;
reg   [31:0] label_read_reg_997;
reg   [29:0] lr1_reg_1002;
reg   [31:0] data_addr_reg_1007;
reg   [31:0] data_addr_1_reg_1013;
reg   [31:0] data_addr_2_reg_1020;
reg   [31:0] data_addr_3_reg_1027;
reg   [31:0] data_addr_4_reg_1034;
reg   [31:0] data_addr_5_reg_1041;
wire   [0:0] icmp_ln215_fu_797_p2;
wire   [0:0] icmp_ln221_fu_803_p2;
wire   [0:0] icmp_ln224_fu_809_p2;
wire   [0:0] icmp_ln227_fu_815_p2;
wire   [0:0] icmp_ln231_fu_821_p2;
wire   [0:0] icmp_ln235_fu_827_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln235_fu_833_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] conv_kernel_1_load_reg_1081;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] icmp_ln236_fu_844_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_state13_pp1_stage0_iter2;
reg    ap_block_state13_io;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] add_ln236_fu_850_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] conv_kernel_2_load_reg_1100;
reg    ap_enable_reg_pp1_iter1;
wire   [0:0] icmp_ln237_fu_861_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state19_pp2_stage0_iter0;
wire    ap_block_state20_pp2_stage0_iter1;
wire    ap_block_state21_pp2_stage0_iter2;
reg    ap_block_state21_io;
reg    ap_block_pp2_stage0_11001;
wire   [9:0] add_ln237_fu_867_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] fc_hidden_layer1_loa_reg_1119;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] icmp_ln238_fu_878_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state27_pp3_stage0_iter0;
wire    ap_block_state28_pp3_stage0_iter1;
wire    ap_block_state29_pp3_stage0_iter2;
reg    ap_block_state29_io;
reg    ap_block_pp3_stage0_11001;
wire   [7:0] add_ln238_fu_884_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] fc_hidden_layer2_loa_reg_1138;
reg    ap_enable_reg_pp3_iter1;
wire   [0:0] icmp_ln232_fu_895_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state36_pp4_stage0_iter0;
wire    ap_block_state37_pp4_stage0_iter1;
wire    ap_block_state38_pp4_stage0_iter2;
reg    ap_block_state38_io;
reg    ap_block_pp4_stage0_11001;
wire   [3:0] add_ln232_fu_901_p2;
reg    ap_enable_reg_pp4_iter0;
reg   [31:0] probability_result_l_reg_1157;
wire   [0:0] icmp_ln222_fu_912_p2;
reg   [0:0] icmp_ln222_reg_1162_pp5_iter1_reg;
wire   [9:0] add_ln222_fu_918_p2;
reg   [9:0] add_ln222_reg_1166;
reg    ap_enable_reg_pp5_iter0;
reg   [31:0] data_addr_5_read_reg_1171;
wire   [0:0] icmp_ln216_fu_929_p2;
reg   [0:0] icmp_ln216_reg_1176_pp6_iter1_reg;
wire   [3:0] add_ln216_fu_935_p2;
reg   [3:0] add_ln216_reg_1180;
reg    ap_enable_reg_pp6_iter0;
reg   [31:0] data_addr_4_read_reg_1185;
wire   [0:0] icmp_ln217_fu_946_p2;
reg   [0:0] icmp_ln217_reg_1190_pp7_iter1_reg;
wire   [3:0] add_ln217_fu_952_p2;
reg   [3:0] add_ln217_reg_1194;
reg    ap_enable_reg_pp7_iter0;
reg   [31:0] data_addr_3_read_reg_1199;
wire   [0:0] icmp_ln218_fu_963_p2;
reg   [0:0] icmp_ln218_reg_1204_pp8_iter1_reg;
wire   [9:0] add_ln218_fu_969_p2;
reg   [9:0] add_ln218_reg_1208;
reg    ap_enable_reg_pp8_iter0;
reg   [31:0] data_addr_2_read_reg_1213;
wire   [0:0] icmp_ln219_fu_980_p2;
reg   [0:0] icmp_ln219_reg_1218_pp9_iter1_reg;
wire   [7:0] add_ln219_fu_986_p2;
reg   [7:0] add_ln219_reg_1222;
reg    ap_enable_reg_pp9_iter0;
reg   [31:0] data_addr_1_read_reg_1227;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state19;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state27;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state36;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state54;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state55;
reg    ap_enable_reg_pp5_iter2;
wire    ap_CS_fsm_state65;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state66;
reg    ap_enable_reg_pp6_iter2;
wire    ap_CS_fsm_state75;
reg    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state76;
reg    ap_enable_reg_pp7_iter2;
wire    ap_CS_fsm_state85;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state86;
reg    ap_enable_reg_pp8_iter2;
wire    ap_CS_fsm_state95;
reg    ap_block_pp9_stage0_subdone;
reg    ap_condition_pp9_exit_iter0_state96;
reg    ap_enable_reg_pp9_iter2;
wire    grp_forward_fu_599_ap_start;
wire    grp_forward_fu_599_ap_done;
wire    grp_forward_fu_599_ap_idle;
wire    grp_forward_fu_599_ap_ready;
wire   [9:0] grp_forward_fu_599_mnist_data_address0;
wire    grp_forward_fu_599_mnist_data_ce0;
wire   [3:0] grp_forward_fu_599_conv_kernel_1_address0;
wire    grp_forward_fu_599_conv_kernel_1_ce0;
wire   [7:0] grp_forward_fu_599_max_poo_out_1_address0;
wire    grp_forward_fu_599_max_poo_out_1_ce0;
wire    grp_forward_fu_599_max_poo_out_1_we0;
wire   [31:0] grp_forward_fu_599_max_poo_out_1_d0;
wire   [7:0] grp_forward_fu_599_max_poo_locate_1_address0;
wire    grp_forward_fu_599_max_poo_locate_1_ce0;
wire    grp_forward_fu_599_max_poo_locate_1_we0;
wire   [31:0] grp_forward_fu_599_max_poo_locate_1_d0;
wire   [3:0] grp_forward_fu_599_conv_kernel_2_address0;
wire    grp_forward_fu_599_conv_kernel_2_ce0;
wire   [5:0] grp_forward_fu_599_max_poo_locate_2_address0;
wire    grp_forward_fu_599_max_poo_locate_2_ce0;
wire    grp_forward_fu_599_max_poo_locate_2_we0;
wire   [31:0] grp_forward_fu_599_max_poo_locate_2_d0;
wire   [5:0] grp_forward_fu_599_fc_in_1_0_address0;
wire    grp_forward_fu_599_fc_in_1_0_ce0;
wire    grp_forward_fu_599_fc_in_1_0_we0;
wire   [31:0] grp_forward_fu_599_fc_in_1_0_d0;
wire   [4:0] grp_forward_fu_599_fc_out_1_0_address0;
wire    grp_forward_fu_599_fc_out_1_0_ce0;
wire    grp_forward_fu_599_fc_out_1_0_we0;
wire   [31:0] grp_forward_fu_599_fc_out_1_0_d0;
wire   [9:0] grp_forward_fu_599_fc_hidden_layer1_address0;
wire    grp_forward_fu_599_fc_hidden_layer1_ce0;
wire   [4:0] grp_forward_fu_599_fc_in_2_relu1_0_address0;
wire    grp_forward_fu_599_fc_in_2_relu1_0_ce0;
wire    grp_forward_fu_599_fc_in_2_relu1_0_we0;
wire   [31:0] grp_forward_fu_599_fc_in_2_relu1_0_d0;
wire   [7:0] grp_forward_fu_599_fc_hidden_layer2_address0;
wire    grp_forward_fu_599_fc_hidden_layer2_ce0;
wire   [3:0] grp_forward_fu_599_probability_result_address0;
wire    grp_forward_fu_599_probability_result_ce0;
wire    grp_forward_fu_599_probability_result_we0;
wire   [31:0] grp_forward_fu_599_probability_result_d0;
wire    grp_backward_fu_635_ap_start;
wire    grp_backward_fu_635_ap_done;
wire    grp_backward_fu_635_ap_idle;
wire    grp_backward_fu_635_ap_ready;
wire    grp_backward_fu_635_m_axi_lr_in_AWVALID;
wire   [31:0] grp_backward_fu_635_m_axi_lr_in_AWADDR;
wire   [0:0] grp_backward_fu_635_m_axi_lr_in_AWID;
wire   [31:0] grp_backward_fu_635_m_axi_lr_in_AWLEN;
wire   [2:0] grp_backward_fu_635_m_axi_lr_in_AWSIZE;
wire   [1:0] grp_backward_fu_635_m_axi_lr_in_AWBURST;
wire   [1:0] grp_backward_fu_635_m_axi_lr_in_AWLOCK;
wire   [3:0] grp_backward_fu_635_m_axi_lr_in_AWCACHE;
wire   [2:0] grp_backward_fu_635_m_axi_lr_in_AWPROT;
wire   [3:0] grp_backward_fu_635_m_axi_lr_in_AWQOS;
wire   [3:0] grp_backward_fu_635_m_axi_lr_in_AWREGION;
wire   [0:0] grp_backward_fu_635_m_axi_lr_in_AWUSER;
wire    grp_backward_fu_635_m_axi_lr_in_WVALID;
wire   [31:0] grp_backward_fu_635_m_axi_lr_in_WDATA;
wire   [3:0] grp_backward_fu_635_m_axi_lr_in_WSTRB;
wire    grp_backward_fu_635_m_axi_lr_in_WLAST;
wire   [0:0] grp_backward_fu_635_m_axi_lr_in_WID;
wire   [0:0] grp_backward_fu_635_m_axi_lr_in_WUSER;
wire    grp_backward_fu_635_m_axi_lr_in_ARVALID;
wire   [31:0] grp_backward_fu_635_m_axi_lr_in_ARADDR;
wire   [0:0] grp_backward_fu_635_m_axi_lr_in_ARID;
wire   [31:0] grp_backward_fu_635_m_axi_lr_in_ARLEN;
wire   [2:0] grp_backward_fu_635_m_axi_lr_in_ARSIZE;
wire   [1:0] grp_backward_fu_635_m_axi_lr_in_ARBURST;
wire   [1:0] grp_backward_fu_635_m_axi_lr_in_ARLOCK;
wire   [3:0] grp_backward_fu_635_m_axi_lr_in_ARCACHE;
wire   [2:0] grp_backward_fu_635_m_axi_lr_in_ARPROT;
wire   [3:0] grp_backward_fu_635_m_axi_lr_in_ARQOS;
wire   [3:0] grp_backward_fu_635_m_axi_lr_in_ARREGION;
wire   [0:0] grp_backward_fu_635_m_axi_lr_in_ARUSER;
wire    grp_backward_fu_635_m_axi_lr_in_RREADY;
wire    grp_backward_fu_635_m_axi_lr_in_BREADY;
wire   [3:0] grp_backward_fu_635_probability_result_address0;
wire    grp_backward_fu_635_probability_result_ce0;
wire   [4:0] grp_backward_fu_635_fc_in_2_relu1_0_address0;
wire    grp_backward_fu_635_fc_in_2_relu1_0_ce0;
wire   [7:0] grp_backward_fu_635_fc_hidden_layer2_address0;
wire    grp_backward_fu_635_fc_hidden_layer2_ce0;
wire    grp_backward_fu_635_fc_hidden_layer2_we0;
wire   [31:0] grp_backward_fu_635_fc_hidden_layer2_d0;
wire   [4:0] grp_backward_fu_635_fc_out_1_0_address0;
wire    grp_backward_fu_635_fc_out_1_0_ce0;
wire   [5:0] grp_backward_fu_635_fc_in_1_0_address0;
wire    grp_backward_fu_635_fc_in_1_0_ce0;
wire   [9:0] grp_backward_fu_635_fc_hidden_layer1_address0;
wire    grp_backward_fu_635_fc_hidden_layer1_ce0;
wire    grp_backward_fu_635_fc_hidden_layer1_we0;
wire   [31:0] grp_backward_fu_635_fc_hidden_layer1_d0;
wire   [5:0] grp_backward_fu_635_max_poo_locate_2_address0;
wire    grp_backward_fu_635_max_poo_locate_2_ce0;
wire   [7:0] grp_backward_fu_635_max_poo_out_1_address0;
wire    grp_backward_fu_635_max_poo_out_1_ce0;
wire   [3:0] grp_backward_fu_635_conv_kernel_2_address0;
wire    grp_backward_fu_635_conv_kernel_2_ce0;
wire    grp_backward_fu_635_conv_kernel_2_we0;
wire   [31:0] grp_backward_fu_635_conv_kernel_2_d0;
wire   [7:0] grp_backward_fu_635_max_poo_locate_1_address0;
wire    grp_backward_fu_635_max_poo_locate_1_ce0;
wire   [9:0] grp_backward_fu_635_mnist_data_address0;
wire    grp_backward_fu_635_mnist_data_ce0;
wire   [3:0] grp_backward_fu_635_conv_kernel_1_address0;
wire    grp_backward_fu_635_conv_kernel_1_ce0;
wire    grp_backward_fu_635_conv_kernel_1_we0;
wire   [31:0] grp_backward_fu_635_conv_kernel_1_d0;
reg   [9:0] ap_phi_mux_phi_ln222_phi_fu_543_p4;
reg   [3:0] ap_phi_mux_phi_ln216_phi_fu_555_p4;
reg   [3:0] ap_phi_mux_phi_ln217_phi_fu_567_p4;
reg   [9:0] ap_phi_mux_phi_ln218_phi_fu_579_p4;
reg   [7:0] ap_phi_mux_phi_ln219_phi_fu_591_p4;
reg    grp_forward_fu_599_ap_start_reg;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state47;
reg    grp_backward_fu_635_ap_start_reg;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire   [63:0] zext_ln235_fu_839_p1;
wire   [63:0] zext_ln236_fu_856_p1;
wire   [63:0] zext_ln237_fu_873_p1;
wire   [63:0] zext_ln238_fu_890_p1;
wire   [63:0] zext_ln232_fu_907_p1;
wire   [63:0] zext_ln222_fu_924_p1;
wire   [63:0] zext_ln216_fu_941_p1;
wire   [63:0] zext_ln217_fu_958_p1;
wire   [63:0] zext_ln218_fu_975_p1;
wire   [63:0] zext_ln219_fu_992_p1;
wire   [63:0] empty_fu_687_p1;
wire   [63:0] empty_21_fu_707_p1;
wire   [63:0] empty_22_fu_727_p1;
wire   [63:0] empty_23_fu_747_p1;
wire   [63:0] empty_24_fu_767_p1;
wire   [63:0] empty_25_fu_787_p1;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp1_stage0_01001;
wire    ap_block_pp2_stage0_01001;
reg    ap_predicate_op242_writeresp_state34;
reg    ap_block_state34;
wire    ap_block_pp3_stage0_01001;
wire    ap_block_pp4_stage0_01001;
wire   [29:0] out1_fu_677_p4;
wire   [29:0] fc_fu_697_p4;
wire   [29:0] fc3_fu_717_p4;
wire   [29:0] conv_fu_737_p4;
wire   [29:0] conv3_fu_757_p4;
wire   [29:0] in1_fu_777_p4;
wire    ap_CS_fsm_state99;
reg   [78:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
reg    ap_idle_pp9;
wire    ap_enable_pp9;

// power-on initialization
initial begin
#0 ap_CS_fsm = 79'd1;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter2 = 1'b0;
#0 grp_forward_fu_599_ap_start_reg = 1'b0;
#0 grp_backward_fu_635_ap_start_reg = 1'b0;
end

forw_back_conv_kevdy #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_kernel_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_kernel_1_address0),
    .ce0(conv_kernel_1_ce0),
    .we0(conv_kernel_1_we0),
    .d0(conv_kernel_1_d0),
    .q0(conv_kernel_1_q0)
);

forw_back_conv_kevdy #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_kernel_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_kernel_2_address0),
    .ce0(conv_kernel_2_ce0),
    .we0(conv_kernel_2_we0),
    .d0(conv_kernel_2_d0),
    .q0(conv_kernel_2_q0)
);

forw_back_fc_hiddxdS #(
    .DataWidth( 32 ),
    .AddressRange( 720 ),
    .AddressWidth( 10 ))
fc_hidden_layer1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_hidden_layer1_address0),
    .ce0(fc_hidden_layer1_ce0),
    .we0(fc_hidden_layer1_we0),
    .d0(fc_hidden_layer1_d0),
    .q0(fc_hidden_layer1_q0)
);

forw_back_fc_hiddyd2 #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
fc_hidden_layer2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_hidden_layer2_address0),
    .ce0(fc_hidden_layer2_ce0),
    .we0(fc_hidden_layer2_we0),
    .d0(fc_hidden_layer2_d0),
    .q0(fc_hidden_layer2_q0)
);

forw_back_mnist_dzec #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
mnist_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mnist_data_address0),
    .ce0(mnist_data_ce0),
    .we0(mnist_data_we0),
    .d0(data_addr_5_read_reg_1171),
    .q0(mnist_data_q0)
);

forw_back_max_pooAem #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
max_poo_out_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_poo_out_1_address0),
    .ce0(max_poo_out_1_ce0),
    .we0(max_poo_out_1_we0),
    .d0(grp_forward_fu_599_max_poo_out_1_d0),
    .q0(max_poo_out_1_q0)
);

forw_back_max_pooAem #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
max_poo_locate_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_poo_locate_1_address0),
    .ce0(max_poo_locate_1_ce0),
    .we0(max_poo_locate_1_we0),
    .d0(grp_forward_fu_599_max_poo_locate_1_d0),
    .q0(max_poo_locate_1_q0)
);

forward_max_poo_ofYi #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
max_poo_locate_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_poo_locate_2_address0),
    .ce0(max_poo_locate_2_ce0),
    .we0(max_poo_locate_2_we0),
    .d0(grp_forward_fu_599_max_poo_locate_2_d0),
    .q0(max_poo_locate_2_q0)
);

forward_max_poo_ofYi #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
fc_in_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_in_1_0_address0),
    .ce0(fc_in_1_0_ce0),
    .we0(fc_in_1_0_we0),
    .d0(grp_forward_fu_599_fc_in_1_0_d0),
    .q0(fc_in_1_0_q0)
);

forw_back_fc_out_DeQ #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
fc_out_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_out_1_0_address0),
    .ce0(fc_out_1_0_ce0),
    .we0(fc_out_1_0_we0),
    .d0(grp_forward_fu_599_fc_out_1_0_d0),
    .q0(fc_out_1_0_q0)
);

forw_back_fc_out_DeQ #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
fc_in_2_relu1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_in_2_relu1_0_address0),
    .ce0(fc_in_2_relu1_0_ce0),
    .we0(fc_in_2_relu1_0_we0),
    .d0(grp_forward_fu_599_fc_in_2_relu1_0_d0),
    .q0(fc_in_2_relu1_0_q0)
);

forward_fc_out_2_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
probability_result_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(probability_result_address0),
    .ce0(probability_result_ce0),
    .we0(probability_result_we0),
    .d0(grp_forward_fu_599_probability_result_d0),
    .q0(probability_result_q0)
);

forw_back_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
forw_back_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .flag(flag),
    .in_r(in_r),
    .conv1(conv1),
    .conv2(conv2),
    .fc1(fc1),
    .fc2(fc2),
    .out_r(out_r),
    .label_r(label_r),
    .lr(lr)
);

forw_back_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_CACHE_VALUE ))
forw_back_data_m_axi_U(
    .AWVALID(m_axi_data_AWVALID),
    .AWREADY(m_axi_data_AWREADY),
    .AWADDR(m_axi_data_AWADDR),
    .AWID(m_axi_data_AWID),
    .AWLEN(m_axi_data_AWLEN),
    .AWSIZE(m_axi_data_AWSIZE),
    .AWBURST(m_axi_data_AWBURST),
    .AWLOCK(m_axi_data_AWLOCK),
    .AWCACHE(m_axi_data_AWCACHE),
    .AWPROT(m_axi_data_AWPROT),
    .AWQOS(m_axi_data_AWQOS),
    .AWREGION(m_axi_data_AWREGION),
    .AWUSER(m_axi_data_AWUSER),
    .WVALID(m_axi_data_WVALID),
    .WREADY(m_axi_data_WREADY),
    .WDATA(m_axi_data_WDATA),
    .WSTRB(m_axi_data_WSTRB),
    .WLAST(m_axi_data_WLAST),
    .WID(m_axi_data_WID),
    .WUSER(m_axi_data_WUSER),
    .ARVALID(m_axi_data_ARVALID),
    .ARREADY(m_axi_data_ARREADY),
    .ARADDR(m_axi_data_ARADDR),
    .ARID(m_axi_data_ARID),
    .ARLEN(m_axi_data_ARLEN),
    .ARSIZE(m_axi_data_ARSIZE),
    .ARBURST(m_axi_data_ARBURST),
    .ARLOCK(m_axi_data_ARLOCK),
    .ARCACHE(m_axi_data_ARCACHE),
    .ARPROT(m_axi_data_ARPROT),
    .ARQOS(m_axi_data_ARQOS),
    .ARREGION(m_axi_data_ARREGION),
    .ARUSER(m_axi_data_ARUSER),
    .RVALID(m_axi_data_RVALID),
    .RREADY(m_axi_data_RREADY),
    .RDATA(m_axi_data_RDATA),
    .RLAST(m_axi_data_RLAST),
    .RID(m_axi_data_RID),
    .RUSER(m_axi_data_RUSER),
    .RRESP(m_axi_data_RRESP),
    .BVALID(m_axi_data_BVALID),
    .BREADY(m_axi_data_BREADY),
    .BRESP(m_axi_data_BRESP),
    .BID(m_axi_data_BID),
    .BUSER(m_axi_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_ARVALID),
    .I_ARREADY(data_ARREADY),
    .I_ARADDR(data_ARADDR),
    .I_ARID(data_ARID),
    .I_ARLEN(data_ARLEN),
    .I_ARSIZE(data_ARSIZE),
    .I_ARLOCK(data_ARLOCK),
    .I_ARCACHE(data_ARCACHE),
    .I_ARQOS(data_ARQOS),
    .I_ARPROT(data_ARPROT),
    .I_ARUSER(data_ARUSER),
    .I_ARBURST(data_ARBURST),
    .I_ARREGION(data_ARREGION),
    .I_RVALID(data_RVALID),
    .I_RREADY(data_RREADY),
    .I_RDATA(data_RDATA),
    .I_RID(data_RID),
    .I_RUSER(data_RUSER),
    .I_RRESP(data_RRESP),
    .I_RLAST(data_RLAST),
    .I_AWVALID(data_AWVALID),
    .I_AWREADY(data_AWREADY),
    .I_AWADDR(data_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(data_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_WVALID),
    .I_WREADY(data_WREADY),
    .I_WDATA(data_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(data_BVALID),
    .I_BREADY(data_BREADY),
    .I_BRESP(data_BRESP),
    .I_BID(data_BID),
    .I_BUSER(data_BUSER)
);

forward grp_forward_fu_599(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_forward_fu_599_ap_start),
    .ap_done(grp_forward_fu_599_ap_done),
    .ap_idle(grp_forward_fu_599_ap_idle),
    .ap_ready(grp_forward_fu_599_ap_ready),
    .mnist_data_address0(grp_forward_fu_599_mnist_data_address0),
    .mnist_data_ce0(grp_forward_fu_599_mnist_data_ce0),
    .mnist_data_q0(mnist_data_q0),
    .conv_kernel_1_address0(grp_forward_fu_599_conv_kernel_1_address0),
    .conv_kernel_1_ce0(grp_forward_fu_599_conv_kernel_1_ce0),
    .conv_kernel_1_q0(conv_kernel_1_q0),
    .max_poo_out_1_address0(grp_forward_fu_599_max_poo_out_1_address0),
    .max_poo_out_1_ce0(grp_forward_fu_599_max_poo_out_1_ce0),
    .max_poo_out_1_we0(grp_forward_fu_599_max_poo_out_1_we0),
    .max_poo_out_1_d0(grp_forward_fu_599_max_poo_out_1_d0),
    .max_poo_out_1_q0(max_poo_out_1_q0),
    .max_poo_locate_1_address0(grp_forward_fu_599_max_poo_locate_1_address0),
    .max_poo_locate_1_ce0(grp_forward_fu_599_max_poo_locate_1_ce0),
    .max_poo_locate_1_we0(grp_forward_fu_599_max_poo_locate_1_we0),
    .max_poo_locate_1_d0(grp_forward_fu_599_max_poo_locate_1_d0),
    .conv_kernel_2_address0(grp_forward_fu_599_conv_kernel_2_address0),
    .conv_kernel_2_ce0(grp_forward_fu_599_conv_kernel_2_ce0),
    .conv_kernel_2_q0(conv_kernel_2_q0),
    .max_poo_locate_2_address0(grp_forward_fu_599_max_poo_locate_2_address0),
    .max_poo_locate_2_ce0(grp_forward_fu_599_max_poo_locate_2_ce0),
    .max_poo_locate_2_we0(grp_forward_fu_599_max_poo_locate_2_we0),
    .max_poo_locate_2_d0(grp_forward_fu_599_max_poo_locate_2_d0),
    .fc_in_1_0_address0(grp_forward_fu_599_fc_in_1_0_address0),
    .fc_in_1_0_ce0(grp_forward_fu_599_fc_in_1_0_ce0),
    .fc_in_1_0_we0(grp_forward_fu_599_fc_in_1_0_we0),
    .fc_in_1_0_d0(grp_forward_fu_599_fc_in_1_0_d0),
    .fc_in_1_0_q0(fc_in_1_0_q0),
    .fc_out_1_0_address0(grp_forward_fu_599_fc_out_1_0_address0),
    .fc_out_1_0_ce0(grp_forward_fu_599_fc_out_1_0_ce0),
    .fc_out_1_0_we0(grp_forward_fu_599_fc_out_1_0_we0),
    .fc_out_1_0_d0(grp_forward_fu_599_fc_out_1_0_d0),
    .fc_out_1_0_q0(fc_out_1_0_q0),
    .fc_hidden_layer1_address0(grp_forward_fu_599_fc_hidden_layer1_address0),
    .fc_hidden_layer1_ce0(grp_forward_fu_599_fc_hidden_layer1_ce0),
    .fc_hidden_layer1_q0(fc_hidden_layer1_q0),
    .fc_in_2_relu1_0_address0(grp_forward_fu_599_fc_in_2_relu1_0_address0),
    .fc_in_2_relu1_0_ce0(grp_forward_fu_599_fc_in_2_relu1_0_ce0),
    .fc_in_2_relu1_0_we0(grp_forward_fu_599_fc_in_2_relu1_0_we0),
    .fc_in_2_relu1_0_d0(grp_forward_fu_599_fc_in_2_relu1_0_d0),
    .fc_in_2_relu1_0_q0(fc_in_2_relu1_0_q0),
    .fc_hidden_layer2_address0(grp_forward_fu_599_fc_hidden_layer2_address0),
    .fc_hidden_layer2_ce0(grp_forward_fu_599_fc_hidden_layer2_ce0),
    .fc_hidden_layer2_q0(fc_hidden_layer2_q0),
    .probability_result_address0(grp_forward_fu_599_probability_result_address0),
    .probability_result_ce0(grp_forward_fu_599_probability_result_ce0),
    .probability_result_we0(grp_forward_fu_599_probability_result_we0),
    .probability_result_d0(grp_forward_fu_599_probability_result_d0)
);

backward grp_backward_fu_635(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_backward_fu_635_ap_start),
    .ap_done(grp_backward_fu_635_ap_done),
    .ap_idle(grp_backward_fu_635_ap_idle),
    .ap_ready(grp_backward_fu_635_ap_ready),
    .label_r(label_read_reg_997),
    .m_axi_lr_in_AWVALID(grp_backward_fu_635_m_axi_lr_in_AWVALID),
    .m_axi_lr_in_AWREADY(1'b0),
    .m_axi_lr_in_AWADDR(grp_backward_fu_635_m_axi_lr_in_AWADDR),
    .m_axi_lr_in_AWID(grp_backward_fu_635_m_axi_lr_in_AWID),
    .m_axi_lr_in_AWLEN(grp_backward_fu_635_m_axi_lr_in_AWLEN),
    .m_axi_lr_in_AWSIZE(grp_backward_fu_635_m_axi_lr_in_AWSIZE),
    .m_axi_lr_in_AWBURST(grp_backward_fu_635_m_axi_lr_in_AWBURST),
    .m_axi_lr_in_AWLOCK(grp_backward_fu_635_m_axi_lr_in_AWLOCK),
    .m_axi_lr_in_AWCACHE(grp_backward_fu_635_m_axi_lr_in_AWCACHE),
    .m_axi_lr_in_AWPROT(grp_backward_fu_635_m_axi_lr_in_AWPROT),
    .m_axi_lr_in_AWQOS(grp_backward_fu_635_m_axi_lr_in_AWQOS),
    .m_axi_lr_in_AWREGION(grp_backward_fu_635_m_axi_lr_in_AWREGION),
    .m_axi_lr_in_AWUSER(grp_backward_fu_635_m_axi_lr_in_AWUSER),
    .m_axi_lr_in_WVALID(grp_backward_fu_635_m_axi_lr_in_WVALID),
    .m_axi_lr_in_WREADY(1'b0),
    .m_axi_lr_in_WDATA(grp_backward_fu_635_m_axi_lr_in_WDATA),
    .m_axi_lr_in_WSTRB(grp_backward_fu_635_m_axi_lr_in_WSTRB),
    .m_axi_lr_in_WLAST(grp_backward_fu_635_m_axi_lr_in_WLAST),
    .m_axi_lr_in_WID(grp_backward_fu_635_m_axi_lr_in_WID),
    .m_axi_lr_in_WUSER(grp_backward_fu_635_m_axi_lr_in_WUSER),
    .m_axi_lr_in_ARVALID(grp_backward_fu_635_m_axi_lr_in_ARVALID),
    .m_axi_lr_in_ARREADY(data_ARREADY),
    .m_axi_lr_in_ARADDR(grp_backward_fu_635_m_axi_lr_in_ARADDR),
    .m_axi_lr_in_ARID(grp_backward_fu_635_m_axi_lr_in_ARID),
    .m_axi_lr_in_ARLEN(grp_backward_fu_635_m_axi_lr_in_ARLEN),
    .m_axi_lr_in_ARSIZE(grp_backward_fu_635_m_axi_lr_in_ARSIZE),
    .m_axi_lr_in_ARBURST(grp_backward_fu_635_m_axi_lr_in_ARBURST),
    .m_axi_lr_in_ARLOCK(grp_backward_fu_635_m_axi_lr_in_ARLOCK),
    .m_axi_lr_in_ARCACHE(grp_backward_fu_635_m_axi_lr_in_ARCACHE),
    .m_axi_lr_in_ARPROT(grp_backward_fu_635_m_axi_lr_in_ARPROT),
    .m_axi_lr_in_ARQOS(grp_backward_fu_635_m_axi_lr_in_ARQOS),
    .m_axi_lr_in_ARREGION(grp_backward_fu_635_m_axi_lr_in_ARREGION),
    .m_axi_lr_in_ARUSER(grp_backward_fu_635_m_axi_lr_in_ARUSER),
    .m_axi_lr_in_RVALID(data_RVALID),
    .m_axi_lr_in_RREADY(grp_backward_fu_635_m_axi_lr_in_RREADY),
    .m_axi_lr_in_RDATA(data_RDATA),
    .m_axi_lr_in_RLAST(data_RLAST),
    .m_axi_lr_in_RID(data_RID),
    .m_axi_lr_in_RUSER(data_RUSER),
    .m_axi_lr_in_RRESP(data_RRESP),
    .m_axi_lr_in_BVALID(1'b0),
    .m_axi_lr_in_BREADY(grp_backward_fu_635_m_axi_lr_in_BREADY),
    .m_axi_lr_in_BRESP(2'd0),
    .m_axi_lr_in_BID(1'd0),
    .m_axi_lr_in_BUSER(1'd0),
    .lr_in_offset(lr1_reg_1002),
    .probability_result_address0(grp_backward_fu_635_probability_result_address0),
    .probability_result_ce0(grp_backward_fu_635_probability_result_ce0),
    .probability_result_q0(probability_result_q0),
    .fc_in_2_relu1_0_address0(grp_backward_fu_635_fc_in_2_relu1_0_address0),
    .fc_in_2_relu1_0_ce0(grp_backward_fu_635_fc_in_2_relu1_0_ce0),
    .fc_in_2_relu1_0_q0(fc_in_2_relu1_0_q0),
    .fc_hidden_layer2_address0(grp_backward_fu_635_fc_hidden_layer2_address0),
    .fc_hidden_layer2_ce0(grp_backward_fu_635_fc_hidden_layer2_ce0),
    .fc_hidden_layer2_we0(grp_backward_fu_635_fc_hidden_layer2_we0),
    .fc_hidden_layer2_d0(grp_backward_fu_635_fc_hidden_layer2_d0),
    .fc_hidden_layer2_q0(fc_hidden_layer2_q0),
    .fc_out_1_0_address0(grp_backward_fu_635_fc_out_1_0_address0),
    .fc_out_1_0_ce0(grp_backward_fu_635_fc_out_1_0_ce0),
    .fc_out_1_0_q0(fc_out_1_0_q0),
    .fc_in_1_0_address0(grp_backward_fu_635_fc_in_1_0_address0),
    .fc_in_1_0_ce0(grp_backward_fu_635_fc_in_1_0_ce0),
    .fc_in_1_0_q0(fc_in_1_0_q0),
    .fc_hidden_layer1_address0(grp_backward_fu_635_fc_hidden_layer1_address0),
    .fc_hidden_layer1_ce0(grp_backward_fu_635_fc_hidden_layer1_ce0),
    .fc_hidden_layer1_we0(grp_backward_fu_635_fc_hidden_layer1_we0),
    .fc_hidden_layer1_d0(grp_backward_fu_635_fc_hidden_layer1_d0),
    .fc_hidden_layer1_q0(fc_hidden_layer1_q0),
    .max_poo_locate_2_address0(grp_backward_fu_635_max_poo_locate_2_address0),
    .max_poo_locate_2_ce0(grp_backward_fu_635_max_poo_locate_2_ce0),
    .max_poo_locate_2_q0(max_poo_locate_2_q0),
    .max_poo_out_1_address0(grp_backward_fu_635_max_poo_out_1_address0),
    .max_poo_out_1_ce0(grp_backward_fu_635_max_poo_out_1_ce0),
    .max_poo_out_1_q0(max_poo_out_1_q0),
    .conv_kernel_2_address0(grp_backward_fu_635_conv_kernel_2_address0),
    .conv_kernel_2_ce0(grp_backward_fu_635_conv_kernel_2_ce0),
    .conv_kernel_2_we0(grp_backward_fu_635_conv_kernel_2_we0),
    .conv_kernel_2_d0(grp_backward_fu_635_conv_kernel_2_d0),
    .conv_kernel_2_q0(conv_kernel_2_q0),
    .max_poo_locate_1_address0(grp_backward_fu_635_max_poo_locate_1_address0),
    .max_poo_locate_1_ce0(grp_backward_fu_635_max_poo_locate_1_ce0),
    .max_poo_locate_1_q0(max_poo_locate_1_q0),
    .mnist_data_address0(grp_backward_fu_635_mnist_data_address0),
    .mnist_data_ce0(grp_backward_fu_635_mnist_data_ce0),
    .mnist_data_q0(mnist_data_q0),
    .conv_kernel_1_address0(grp_backward_fu_635_conv_kernel_1_address0),
    .conv_kernel_1_ce0(grp_backward_fu_635_conv_kernel_1_ce0),
    .conv_kernel_1_we0(grp_backward_fu_635_conv_kernel_1_we0),
    .conv_kernel_1_d0(grp_backward_fu_635_conv_kernel_1_d0),
    .conv_kernel_1_q0(conv_kernel_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state11)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state19)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state27)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state27);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state36) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state36)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state36);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state55) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state55)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state55);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state66) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state65)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state66)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state66);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state65)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state76) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state75)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state76)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state76);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end else if ((1'b1 == ap_CS_fsm_state75)) begin
            ap_enable_reg_pp7_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b1 == ap_condition_pp8_exit_iter0_state86) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state86)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state86);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp9_stage0) & (1'b1 == ap_condition_pp9_exit_iter0_state96) & (1'b0 == ap_block_pp9_stage0_subdone))) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state95)) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp9_exit_iter0_state96)) begin
                ap_enable_reg_pp9_iter1 <= (1'b1 ^ ap_condition_pp9_exit_iter0_state96);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
        end else if ((1'b1 == ap_CS_fsm_state95)) begin
            ap_enable_reg_pp9_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_backward_fu_635_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            grp_backward_fu_635_ap_start_reg <= 1'b1;
        end else if ((grp_backward_fu_635_ap_ready == 1'b1)) begin
            grp_backward_fu_635_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_forward_fu_599_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_start == 1'b1) & (icmp_ln227_fu_815_p2 == 1'd1) & (icmp_ln224_fu_809_p2 == 1'd0) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (icmp_ln224_fu_809_p2 == 1'd1) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_forward_fu_599_ap_start_reg <= 1'b1;
        end else if ((grp_forward_fu_599_ap_ready == 1'b1)) begin
            grp_forward_fu_599_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        phi_ln216_reg_551 <= 4'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln216_reg_1176 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        phi_ln216_reg_551 <= add_ln216_reg_1180;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        phi_ln217_reg_563 <= 4'd0;
    end else if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln217_reg_1190 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        phi_ln217_reg_563 <= add_ln217_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        phi_ln218_reg_575 <= 10'd0;
    end else if (((1'b0 == ap_block_pp8_stage0_11001) & (icmp_ln218_reg_1204 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        phi_ln218_reg_575 <= add_ln218_reg_1208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        phi_ln219_reg_587 <= 8'd0;
    end else if (((1'b0 == ap_block_pp9_stage0_11001) & (icmp_ln219_reg_1218 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        phi_ln219_reg_587 <= add_ln219_reg_1222;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        phi_ln222_reg_539 <= 10'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln222_reg_1162 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        phi_ln222_reg_539 <= add_ln222_reg_1166;
    end
end

always @ (posedge ap_clk) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        phi_ln232_reg_528 <= 4'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln232_fu_895_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        phi_ln232_reg_528 <= add_ln232_fu_901_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln235_reg_484 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln235_fu_827_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln235_reg_484 <= add_ln235_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        phi_ln236_reg_495 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln236_fu_844_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln236_reg_495 <= add_ln236_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        phi_ln237_reg_506 <= 10'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln237_fu_861_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        phi_ln237_reg_506 <= add_ln237_fu_867_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        phi_ln238_reg_517 <= 8'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln238_fu_878_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        phi_ln238_reg_517 <= add_ln238_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        add_ln216_reg_1180 <= add_ln216_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        add_ln217_reg_1194 <= add_ln217_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        add_ln218_reg_1208 <= add_ln218_fu_969_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        add_ln219_reg_1222 <= add_ln219_fu_986_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        add_ln222_reg_1166 <= add_ln222_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln235_reg_1067 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_kernel_1_load_reg_1081 <= conv_kernel_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln236_reg_1086 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        conv_kernel_2_load_reg_1100 <= conv_kernel_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (icmp_ln219_reg_1218 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        data_addr_1_read_reg_1227 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_addr_1_reg_1013[29 : 0] <= empty_21_fu_707_p1[29 : 0];
        data_addr_2_reg_1020[29 : 0] <= empty_22_fu_727_p1[29 : 0];
        data_addr_3_reg_1027[29 : 0] <= empty_23_fu_747_p1[29 : 0];
        data_addr_4_reg_1034[29 : 0] <= empty_24_fu_767_p1[29 : 0];
        data_addr_5_reg_1041[29 : 0] <= empty_25_fu_787_p1[29 : 0];
        data_addr_reg_1007[29 : 0] <= empty_fu_687_p1[29 : 0];
        label_read_reg_997 <= label_r;
        lr1_reg_1002 <= {{lr[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (icmp_ln218_reg_1204 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        data_addr_2_read_reg_1213 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln217_reg_1190 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        data_addr_3_read_reg_1199 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln216_reg_1176 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        data_addr_4_read_reg_1185 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln222_reg_1162 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        data_addr_5_read_reg_1171 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln237_reg_1105 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        fc_hidden_layer1_loa_reg_1119 <= fc_hidden_layer1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln238_reg_1124 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        fc_hidden_layer2_loa_reg_1138 <= fc_hidden_layer2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln216_reg_1176 <= icmp_ln216_fu_929_p2;
        icmp_ln216_reg_1176_pp6_iter1_reg <= icmp_ln216_reg_1176;
        phi_ln216_reg_551_pp6_iter1_reg <= phi_ln216_reg_551;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        icmp_ln217_reg_1190 <= icmp_ln217_fu_946_p2;
        icmp_ln217_reg_1190_pp7_iter1_reg <= icmp_ln217_reg_1190;
        phi_ln217_reg_563_pp7_iter1_reg <= phi_ln217_reg_563;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        icmp_ln218_reg_1204 <= icmp_ln218_fu_963_p2;
        icmp_ln218_reg_1204_pp8_iter1_reg <= icmp_ln218_reg_1204;
        phi_ln218_reg_575_pp8_iter1_reg <= phi_ln218_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        icmp_ln219_reg_1218 <= icmp_ln219_fu_980_p2;
        icmp_ln219_reg_1218_pp9_iter1_reg <= icmp_ln219_reg_1218;
        phi_ln219_reg_587_pp9_iter1_reg <= phi_ln219_reg_587;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln221_reg_1051 <= icmp_ln221_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln222_reg_1162 <= icmp_ln222_fu_912_p2;
        icmp_ln222_reg_1162_pp5_iter1_reg <= icmp_ln222_reg_1162;
        phi_ln222_reg_539_pp5_iter1_reg <= phi_ln222_reg_539;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln224_reg_1055 <= icmp_ln224_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln224_fu_809_p2 == 1'd0) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln227_reg_1059 <= icmp_ln227_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln227_fu_815_p2 == 1'd0) & (icmp_ln224_fu_809_p2 == 1'd0) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln231_reg_1063 <= icmp_ln231_fu_821_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln232_reg_1143 <= icmp_ln232_fu_895_p2;
        icmp_ln232_reg_1143_pp4_iter1_reg <= icmp_ln232_reg_1143;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln235_reg_1067 <= icmp_ln235_fu_827_p2;
        icmp_ln235_reg_1067_pp0_iter1_reg <= icmp_ln235_reg_1067;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln236_reg_1086 <= icmp_ln236_fu_844_p2;
        icmp_ln236_reg_1086_pp1_iter1_reg <= icmp_ln236_reg_1086;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln237_reg_1105 <= icmp_ln237_fu_861_p2;
        icmp_ln237_reg_1105_pp2_iter1_reg <= icmp_ln237_reg_1105;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln238_reg_1124 <= icmp_ln238_fu_878_p2;
        icmp_ln238_reg_1124_pp3_iter1_reg <= icmp_ln238_reg_1124;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln232_reg_1143 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        probability_result_l_reg_1157 <= probability_result_q0;
    end
end

always @ (*) begin
    if ((icmp_ln235_fu_827_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln236_fu_844_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln237_fu_861_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln238_fu_878_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln232_fu_895_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln222_fu_912_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln216_fu_929_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state66 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state66 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln217_fu_946_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state76 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state76 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln218_fu_963_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state86 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state86 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln219_fu_980_p2 == 1'd1)) begin
        ap_condition_pp9_exit_iter0_state96 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter0_state96 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b0) & (ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (icmp_ln216_reg_1176 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        ap_phi_mux_phi_ln216_phi_fu_555_p4 = add_ln216_reg_1180;
    end else begin
        ap_phi_mux_phi_ln216_phi_fu_555_p4 = phi_ln216_reg_551;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (icmp_ln217_reg_1190 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        ap_phi_mux_phi_ln217_phi_fu_567_p4 = add_ln217_reg_1194;
    end else begin
        ap_phi_mux_phi_ln217_phi_fu_567_p4 = phi_ln217_reg_563;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (icmp_ln218_reg_1204 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        ap_phi_mux_phi_ln218_phi_fu_579_p4 = add_ln218_reg_1208;
    end else begin
        ap_phi_mux_phi_ln218_phi_fu_579_p4 = phi_ln218_reg_575;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0) & (icmp_ln219_reg_1218 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        ap_phi_mux_phi_ln219_phi_fu_591_p4 = add_ln219_reg_1222;
    end else begin
        ap_phi_mux_phi_ln219_phi_fu_591_p4 = phi_ln219_reg_587;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (icmp_ln222_reg_1162 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        ap_phi_mux_phi_ln222_phi_fu_543_p4 = add_ln222_reg_1166;
    end else begin
        ap_phi_mux_phi_ln222_phi_fu_543_p4 = phi_ln222_reg_539;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        conv_kernel_1_address0 = zext_ln216_fu_941_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_kernel_1_address0 = zext_ln235_fu_839_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_1_address0 = grp_backward_fu_635_conv_kernel_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        conv_kernel_1_address0 = grp_forward_fu_599_conv_kernel_1_address0;
    end else begin
        conv_kernel_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
        conv_kernel_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_1_ce0 = grp_backward_fu_635_conv_kernel_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        conv_kernel_1_ce0 = grp_forward_fu_599_conv_kernel_1_ce0;
    end else begin
        conv_kernel_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        conv_kernel_1_d0 = data_addr_4_read_reg_1185;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_1_d0 = grp_backward_fu_635_conv_kernel_1_d0;
    end else begin
        conv_kernel_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln216_reg_1176_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        conv_kernel_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_1_we0 = grp_backward_fu_635_conv_kernel_1_we0;
    end else begin
        conv_kernel_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (ap_enable_reg_pp7_iter2 == 1'b1))) begin
        conv_kernel_2_address0 = zext_ln217_fu_958_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        conv_kernel_2_address0 = zext_ln236_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_2_address0 = grp_backward_fu_635_conv_kernel_2_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        conv_kernel_2_address0 = grp_forward_fu_599_conv_kernel_2_address0;
    end else begin
        conv_kernel_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1)))) begin
        conv_kernel_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_2_ce0 = grp_backward_fu_635_conv_kernel_2_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        conv_kernel_2_ce0 = grp_forward_fu_599_conv_kernel_2_ce0;
    end else begin
        conv_kernel_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (ap_enable_reg_pp7_iter2 == 1'b1))) begin
        conv_kernel_2_d0 = data_addr_3_read_reg_1199;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_2_d0 = grp_backward_fu_635_conv_kernel_2_d0;
    end else begin
        conv_kernel_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln217_reg_1190_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1))) begin
        conv_kernel_2_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        conv_kernel_2_we0 = grp_backward_fu_635_conv_kernel_2_we0;
    end else begin
        conv_kernel_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        data_ARADDR = data_addr_5_reg_1041;
    end else if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
        data_ARADDR = data_addr_1_reg_1013;
    end else if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        data_ARADDR = data_addr_2_reg_1020;
    end else if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
        data_ARADDR = data_addr_3_reg_1027;
    end else if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        data_ARADDR = data_addr_4_reg_1034;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARADDR = grp_backward_fu_635_m_axi_lr_in_ARADDR;
    end else begin
        data_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARBURST = grp_backward_fu_635_m_axi_lr_in_ARBURST;
    end else begin
        data_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARCACHE = grp_backward_fu_635_m_axi_lr_in_ARCACHE;
    end else begin
        data_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARID = grp_backward_fu_635_m_axi_lr_in_ARID;
    end else begin
        data_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        data_ARLEN = 32'd900;
    end else if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
        data_ARLEN = 32'd200;
    end else if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        data_ARLEN = 32'd720;
    end else if ((((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69)))) begin
        data_ARLEN = 32'd9;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARLEN = grp_backward_fu_635_m_axi_lr_in_ARLEN;
    end else begin
        data_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARLOCK = grp_backward_fu_635_m_axi_lr_in_ARLOCK;
    end else begin
        data_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARPROT = grp_backward_fu_635_m_axi_lr_in_ARPROT;
    end else begin
        data_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARQOS = grp_backward_fu_635_m_axi_lr_in_ARQOS;
    end else begin
        data_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARREGION = grp_backward_fu_635_m_axi_lr_in_ARREGION;
    end else begin
        data_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARSIZE = grp_backward_fu_635_m_axi_lr_in_ARSIZE;
    end else begin
        data_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARUSER = grp_backward_fu_635_m_axi_lr_in_ARUSER;
    end else begin
        data_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69)) | ((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state79)) | ((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state89)))) begin
        data_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_ARVALID = grp_backward_fu_635_m_axi_lr_in_ARVALID;
    end else begin
        data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        data_AWADDR = data_addr_reg_1007;
    end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        data_AWADDR = data_addr_1_reg_1013;
    end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        data_AWADDR = data_addr_2_reg_1020;
    end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        data_AWADDR = data_addr_3_reg_1027;
    end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_AWADDR = data_addr_4_reg_1034;
    end else begin
        data_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        data_AWLEN = 32'd10;
    end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        data_AWLEN = 32'd200;
    end else if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
        data_AWLEN = 32'd720;
    end else if ((((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        data_AWLEN = 32'd9;
    end else begin
        data_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | ((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)))) begin
        data_AWVALID = 1'b1;
    end else begin
        data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((ap_predicate_op242_writeresp_state34 == 1'b1) & (data_BVALID == 1'b0)) & (ap_predicate_op242_writeresp_state34 == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | (~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26)) | ((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)))) begin
        data_BREADY = 1'b1;
    end else begin
        data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln222_reg_1162 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln216_reg_1176 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln217_reg_1190 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp8_stage0_11001) & (icmp_ln218_reg_1204 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp9_stage0_11001) & (icmp_ln219_reg_1218 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0)))) begin
        data_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        data_RREADY = grp_backward_fu_635_m_axi_lr_in_RREADY;
    end else begin
        data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln232_reg_1143_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001))) begin
        data_WDATA = probability_result_l_reg_1157;
    end else if (((icmp_ln238_reg_1124_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_01001))) begin
        data_WDATA = fc_hidden_layer2_loa_reg_1138;
    end else if (((icmp_ln237_reg_1105_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        data_WDATA = fc_hidden_layer1_loa_reg_1119;
    end else if (((icmp_ln236_reg_1086_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        data_WDATA = conv_kernel_2_load_reg_1100;
    end else if (((icmp_ln235_reg_1067_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        data_WDATA = conv_kernel_1_load_reg_1081;
    end else begin
        data_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln235_reg_1067_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln236_reg_1086_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln237_reg_1105_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln238_reg_1124_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln232_reg_1143_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        data_WVALID = 1'b1;
    end else begin
        data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state89))) begin
        data_blk_n_AR = m_axi_data_ARREADY;
    end else begin
        data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state35))) begin
        data_blk_n_AW = m_axi_data_AWREADY;
    end else begin
        data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state43) | ((icmp_ln231_reg_1063 == 1'd0) & (icmp_ln227_reg_1059 == 1'd0) & (icmp_ln224_reg_1055 == 1'd0) & (icmp_ln221_reg_1051 == 1'd0) & (1'b1 == ap_CS_fsm_state34)))) begin
        data_blk_n_B = m_axi_data_BVALID;
    end else begin
        data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp5_stage0) & (icmp_ln222_reg_1162 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp6_stage0) & (icmp_ln216_reg_1176 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp7_stage0) & (icmp_ln217_reg_1190 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp8_stage0) & (icmp_ln218_reg_1204 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp9_stage0) & (icmp_ln219_reg_1218 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0)))) begin
        data_blk_n_R = m_axi_data_RVALID;
    end else begin
        data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln235_reg_1067_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln236_reg_1086_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln237_reg_1105_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln238_reg_1124_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((icmp_ln232_reg_1143_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        data_blk_n_W = m_axi_data_WREADY;
    end else begin
        data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        fc_hidden_layer1_address0 = zext_ln218_fu_975_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        fc_hidden_layer1_address0 = zext_ln237_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer1_address0 = grp_backward_fu_635_fc_hidden_layer1_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_hidden_layer1_address0 = grp_forward_fu_599_fc_hidden_layer1_address0;
    end else begin
        fc_hidden_layer1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter2 == 1'b1)))) begin
        fc_hidden_layer1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer1_ce0 = grp_backward_fu_635_fc_hidden_layer1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_hidden_layer1_ce0 = grp_forward_fu_599_fc_hidden_layer1_ce0;
    end else begin
        fc_hidden_layer1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        fc_hidden_layer1_d0 = data_addr_2_read_reg_1213;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer1_d0 = grp_backward_fu_635_fc_hidden_layer1_d0;
    end else begin
        fc_hidden_layer1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (icmp_ln218_reg_1204_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        fc_hidden_layer1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer1_we0 = grp_backward_fu_635_fc_hidden_layer1_we0;
    end else begin
        fc_hidden_layer1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0) & (ap_enable_reg_pp9_iter2 == 1'b1))) begin
        fc_hidden_layer2_address0 = zext_ln219_fu_992_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        fc_hidden_layer2_address0 = zext_ln238_fu_890_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer2_address0 = grp_backward_fu_635_fc_hidden_layer2_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_hidden_layer2_address0 = grp_forward_fu_599_fc_hidden_layer2_address0;
    end else begin
        fc_hidden_layer2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp9_stage0_11001) & (ap_enable_reg_pp9_iter2 == 1'b1)))) begin
        fc_hidden_layer2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer2_ce0 = grp_backward_fu_635_fc_hidden_layer2_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_hidden_layer2_ce0 = grp_forward_fu_599_fc_hidden_layer2_ce0;
    end else begin
        fc_hidden_layer2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0) & (ap_enable_reg_pp9_iter2 == 1'b1))) begin
        fc_hidden_layer2_d0 = data_addr_1_read_reg_1227;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer2_d0 = grp_backward_fu_635_fc_hidden_layer2_d0;
    end else begin
        fc_hidden_layer2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (icmp_ln219_reg_1218_pp9_iter1_reg == 1'd0) & (ap_enable_reg_pp9_iter2 == 1'b1))) begin
        fc_hidden_layer2_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_hidden_layer2_we0 = grp_backward_fu_635_fc_hidden_layer2_we0;
    end else begin
        fc_hidden_layer2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_in_1_0_address0 = grp_backward_fu_635_fc_in_1_0_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_in_1_0_address0 = grp_forward_fu_599_fc_in_1_0_address0;
    end else begin
        fc_in_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_in_1_0_ce0 = grp_backward_fu_635_fc_in_1_0_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_in_1_0_ce0 = grp_forward_fu_599_fc_in_1_0_ce0;
    end else begin
        fc_in_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_in_1_0_we0 = grp_forward_fu_599_fc_in_1_0_we0;
    end else begin
        fc_in_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_in_2_relu1_0_address0 = grp_backward_fu_635_fc_in_2_relu1_0_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_in_2_relu1_0_address0 = grp_forward_fu_599_fc_in_2_relu1_0_address0;
    end else begin
        fc_in_2_relu1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_in_2_relu1_0_ce0 = grp_backward_fu_635_fc_in_2_relu1_0_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_in_2_relu1_0_ce0 = grp_forward_fu_599_fc_in_2_relu1_0_ce0;
    end else begin
        fc_in_2_relu1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_in_2_relu1_0_we0 = grp_forward_fu_599_fc_in_2_relu1_0_we0;
    end else begin
        fc_in_2_relu1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_out_1_0_address0 = grp_backward_fu_635_fc_out_1_0_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_out_1_0_address0 = grp_forward_fu_599_fc_out_1_0_address0;
    end else begin
        fc_out_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        fc_out_1_0_ce0 = grp_backward_fu_635_fc_out_1_0_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_out_1_0_ce0 = grp_forward_fu_599_fc_out_1_0_ce0;
    end else begin
        fc_out_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        fc_out_1_0_we0 = grp_forward_fu_599_fc_out_1_0_we0;
    end else begin
        fc_out_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        max_poo_locate_1_address0 = grp_backward_fu_635_max_poo_locate_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_locate_1_address0 = grp_forward_fu_599_max_poo_locate_1_address0;
    end else begin
        max_poo_locate_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        max_poo_locate_1_ce0 = grp_backward_fu_635_max_poo_locate_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_locate_1_ce0 = grp_forward_fu_599_max_poo_locate_1_ce0;
    end else begin
        max_poo_locate_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_locate_1_we0 = grp_forward_fu_599_max_poo_locate_1_we0;
    end else begin
        max_poo_locate_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        max_poo_locate_2_address0 = grp_backward_fu_635_max_poo_locate_2_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_locate_2_address0 = grp_forward_fu_599_max_poo_locate_2_address0;
    end else begin
        max_poo_locate_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        max_poo_locate_2_ce0 = grp_backward_fu_635_max_poo_locate_2_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_locate_2_ce0 = grp_forward_fu_599_max_poo_locate_2_ce0;
    end else begin
        max_poo_locate_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_locate_2_we0 = grp_forward_fu_599_max_poo_locate_2_we0;
    end else begin
        max_poo_locate_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        max_poo_out_1_address0 = grp_backward_fu_635_max_poo_out_1_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_out_1_address0 = grp_forward_fu_599_max_poo_out_1_address0;
    end else begin
        max_poo_out_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        max_poo_out_1_ce0 = grp_backward_fu_635_max_poo_out_1_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_out_1_ce0 = grp_forward_fu_599_max_poo_out_1_ce0;
    end else begin
        max_poo_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        max_poo_out_1_we0 = grp_forward_fu_599_max_poo_out_1_we0;
    end else begin
        max_poo_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        mnist_data_address0 = zext_ln222_fu_924_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        mnist_data_address0 = grp_backward_fu_635_mnist_data_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        mnist_data_address0 = grp_forward_fu_599_mnist_data_address0;
    end else begin
        mnist_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        mnist_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        mnist_data_ce0 = grp_backward_fu_635_mnist_data_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        mnist_data_ce0 = grp_forward_fu_599_mnist_data_ce0;
    end else begin
        mnist_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln222_reg_1162_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        mnist_data_we0 = 1'b1;
    end else begin
        mnist_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        probability_result_address0 = zext_ln232_fu_907_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        probability_result_address0 = grp_backward_fu_635_probability_result_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        probability_result_address0 = grp_forward_fu_599_probability_result_address0;
    end else begin
        probability_result_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        probability_result_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        probability_result_ce0 = grp_backward_fu_635_probability_result_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        probability_result_ce0 = grp_forward_fu_599_probability_result_ce0;
    end else begin
        probability_result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44))) begin
        probability_result_we0 = grp_forward_fu_599_probability_result_we0;
    end else begin
        probability_result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln231_fu_821_p2 == 1'd1) & (icmp_ln227_fu_815_p2 == 1'd0) & (icmp_ln224_fu_809_p2 == 1'd0) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else if (((ap_start == 1'b1) & (icmp_ln231_fu_821_p2 == 1'd0) & (icmp_ln227_fu_815_p2 == 1'd0) & (icmp_ln224_fu_809_p2 == 1'd0) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (icmp_ln227_fu_815_p2 == 1'd1) & (icmp_ln224_fu_809_p2 == 1'd0) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else if (((ap_start == 1'b1) & (icmp_ln224_fu_809_p2 == 1'd1) & (icmp_ln221_fu_803_p2 == 1'd0) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else if (((ap_start == 1'b1) & (icmp_ln221_fu_803_p2 == 1'd1) & (icmp_ln215_fu_797_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if (((ap_start == 1'b1) & (icmp_ln215_fu_797_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln235_fu_827_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln235_fu_827_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln236_fu_844_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln236_fu_844_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln237_fu_861_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln237_fu_861_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if ((~((data_BVALID == 1'b0) | (data_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln238_fu_878_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln238_fu_878_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if ((~((ap_predicate_op242_writeresp_state34 == 1'b1) & (data_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln232_fu_895_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln232_fu_895_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (grp_forward_fu_599_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (grp_backward_fu_635_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (grp_forward_fu_599_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((icmp_ln222_fu_912_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((icmp_ln222_fu_912_p2 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state59 : begin
            if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((icmp_ln216_fu_929_p2 == 1'd1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((icmp_ln216_fu_929_p2 == 1'd1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((icmp_ln217_fu_946_p2 == 1'd1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) & ~((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((icmp_ln217_fu_946_p2 == 1'd1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_pp8_stage0;
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((icmp_ln218_fu_963_p2 == 1'd1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) & ~((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((icmp_ln218_fu_963_p2 == 1'd1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) | ((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_pp9_stage0;
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((~((icmp_ln219_fu_980_p2 == 1'd1) & (ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone)) & ~((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if ((((icmp_ln219_fu_980_p2 == 1'd1) & (ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone)) | ((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln216_fu_935_p2 = (ap_phi_mux_phi_ln216_phi_fu_555_p4 + 4'd1);

assign add_ln217_fu_952_p2 = (ap_phi_mux_phi_ln217_phi_fu_567_p4 + 4'd1);

assign add_ln218_fu_969_p2 = (ap_phi_mux_phi_ln218_phi_fu_579_p4 + 10'd1);

assign add_ln219_fu_986_p2 = (ap_phi_mux_phi_ln219_phi_fu_591_p4 + 8'd1);

assign add_ln222_fu_918_p2 = (ap_phi_mux_phi_ln222_phi_fu_543_p4 + 10'd1);

assign add_ln232_fu_901_p2 = (phi_ln232_reg_528 + 4'd1);

assign add_ln235_fu_833_p2 = (phi_ln235_reg_484 + 4'd1);

assign add_ln236_fu_850_p2 = (phi_ln236_reg_495 + 4'd1);

assign add_ln237_fu_867_p2 = (phi_ln237_reg_506 + 10'd1);

assign add_ln238_fu_884_p2 = (phi_ln238_reg_517 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd78];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((data_RVALID == 1'b0) & (icmp_ln222_reg_1162 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((data_RVALID == 1'b0) & (icmp_ln222_reg_1162 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((data_RVALID == 1'b0) & (icmp_ln216_reg_1176 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((data_RVALID == 1'b0) & (icmp_ln216_reg_1176 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage0_11001 = ((data_RVALID == 1'b0) & (icmp_ln217_reg_1190 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp7_stage0_subdone = ((data_RVALID == 1'b0) & (icmp_ln217_reg_1190 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1));
end

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((data_RVALID == 1'b0) & (icmp_ln218_reg_1204 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((data_RVALID == 1'b0) & (icmp_ln218_reg_1204 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp9_stage0_11001 = ((data_RVALID == 1'b0) & (icmp_ln219_reg_1218 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp9_stage0_subdone = ((data_RVALID == 1'b0) & (icmp_ln219_reg_1218 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1));
end

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((data_WREADY == 1'b0) & (icmp_ln236_reg_1086_pp1_iter1_reg == 1'd0));
end

assign ap_block_state13_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((data_WREADY == 1'b0) & (icmp_ln237_reg_1105_pp2_iter1_reg == 1'd0));
end

assign ap_block_state21_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((data_WREADY == 1'b0) & (icmp_ln238_reg_1124_pp3_iter1_reg == 1'd0));
end

assign ap_block_state29_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34 = ((ap_predicate_op242_writeresp_state34 == 1'b1) & (data_BVALID == 1'b0));
end

assign ap_block_state36_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state38_io = ((data_WREADY == 1'b0) & (icmp_ln232_reg_1143_pp4_iter1_reg == 1'd0));
end

assign ap_block_state38_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state56_pp5_stage0_iter1 = ((data_RVALID == 1'b0) & (icmp_ln222_reg_1162 == 1'd0));
end

assign ap_block_state57_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((data_WREADY == 1'b0) & (icmp_ln235_reg_1067_pp0_iter1_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state67_pp6_stage0_iter1 = ((data_RVALID == 1'b0) & (icmp_ln216_reg_1176 == 1'd0));
end

assign ap_block_state68_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state77_pp7_stage0_iter1 = ((data_RVALID == 1'b0) & (icmp_ln217_reg_1190 == 1'd0));
end

assign ap_block_state78_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state87_pp8_stage0_iter1 = ((data_RVALID == 1'b0) & (icmp_ln218_reg_1204 == 1'd0));
end

assign ap_block_state88_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state97_pp9_stage0_iter1 = ((data_RVALID == 1'b0) & (icmp_ln219_reg_1218 == 1'd0));
end

assign ap_block_state98_pp9_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

always @ (*) begin
    ap_predicate_op242_writeresp_state34 = ((icmp_ln231_reg_1063 == 1'd0) & (icmp_ln227_reg_1059 == 1'd0) & (icmp_ln224_reg_1055 == 1'd0) & (icmp_ln221_reg_1051 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign conv3_fu_757_p4 = {{conv1[31:2]}};

assign conv_fu_737_p4 = {{conv2[31:2]}};

assign empty_21_fu_707_p1 = fc_fu_697_p4;

assign empty_22_fu_727_p1 = fc3_fu_717_p4;

assign empty_23_fu_747_p1 = conv_fu_737_p4;

assign empty_24_fu_767_p1 = conv3_fu_757_p4;

assign empty_25_fu_787_p1 = in1_fu_777_p4;

assign empty_fu_687_p1 = out1_fu_677_p4;

assign fc3_fu_717_p4 = {{fc1[31:2]}};

assign fc_fu_697_p4 = {{fc2[31:2]}};

assign grp_backward_fu_635_ap_start = grp_backward_fu_635_ap_start_reg;

assign grp_forward_fu_599_ap_start = grp_forward_fu_599_ap_start_reg;

assign icmp_ln215_fu_797_p2 = ((flag == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_929_p2 = ((ap_phi_mux_phi_ln216_phi_fu_555_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_946_p2 = ((ap_phi_mux_phi_ln217_phi_fu_567_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln218_fu_963_p2 = ((ap_phi_mux_phi_ln218_phi_fu_579_p4 == 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_980_p2 = ((ap_phi_mux_phi_ln219_phi_fu_591_p4 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_803_p2 = ((flag == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_912_p2 = ((ap_phi_mux_phi_ln222_phi_fu_543_p4 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_809_p2 = ((flag == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_815_p2 = ((flag == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln231_fu_821_p2 = ((flag == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_895_p2 = ((phi_ln232_reg_528 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_827_p2 = ((phi_ln235_reg_484 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_844_p2 = ((phi_ln236_reg_495 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_861_p2 = ((phi_ln237_reg_506 == 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_878_p2 = ((phi_ln238_reg_517 == 8'd200) ? 1'b1 : 1'b0);

assign in1_fu_777_p4 = {{in_r[31:2]}};

assign out1_fu_677_p4 = {{out_r[31:2]}};

assign zext_ln216_fu_941_p1 = phi_ln216_reg_551_pp6_iter1_reg;

assign zext_ln217_fu_958_p1 = phi_ln217_reg_563_pp7_iter1_reg;

assign zext_ln218_fu_975_p1 = phi_ln218_reg_575_pp8_iter1_reg;

assign zext_ln219_fu_992_p1 = phi_ln219_reg_587_pp9_iter1_reg;

assign zext_ln222_fu_924_p1 = phi_ln222_reg_539_pp5_iter1_reg;

assign zext_ln232_fu_907_p1 = phi_ln232_reg_528;

assign zext_ln235_fu_839_p1 = phi_ln235_reg_484;

assign zext_ln236_fu_856_p1 = phi_ln236_reg_495;

assign zext_ln237_fu_873_p1 = phi_ln237_reg_506;

assign zext_ln238_fu_890_p1 = phi_ln238_reg_517;

always @ (posedge ap_clk) begin
    data_addr_reg_1007[31:30] <= 2'b00;
    data_addr_1_reg_1013[31:30] <= 2'b00;
    data_addr_2_reg_1020[31:30] <= 2'b00;
    data_addr_3_reg_1027[31:30] <= 2'b00;
    data_addr_4_reg_1034[31:30] <= 2'b00;
    data_addr_5_reg_1041[31:30] <= 2'b00;
end

endmodule //forw_back
