// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MaxPool2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_matrix_address0,
        output_matrix_ce0,
        output_matrix_we0,
        output_matrix_d0,
        locate_matrix_address0,
        locate_matrix_ce0,
        locate_matrix_we0,
        locate_matrix_d0,
        conv_out_2_address0,
        conv_out_2_ce0,
        conv_out_2_q0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] output_matrix_address0;
output   output_matrix_ce0;
output   output_matrix_we0;
output  [31:0] output_matrix_d0;
output  [5:0] locate_matrix_address0;
output   locate_matrix_ce0;
output   locate_matrix_we0;
output  [31:0] locate_matrix_d0;
output  [7:0] conv_out_2_address0;
output   conv_out_2_ce0;
input  [31:0] conv_out_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_matrix_ce0;
reg output_matrix_we0;
reg locate_matrix_ce0;
reg locate_matrix_we0;
reg conv_out_2_ce0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_185_p1;
reg   [31:0] reg_195;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state23;
wire   [2:0] i_fu_207_p2;
reg   [2:0] i_reg_565;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln41_fu_221_p1;
reg   [31:0] zext_ln41_reg_570;
wire   [0:0] icmp_ln38_fu_201_p2;
wire   [31:0] zext_ln41_4_fu_235_p1;
reg   [31:0] zext_ln41_4_reg_575;
wire   [6:0] sub_ln45_fu_251_p2;
reg   [6:0] sub_ln45_reg_580;
wire   [2:0] j_fu_267_p2;
reg   [2:0] j_reg_588;
wire    ap_CS_fsm_state3;
wire   [31:0] zext_ln42_fu_281_p1;
reg   [31:0] zext_ln42_reg_593;
wire   [0:0] icmp_ln39_fu_261_p2;
wire   [31:0] zext_ln42_2_fu_291_p1;
reg   [31:0] zext_ln42_2_reg_598;
reg   [5:0] output_matrix_addr_reg_603;
reg   [5:0] locate_matrix_addr_reg_608;
wire   [31:0] sub_ln43_fu_327_p2;
reg   [31:0] sub_ln43_reg_616;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln41_fu_310_p2;
wire   [31:0] col_2_fu_338_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln42_fu_333_p2;
wire  signed [31:0] add_ln43_fu_344_p2;
reg  signed [31:0] add_ln43_reg_629;
reg   [31:0] conv_out_2_load_reg_639;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln43_5_fu_372_p2;
reg   [0:0] icmp_ln43_5_reg_645;
wire   [0:0] icmp_ln43_6_fu_378_p2;
reg   [0:0] icmp_ln43_6_reg_650;
wire   [7:0] tmp_V_fu_387_p4;
reg   [7:0] tmp_V_reg_655;
wire    ap_CS_fsm_state12;
wire   [22:0] tmp_V_2_fu_397_p1;
reg   [22:0] tmp_V_2_reg_661;
wire   [0:0] and_ln43_2_fu_429_p2;
reg   [0:0] and_ln43_2_reg_666;
reg   [0:0] p_Result_s_reg_670;
wire   [31:0] p_Val2_11_fu_536_p3;
reg   [31:0] p_Val2_11_reg_675;
wire    ap_CS_fsm_state17;
reg   [31:0] tmp_7_reg_681;
wire   [31:0] row_2_fu_556_p2;
wire    ap_CS_fsm_state18;
reg   [2:0] i_0_reg_107;
reg   [2:0] j_0_reg_118;
wire    ap_CS_fsm_state24;
reg   [31:0] max_num_0_reg_129;
reg   [31:0] col_0_reg_141;
reg   [31:0] max_num_1_reg_151;
reg   [31:0] ap_phi_mux_max_num_2_phi_fu_177_p4;
reg   [31:0] row_0_reg_163;
wire   [31:0] p_Val2_12_fu_549_p3;
reg   [31:0] max_num_2_reg_173;
wire   [63:0] zext_ln45_fu_304_p1;
wire  signed [63:0] sext_ln43_fu_349_p1;
reg   [31:0] grp_fu_185_p0;
wire   [3:0] col_fu_213_p3;
wire   [3:0] add_ln41_fu_229_p2;
wire   [5:0] shl_ln_fu_239_p3;
wire   [6:0] zext_ln45_2_fu_247_p1;
wire   [6:0] zext_ln41_3_fu_225_p1;
wire   [3:0] row_fu_273_p3;
wire   [3:0] add_ln42_fu_285_p2;
wire   [6:0] j_0_cast3_fu_257_p1;
wire   [6:0] add_ln45_fu_295_p2;
wire  signed [31:0] sext_ln45_fu_300_p1;
wire   [31:0] shl_ln43_fu_315_p2;
wire   [31:0] shl_ln43_2_fu_321_p2;
wire   [31:0] bitcast_ln43_2_fu_354_p1;
wire   [7:0] tmp_14_fu_358_p4;
wire   [22:0] trunc_ln43_2_fu_368_p1;
wire   [31:0] p_Val2_s_fu_384_p1;
wire   [0:0] icmp_ln43_4_fu_407_p2;
wire   [0:0] icmp_ln43_fu_401_p2;
wire   [0:0] or_ln43_fu_413_p2;
wire   [0:0] or_ln43_2_fu_419_p2;
wire   [0:0] and_ln43_fu_423_p2;
wire   [0:0] grp_fu_190_p2;
wire   [24:0] mantissa_V_fu_443_p4;
wire   [8:0] zext_ln339_fu_456_p1;
wire   [8:0] add_ln339_fu_459_p2;
wire   [7:0] sub_ln1311_fu_473_p2;
wire   [0:0] isNeg_fu_465_p3;
wire  signed [8:0] sext_ln1311_fu_478_p1;
wire  signed [8:0] ush_fu_482_p3;
wire  signed [31:0] sext_ln1311_2_fu_490_p1;
wire  signed [24:0] sext_ln1311_3_fu_494_p1;
wire   [78:0] zext_ln682_fu_452_p1;
wire   [78:0] zext_ln1287_fu_498_p1;
wire   [24:0] r_V_fu_502_p2;
wire   [0:0] tmp_9_fu_514_p3;
wire   [78:0] r_V_2_fu_508_p2;
wire   [31:0] zext_ln662_fu_522_p1;
wire   [31:0] tmp_11_fu_526_p4;
wire   [31:0] result_V_2_fu_544_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

forw_back_sitofp_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
forw_back_sitofp_dEe_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_185_p0),
    .ce(1'b1),
    .dout(grp_fu_185_p1)
);

forw_back_fcmp_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
forw_back_fcmp_32eOg_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_2_q0),
    .din1(reg_195),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_190_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        col_0_reg_141 <= col_2_fu_338_p2;
    end else if (((icmp_ln39_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_reg_141 <= zext_ln41_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln39_fu_261_p2 == 1'd1))) begin
        i_0_reg_107 <= i_reg_565;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_107 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_118 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        j_0_reg_118 <= j_reg_588;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_num_0_reg_129 <= max_num_1_reg_151;
    end else if (((icmp_ln39_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_num_0_reg_129 <= 32'd4294966297;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        max_num_1_reg_151 <= ap_phi_mux_max_num_2_phi_fu_177_p4;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln41_fu_310_p2 == 1'd1))) begin
        max_num_1_reg_151 <= max_num_0_reg_129;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln43_2_fu_429_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        max_num_2_reg_173 <= max_num_1_reg_151;
    end else if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == and_ln43_2_reg_666))) begin
        max_num_2_reg_173 <= p_Val2_12_fu_549_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        row_0_reg_163 <= row_2_fu_556_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln41_fu_310_p2 == 1'd1))) begin
        row_0_reg_163 <= zext_ln42_reg_593;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln43_reg_629 <= add_ln43_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        and_ln43_2_reg_666 <= and_ln43_2_fu_429_p2;
        tmp_V_2_reg_661 <= tmp_V_2_fu_397_p1;
        tmp_V_reg_655 <= {{p_Val2_s_fu_384_p1[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_out_2_load_reg_639 <= conv_out_2_q0;
        icmp_ln43_5_reg_645 <= icmp_ln43_5_fu_372_p2;
        icmp_ln43_6_reg_650 <= icmp_ln43_6_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_565 <= i_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_588 <= j_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        locate_matrix_addr_reg_608 <= zext_ln45_fu_304_p1;
        output_matrix_addr_reg_603 <= zext_ln45_fu_304_p1;
        zext_ln42_2_reg_598[3 : 1] <= zext_ln42_2_fu_291_p1[3 : 1];
        zext_ln42_reg_593[3 : 1] <= zext_ln42_fu_281_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln43_2_fu_429_p2))) begin
        p_Result_s_reg_670 <= p_Val2_s_fu_384_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_11_reg_675 <= p_Val2_11_fu_536_p3;
        tmp_7_reg_681 <= grp_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_195 <= grp_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln41_fu_310_p2 == 1'd1))) begin
        sub_ln43_reg_616[31 : 2] <= sub_ln43_fu_327_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln45_reg_580[6 : 1] <= sub_ln45_fu_251_p2[6 : 1];
        zext_ln41_4_reg_575[3 : 1] <= zext_ln41_4_fu_235_p1[3 : 1];
        zext_ln41_reg_570[3 : 1] <= zext_ln41_fu_221_p1[3 : 1];
    end
end

always @ (*) begin
    if ((((icmp_ln38_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == and_ln43_2_reg_666))) begin
        ap_phi_mux_max_num_2_phi_fu_177_p4 = p_Val2_12_fu_549_p3;
    end else begin
        ap_phi_mux_max_num_2_phi_fu_177_p4 = max_num_2_reg_173;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_out_2_ce0 = 1'b1;
    end else begin
        conv_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_185_p0 = add_ln43_reg_629;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_185_p0 = max_num_1_reg_151;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_185_p0 = max_num_0_reg_129;
    end else begin
        grp_fu_185_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        locate_matrix_ce0 = 1'b1;
    end else begin
        locate_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == and_ln43_2_reg_666))) begin
        locate_matrix_we0 = 1'b1;
    end else begin
        locate_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_matrix_ce0 = 1'b1;
    end else begin
        output_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_matrix_we0 = 1'b1;
    end else begin
        output_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln39_fu_261_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln41_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln42_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'd0 == and_ln43_2_fu_429_p2) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_459_p2 = ($signed(zext_ln339_fu_456_p1) + $signed(9'd385));

assign add_ln41_fu_229_p2 = (col_fu_213_p3 + 4'd2);

assign add_ln42_fu_285_p2 = (row_fu_273_p3 + 4'd2);

assign add_ln43_fu_344_p2 = (row_0_reg_163 + sub_ln43_reg_616);

assign add_ln45_fu_295_p2 = (j_0_cast3_fu_257_p1 + sub_ln45_reg_580);

assign and_ln43_2_fu_429_p2 = (grp_fu_190_p2 & and_ln43_fu_423_p2);

assign and_ln43_fu_423_p2 = (or_ln43_fu_413_p2 & or_ln43_2_fu_419_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bitcast_ln43_2_fu_354_p1 = reg_195;

assign col_2_fu_338_p2 = (col_0_reg_141 + 32'd1);

assign col_fu_213_p3 = {{i_0_reg_107}, {1'd0}};

assign conv_out_2_address0 = sext_ln43_fu_349_p1;

assign i_fu_207_p2 = (i_0_reg_107 + 3'd1);

assign icmp_ln38_fu_201_p2 = ((i_0_reg_107 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_261_p2 = ((j_0_reg_118 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_310_p2 = (($signed(col_0_reg_141) < $signed(zext_ln41_4_reg_575)) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_333_p2 = (($signed(row_0_reg_163) < $signed(zext_ln42_2_reg_598)) ? 1'b1 : 1'b0);

assign icmp_ln43_4_fu_407_p2 = ((tmp_V_2_fu_397_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_5_fu_372_p2 = ((tmp_14_fu_358_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln43_6_fu_378_p2 = ((trunc_ln43_2_fu_368_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_401_p2 = ((tmp_V_fu_387_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_465_p3 = add_ln339_fu_459_p2[32'd8];

assign j_0_cast3_fu_257_p1 = j_0_reg_118;

assign j_fu_267_p2 = (j_0_reg_118 + 3'd1);

assign locate_matrix_address0 = locate_matrix_addr_reg_608;

assign locate_matrix_d0 = tmp_7_reg_681;

assign mantissa_V_fu_443_p4 = {{{{1'd1}, {tmp_V_2_reg_661}}}, {1'd0}};

assign or_ln43_2_fu_419_p2 = (icmp_ln43_6_reg_650 | icmp_ln43_5_reg_645);

assign or_ln43_fu_413_p2 = (icmp_ln43_fu_401_p2 | icmp_ln43_4_fu_407_p2);

assign output_matrix_address0 = output_matrix_addr_reg_603;

assign output_matrix_d0 = reg_195;

assign p_Val2_11_fu_536_p3 = ((isNeg_fu_465_p3[0:0] === 1'b1) ? zext_ln662_fu_522_p1 : tmp_11_fu_526_p4);

assign p_Val2_12_fu_549_p3 = ((p_Result_s_reg_670[0:0] === 1'b1) ? result_V_2_fu_544_p2 : p_Val2_11_reg_675);

assign p_Val2_s_fu_384_p1 = conv_out_2_load_reg_639;

assign r_V_2_fu_508_p2 = zext_ln682_fu_452_p1 << zext_ln1287_fu_498_p1;

assign r_V_fu_502_p2 = mantissa_V_fu_443_p4 >> sext_ln1311_3_fu_494_p1;

assign result_V_2_fu_544_p2 = (32'd0 - p_Val2_11_reg_675);

assign row_2_fu_556_p2 = (row_0_reg_163 + 32'd1);

assign row_fu_273_p3 = {{j_0_reg_118}, {1'd0}};

assign sext_ln1311_2_fu_490_p1 = ush_fu_482_p3;

assign sext_ln1311_3_fu_494_p1 = ush_fu_482_p3;

assign sext_ln1311_fu_478_p1 = $signed(sub_ln1311_fu_473_p2);

assign sext_ln43_fu_349_p1 = add_ln43_fu_344_p2;

assign sext_ln45_fu_300_p1 = $signed(add_ln45_fu_295_p2);

assign shl_ln43_2_fu_321_p2 = col_0_reg_141 << 32'd2;

assign shl_ln43_fu_315_p2 = col_0_reg_141 << 32'd4;

assign shl_ln_fu_239_p3 = {{i_0_reg_107}, {3'd0}};

assign sub_ln1311_fu_473_p2 = (8'd127 - tmp_V_reg_655);

assign sub_ln43_fu_327_p2 = (shl_ln43_fu_315_p2 - shl_ln43_2_fu_321_p2);

assign sub_ln45_fu_251_p2 = (zext_ln45_2_fu_247_p1 - zext_ln41_3_fu_225_p1);

assign tmp_11_fu_526_p4 = {{r_V_2_fu_508_p2[55:24]}};

assign tmp_14_fu_358_p4 = {{bitcast_ln43_2_fu_354_p1[30:23]}};

assign tmp_9_fu_514_p3 = r_V_fu_502_p2[32'd24];

assign tmp_V_2_fu_397_p1 = p_Val2_s_fu_384_p1[22:0];

assign tmp_V_fu_387_p4 = {{p_Val2_s_fu_384_p1[30:23]}};

assign trunc_ln43_2_fu_368_p1 = bitcast_ln43_2_fu_354_p1[22:0];

assign ush_fu_482_p3 = ((isNeg_fu_465_p3[0:0] === 1'b1) ? sext_ln1311_fu_478_p1 : add_ln339_fu_459_p2);

assign zext_ln1287_fu_498_p1 = $unsigned(sext_ln1311_2_fu_490_p1);

assign zext_ln339_fu_456_p1 = tmp_V_reg_655;

assign zext_ln41_3_fu_225_p1 = col_fu_213_p3;

assign zext_ln41_4_fu_235_p1 = add_ln41_fu_229_p2;

assign zext_ln41_fu_221_p1 = col_fu_213_p3;

assign zext_ln42_2_fu_291_p1 = add_ln42_fu_285_p2;

assign zext_ln42_fu_281_p1 = row_fu_273_p3;

assign zext_ln45_2_fu_247_p1 = shl_ln_fu_239_p3;

assign zext_ln45_fu_304_p1 = $unsigned(sext_ln45_fu_300_p1);

assign zext_ln662_fu_522_p1 = tmp_9_fu_514_p3;

assign zext_ln682_fu_452_p1 = mantissa_V_fu_443_p4;

always @ (posedge ap_clk) begin
    zext_ln41_reg_570[0] <= 1'b0;
    zext_ln41_reg_570[31:4] <= 28'b0000000000000000000000000000;
    zext_ln41_4_reg_575[0] <= 1'b0;
    zext_ln41_4_reg_575[31:4] <= 28'b0000000000000000000000000000;
    sub_ln45_reg_580[0] <= 1'b0;
    zext_ln42_reg_593[0] <= 1'b0;
    zext_ln42_reg_593[31:4] <= 28'b0000000000000000000000000000;
    zext_ln42_2_reg_598[0] <= 1'b0;
    zext_ln42_2_reg_598[31:4] <= 28'b0000000000000000000000000000;
    sub_ln43_reg_616[1:0] <= 2'b00;
end

endmodule //MaxPool2d
