-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forw_back is
generic (
    C_M_AXI_DATA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of forw_back is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "forw_back,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.195200,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=91,HLS_SYN_FF=17645,HLS_SYN_LUT=30286,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (78 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (78 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (78 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (78 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (78 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (78 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (78 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (78 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (78 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_384 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal flag : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal label_r : STD_LOGIC_VECTOR (31 downto 0);
    signal lr : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_kernel_1_ce0 : STD_LOGIC;
    signal conv_kernel_1_we0 : STD_LOGIC;
    signal conv_kernel_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_kernel_2_ce0 : STD_LOGIC;
    signal conv_kernel_2_we0 : STD_LOGIC;
    signal conv_kernel_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_kernel_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_hidden_layer1_ce0 : STD_LOGIC;
    signal fc_hidden_layer1_we0 : STD_LOGIC;
    signal fc_hidden_layer1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc_hidden_layer2_ce0 : STD_LOGIC;
    signal fc_hidden_layer2_we0 : STD_LOGIC;
    signal fc_hidden_layer2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_hidden_layer2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mnist_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mnist_data_ce0 : STD_LOGIC;
    signal mnist_data_we0 : STD_LOGIC;
    signal mnist_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_poo_out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_poo_out_1_ce0 : STD_LOGIC;
    signal max_poo_out_1_we0 : STD_LOGIC;
    signal max_poo_out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_poo_locate_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_poo_locate_1_ce0 : STD_LOGIC;
    signal max_poo_locate_1_we0 : STD_LOGIC;
    signal max_poo_locate_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_poo_locate_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal max_poo_locate_2_ce0 : STD_LOGIC;
    signal max_poo_locate_2_we0 : STD_LOGIC;
    signal max_poo_locate_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_in_1_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc_in_1_0_ce0 : STD_LOGIC;
    signal fc_in_1_0_we0 : STD_LOGIC;
    signal fc_in_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_out_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc_out_1_0_ce0 : STD_LOGIC;
    signal fc_out_1_0_we0 : STD_LOGIC;
    signal fc_out_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_in_2_relu1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc_in_2_relu1_0_ce0 : STD_LOGIC;
    signal fc_in_2_relu1_0_we0 : STD_LOGIC;
    signal fc_in_2_relu1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal probability_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal probability_result_ce0 : STD_LOGIC;
    signal probability_result_we0 : STD_LOGIC;
    signal probability_result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal data_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln232_reg_1143 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln232_reg_1143_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal icmp_ln219_reg_1218 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln238_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_1124_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln221_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_reg_1059 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln231_reg_1063 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal icmp_ln218_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln237_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_1105_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal icmp_ln217_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln236_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_1086_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln216_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln235_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_reg_1067_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln222_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_AWVALID : STD_LOGIC;
    signal data_AWREADY : STD_LOGIC;
    signal data_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_WVALID : STD_LOGIC;
    signal data_WREADY : STD_LOGIC;
    signal data_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ARVALID : STD_LOGIC;
    signal data_ARREADY : STD_LOGIC;
    signal data_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RVALID : STD_LOGIC;
    signal data_RREADY : STD_LOGIC;
    signal data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RLAST : STD_LOGIC;
    signal data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BVALID : STD_LOGIC;
    signal data_BREADY : STD_LOGIC;
    signal data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln235_reg_484 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln236_reg_495 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln237_reg_506 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln238_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln232_reg_528 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln222_reg_539 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln222_reg_539_pp5_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state55_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state56_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state57_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal phi_ln216_reg_551 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln216_reg_551_pp6_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state66_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state67_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state68_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal phi_ln217_reg_563 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln217_reg_563_pp7_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state76_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state77_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state78_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal phi_ln218_reg_575 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln218_reg_575_pp8_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state86_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state87_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state88_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal phi_ln219_reg_587 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln219_reg_587_pp9_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state96_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state97_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_state98_pp9_stage0_iter2 : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal label_read_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal lr1_reg_1002 : STD_LOGIC_VECTOR (29 downto 0);
    signal data_addr_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_1_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_2_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_3_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_4_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_addr_5_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln215_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln231_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln235_fu_833_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal conv_kernel_1_load_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln236_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln236_fu_850_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal conv_kernel_2_load_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln237_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state19_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln237_fu_867_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal fc_hidden_layer1_loa_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal icmp_ln238_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state27_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln238_fu_884_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal fc_hidden_layer2_loa_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal icmp_ln232_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state36_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state38_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state38_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal add_ln232_fu_901_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal probability_result_l_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln222_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln222_reg_1162_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln222_fu_918_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln222_reg_1166 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal data_addr_5_read_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln216_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_1176_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln216_fu_935_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln216_reg_1180 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal data_addr_4_read_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln217_reg_1190_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln217_fu_952_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln217_reg_1194 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal data_addr_3_read_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln218_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln218_reg_1204_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln218_fu_969_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln218_reg_1208 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal data_addr_2_read_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln219_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_reg_1218_pp9_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln219_fu_986_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln219_reg_1222 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal data_addr_1_read_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state19 : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state27 : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state36 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state55 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state66 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state76 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state86 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state96 : STD_LOGIC;
    signal ap_enable_reg_pp9_iter2 : STD_LOGIC := '0';
    signal grp_forward_fu_599_ap_start : STD_LOGIC;
    signal grp_forward_fu_599_ap_done : STD_LOGIC;
    signal grp_forward_fu_599_ap_idle : STD_LOGIC;
    signal grp_forward_fu_599_ap_ready : STD_LOGIC;
    signal grp_forward_fu_599_mnist_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_forward_fu_599_mnist_data_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_conv_kernel_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_599_conv_kernel_1_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_forward_fu_599_max_poo_out_1_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_out_1_we0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_out_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_599_max_poo_locate_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_forward_fu_599_max_poo_locate_1_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_locate_1_we0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_locate_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_599_conv_kernel_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_599_conv_kernel_2_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_locate_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_forward_fu_599_max_poo_locate_2_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_locate_2_we0 : STD_LOGIC;
    signal grp_forward_fu_599_max_poo_locate_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_599_fc_in_1_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_forward_fu_599_fc_in_1_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_fc_in_1_0_we0 : STD_LOGIC;
    signal grp_forward_fu_599_fc_in_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_599_fc_out_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_forward_fu_599_fc_out_1_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_fc_out_1_0_we0 : STD_LOGIC;
    signal grp_forward_fu_599_fc_out_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_599_fc_hidden_layer1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_forward_fu_599_fc_hidden_layer1_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_fc_in_2_relu1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_forward_fu_599_fc_in_2_relu1_0_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_fc_in_2_relu1_0_we0 : STD_LOGIC;
    signal grp_forward_fu_599_fc_in_2_relu1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_forward_fu_599_fc_hidden_layer2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_forward_fu_599_fc_hidden_layer2_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_probability_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_forward_fu_599_probability_result_ce0 : STD_LOGIC;
    signal grp_forward_fu_599_probability_result_we0 : STD_LOGIC;
    signal grp_forward_fu_599_probability_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_ap_start : STD_LOGIC;
    signal grp_backward_fu_635_ap_done : STD_LOGIC;
    signal grp_backward_fu_635_ap_idle : STD_LOGIC;
    signal grp_backward_fu_635_ap_ready : STD_LOGIC;
    signal grp_backward_fu_635_m_axi_lr_in_AWVALID : STD_LOGIC;
    signal grp_backward_fu_635_m_axi_lr_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_WVALID : STD_LOGIC;
    signal grp_backward_fu_635_m_axi_lr_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_WLAST : STD_LOGIC;
    signal grp_backward_fu_635_m_axi_lr_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARVALID : STD_LOGIC;
    signal grp_backward_fu_635_m_axi_lr_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backward_fu_635_m_axi_lr_in_RREADY : STD_LOGIC;
    signal grp_backward_fu_635_m_axi_lr_in_BREADY : STD_LOGIC;
    signal grp_backward_fu_635_probability_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_probability_result_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_in_2_relu1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_backward_fu_635_fc_in_2_relu1_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_hidden_layer2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backward_fu_635_fc_hidden_layer2_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_hidden_layer2_we0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_hidden_layer2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_fc_out_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_backward_fu_635_fc_out_1_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_in_1_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backward_fu_635_fc_in_1_0_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_hidden_layer1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_635_fc_hidden_layer1_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_hidden_layer1_we0 : STD_LOGIC;
    signal grp_backward_fu_635_fc_hidden_layer1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_max_poo_locate_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backward_fu_635_max_poo_locate_2_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_max_poo_out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backward_fu_635_max_poo_out_1_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_conv_kernel_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_conv_kernel_2_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_conv_kernel_2_we0 : STD_LOGIC;
    signal grp_backward_fu_635_conv_kernel_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backward_fu_635_max_poo_locate_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backward_fu_635_max_poo_locate_1_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_mnist_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_backward_fu_635_mnist_data_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_conv_kernel_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backward_fu_635_conv_kernel_1_ce0 : STD_LOGIC;
    signal grp_backward_fu_635_conv_kernel_1_we0 : STD_LOGIC;
    signal grp_backward_fu_635_conv_kernel_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln222_phi_fu_543_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_phi_ln216_phi_fu_555_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_phi_ln217_phi_fu_567_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_phi_ln218_phi_fu_579_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_phi_ln219_phi_fu_591_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_forward_fu_599_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_backward_fu_635_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln235_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln237_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln238_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln222_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln216_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln217_fu_958_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_21_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_22_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_23_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_24_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_25_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_predicate_op242_writeresp_state34 : BOOLEAN;
    signal ap_block_state34 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal out1_fu_677_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal fc_fu_697_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal fc3_fu_717_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal conv_fu_737_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal conv3_fu_757_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal in1_fu_777_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (78 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;

    component forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mnist_data_ce0 : OUT STD_LOGIC;
        mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel_1_ce0 : OUT STD_LOGIC;
        conv_kernel_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_poo_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_poo_out_1_ce0 : OUT STD_LOGIC;
        max_poo_out_1_we0 : OUT STD_LOGIC;
        max_poo_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_poo_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_poo_locate_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_poo_locate_1_ce0 : OUT STD_LOGIC;
        max_poo_locate_1_we0 : OUT STD_LOGIC;
        max_poo_locate_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel_2_ce0 : OUT STD_LOGIC;
        conv_kernel_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_poo_locate_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        max_poo_locate_2_ce0 : OUT STD_LOGIC;
        max_poo_locate_2_we0 : OUT STD_LOGIC;
        max_poo_locate_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_in_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc_in_1_0_ce0 : OUT STD_LOGIC;
        fc_in_1_0_we0 : OUT STD_LOGIC;
        fc_in_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_in_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_out_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fc_out_1_0_ce0 : OUT STD_LOGIC;
        fc_out_1_0_we0 : OUT STD_LOGIC;
        fc_out_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_out_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        fc_hidden_layer1_ce0 : OUT STD_LOGIC;
        fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_in_2_relu1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fc_in_2_relu1_0_ce0 : OUT STD_LOGIC;
        fc_in_2_relu1_0_we0 : OUT STD_LOGIC;
        fc_in_2_relu1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_in_2_relu1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fc_hidden_layer2_ce0 : OUT STD_LOGIC;
        fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        probability_result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        probability_result_ce0 : OUT STD_LOGIC;
        probability_result_we0 : OUT STD_LOGIC;
        probability_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        label_r : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lr_in_AWVALID : OUT STD_LOGIC;
        m_axi_lr_in_AWREADY : IN STD_LOGIC;
        m_axi_lr_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lr_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lr_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lr_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lr_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lr_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lr_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lr_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lr_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lr_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_WVALID : OUT STD_LOGIC;
        m_axi_lr_in_WREADY : IN STD_LOGIC;
        m_axi_lr_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lr_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lr_in_WLAST : OUT STD_LOGIC;
        m_axi_lr_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_ARVALID : OUT STD_LOGIC;
        m_axi_lr_in_ARREADY : IN STD_LOGIC;
        m_axi_lr_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lr_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lr_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lr_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lr_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lr_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lr_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_lr_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lr_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_lr_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_RVALID : IN STD_LOGIC;
        m_axi_lr_in_RREADY : OUT STD_LOGIC;
        m_axi_lr_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_lr_in_RLAST : IN STD_LOGIC;
        m_axi_lr_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lr_in_BVALID : IN STD_LOGIC;
        m_axi_lr_in_BREADY : OUT STD_LOGIC;
        m_axi_lr_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_lr_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_lr_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        lr_in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        probability_result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        probability_result_ce0 : OUT STD_LOGIC;
        probability_result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_in_2_relu1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fc_in_2_relu1_0_ce0 : OUT STD_LOGIC;
        fc_in_2_relu1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fc_hidden_layer2_ce0 : OUT STD_LOGIC;
        fc_hidden_layer2_we0 : OUT STD_LOGIC;
        fc_hidden_layer2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_out_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fc_out_1_0_ce0 : OUT STD_LOGIC;
        fc_out_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_in_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc_in_1_0_ce0 : OUT STD_LOGIC;
        fc_in_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        fc_hidden_layer1_ce0 : OUT STD_LOGIC;
        fc_hidden_layer1_we0 : OUT STD_LOGIC;
        fc_hidden_layer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_poo_locate_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        max_poo_locate_2_ce0 : OUT STD_LOGIC;
        max_poo_locate_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_poo_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_poo_out_1_ce0 : OUT STD_LOGIC;
        max_poo_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel_2_ce0 : OUT STD_LOGIC;
        conv_kernel_2_we0 : OUT STD_LOGIC;
        conv_kernel_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_poo_locate_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_poo_locate_1_ce0 : OUT STD_LOGIC;
        max_poo_locate_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        mnist_data_ce0 : OUT STD_LOGIC;
        mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv_kernel_1_ce0 : OUT STD_LOGIC;
        conv_kernel_1_we0 : OUT STD_LOGIC;
        conv_kernel_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_kernel_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_conv_kevdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fc_hiddxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fc_hiddyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_mnist_dzec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_max_pooAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_max_poo_ofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fc_out_DeQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_fc_out_2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        flag : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        label_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        lr : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_kernel_1_U : component forw_back_conv_kevdy
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_kernel_1_address0,
        ce0 => conv_kernel_1_ce0,
        we0 => conv_kernel_1_we0,
        d0 => conv_kernel_1_d0,
        q0 => conv_kernel_1_q0);

    conv_kernel_2_U : component forw_back_conv_kevdy
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_kernel_2_address0,
        ce0 => conv_kernel_2_ce0,
        we0 => conv_kernel_2_we0,
        d0 => conv_kernel_2_d0,
        q0 => conv_kernel_2_q0);

    fc_hidden_layer1_U : component forw_back_fc_hiddxdS
    generic map (
        DataWidth => 32,
        AddressRange => 720,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_hidden_layer1_address0,
        ce0 => fc_hidden_layer1_ce0,
        we0 => fc_hidden_layer1_we0,
        d0 => fc_hidden_layer1_d0,
        q0 => fc_hidden_layer1_q0);

    fc_hidden_layer2_U : component forw_back_fc_hiddyd2
    generic map (
        DataWidth => 32,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_hidden_layer2_address0,
        ce0 => fc_hidden_layer2_ce0,
        we0 => fc_hidden_layer2_we0,
        d0 => fc_hidden_layer2_d0,
        q0 => fc_hidden_layer2_q0);

    mnist_data_U : component forw_back_mnist_dzec
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mnist_data_address0,
        ce0 => mnist_data_ce0,
        we0 => mnist_data_we0,
        d0 => data_addr_5_read_reg_1171,
        q0 => mnist_data_q0);

    max_poo_out_1_U : component forw_back_max_pooAem
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_poo_out_1_address0,
        ce0 => max_poo_out_1_ce0,
        we0 => max_poo_out_1_we0,
        d0 => grp_forward_fu_599_max_poo_out_1_d0,
        q0 => max_poo_out_1_q0);

    max_poo_locate_1_U : component forw_back_max_pooAem
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_poo_locate_1_address0,
        ce0 => max_poo_locate_1_ce0,
        we0 => max_poo_locate_1_we0,
        d0 => grp_forward_fu_599_max_poo_locate_1_d0,
        q0 => max_poo_locate_1_q0);

    max_poo_locate_2_U : component forward_max_poo_ofYi
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_poo_locate_2_address0,
        ce0 => max_poo_locate_2_ce0,
        we0 => max_poo_locate_2_we0,
        d0 => grp_forward_fu_599_max_poo_locate_2_d0,
        q0 => max_poo_locate_2_q0);

    fc_in_1_0_U : component forward_max_poo_ofYi
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_in_1_0_address0,
        ce0 => fc_in_1_0_ce0,
        we0 => fc_in_1_0_we0,
        d0 => grp_forward_fu_599_fc_in_1_0_d0,
        q0 => fc_in_1_0_q0);

    fc_out_1_0_U : component forw_back_fc_out_DeQ
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_out_1_0_address0,
        ce0 => fc_out_1_0_ce0,
        we0 => fc_out_1_0_we0,
        d0 => grp_forward_fu_599_fc_out_1_0_d0,
        q0 => fc_out_1_0_q0);

    fc_in_2_relu1_0_U : component forw_back_fc_out_DeQ
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_in_2_relu1_0_address0,
        ce0 => fc_in_2_relu1_0_ce0,
        we0 => fc_in_2_relu1_0_we0,
        d0 => grp_forward_fu_599_fc_in_2_relu1_0_d0,
        q0 => fc_in_2_relu1_0_q0);

    probability_result_U : component forward_fc_out_2_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => probability_result_address0,
        ce0 => probability_result_ce0,
        we0 => probability_result_we0,
        d0 => grp_forward_fu_599_probability_result_d0,
        q0 => probability_result_q0);

    forw_back_ctrl_s_axi_U : component forw_back_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        flag => flag,
        in_r => in_r,
        conv1 => conv1,
        conv2 => conv2,
        fc1 => fc1,
        fc2 => fc2,
        out_r => out_r,
        label_r => label_r,
        lr => lr);

    forw_back_data_m_axi_U : component forw_back_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_AWVALID,
        AWREADY => m_axi_data_AWREADY,
        AWADDR => m_axi_data_AWADDR,
        AWID => m_axi_data_AWID,
        AWLEN => m_axi_data_AWLEN,
        AWSIZE => m_axi_data_AWSIZE,
        AWBURST => m_axi_data_AWBURST,
        AWLOCK => m_axi_data_AWLOCK,
        AWCACHE => m_axi_data_AWCACHE,
        AWPROT => m_axi_data_AWPROT,
        AWQOS => m_axi_data_AWQOS,
        AWREGION => m_axi_data_AWREGION,
        AWUSER => m_axi_data_AWUSER,
        WVALID => m_axi_data_WVALID,
        WREADY => m_axi_data_WREADY,
        WDATA => m_axi_data_WDATA,
        WSTRB => m_axi_data_WSTRB,
        WLAST => m_axi_data_WLAST,
        WID => m_axi_data_WID,
        WUSER => m_axi_data_WUSER,
        ARVALID => m_axi_data_ARVALID,
        ARREADY => m_axi_data_ARREADY,
        ARADDR => m_axi_data_ARADDR,
        ARID => m_axi_data_ARID,
        ARLEN => m_axi_data_ARLEN,
        ARSIZE => m_axi_data_ARSIZE,
        ARBURST => m_axi_data_ARBURST,
        ARLOCK => m_axi_data_ARLOCK,
        ARCACHE => m_axi_data_ARCACHE,
        ARPROT => m_axi_data_ARPROT,
        ARQOS => m_axi_data_ARQOS,
        ARREGION => m_axi_data_ARREGION,
        ARUSER => m_axi_data_ARUSER,
        RVALID => m_axi_data_RVALID,
        RREADY => m_axi_data_RREADY,
        RDATA => m_axi_data_RDATA,
        RLAST => m_axi_data_RLAST,
        RID => m_axi_data_RID,
        RUSER => m_axi_data_RUSER,
        RRESP => m_axi_data_RRESP,
        BVALID => m_axi_data_BVALID,
        BREADY => m_axi_data_BREADY,
        BRESP => m_axi_data_BRESP,
        BID => m_axi_data_BID,
        BUSER => m_axi_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data_ARVALID,
        I_ARREADY => data_ARREADY,
        I_ARADDR => data_ARADDR,
        I_ARID => data_ARID,
        I_ARLEN => data_ARLEN,
        I_ARSIZE => data_ARSIZE,
        I_ARLOCK => data_ARLOCK,
        I_ARCACHE => data_ARCACHE,
        I_ARQOS => data_ARQOS,
        I_ARPROT => data_ARPROT,
        I_ARUSER => data_ARUSER,
        I_ARBURST => data_ARBURST,
        I_ARREGION => data_ARREGION,
        I_RVALID => data_RVALID,
        I_RREADY => data_RREADY,
        I_RDATA => data_RDATA,
        I_RID => data_RID,
        I_RUSER => data_RUSER,
        I_RRESP => data_RRESP,
        I_RLAST => data_RLAST,
        I_AWVALID => data_AWVALID,
        I_AWREADY => data_AWREADY,
        I_AWADDR => data_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => data_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => data_WVALID,
        I_WREADY => data_WREADY,
        I_WDATA => data_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => data_BVALID,
        I_BREADY => data_BREADY,
        I_BRESP => data_BRESP,
        I_BID => data_BID,
        I_BUSER => data_BUSER);

    grp_forward_fu_599 : component forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_forward_fu_599_ap_start,
        ap_done => grp_forward_fu_599_ap_done,
        ap_idle => grp_forward_fu_599_ap_idle,
        ap_ready => grp_forward_fu_599_ap_ready,
        mnist_data_address0 => grp_forward_fu_599_mnist_data_address0,
        mnist_data_ce0 => grp_forward_fu_599_mnist_data_ce0,
        mnist_data_q0 => mnist_data_q0,
        conv_kernel_1_address0 => grp_forward_fu_599_conv_kernel_1_address0,
        conv_kernel_1_ce0 => grp_forward_fu_599_conv_kernel_1_ce0,
        conv_kernel_1_q0 => conv_kernel_1_q0,
        max_poo_out_1_address0 => grp_forward_fu_599_max_poo_out_1_address0,
        max_poo_out_1_ce0 => grp_forward_fu_599_max_poo_out_1_ce0,
        max_poo_out_1_we0 => grp_forward_fu_599_max_poo_out_1_we0,
        max_poo_out_1_d0 => grp_forward_fu_599_max_poo_out_1_d0,
        max_poo_out_1_q0 => max_poo_out_1_q0,
        max_poo_locate_1_address0 => grp_forward_fu_599_max_poo_locate_1_address0,
        max_poo_locate_1_ce0 => grp_forward_fu_599_max_poo_locate_1_ce0,
        max_poo_locate_1_we0 => grp_forward_fu_599_max_poo_locate_1_we0,
        max_poo_locate_1_d0 => grp_forward_fu_599_max_poo_locate_1_d0,
        conv_kernel_2_address0 => grp_forward_fu_599_conv_kernel_2_address0,
        conv_kernel_2_ce0 => grp_forward_fu_599_conv_kernel_2_ce0,
        conv_kernel_2_q0 => conv_kernel_2_q0,
        max_poo_locate_2_address0 => grp_forward_fu_599_max_poo_locate_2_address0,
        max_poo_locate_2_ce0 => grp_forward_fu_599_max_poo_locate_2_ce0,
        max_poo_locate_2_we0 => grp_forward_fu_599_max_poo_locate_2_we0,
        max_poo_locate_2_d0 => grp_forward_fu_599_max_poo_locate_2_d0,
        fc_in_1_0_address0 => grp_forward_fu_599_fc_in_1_0_address0,
        fc_in_1_0_ce0 => grp_forward_fu_599_fc_in_1_0_ce0,
        fc_in_1_0_we0 => grp_forward_fu_599_fc_in_1_0_we0,
        fc_in_1_0_d0 => grp_forward_fu_599_fc_in_1_0_d0,
        fc_in_1_0_q0 => fc_in_1_0_q0,
        fc_out_1_0_address0 => grp_forward_fu_599_fc_out_1_0_address0,
        fc_out_1_0_ce0 => grp_forward_fu_599_fc_out_1_0_ce0,
        fc_out_1_0_we0 => grp_forward_fu_599_fc_out_1_0_we0,
        fc_out_1_0_d0 => grp_forward_fu_599_fc_out_1_0_d0,
        fc_out_1_0_q0 => fc_out_1_0_q0,
        fc_hidden_layer1_address0 => grp_forward_fu_599_fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0 => grp_forward_fu_599_fc_hidden_layer1_ce0,
        fc_hidden_layer1_q0 => fc_hidden_layer1_q0,
        fc_in_2_relu1_0_address0 => grp_forward_fu_599_fc_in_2_relu1_0_address0,
        fc_in_2_relu1_0_ce0 => grp_forward_fu_599_fc_in_2_relu1_0_ce0,
        fc_in_2_relu1_0_we0 => grp_forward_fu_599_fc_in_2_relu1_0_we0,
        fc_in_2_relu1_0_d0 => grp_forward_fu_599_fc_in_2_relu1_0_d0,
        fc_in_2_relu1_0_q0 => fc_in_2_relu1_0_q0,
        fc_hidden_layer2_address0 => grp_forward_fu_599_fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0 => grp_forward_fu_599_fc_hidden_layer2_ce0,
        fc_hidden_layer2_q0 => fc_hidden_layer2_q0,
        probability_result_address0 => grp_forward_fu_599_probability_result_address0,
        probability_result_ce0 => grp_forward_fu_599_probability_result_ce0,
        probability_result_we0 => grp_forward_fu_599_probability_result_we0,
        probability_result_d0 => grp_forward_fu_599_probability_result_d0);

    grp_backward_fu_635 : component backward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_backward_fu_635_ap_start,
        ap_done => grp_backward_fu_635_ap_done,
        ap_idle => grp_backward_fu_635_ap_idle,
        ap_ready => grp_backward_fu_635_ap_ready,
        label_r => label_read_reg_997,
        m_axi_lr_in_AWVALID => grp_backward_fu_635_m_axi_lr_in_AWVALID,
        m_axi_lr_in_AWREADY => ap_const_logic_0,
        m_axi_lr_in_AWADDR => grp_backward_fu_635_m_axi_lr_in_AWADDR,
        m_axi_lr_in_AWID => grp_backward_fu_635_m_axi_lr_in_AWID,
        m_axi_lr_in_AWLEN => grp_backward_fu_635_m_axi_lr_in_AWLEN,
        m_axi_lr_in_AWSIZE => grp_backward_fu_635_m_axi_lr_in_AWSIZE,
        m_axi_lr_in_AWBURST => grp_backward_fu_635_m_axi_lr_in_AWBURST,
        m_axi_lr_in_AWLOCK => grp_backward_fu_635_m_axi_lr_in_AWLOCK,
        m_axi_lr_in_AWCACHE => grp_backward_fu_635_m_axi_lr_in_AWCACHE,
        m_axi_lr_in_AWPROT => grp_backward_fu_635_m_axi_lr_in_AWPROT,
        m_axi_lr_in_AWQOS => grp_backward_fu_635_m_axi_lr_in_AWQOS,
        m_axi_lr_in_AWREGION => grp_backward_fu_635_m_axi_lr_in_AWREGION,
        m_axi_lr_in_AWUSER => grp_backward_fu_635_m_axi_lr_in_AWUSER,
        m_axi_lr_in_WVALID => grp_backward_fu_635_m_axi_lr_in_WVALID,
        m_axi_lr_in_WREADY => ap_const_logic_0,
        m_axi_lr_in_WDATA => grp_backward_fu_635_m_axi_lr_in_WDATA,
        m_axi_lr_in_WSTRB => grp_backward_fu_635_m_axi_lr_in_WSTRB,
        m_axi_lr_in_WLAST => grp_backward_fu_635_m_axi_lr_in_WLAST,
        m_axi_lr_in_WID => grp_backward_fu_635_m_axi_lr_in_WID,
        m_axi_lr_in_WUSER => grp_backward_fu_635_m_axi_lr_in_WUSER,
        m_axi_lr_in_ARVALID => grp_backward_fu_635_m_axi_lr_in_ARVALID,
        m_axi_lr_in_ARREADY => data_ARREADY,
        m_axi_lr_in_ARADDR => grp_backward_fu_635_m_axi_lr_in_ARADDR,
        m_axi_lr_in_ARID => grp_backward_fu_635_m_axi_lr_in_ARID,
        m_axi_lr_in_ARLEN => grp_backward_fu_635_m_axi_lr_in_ARLEN,
        m_axi_lr_in_ARSIZE => grp_backward_fu_635_m_axi_lr_in_ARSIZE,
        m_axi_lr_in_ARBURST => grp_backward_fu_635_m_axi_lr_in_ARBURST,
        m_axi_lr_in_ARLOCK => grp_backward_fu_635_m_axi_lr_in_ARLOCK,
        m_axi_lr_in_ARCACHE => grp_backward_fu_635_m_axi_lr_in_ARCACHE,
        m_axi_lr_in_ARPROT => grp_backward_fu_635_m_axi_lr_in_ARPROT,
        m_axi_lr_in_ARQOS => grp_backward_fu_635_m_axi_lr_in_ARQOS,
        m_axi_lr_in_ARREGION => grp_backward_fu_635_m_axi_lr_in_ARREGION,
        m_axi_lr_in_ARUSER => grp_backward_fu_635_m_axi_lr_in_ARUSER,
        m_axi_lr_in_RVALID => data_RVALID,
        m_axi_lr_in_RREADY => grp_backward_fu_635_m_axi_lr_in_RREADY,
        m_axi_lr_in_RDATA => data_RDATA,
        m_axi_lr_in_RLAST => data_RLAST,
        m_axi_lr_in_RID => data_RID,
        m_axi_lr_in_RUSER => data_RUSER,
        m_axi_lr_in_RRESP => data_RRESP,
        m_axi_lr_in_BVALID => ap_const_logic_0,
        m_axi_lr_in_BREADY => grp_backward_fu_635_m_axi_lr_in_BREADY,
        m_axi_lr_in_BRESP => ap_const_lv2_0,
        m_axi_lr_in_BID => ap_const_lv1_0,
        m_axi_lr_in_BUSER => ap_const_lv1_0,
        lr_in_offset => lr1_reg_1002,
        probability_result_address0 => grp_backward_fu_635_probability_result_address0,
        probability_result_ce0 => grp_backward_fu_635_probability_result_ce0,
        probability_result_q0 => probability_result_q0,
        fc_in_2_relu1_0_address0 => grp_backward_fu_635_fc_in_2_relu1_0_address0,
        fc_in_2_relu1_0_ce0 => grp_backward_fu_635_fc_in_2_relu1_0_ce0,
        fc_in_2_relu1_0_q0 => fc_in_2_relu1_0_q0,
        fc_hidden_layer2_address0 => grp_backward_fu_635_fc_hidden_layer2_address0,
        fc_hidden_layer2_ce0 => grp_backward_fu_635_fc_hidden_layer2_ce0,
        fc_hidden_layer2_we0 => grp_backward_fu_635_fc_hidden_layer2_we0,
        fc_hidden_layer2_d0 => grp_backward_fu_635_fc_hidden_layer2_d0,
        fc_hidden_layer2_q0 => fc_hidden_layer2_q0,
        fc_out_1_0_address0 => grp_backward_fu_635_fc_out_1_0_address0,
        fc_out_1_0_ce0 => grp_backward_fu_635_fc_out_1_0_ce0,
        fc_out_1_0_q0 => fc_out_1_0_q0,
        fc_in_1_0_address0 => grp_backward_fu_635_fc_in_1_0_address0,
        fc_in_1_0_ce0 => grp_backward_fu_635_fc_in_1_0_ce0,
        fc_in_1_0_q0 => fc_in_1_0_q0,
        fc_hidden_layer1_address0 => grp_backward_fu_635_fc_hidden_layer1_address0,
        fc_hidden_layer1_ce0 => grp_backward_fu_635_fc_hidden_layer1_ce0,
        fc_hidden_layer1_we0 => grp_backward_fu_635_fc_hidden_layer1_we0,
        fc_hidden_layer1_d0 => grp_backward_fu_635_fc_hidden_layer1_d0,
        fc_hidden_layer1_q0 => fc_hidden_layer1_q0,
        max_poo_locate_2_address0 => grp_backward_fu_635_max_poo_locate_2_address0,
        max_poo_locate_2_ce0 => grp_backward_fu_635_max_poo_locate_2_ce0,
        max_poo_locate_2_q0 => max_poo_locate_2_q0,
        max_poo_out_1_address0 => grp_backward_fu_635_max_poo_out_1_address0,
        max_poo_out_1_ce0 => grp_backward_fu_635_max_poo_out_1_ce0,
        max_poo_out_1_q0 => max_poo_out_1_q0,
        conv_kernel_2_address0 => grp_backward_fu_635_conv_kernel_2_address0,
        conv_kernel_2_ce0 => grp_backward_fu_635_conv_kernel_2_ce0,
        conv_kernel_2_we0 => grp_backward_fu_635_conv_kernel_2_we0,
        conv_kernel_2_d0 => grp_backward_fu_635_conv_kernel_2_d0,
        conv_kernel_2_q0 => conv_kernel_2_q0,
        max_poo_locate_1_address0 => grp_backward_fu_635_max_poo_locate_1_address0,
        max_poo_locate_1_ce0 => grp_backward_fu_635_max_poo_locate_1_ce0,
        max_poo_locate_1_q0 => max_poo_locate_1_q0,
        mnist_data_address0 => grp_backward_fu_635_mnist_data_address0,
        mnist_data_ce0 => grp_backward_fu_635_mnist_data_ce0,
        mnist_data_q0 => mnist_data_q0,
        conv_kernel_1_address0 => grp_backward_fu_635_conv_kernel_1_address0,
        conv_kernel_1_ce0 => grp_backward_fu_635_conv_kernel_1_ce0,
        conv_kernel_1_we0 => grp_backward_fu_635_conv_kernel_1_we0,
        conv_kernel_1_d0 => grp_backward_fu_635_conv_kernel_1_d0,
        conv_kernel_1_q0 => conv_kernel_1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state27) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state27)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state27);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state36) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state36)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state36);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state55) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state55)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state55);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state66) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state66)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state66);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state76) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state76)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state76);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state86) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state86)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state86);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state96) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state96)) then 
                        ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state96);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                    ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_backward_fu_635_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_backward_fu_635_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    grp_backward_fu_635_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_backward_fu_635_ap_ready = ap_const_logic_1)) then 
                    grp_backward_fu_635_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_forward_fu_599_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_forward_fu_599_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_start = ap_const_logic_1) and (icmp_ln227_fu_815_p2 = ap_const_lv1_1) and (icmp_ln224_fu_809_p2 = ap_const_lv1_0) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (icmp_ln224_fu_809_p2 = ap_const_lv1_1) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_forward_fu_599_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_forward_fu_599_ap_ready = ap_const_logic_1)) then 
                    grp_forward_fu_599_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    phi_ln216_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                phi_ln216_reg_551 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln216_reg_1176 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                phi_ln216_reg_551 <= add_ln216_reg_1180;
            end if; 
        end if;
    end process;

    phi_ln217_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                phi_ln217_reg_563 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln217_reg_1190 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                phi_ln217_reg_563 <= add_ln217_reg_1194;
            end if; 
        end if;
    end process;

    phi_ln218_reg_575_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                phi_ln218_reg_575 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln218_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                phi_ln218_reg_575 <= add_ln218_reg_1208;
            end if; 
        end if;
    end process;

    phi_ln219_reg_587_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                phi_ln219_reg_587 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln219_reg_1218 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                phi_ln219_reg_587 <= add_ln219_reg_1222;
            end if; 
        end if;
    end process;

    phi_ln222_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                phi_ln222_reg_539 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln222_reg_1162 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                phi_ln222_reg_539 <= add_ln222_reg_1166;
            end if; 
        end if;
    end process;

    phi_ln232_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                phi_ln232_reg_528 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln232_fu_895_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                phi_ln232_reg_528 <= add_ln232_fu_901_p2;
            end if; 
        end if;
    end process;

    phi_ln235_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln235_reg_484 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln235_fu_827_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln235_reg_484 <= add_ln235_fu_833_p2;
            end if; 
        end if;
    end process;

    phi_ln236_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_ln236_reg_495 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln236_fu_844_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                phi_ln236_reg_495 <= add_ln236_fu_850_p2;
            end if; 
        end if;
    end process;

    phi_ln237_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_ln237_reg_506 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln237_fu_861_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                phi_ln237_reg_506 <= add_ln237_fu_867_p2;
            end if; 
        end if;
    end process;

    phi_ln238_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                phi_ln238_reg_517 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln238_fu_878_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                phi_ln238_reg_517 <= add_ln238_fu_884_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln216_reg_1180 <= add_ln216_fu_935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                add_ln217_reg_1194 <= add_ln217_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                add_ln218_reg_1208 <= add_ln218_fu_969_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                add_ln219_reg_1222 <= add_ln219_fu_986_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln222_reg_1166 <= add_ln222_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln235_reg_1067 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_kernel_1_load_reg_1081 <= conv_kernel_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln236_reg_1086 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                conv_kernel_2_load_reg_1100 <= conv_kernel_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln219_reg_1218 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                data_addr_1_read_reg_1227 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    data_addr_1_reg_1013(29 downto 0) <= empty_21_fu_707_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_2_reg_1020(29 downto 0) <= empty_22_fu_727_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_3_reg_1027(29 downto 0) <= empty_23_fu_747_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_4_reg_1034(29 downto 0) <= empty_24_fu_767_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_5_reg_1041(29 downto 0) <= empty_25_fu_787_p1(32 - 1 downto 0)(29 downto 0);
                    data_addr_reg_1007(29 downto 0) <= empty_fu_687_p1(32 - 1 downto 0)(29 downto 0);
                label_read_reg_997 <= label_r;
                lr1_reg_1002 <= lr(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln218_reg_1204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                data_addr_2_read_reg_1213 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln217_reg_1190 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                data_addr_3_read_reg_1199 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln216_reg_1176 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                data_addr_4_read_reg_1185 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln222_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                data_addr_5_read_reg_1171 <= data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln237_reg_1105 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                fc_hidden_layer1_loa_reg_1119 <= fc_hidden_layer1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln238_reg_1124 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                fc_hidden_layer2_loa_reg_1138 <= fc_hidden_layer2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln216_reg_1176 <= icmp_ln216_fu_929_p2;
                icmp_ln216_reg_1176_pp6_iter1_reg <= icmp_ln216_reg_1176;
                phi_ln216_reg_551_pp6_iter1_reg <= phi_ln216_reg_551;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln217_reg_1190 <= icmp_ln217_fu_946_p2;
                icmp_ln217_reg_1190_pp7_iter1_reg <= icmp_ln217_reg_1190;
                phi_ln217_reg_563_pp7_iter1_reg <= phi_ln217_reg_563;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                icmp_ln218_reg_1204 <= icmp_ln218_fu_963_p2;
                icmp_ln218_reg_1204_pp8_iter1_reg <= icmp_ln218_reg_1204;
                phi_ln218_reg_575_pp8_iter1_reg <= phi_ln218_reg_575;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                icmp_ln219_reg_1218 <= icmp_ln219_fu_980_p2;
                icmp_ln219_reg_1218_pp9_iter1_reg <= icmp_ln219_reg_1218;
                phi_ln219_reg_587_pp9_iter1_reg <= phi_ln219_reg_587;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln221_reg_1051 <= icmp_ln221_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln222_reg_1162 <= icmp_ln222_fu_912_p2;
                icmp_ln222_reg_1162_pp5_iter1_reg <= icmp_ln222_reg_1162;
                phi_ln222_reg_539_pp5_iter1_reg <= phi_ln222_reg_539;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln224_reg_1055 <= icmp_ln224_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln224_fu_809_p2 = ap_const_lv1_0) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln227_reg_1059 <= icmp_ln227_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln227_fu_815_p2 = ap_const_lv1_0) and (icmp_ln224_fu_809_p2 = ap_const_lv1_0) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln231_reg_1063 <= icmp_ln231_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln232_reg_1143 <= icmp_ln232_fu_895_p2;
                icmp_ln232_reg_1143_pp4_iter1_reg <= icmp_ln232_reg_1143;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln235_reg_1067 <= icmp_ln235_fu_827_p2;
                icmp_ln235_reg_1067_pp0_iter1_reg <= icmp_ln235_reg_1067;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln236_reg_1086 <= icmp_ln236_fu_844_p2;
                icmp_ln236_reg_1086_pp1_iter1_reg <= icmp_ln236_reg_1086;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln237_reg_1105 <= icmp_ln237_fu_861_p2;
                icmp_ln237_reg_1105_pp2_iter1_reg <= icmp_ln237_reg_1105;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln238_reg_1124 <= icmp_ln238_fu_878_p2;
                icmp_ln238_reg_1124_pp3_iter1_reg <= icmp_ln238_reg_1124;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln232_reg_1143 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                probability_result_l_reg_1157 <= probability_result_q0;
            end if;
        end if;
    end process;
    data_addr_reg_1007(31 downto 30) <= "00";
    data_addr_1_reg_1013(31 downto 30) <= "00";
    data_addr_2_reg_1020(31 downto 30) <= "00";
    data_addr_3_reg_1027(31 downto 30) <= "00";
    data_addr_4_reg_1034(31 downto 30) <= "00";
    data_addr_5_reg_1041(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state35, ap_enable_reg_pp4_iter2, ap_CS_fsm_state43, ap_CS_fsm_state89, ap_enable_reg_pp9_iter1, ap_CS_fsm_state26, ap_enable_reg_pp3_iter2, ap_CS_fsm_state34, ap_CS_fsm_state79, ap_enable_reg_pp8_iter1, ap_CS_fsm_state18, ap_enable_reg_pp2_iter2, ap_CS_fsm_state69, ap_enable_reg_pp7_iter1, ap_CS_fsm_state10, ap_enable_reg_pp1_iter2, ap_CS_fsm_state59, ap_enable_reg_pp6_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state48, ap_enable_reg_pp5_iter1, data_AWREADY, data_ARREADY, data_BVALID, icmp_ln215_fu_797_p2, icmp_ln221_fu_803_p2, icmp_ln224_fu_809_p2, icmp_ln227_fu_815_p2, icmp_ln231_fu_821_p2, icmp_ln235_fu_827_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln236_fu_844_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln237_fu_861_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln238_fu_878_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, icmp_ln232_fu_895_p2, ap_enable_reg_pp4_iter0, icmp_ln222_fu_912_p2, ap_enable_reg_pp5_iter0, icmp_ln216_fu_929_p2, ap_enable_reg_pp6_iter0, icmp_ln217_fu_946_p2, ap_enable_reg_pp7_iter0, icmp_ln218_fu_963_p2, ap_enable_reg_pp8_iter0, icmp_ln219_fu_980_p2, ap_enable_reg_pp9_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter2, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter2, ap_block_pp8_stage0_subdone, ap_enable_reg_pp8_iter2, ap_block_pp9_stage0_subdone, ap_enable_reg_pp9_iter2, grp_forward_fu_599_ap_done, grp_backward_fu_635_ap_done, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46, ap_predicate_op242_writeresp_state34)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln231_fu_821_p2 = ap_const_lv1_1) and (icmp_ln227_fu_815_p2 = ap_const_lv1_0) and (icmp_ln224_fu_809_p2 = ap_const_lv1_0) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln231_fu_821_p2 = ap_const_lv1_0) and (icmp_ln227_fu_815_p2 = ap_const_lv1_0) and (icmp_ln224_fu_809_p2 = ap_const_lv1_0) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln227_fu_815_p2 = ap_const_lv1_1) and (icmp_ln224_fu_809_p2 = ap_const_lv1_0) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln224_fu_809_p2 = ap_const_lv1_1) and (icmp_ln221_fu_803_p2 = ap_const_lv1_0) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln221_fu_803_p2 = ap_const_lv1_1) and (icmp_ln215_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln215_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln235_fu_827_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln235_fu_827_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln236_fu_844_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln236_fu_844_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln237_fu_861_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln237_fu_861_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln238_fu_878_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln238_fu_878_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if ((not(((ap_predicate_op242_writeresp_state34 = ap_const_boolean_1) and (data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln232_fu_895_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((icmp_ln232_fu_895_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_forward_fu_599_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_backward_fu_635_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_forward_fu_599_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln222_fu_912_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((icmp_ln222_fu_912_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state59 => 
                if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((icmp_ln216_fu_929_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((icmp_ln216_fu_929_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state69 => 
                if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((icmp_ln217_fu_946_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((icmp_ln217_fu_946_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state79 => 
                if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((icmp_ln218_fu_963_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) and not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((icmp_ln218_fu_963_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state89 => 
                if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((icmp_ln219_fu_980_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) and not(((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif ((((icmp_ln219_fu_980_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) or ((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln216_fu_935_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln216_phi_fu_555_p4) + unsigned(ap_const_lv4_1));
    add_ln217_fu_952_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln217_phi_fu_567_p4) + unsigned(ap_const_lv4_1));
    add_ln218_fu_969_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln218_phi_fu_579_p4) + unsigned(ap_const_lv10_1));
    add_ln219_fu_986_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln219_phi_fu_591_p4) + unsigned(ap_const_lv8_1));
    add_ln222_fu_918_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln222_phi_fu_543_p4) + unsigned(ap_const_lv10_1));
    add_ln232_fu_901_p2 <= std_logic_vector(unsigned(phi_ln232_reg_528) + unsigned(ap_const_lv4_1));
    add_ln235_fu_833_p2 <= std_logic_vector(unsigned(phi_ln235_reg_484) + unsigned(ap_const_lv4_1));
    add_ln236_fu_850_p2 <= std_logic_vector(unsigned(phi_ln236_reg_495) + unsigned(ap_const_lv4_1));
    add_ln237_fu_867_p2 <= std_logic_vector(unsigned(phi_ln237_reg_506) + unsigned(ap_const_lv10_1));
    add_ln238_fu_884_p2 <= std_logic_vector(unsigned(phi_ln238_reg_517) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(44);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(53);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(61);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(69);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(77);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(19);
    ap_CS_fsm_state34 <= ap_CS_fsm(25);
    ap_CS_fsm_state35 <= ap_CS_fsm(26);
    ap_CS_fsm_state43 <= ap_CS_fsm(32);
    ap_CS_fsm_state44 <= ap_CS_fsm(33);
    ap_CS_fsm_state45 <= ap_CS_fsm(34);
    ap_CS_fsm_state46 <= ap_CS_fsm(35);
    ap_CS_fsm_state47 <= ap_CS_fsm(36);
    ap_CS_fsm_state48 <= ap_CS_fsm(37);
    ap_CS_fsm_state54 <= ap_CS_fsm(43);
    ap_CS_fsm_state59 <= ap_CS_fsm(46);
    ap_CS_fsm_state65 <= ap_CS_fsm(52);
    ap_CS_fsm_state69 <= ap_CS_fsm(54);
    ap_CS_fsm_state75 <= ap_CS_fsm(60);
    ap_CS_fsm_state79 <= ap_CS_fsm(62);
    ap_CS_fsm_state85 <= ap_CS_fsm(68);
    ap_CS_fsm_state89 <= ap_CS_fsm(70);
    ap_CS_fsm_state95 <= ap_CS_fsm(76);
    ap_CS_fsm_state99 <= ap_CS_fsm(78);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state13_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state13_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state21_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state21_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state29_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state29_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state38_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state38_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln222_reg_1162, data_RVALID)
    begin
                ap_block_pp5_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln222_reg_1162 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln222_reg_1162, data_RVALID)
    begin
                ap_block_pp5_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (icmp_ln222_reg_1162 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln216_reg_1176, data_RVALID)
    begin
                ap_block_pp6_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln216_reg_1176 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln216_reg_1176, data_RVALID)
    begin
                ap_block_pp6_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (icmp_ln216_reg_1176 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter1, icmp_ln217_reg_1190, data_RVALID)
    begin
                ap_block_pp7_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln217_reg_1190 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter1, icmp_ln217_reg_1190, data_RVALID)
    begin
                ap_block_pp7_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (icmp_ln217_reg_1190 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter1, icmp_ln218_reg_1204, data_RVALID)
    begin
                ap_block_pp8_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln218_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter1, icmp_ln218_reg_1204, data_RVALID)
    begin
                ap_block_pp8_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (icmp_ln218_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp9_stage0_11001_assign_proc : process(ap_enable_reg_pp9_iter1, icmp_ln219_reg_1218, data_RVALID)
    begin
                ap_block_pp9_stage0_11001 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln219_reg_1218 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp9_stage0_subdone_assign_proc : process(ap_enable_reg_pp9_iter1, icmp_ln219_reg_1218, data_RVALID)
    begin
                ap_block_pp9_stage0_subdone <= ((data_RVALID = ap_const_logic_0) and (icmp_ln219_reg_1218 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1));
    end process;

        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(icmp_ln236_reg_1086_pp1_iter1_reg, data_WREADY)
    begin
                ap_block_state13_io <= ((data_WREADY = ap_const_logic_0) and (icmp_ln236_reg_1086_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state13_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(icmp_ln237_reg_1105_pp2_iter1_reg, data_WREADY)
    begin
                ap_block_state21_io <= ((data_WREADY = ap_const_logic_0) and (icmp_ln237_reg_1105_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state21_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_io_assign_proc : process(icmp_ln238_reg_1124_pp3_iter1_reg, data_WREADY)
    begin
                ap_block_state29_io <= ((data_WREADY = ap_const_logic_0) and (icmp_ln238_reg_1124_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state29_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_assign_proc : process(data_BVALID, ap_predicate_op242_writeresp_state34)
    begin
                ap_block_state34 <= ((ap_predicate_op242_writeresp_state34 = ap_const_boolean_1) and (data_BVALID = ap_const_logic_0));
    end process;

        ap_block_state36_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_io_assign_proc : process(icmp_ln232_reg_1143_pp4_iter1_reg, data_WREADY)
    begin
                ap_block_state38_io <= ((data_WREADY = ap_const_logic_0) and (icmp_ln232_reg_1143_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state38_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state56_pp5_stage0_iter1_assign_proc : process(icmp_ln222_reg_1162, data_RVALID)
    begin
                ap_block_state56_pp5_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln222_reg_1162 = ap_const_lv1_0));
    end process;

        ap_block_state57_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln235_reg_1067_pp0_iter1_reg, data_WREADY)
    begin
                ap_block_state5_io <= ((data_WREADY = ap_const_logic_0) and (icmp_ln235_reg_1067_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state67_pp6_stage0_iter1_assign_proc : process(icmp_ln216_reg_1176, data_RVALID)
    begin
                ap_block_state67_pp6_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln216_reg_1176 = ap_const_lv1_0));
    end process;

        ap_block_state68_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state77_pp7_stage0_iter1_assign_proc : process(icmp_ln217_reg_1190, data_RVALID)
    begin
                ap_block_state77_pp7_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln217_reg_1190 = ap_const_lv1_0));
    end process;

        ap_block_state78_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state87_pp8_stage0_iter1_assign_proc : process(icmp_ln218_reg_1204, data_RVALID)
    begin
                ap_block_state87_pp8_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln218_reg_1204 = ap_const_lv1_0));
    end process;

        ap_block_state88_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state97_pp9_stage0_iter1_assign_proc : process(icmp_ln219_reg_1218, data_RVALID)
    begin
                ap_block_state97_pp9_stage0_iter1 <= ((data_RVALID = ap_const_logic_0) and (icmp_ln219_reg_1218 = ap_const_lv1_0));
    end process;

        ap_block_state98_pp9_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln235_fu_827_p2)
    begin
        if ((icmp_ln235_fu_827_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state11_assign_proc : process(icmp_ln236_fu_844_p2)
    begin
        if ((icmp_ln236_fu_844_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state19_assign_proc : process(icmp_ln237_fu_861_p2)
    begin
        if ((icmp_ln237_fu_861_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state27_assign_proc : process(icmp_ln238_fu_878_p2)
    begin
        if ((icmp_ln238_fu_878_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state36_assign_proc : process(icmp_ln232_fu_895_p2)
    begin
        if ((icmp_ln232_fu_895_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state55_assign_proc : process(icmp_ln222_fu_912_p2)
    begin
        if ((icmp_ln222_fu_912_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state55 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state66_assign_proc : process(icmp_ln216_fu_929_p2)
    begin
        if ((icmp_ln216_fu_929_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state66 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state66 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state76_assign_proc : process(icmp_ln217_fu_946_p2)
    begin
        if ((icmp_ln217_fu_946_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state76 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state86_assign_proc : process(icmp_ln218_fu_963_p2)
    begin
        if ((icmp_ln218_fu_963_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state86 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state86 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state96_assign_proc : process(icmp_ln219_fu_980_p2)
    begin
        if ((icmp_ln219_fu_980_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state96 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state96 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter2)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter1, ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter2)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln216_phi_fu_555_p4_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln216_reg_1176, phi_ln216_reg_551, add_ln216_reg_1180)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (icmp_ln216_reg_1176 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            ap_phi_mux_phi_ln216_phi_fu_555_p4 <= add_ln216_reg_1180;
        else 
            ap_phi_mux_phi_ln216_phi_fu_555_p4 <= phi_ln216_reg_551;
        end if; 
    end process;


    ap_phi_mux_phi_ln217_phi_fu_567_p4_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, icmp_ln217_reg_1190, phi_ln217_reg_563, add_ln217_reg_1194)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (icmp_ln217_reg_1190 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            ap_phi_mux_phi_ln217_phi_fu_567_p4 <= add_ln217_reg_1194;
        else 
            ap_phi_mux_phi_ln217_phi_fu_567_p4 <= phi_ln217_reg_563;
        end if; 
    end process;


    ap_phi_mux_phi_ln218_phi_fu_579_p4_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, icmp_ln218_reg_1204, phi_ln218_reg_575, add_ln218_reg_1208)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (icmp_ln218_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
            ap_phi_mux_phi_ln218_phi_fu_579_p4 <= add_ln218_reg_1208;
        else 
            ap_phi_mux_phi_ln218_phi_fu_579_p4 <= phi_ln218_reg_575;
        end if; 
    end process;


    ap_phi_mux_phi_ln219_phi_fu_591_p4_assign_proc : process(ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter1, ap_block_pp9_stage0, icmp_ln219_reg_1218, phi_ln219_reg_587, add_ln219_reg_1222)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (icmp_ln219_reg_1218 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
            ap_phi_mux_phi_ln219_phi_fu_591_p4 <= add_ln219_reg_1222;
        else 
            ap_phi_mux_phi_ln219_phi_fu_591_p4 <= phi_ln219_reg_587;
        end if; 
    end process;


    ap_phi_mux_phi_ln222_phi_fu_543_p4_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln222_reg_1162, phi_ln222_reg_539, add_ln222_reg_1166)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln222_reg_1162 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            ap_phi_mux_phi_ln222_phi_fu_543_p4 <= add_ln222_reg_1166;
        else 
            ap_phi_mux_phi_ln222_phi_fu_543_p4 <= phi_ln222_reg_539;
        end if; 
    end process;


    ap_predicate_op242_writeresp_state34_assign_proc : process(icmp_ln221_reg_1051, icmp_ln224_reg_1055, icmp_ln227_reg_1059, icmp_ln231_reg_1063)
    begin
                ap_predicate_op242_writeresp_state34 <= ((icmp_ln231_reg_1063 = ap_const_lv1_0) and (icmp_ln227_reg_1059 = ap_const_lv1_0) and (icmp_ln224_reg_1055 = ap_const_lv1_0) and (icmp_ln221_reg_1051 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    conv3_fu_757_p4 <= conv1(31 downto 2);
    conv_fu_737_p4 <= conv2(31 downto 2);

    conv_kernel_1_address0_assign_proc : process(ap_block_pp6_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp6_iter2, grp_forward_fu_599_conv_kernel_1_address0, grp_backward_fu_635_conv_kernel_1_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46, zext_ln235_fu_839_p1, zext_ln216_fu_941_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            conv_kernel_1_address0 <= zext_ln216_fu_941_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_kernel_1_address0 <= zext_ln235_fu_839_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_1_address0 <= grp_backward_fu_635_conv_kernel_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            conv_kernel_1_address0 <= grp_forward_fu_599_conv_kernel_1_address0;
        else 
            conv_kernel_1_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel_1_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp6_iter2, grp_forward_fu_599_conv_kernel_1_ce0, grp_backward_fu_635_conv_kernel_1_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)))) then 
            conv_kernel_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_1_ce0 <= grp_backward_fu_635_conv_kernel_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            conv_kernel_1_ce0 <= grp_forward_fu_599_conv_kernel_1_ce0;
        else 
            conv_kernel_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel_1_d0_assign_proc : process(ap_block_pp6_stage0, data_addr_4_read_reg_1185, ap_enable_reg_pp6_iter2, grp_backward_fu_635_conv_kernel_1_d0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            conv_kernel_1_d0 <= data_addr_4_read_reg_1185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_1_d0 <= grp_backward_fu_635_conv_kernel_1_d0;
        else 
            conv_kernel_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_kernel_1_we0_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln216_reg_1176_pp6_iter1_reg, ap_enable_reg_pp6_iter2, grp_backward_fu_635_conv_kernel_1_we0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln216_reg_1176_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            conv_kernel_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_1_we0 <= grp_backward_fu_635_conv_kernel_1_we0;
        else 
            conv_kernel_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel_2_address0_assign_proc : process(ap_block_pp7_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp7_iter2, grp_forward_fu_599_conv_kernel_2_address0, grp_backward_fu_635_conv_kernel_2_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46, zext_ln236_fu_856_p1, zext_ln217_fu_958_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            conv_kernel_2_address0 <= zext_ln217_fu_958_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            conv_kernel_2_address0 <= zext_ln236_fu_856_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_2_address0 <= grp_backward_fu_635_conv_kernel_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            conv_kernel_2_address0 <= grp_forward_fu_599_conv_kernel_2_address0;
        else 
            conv_kernel_2_address0 <= "XXXX";
        end if; 
    end process;


    conv_kernel_2_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp7_iter2, grp_forward_fu_599_conv_kernel_2_ce0, grp_backward_fu_635_conv_kernel_2_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)))) then 
            conv_kernel_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_2_ce0 <= grp_backward_fu_635_conv_kernel_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            conv_kernel_2_ce0 <= grp_forward_fu_599_conv_kernel_2_ce0;
        else 
            conv_kernel_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_kernel_2_d0_assign_proc : process(ap_block_pp7_stage0, data_addr_3_read_reg_1199, ap_enable_reg_pp7_iter2, grp_backward_fu_635_conv_kernel_2_d0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            conv_kernel_2_d0 <= data_addr_3_read_reg_1199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_2_d0 <= grp_backward_fu_635_conv_kernel_2_d0;
        else 
            conv_kernel_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_kernel_2_we0_assign_proc : process(ap_block_pp7_stage0_11001, icmp_ln217_reg_1190_pp7_iter1_reg, ap_enable_reg_pp7_iter2, grp_backward_fu_635_conv_kernel_2_we0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln217_reg_1190_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            conv_kernel_2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_kernel_2_we0 <= grp_backward_fu_635_conv_kernel_2_we0;
        else 
            conv_kernel_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ARADDR_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state79, ap_CS_fsm_state69, ap_CS_fsm_state59, ap_CS_fsm_state48, data_ARREADY, data_addr_1_reg_1013, data_addr_2_reg_1020, data_addr_3_reg_1027, data_addr_4_reg_1034, data_addr_5_reg_1041, grp_backward_fu_635_m_axi_lr_in_ARADDR, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            data_ARADDR <= data_addr_5_reg_1041;
        elsif (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            data_ARADDR <= data_addr_1_reg_1013;
        elsif (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            data_ARADDR <= data_addr_2_reg_1020;
        elsif (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            data_ARADDR <= data_addr_3_reg_1027;
        elsif (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            data_ARADDR <= data_addr_4_reg_1034;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARADDR <= grp_backward_fu_635_m_axi_lr_in_ARADDR;
        else 
            data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ARBURST_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARBURST, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARBURST <= grp_backward_fu_635_m_axi_lr_in_ARBURST;
        else 
            data_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    data_ARCACHE_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARCACHE, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARCACHE <= grp_backward_fu_635_m_axi_lr_in_ARCACHE;
        else 
            data_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    data_ARID_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARID, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARID <= grp_backward_fu_635_m_axi_lr_in_ARID;
        else 
            data_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    data_ARLEN_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state79, ap_CS_fsm_state69, ap_CS_fsm_state59, ap_CS_fsm_state48, data_ARREADY, grp_backward_fu_635_m_axi_lr_in_ARLEN, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            data_ARLEN <= ap_const_lv32_384;
        elsif (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            data_ARLEN <= ap_const_lv32_C8;
        elsif (((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            data_ARLEN <= ap_const_lv32_2D0;
        elsif ((((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69)))) then 
            data_ARLEN <= ap_const_lv32_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARLEN <= grp_backward_fu_635_m_axi_lr_in_ARLEN;
        else 
            data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ARLOCK_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARLOCK, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARLOCK <= grp_backward_fu_635_m_axi_lr_in_ARLOCK;
        else 
            data_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    data_ARPROT_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARPROT, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARPROT <= grp_backward_fu_635_m_axi_lr_in_ARPROT;
        else 
            data_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    data_ARQOS_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARQOS, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARQOS <= grp_backward_fu_635_m_axi_lr_in_ARQOS;
        else 
            data_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    data_ARREGION_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARREGION, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARREGION <= grp_backward_fu_635_m_axi_lr_in_ARREGION;
        else 
            data_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    data_ARSIZE_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARSIZE, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARSIZE <= grp_backward_fu_635_m_axi_lr_in_ARSIZE;
        else 
            data_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    data_ARUSER_assign_proc : process(grp_backward_fu_635_m_axi_lr_in_ARUSER, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARUSER <= grp_backward_fu_635_m_axi_lr_in_ARUSER;
        else 
            data_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    data_ARVALID_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state79, ap_CS_fsm_state69, ap_CS_fsm_state59, ap_CS_fsm_state48, data_ARREADY, grp_backward_fu_635_m_axi_lr_in_ARVALID, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if ((((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89)))) then 
            data_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_ARVALID <= grp_backward_fu_635_m_axi_lr_in_ARVALID;
        else 
            data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_AWADDR_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state2, data_AWREADY, data_BVALID, data_addr_reg_1007, data_addr_1_reg_1013, data_addr_2_reg_1020, data_addr_3_reg_1027, data_addr_4_reg_1034)
    begin
        if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_AWADDR <= data_addr_reg_1007;
        elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            data_AWADDR <= data_addr_1_reg_1013;
        elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            data_AWADDR <= data_addr_2_reg_1020;
        elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            data_AWADDR <= data_addr_3_reg_1027;
        elsif (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_AWADDR <= data_addr_4_reg_1034;
        else 
            data_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_AWLEN_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state2, data_AWREADY, data_BVALID)
    begin
        if (((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_AWLEN <= ap_const_lv32_A;
        elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            data_AWLEN <= ap_const_lv32_C8;
        elsif ((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            data_AWLEN <= ap_const_lv32_2D0;
        elsif ((((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            data_AWLEN <= ap_const_lv32_9;
        else 
            data_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_AWVALID_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state2, data_AWREADY, data_BVALID)
    begin
        if ((((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            data_AWVALID <= ap_const_logic_1;
        else 
            data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_BREADY_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state26, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_CS_fsm_state10, data_AWREADY, data_BVALID, ap_predicate_op242_writeresp_state34)
    begin
        if (((not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((ap_predicate_op242_writeresp_state34 = ap_const_boolean_1) and (data_BVALID = ap_const_logic_0))) and (ap_predicate_op242_writeresp_state34 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or (not(((data_BVALID = ap_const_logic_0) or (data_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((data_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
            data_BREADY <= ap_const_logic_1;
        else 
            data_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_RREADY_assign_proc : process(ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter1, icmp_ln219_reg_1218, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, icmp_ln218_reg_1204, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, icmp_ln217_reg_1190, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, icmp_ln216_reg_1176, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln222_reg_1162, ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001, ap_block_pp7_stage0_11001, ap_block_pp8_stage0_11001, ap_block_pp9_stage0_11001, grp_backward_fu_635_m_axi_lr_in_RREADY, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln222_reg_1162 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln216_reg_1176 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln217_reg_1190 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln218_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln219_reg_1218 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)))) then 
            data_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data_RREADY <= grp_backward_fu_635_m_axi_lr_in_RREADY;
        else 
            data_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_WDATA_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln232_reg_1143_pp4_iter1_reg, ap_enable_reg_pp3_iter2, icmp_ln238_reg_1124_pp3_iter1_reg, ap_enable_reg_pp2_iter2, icmp_ln237_reg_1105_pp2_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln236_reg_1086_pp1_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln235_reg_1067_pp0_iter1_reg, conv_kernel_1_load_reg_1081, conv_kernel_2_load_reg_1100, fc_hidden_layer1_loa_reg_1119, fc_hidden_layer2_loa_reg_1138, probability_result_l_reg_1157, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001, ap_block_pp2_stage0_01001, ap_block_pp3_stage0_01001, ap_block_pp4_stage0_01001)
    begin
        if (((icmp_ln232_reg_1143_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001))) then 
            data_WDATA <= probability_result_l_reg_1157;
        elsif (((icmp_ln238_reg_1124_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
            data_WDATA <= fc_hidden_layer2_loa_reg_1138;
        elsif (((icmp_ln237_reg_1105_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001))) then 
            data_WDATA <= fc_hidden_layer1_loa_reg_1119;
        elsif (((icmp_ln236_reg_1086_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
            data_WDATA <= conv_kernel_2_load_reg_1100;
        elsif (((icmp_ln235_reg_1067_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            data_WDATA <= conv_kernel_1_load_reg_1081;
        else 
            data_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln232_reg_1143_pp4_iter1_reg, ap_enable_reg_pp3_iter2, icmp_ln238_reg_1124_pp3_iter1_reg, ap_enable_reg_pp2_iter2, icmp_ln237_reg_1105_pp2_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln236_reg_1086_pp1_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln235_reg_1067_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln235_reg_1067_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln236_reg_1086_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln237_reg_1105_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln238_reg_1124_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln232_reg_1143_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then 
            data_WVALID <= ap_const_logic_1;
        else 
            data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_AR_assign_proc : process(m_axi_data_ARREADY, ap_CS_fsm_state89, ap_CS_fsm_state79, ap_CS_fsm_state69, ap_CS_fsm_state59, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            data_blk_n_AR <= m_axi_data_ARREADY;
        else 
            data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_AW_assign_proc : process(m_axi_data_AWREADY, ap_CS_fsm_state35, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            data_blk_n_AW <= m_axi_data_AWREADY;
        else 
            data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_B_assign_proc : process(m_axi_data_BVALID, ap_CS_fsm_state43, ap_CS_fsm_state26, ap_CS_fsm_state34, icmp_ln221_reg_1051, icmp_ln224_reg_1055, icmp_ln227_reg_1059, icmp_ln231_reg_1063, ap_CS_fsm_state18, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln231_reg_1063 = ap_const_lv1_0) and (icmp_ln227_reg_1059 = ap_const_lv1_0) and (icmp_ln224_reg_1055 = ap_const_lv1_0) and (icmp_ln221_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            data_blk_n_B <= m_axi_data_BVALID;
        else 
            data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_R_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter1, ap_block_pp9_stage0, icmp_ln219_reg_1218, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, icmp_ln218_reg_1204, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, icmp_ln217_reg_1190, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln216_reg_1176, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln222_reg_1162)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln222_reg_1162 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0) and (icmp_ln216_reg_1176 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0) and (icmp_ln217_reg_1190 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0) and (icmp_ln218_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp9_stage0) and (icmp_ln219_reg_1218 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)))) then 
            data_blk_n_R <= m_axi_data_RVALID;
        else 
            data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_W_assign_proc : process(m_axi_data_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, icmp_ln232_reg_1143_pp4_iter1_reg, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, icmp_ln238_reg_1124_pp3_iter1_reg, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln237_reg_1105_pp2_iter1_reg, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln236_reg_1086_pp1_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln235_reg_1067_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln235_reg_1067_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln236_reg_1086_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln237_reg_1105_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln238_reg_1124_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((icmp_ln232_reg_1143_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then 
            data_blk_n_W <= m_axi_data_WREADY;
        else 
            data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_21_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc_fu_697_p4),64));
    empty_22_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc3_fu_717_p4),64));
    empty_23_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_fu_737_p4),64));
    empty_24_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_fu_757_p4),64));
    empty_25_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_fu_777_p4),64));
    empty_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out1_fu_677_p4),64));
    fc3_fu_717_p4 <= fc1(31 downto 2);
    fc_fu_697_p4 <= fc2(31 downto 2);

    fc_hidden_layer1_address0_assign_proc : process(ap_block_pp8_stage0, ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp8_iter2, grp_forward_fu_599_fc_hidden_layer1_address0, grp_backward_fu_635_fc_hidden_layer1_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46, zext_ln237_fu_873_p1, zext_ln218_fu_975_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer1_address0 <= zext_ln218_fu_975_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            fc_hidden_layer1_address0 <= zext_ln237_fu_873_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer1_address0 <= grp_backward_fu_635_fc_hidden_layer1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_hidden_layer1_address0 <= grp_forward_fu_599_fc_hidden_layer1_address0;
        else 
            fc_hidden_layer1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer1_ce0_assign_proc : process(ap_block_pp8_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp8_iter2, grp_forward_fu_599_fc_hidden_layer1_ce0, grp_backward_fu_635_fc_hidden_layer1_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)))) then 
            fc_hidden_layer1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer1_ce0 <= grp_backward_fu_635_fc_hidden_layer1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_hidden_layer1_ce0 <= grp_forward_fu_599_fc_hidden_layer1_ce0;
        else 
            fc_hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer1_d0_assign_proc : process(ap_block_pp8_stage0, data_addr_2_read_reg_1213, ap_enable_reg_pp8_iter2, grp_backward_fu_635_fc_hidden_layer1_d0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer1_d0 <= data_addr_2_read_reg_1213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer1_d0 <= grp_backward_fu_635_fc_hidden_layer1_d0;
        else 
            fc_hidden_layer1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer1_we0_assign_proc : process(ap_block_pp8_stage0_11001, icmp_ln218_reg_1204_pp8_iter1_reg, ap_enable_reg_pp8_iter2, grp_backward_fu_635_fc_hidden_layer1_we0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln218_reg_1204_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer1_we0 <= grp_backward_fu_635_fc_hidden_layer1_we0;
        else 
            fc_hidden_layer1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_address0_assign_proc : process(ap_block_pp9_stage0, ap_block_pp3_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp9_iter2, grp_forward_fu_599_fc_hidden_layer2_address0, grp_backward_fu_635_fc_hidden_layer2_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46, zext_ln238_fu_890_p1, zext_ln219_fu_992_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer2_address0 <= zext_ln219_fu_992_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            fc_hidden_layer2_address0 <= zext_ln238_fu_890_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer2_address0 <= grp_backward_fu_635_fc_hidden_layer2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_hidden_layer2_address0 <= grp_forward_fu_599_fc_hidden_layer2_address0;
        else 
            fc_hidden_layer2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer2_ce0_assign_proc : process(ap_block_pp9_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp9_iter2, grp_forward_fu_599_fc_hidden_layer2_ce0, grp_backward_fu_635_fc_hidden_layer2_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1)))) then 
            fc_hidden_layer2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer2_ce0 <= grp_backward_fu_635_fc_hidden_layer2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_hidden_layer2_ce0 <= grp_forward_fu_599_fc_hidden_layer2_ce0;
        else 
            fc_hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_hidden_layer2_d0_assign_proc : process(ap_block_pp9_stage0, data_addr_1_read_reg_1227, ap_enable_reg_pp9_iter2, grp_backward_fu_635_fc_hidden_layer2_d0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer2_d0 <= data_addr_1_read_reg_1227;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer2_d0 <= grp_backward_fu_635_fc_hidden_layer2_d0;
        else 
            fc_hidden_layer2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_hidden_layer2_we0_assign_proc : process(ap_block_pp9_stage0_11001, icmp_ln219_reg_1218_pp9_iter1_reg, ap_enable_reg_pp9_iter2, grp_backward_fu_635_fc_hidden_layer2_we0, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln219_reg_1218_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1))) then 
            fc_hidden_layer2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_hidden_layer2_we0 <= grp_backward_fu_635_fc_hidden_layer2_we0;
        else 
            fc_hidden_layer2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_1_0_address0_assign_proc : process(grp_forward_fu_599_fc_in_1_0_address0, grp_backward_fu_635_fc_in_1_0_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_in_1_0_address0 <= grp_backward_fu_635_fc_in_1_0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_in_1_0_address0 <= grp_forward_fu_599_fc_in_1_0_address0;
        else 
            fc_in_1_0_address0 <= "XXXXXX";
        end if; 
    end process;


    fc_in_1_0_ce0_assign_proc : process(grp_forward_fu_599_fc_in_1_0_ce0, grp_backward_fu_635_fc_in_1_0_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_in_1_0_ce0 <= grp_backward_fu_635_fc_in_1_0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_in_1_0_ce0 <= grp_forward_fu_599_fc_in_1_0_ce0;
        else 
            fc_in_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_1_0_we0_assign_proc : process(grp_forward_fu_599_fc_in_1_0_we0, ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_in_1_0_we0 <= grp_forward_fu_599_fc_in_1_0_we0;
        else 
            fc_in_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_2_relu1_0_address0_assign_proc : process(grp_forward_fu_599_fc_in_2_relu1_0_address0, grp_backward_fu_635_fc_in_2_relu1_0_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_in_2_relu1_0_address0 <= grp_backward_fu_635_fc_in_2_relu1_0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_in_2_relu1_0_address0 <= grp_forward_fu_599_fc_in_2_relu1_0_address0;
        else 
            fc_in_2_relu1_0_address0 <= "XXXXX";
        end if; 
    end process;


    fc_in_2_relu1_0_ce0_assign_proc : process(grp_forward_fu_599_fc_in_2_relu1_0_ce0, grp_backward_fu_635_fc_in_2_relu1_0_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_in_2_relu1_0_ce0 <= grp_backward_fu_635_fc_in_2_relu1_0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_in_2_relu1_0_ce0 <= grp_forward_fu_599_fc_in_2_relu1_0_ce0;
        else 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_2_relu1_0_we0_assign_proc : process(grp_forward_fu_599_fc_in_2_relu1_0_we0, ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_in_2_relu1_0_we0 <= grp_forward_fu_599_fc_in_2_relu1_0_we0;
        else 
            fc_in_2_relu1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_1_0_address0_assign_proc : process(grp_forward_fu_599_fc_out_1_0_address0, grp_backward_fu_635_fc_out_1_0_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_out_1_0_address0 <= grp_backward_fu_635_fc_out_1_0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_out_1_0_address0 <= grp_forward_fu_599_fc_out_1_0_address0;
        else 
            fc_out_1_0_address0 <= "XXXXX";
        end if; 
    end process;


    fc_out_1_0_ce0_assign_proc : process(grp_forward_fu_599_fc_out_1_0_ce0, grp_backward_fu_635_fc_out_1_0_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            fc_out_1_0_ce0 <= grp_backward_fu_635_fc_out_1_0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_out_1_0_ce0 <= grp_forward_fu_599_fc_out_1_0_ce0;
        else 
            fc_out_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_1_0_we0_assign_proc : process(grp_forward_fu_599_fc_out_1_0_we0, ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            fc_out_1_0_we0 <= grp_forward_fu_599_fc_out_1_0_we0;
        else 
            fc_out_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_backward_fu_635_ap_start <= grp_backward_fu_635_ap_start_reg;
    grp_forward_fu_599_ap_start <= grp_forward_fu_599_ap_start_reg;
    icmp_ln215_fu_797_p2 <= "1" when (flag = ap_const_lv32_0) else "0";
    icmp_ln216_fu_929_p2 <= "1" when (ap_phi_mux_phi_ln216_phi_fu_555_p4 = ap_const_lv4_9) else "0";
    icmp_ln217_fu_946_p2 <= "1" when (ap_phi_mux_phi_ln217_phi_fu_567_p4 = ap_const_lv4_9) else "0";
    icmp_ln218_fu_963_p2 <= "1" when (ap_phi_mux_phi_ln218_phi_fu_579_p4 = ap_const_lv10_2D0) else "0";
    icmp_ln219_fu_980_p2 <= "1" when (ap_phi_mux_phi_ln219_phi_fu_591_p4 = ap_const_lv8_C8) else "0";
    icmp_ln221_fu_803_p2 <= "1" when (flag = ap_const_lv32_1) else "0";
    icmp_ln222_fu_912_p2 <= "1" when (ap_phi_mux_phi_ln222_phi_fu_543_p4 = ap_const_lv10_384) else "0";
    icmp_ln224_fu_809_p2 <= "1" when (flag = ap_const_lv32_2) else "0";
    icmp_ln227_fu_815_p2 <= "1" when (flag = ap_const_lv32_3) else "0";
    icmp_ln231_fu_821_p2 <= "1" when (flag = ap_const_lv32_4) else "0";
    icmp_ln232_fu_895_p2 <= "1" when (phi_ln232_reg_528 = ap_const_lv4_A) else "0";
    icmp_ln235_fu_827_p2 <= "1" when (phi_ln235_reg_484 = ap_const_lv4_9) else "0";
    icmp_ln236_fu_844_p2 <= "1" when (phi_ln236_reg_495 = ap_const_lv4_9) else "0";
    icmp_ln237_fu_861_p2 <= "1" when (phi_ln237_reg_506 = ap_const_lv10_2D0) else "0";
    icmp_ln238_fu_878_p2 <= "1" when (phi_ln238_reg_517 = ap_const_lv8_C8) else "0";
    in1_fu_777_p4 <= in_r(31 downto 2);

    max_poo_locate_1_address0_assign_proc : process(grp_forward_fu_599_max_poo_locate_1_address0, grp_backward_fu_635_max_poo_locate_1_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            max_poo_locate_1_address0 <= grp_backward_fu_635_max_poo_locate_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_locate_1_address0 <= grp_forward_fu_599_max_poo_locate_1_address0;
        else 
            max_poo_locate_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_poo_locate_1_ce0_assign_proc : process(grp_forward_fu_599_max_poo_locate_1_ce0, grp_backward_fu_635_max_poo_locate_1_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            max_poo_locate_1_ce0 <= grp_backward_fu_635_max_poo_locate_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_locate_1_ce0 <= grp_forward_fu_599_max_poo_locate_1_ce0;
        else 
            max_poo_locate_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_locate_1_we0_assign_proc : process(grp_forward_fu_599_max_poo_locate_1_we0, ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_locate_1_we0 <= grp_forward_fu_599_max_poo_locate_1_we0;
        else 
            max_poo_locate_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_locate_2_address0_assign_proc : process(grp_forward_fu_599_max_poo_locate_2_address0, grp_backward_fu_635_max_poo_locate_2_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            max_poo_locate_2_address0 <= grp_backward_fu_635_max_poo_locate_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_locate_2_address0 <= grp_forward_fu_599_max_poo_locate_2_address0;
        else 
            max_poo_locate_2_address0 <= "XXXXXX";
        end if; 
    end process;


    max_poo_locate_2_ce0_assign_proc : process(grp_forward_fu_599_max_poo_locate_2_ce0, grp_backward_fu_635_max_poo_locate_2_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            max_poo_locate_2_ce0 <= grp_backward_fu_635_max_poo_locate_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_locate_2_ce0 <= grp_forward_fu_599_max_poo_locate_2_ce0;
        else 
            max_poo_locate_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_locate_2_we0_assign_proc : process(grp_forward_fu_599_max_poo_locate_2_we0, ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_locate_2_we0 <= grp_forward_fu_599_max_poo_locate_2_we0;
        else 
            max_poo_locate_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_out_1_address0_assign_proc : process(grp_forward_fu_599_max_poo_out_1_address0, grp_backward_fu_635_max_poo_out_1_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            max_poo_out_1_address0 <= grp_backward_fu_635_max_poo_out_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_out_1_address0 <= grp_forward_fu_599_max_poo_out_1_address0;
        else 
            max_poo_out_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_poo_out_1_ce0_assign_proc : process(grp_forward_fu_599_max_poo_out_1_ce0, grp_backward_fu_635_max_poo_out_1_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            max_poo_out_1_ce0 <= grp_backward_fu_635_max_poo_out_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_out_1_ce0 <= grp_forward_fu_599_max_poo_out_1_ce0;
        else 
            max_poo_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_out_1_we0_assign_proc : process(grp_forward_fu_599_max_poo_out_1_we0, ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            max_poo_out_1_we0 <= grp_forward_fu_599_max_poo_out_1_we0;
        else 
            max_poo_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mnist_data_address0_assign_proc : process(ap_block_pp5_stage0, ap_enable_reg_pp5_iter2, grp_forward_fu_599_mnist_data_address0, grp_backward_fu_635_mnist_data_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46, zext_ln222_fu_924_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            mnist_data_address0 <= zext_ln222_fu_924_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            mnist_data_address0 <= grp_backward_fu_635_mnist_data_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            mnist_data_address0 <= grp_forward_fu_599_mnist_data_address0;
        else 
            mnist_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mnist_data_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter2, grp_forward_fu_599_mnist_data_ce0, grp_backward_fu_635_mnist_data_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            mnist_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            mnist_data_ce0 <= grp_backward_fu_635_mnist_data_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            mnist_data_ce0 <= grp_forward_fu_599_mnist_data_ce0;
        else 
            mnist_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mnist_data_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln222_reg_1162_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln222_reg_1162_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            mnist_data_we0 <= ap_const_logic_1;
        else 
            mnist_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out1_fu_677_p4 <= out_r(31 downto 2);

    probability_result_address0_assign_proc : process(ap_block_pp4_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, grp_forward_fu_599_probability_result_address0, grp_backward_fu_635_probability_result_address0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46, zext_ln232_fu_907_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            probability_result_address0 <= zext_ln232_fu_907_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            probability_result_address0 <= grp_backward_fu_635_probability_result_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            probability_result_address0 <= grp_forward_fu_599_probability_result_address0;
        else 
            probability_result_address0 <= "XXXX";
        end if; 
    end process;


    probability_result_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, grp_forward_fu_599_probability_result_ce0, grp_backward_fu_635_probability_result_ce0, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            probability_result_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            probability_result_ce0 <= grp_backward_fu_635_probability_result_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            probability_result_ce0 <= grp_forward_fu_599_probability_result_ce0;
        else 
            probability_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    probability_result_we0_assign_proc : process(grp_forward_fu_599_probability_result_we0, ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            probability_result_we0 <= grp_forward_fu_599_probability_result_we0;
        else 
            probability_result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln216_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln216_reg_551_pp6_iter1_reg),64));
    zext_ln217_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln217_reg_563_pp7_iter1_reg),64));
    zext_ln218_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln218_reg_575_pp8_iter1_reg),64));
    zext_ln219_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln219_reg_587_pp9_iter1_reg),64));
    zext_ln222_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln222_reg_539_pp5_iter1_reg),64));
    zext_ln232_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln232_reg_528),64));
    zext_ln235_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln235_reg_484),64));
    zext_ln236_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln236_reg_495),64));
    zext_ln237_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln237_reg_506),64));
    zext_ln238_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln238_reg_517),64));
end behav;
