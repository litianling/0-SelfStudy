-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mnist_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mnist_data_ce0 : OUT STD_LOGIC;
    mnist_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_1_ce0 : OUT STD_LOGIC;
    conv_kernel_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_poo_out_1_ce0 : OUT STD_LOGIC;
    max_poo_out_1_we0 : OUT STD_LOGIC;
    max_poo_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_poo_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_locate_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_poo_locate_1_ce0 : OUT STD_LOGIC;
    max_poo_locate_1_we0 : OUT STD_LOGIC;
    max_poo_locate_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_kernel_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_kernel_2_ce0 : OUT STD_LOGIC;
    conv_kernel_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_poo_locate_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    max_poo_locate_2_ce0 : OUT STD_LOGIC;
    max_poo_locate_2_we0 : OUT STD_LOGIC;
    max_poo_locate_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_in_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_in_1_0_ce0 : OUT STD_LOGIC;
    fc_in_1_0_we0 : OUT STD_LOGIC;
    fc_in_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_in_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_out_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fc_out_1_0_ce0 : OUT STD_LOGIC;
    fc_out_1_0_we0 : OUT STD_LOGIC;
    fc_out_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_out_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    fc_hidden_layer1_ce0 : OUT STD_LOGIC;
    fc_hidden_layer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_in_2_relu1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fc_in_2_relu1_0_ce0 : OUT STD_LOGIC;
    fc_in_2_relu1_0_we0 : OUT STD_LOGIC;
    fc_in_2_relu1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc_in_2_relu1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_hidden_layer2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fc_hidden_layer2_ce0 : OUT STD_LOGIC;
    fc_hidden_layer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    probability_result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    probability_result_ce0 : OUT STD_LOGIC;
    probability_result_we0 : OUT STD_LOGIC;
    probability_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of forward is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (131 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (131 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (131 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (131 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (131 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (131 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (131 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (131 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (131 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (131 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (131 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (131 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv64_3FA999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_1_ce0 : STD_LOGIC;
    signal conv_out_1_we0 : STD_LOGIC;
    signal conv_out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out_2_ce0 : STD_LOGIC;
    signal conv_out_2_we0 : STD_LOGIC;
    signal conv_out_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_poo_out_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal max_poo_out_2_ce0 : STD_LOGIC;
    signal max_poo_out_2_we0 : STD_LOGIC;
    signal max_poo_out_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_out_2_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_out_2_0_ce0 : STD_LOGIC;
    signal fc_out_2_0_we0 : STD_LOGIC;
    signal fc_out_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_494 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal i_1_fu_525_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_883 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sub_ln54_fu_555_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln54_reg_888 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln52_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_571_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_5_reg_896 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln54_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_901 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln53_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i3_cast8_fu_591_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_i3_cast8_reg_911 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_3_fu_601_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_919 : STD_LOGIC_VECTOR (4 downto 0);
    signal fc_out_1_0_addr_reg_924 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln58_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_618_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_932 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln60_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_in_1_0_load_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal fc_hidden_layer1_loa_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_6_fu_671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_6_reg_960 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln67_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_965 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln66_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_out_1_0_load_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_15_reg_983 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln23_fu_765_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln23_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal j_0_i16_cast5_fu_772_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i16_cast5_reg_993 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal j_7_fu_782_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_1001 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_out_2_0_addr_2_reg_1006 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln58_1_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_799_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1014 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln60_1_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal fc_hidden_layer2_loa_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_fu_852_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1042 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln143_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_465_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1052 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal j_fu_869_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1060 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal zext_ln146_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_reg_1065 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln145_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1075 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1080 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal grp_MaxPool2d_1_fu_399_ap_start : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_ap_done : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_ap_idle : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_ap_ready : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_output_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPool2d_1_fu_399_output_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_output_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_1_fu_399_locate_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPool2d_1_fu_399_locate_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_locate_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_1_fu_399_locate_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_1_fu_399_conv_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_MaxPool2d_1_fu_399_conv_out_1_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_ap_start : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_ap_done : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_ap_idle : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_ap_ready : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_output_matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_MaxPool2d_fu_409_output_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_output_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_output_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_fu_409_locate_matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_MaxPool2d_fu_409_locate_matrix_ce0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_locate_matrix_we0 : STD_LOGIC;
    signal grp_MaxPool2d_fu_409_locate_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPool2d_fu_409_conv_out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_MaxPool2d_fu_409_conv_out_2_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_ap_start : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_ap_done : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_ap_idle : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_ap_ready : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_input_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_4_fu_419_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_4_fu_419_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_out_matrix_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv2d_4_fu_419_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_4_fu_419_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv2d_3_fu_429_ap_start : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_ap_done : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_ap_idle : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_ap_ready : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_input_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_3_fu_429_input_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv2d_3_fu_429_kernel_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_out_matrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Conv2d_3_fu_429_out_matrix_ce0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_out_matrix_we0 : STD_LOGIC;
    signal grp_Conv2d_3_fu_429_out_matrix_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_261 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_0_i_reg_272 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_0_i3_reg_283 : STD_LOGIC_VECTOR (4 downto 0);
    signal storemerge_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i5_reg_307 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_i9_reg_318 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal j_0_i16_reg_329 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge149_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i20_reg_353 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_365 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_probability_sum_0_phi_fu_380_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal probability_sum_0_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal grp_MaxPool2d_1_fu_399_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_MaxPool2d_fu_409_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_Conv2d_4_fu_419_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Conv2d_3_fu_429_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln59_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_1_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_3_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_2_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_445_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_450_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal grp_fu_454_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal shl_ln_fu_531_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln54_1_fu_543_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln54_1_fu_539_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln54_2_fu_551_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_fu_561_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln54_fu_577_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln54_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln61_1_fu_637_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_fu_645_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_629_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln61_4_fu_650_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_1_fu_654_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln23_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln23_1_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_685_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_695_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_1_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_703_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_1_fu_713_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_3_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_1_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_1_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln61_3_fu_813_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_2_fu_821_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln61_2_fu_805_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_5_fu_826_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_3_fu_830_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (131 downto 0);

    component MaxPool2d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        locate_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        locate_matrix_ce0 : OUT STD_LOGIC;
        locate_matrix_we0 : OUT STD_LOGIC;
        locate_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_1_ce0 : OUT STD_LOGIC;
        conv_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MaxPool2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_matrix_ce0 : OUT STD_LOGIC;
        output_matrix_we0 : OUT STD_LOGIC;
        output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        locate_matrix_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        locate_matrix_ce0 : OUT STD_LOGIC;
        locate_matrix_we0 : OUT STD_LOGIC;
        locate_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv_out_2_ce0 : OUT STD_LOGIC;
        conv_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2d_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_matrix_ce0 : OUT STD_LOGIC;
        input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_matrix_ce0 : OUT STD_LOGIC;
        out_matrix_we0 : OUT STD_LOGIC;
        out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fptruncg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fpext_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_fcmp_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component forw_back_dadd_64ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_dmul_64jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_ddiv_64kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forw_back_dexp_64lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component forward_conv_out_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_conv_out_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_max_poo_ofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forward_fc_out_2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_out_1_U : component forward_conv_out_1
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_out_1_address0,
        ce0 => conv_out_1_ce0,
        we0 => conv_out_1_we0,
        d0 => grp_Conv2d_4_fu_419_out_matrix_d0,
        q0 => conv_out_1_q0);

    conv_out_2_U : component forward_conv_out_2
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_out_2_address0,
        ce0 => conv_out_2_ce0,
        we0 => conv_out_2_we0,
        d0 => grp_Conv2d_3_fu_429_out_matrix_d0,
        q0 => conv_out_2_q0);

    max_poo_out_2_U : component forward_max_poo_ofYi
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_poo_out_2_address0,
        ce0 => max_poo_out_2_ce0,
        we0 => max_poo_out_2_we0,
        d0 => grp_MaxPool2d_fu_409_output_matrix_d0,
        q0 => max_poo_out_2_q0);

    fc_out_2_0_U : component forward_fc_out_2_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_out_2_0_address0,
        ce0 => fc_out_2_0_ce0,
        we0 => fc_out_2_0_we0,
        d0 => storemerge149_reg_340,
        q0 => fc_out_2_0_q0);

    grp_MaxPool2d_1_fu_399 : component MaxPool2d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPool2d_1_fu_399_ap_start,
        ap_done => grp_MaxPool2d_1_fu_399_ap_done,
        ap_idle => grp_MaxPool2d_1_fu_399_ap_idle,
        ap_ready => grp_MaxPool2d_1_fu_399_ap_ready,
        output_matrix_address0 => grp_MaxPool2d_1_fu_399_output_matrix_address0,
        output_matrix_ce0 => grp_MaxPool2d_1_fu_399_output_matrix_ce0,
        output_matrix_we0 => grp_MaxPool2d_1_fu_399_output_matrix_we0,
        output_matrix_d0 => grp_MaxPool2d_1_fu_399_output_matrix_d0,
        locate_matrix_address0 => grp_MaxPool2d_1_fu_399_locate_matrix_address0,
        locate_matrix_ce0 => grp_MaxPool2d_1_fu_399_locate_matrix_ce0,
        locate_matrix_we0 => grp_MaxPool2d_1_fu_399_locate_matrix_we0,
        locate_matrix_d0 => grp_MaxPool2d_1_fu_399_locate_matrix_d0,
        conv_out_1_address0 => grp_MaxPool2d_1_fu_399_conv_out_1_address0,
        conv_out_1_ce0 => grp_MaxPool2d_1_fu_399_conv_out_1_ce0,
        conv_out_1_q0 => conv_out_1_q0);

    grp_MaxPool2d_fu_409 : component MaxPool2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPool2d_fu_409_ap_start,
        ap_done => grp_MaxPool2d_fu_409_ap_done,
        ap_idle => grp_MaxPool2d_fu_409_ap_idle,
        ap_ready => grp_MaxPool2d_fu_409_ap_ready,
        output_matrix_address0 => grp_MaxPool2d_fu_409_output_matrix_address0,
        output_matrix_ce0 => grp_MaxPool2d_fu_409_output_matrix_ce0,
        output_matrix_we0 => grp_MaxPool2d_fu_409_output_matrix_we0,
        output_matrix_d0 => grp_MaxPool2d_fu_409_output_matrix_d0,
        locate_matrix_address0 => grp_MaxPool2d_fu_409_locate_matrix_address0,
        locate_matrix_ce0 => grp_MaxPool2d_fu_409_locate_matrix_ce0,
        locate_matrix_we0 => grp_MaxPool2d_fu_409_locate_matrix_we0,
        locate_matrix_d0 => grp_MaxPool2d_fu_409_locate_matrix_d0,
        conv_out_2_address0 => grp_MaxPool2d_fu_409_conv_out_2_address0,
        conv_out_2_ce0 => grp_MaxPool2d_fu_409_conv_out_2_ce0,
        conv_out_2_q0 => conv_out_2_q0);

    grp_Conv2d_4_fu_419 : component Conv2d_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_4_fu_419_ap_start,
        ap_done => grp_Conv2d_4_fu_419_ap_done,
        ap_idle => grp_Conv2d_4_fu_419_ap_idle,
        ap_ready => grp_Conv2d_4_fu_419_ap_ready,
        input_matrix_address0 => grp_Conv2d_4_fu_419_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_4_fu_419_input_matrix_ce0,
        input_matrix_q0 => mnist_data_q0,
        kernel_address0 => grp_Conv2d_4_fu_419_kernel_address0,
        kernel_ce0 => grp_Conv2d_4_fu_419_kernel_ce0,
        kernel_q0 => conv_kernel_1_q0,
        out_matrix_address0 => grp_Conv2d_4_fu_419_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_4_fu_419_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_4_fu_419_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_4_fu_419_out_matrix_d0);

    grp_Conv2d_3_fu_429 : component Conv2d_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2d_3_fu_429_ap_start,
        ap_done => grp_Conv2d_3_fu_429_ap_done,
        ap_idle => grp_Conv2d_3_fu_429_ap_idle,
        ap_ready => grp_Conv2d_3_fu_429_ap_ready,
        input_matrix_address0 => grp_Conv2d_3_fu_429_input_matrix_address0,
        input_matrix_ce0 => grp_Conv2d_3_fu_429_input_matrix_ce0,
        input_matrix_q0 => max_poo_out_1_q0,
        kernel_address0 => grp_Conv2d_3_fu_429_kernel_address0,
        kernel_ce0 => grp_Conv2d_3_fu_429_kernel_ce0,
        kernel_q0 => conv_kernel_2_q0,
        out_matrix_address0 => grp_Conv2d_3_fu_429_out_matrix_address0,
        out_matrix_ce0 => grp_Conv2d_3_fu_429_out_matrix_ce0,
        out_matrix_we0 => grp_Conv2d_3_fu_429_out_matrix_we0,
        out_matrix_d0 => grp_Conv2d_3_fu_429_out_matrix_d0);

    forw_back_fadd_32bkb_U25 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_439_p0,
        din1 => reg_483,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p2);

    forw_back_fmul_32cud_U26 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_445_p0,
        din1 => grp_fu_445_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_445_p2);

    forw_back_fptruncg8j_U27 : component forw_back_fptruncg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_450_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_450_p1);

    forw_back_fpext_3hbi_U28 : component forw_back_fpext_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_454_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_454_p1);

    forw_back_fcmp_32eOg_U29 : component forw_back_fcmp_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fc_out_1_0_load_reg_975,
        din1 => reg_502,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_461_p2);

    forw_back_dadd_64ibs_U30 : component forw_back_dadd_64ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_494,
        din1 => reg_513,
        ce => ap_const_logic_1,
        dout => grp_fu_465_p2);

    forw_back_dmul_64jbC_U31 : component forw_back_dmul_64jbC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_494,
        din1 => ap_const_lv64_3FA999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p2);

    forw_back_ddiv_64kbM_U32 : component forw_back_ddiv_64kbM
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_513,
        din1 => reg_494,
        ce => ap_const_logic_1,
        dout => grp_fu_474_p2);

    forw_back_dexp_64lbW_U33 : component forw_back_dexp_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => grp_fu_478_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_478_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Conv2d_3_fu_429_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_3_fu_429_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_Conv2d_3_fu_429_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_3_fu_429_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_3_fu_429_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2d_4_fu_419_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2d_4_fu_419_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_Conv2d_4_fu_419_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2d_4_fu_419_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2d_4_fu_419_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPool2d_1_fu_399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPool2d_1_fu_399_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_MaxPool2d_1_fu_399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPool2d_1_fu_399_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPool2d_1_fu_399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPool2d_fu_409_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPool2d_fu_409_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_MaxPool2d_fu_409_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPool2d_fu_409_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPool2d_fu_409_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i20_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_0_i20_reg_353 <= i_3_reg_1014;
            elsif (((icmp_ln58_1_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i_0_i20_reg_353 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i5_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_i5_reg_307 <= i_2_reg_932;
            elsif (((icmp_ln58_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_i5_reg_307 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_i_reg_261 <= i_1_reg_883;
            elsif (((grp_MaxPool2d_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_i_reg_261 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_1_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i_0_reg_365 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                i_0_reg_365 <= i_reg_1042;
            end if; 
        end if;
    end process;

    j_0_i16_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_0_i16_reg_329 <= ap_const_lv4_0;
            elsif (((icmp_ln60_1_fu_793_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                j_0_i16_reg_329 <= j_7_reg_1001;
            end if; 
        end if;
    end process;

    j_0_i3_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_0_i3_reg_283 <= ap_const_lv5_0;
            elsif (((icmp_ln60_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j_0_i3_reg_283 <= j_3_reg_919;
            end if; 
        end if;
    end process;

    j_0_i9_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_0_i9_reg_318 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                j_0_i9_reg_318 <= j_6_reg_960;
            end if; 
        end if;
    end process;

    j_0_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_519_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_0_i_reg_272 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_0_i_reg_272 <= j_5_reg_896;
            end if; 
        end if;
    end process;

    j_0_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                j_0_reg_388 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
                j_0_reg_388 <= j_reg_1060;
            end if; 
        end if;
    end process;

    probability_sum_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_1_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                probability_sum_0_reg_376 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                probability_sum_0_reg_376 <= grp_fu_450_p1;
            end if; 
        end if;
    end process;

    storemerge149_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                storemerge149_reg_340 <= grp_fu_439_p2;
            elsif (((icmp_ln58_1_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                storemerge149_reg_340 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                storemerge_reg_294 <= grp_fu_439_p2;
            elsif (((icmp_ln58_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                storemerge_reg_294 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                fc_hidden_layer1_loa_reg_952 <= fc_hidden_layer1_q0;
                fc_in_1_0_load_reg_947 <= fc_in_1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                fc_hidden_layer2_loa_reg_1029 <= fc_hidden_layer2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                fc_out_1_0_addr_reg_924 <= zext_ln59_fu_607_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                fc_out_1_0_load_reg_975 <= fc_out_1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_1_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                fc_out_2_0_addr_2_reg_1006 <= zext_ln59_1_fu_788_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_1_reg_883 <= i_1_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_2_reg_932 <= i_2_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                i_3_reg_1014 <= i_3_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                i_reg_1042 <= i_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                    j_0_i16_cast5_reg_993(3 downto 0) <= j_0_i16_cast5_fu_772_p1(3 downto 0);
                j_7_reg_1001 <= j_7_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    j_0_i3_cast8_reg_911(4 downto 0) <= j_0_i3_cast8_fu_591_p1(4 downto 0);
                j_3_reg_919 <= j_3_fu_601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_5_reg_896 <= j_5_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                j_6_reg_960 <= j_6_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                j_reg_1060 <= j_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_483 <= grp_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_494 <= grp_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_502 <= grp_fu_450_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state70))) then
                reg_513 <= grp_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                select_ln23_reg_988 <= select_ln23_fu_765_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_519_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    sub_ln54_reg_888(6 downto 1) <= sub_ln54_fu_555_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                tmp_6_reg_1052 <= grp_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                tmp_8_reg_1075 <= grp_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_i1_15_reg_983 <= grp_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state130)) then
                tmp_s_reg_1080 <= grp_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_863_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    zext_ln146_reg_1065(3 downto 0) <= zext_ln146_fu_875_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    zext_ln54_reg_901(31 downto 0) <= zext_ln54_fu_586_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    zext_ln67_reg_965(4 downto 0) <= zext_ln67_fu_677_p1(4 downto 0);
            end if;
        end if;
    end process;
    sub_ln54_reg_888(0) <= '0';
    zext_ln54_reg_901(63 downto 32) <= "00000000000000000000000000000000";
    j_0_i3_cast8_reg_911(7 downto 5) <= "000";
    zext_ln67_reg_965(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    j_0_i16_cast5_reg_993(5 downto 4) <= "00";
    zext_ln146_reg_1065(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln52_fu_519_p2, ap_CS_fsm_state10, icmp_ln53_fu_565_p2, ap_CS_fsm_state12, icmp_ln58_fu_595_p2, ap_CS_fsm_state13, icmp_ln60_fu_612_p2, ap_CS_fsm_state24, icmp_ln66_fu_665_p2, ap_CS_fsm_state38, icmp_ln58_1_fu_776_p2, ap_CS_fsm_state39, icmp_ln60_1_fu_793_p2, ap_CS_fsm_state50, icmp_ln143_fu_846_p2, ap_CS_fsm_state79, icmp_ln145_fu_863_p2, grp_MaxPool2d_1_fu_399_ap_done, grp_MaxPool2d_fu_409_ap_done, grp_Conv2d_4_fu_419_ap_done, grp_Conv2d_3_fu_429_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Conv2d_4_fu_419_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_MaxPool2d_1_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_Conv2d_3_fu_429_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_MaxPool2d_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln52_fu_519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln53_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln58_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln60_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln66_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln58_1_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((icmp_ln60_1_fu_793_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln143_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((icmp_ln145_fu_863_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln54_fu_577_p2 <= std_logic_vector(unsigned(sub_ln54_reg_888) + unsigned(zext_ln53_fu_561_p1));
    add_ln61_1_fu_654_p2 <= std_logic_vector(unsigned(shl_ln1_fu_629_p3) + unsigned(zext_ln61_4_fu_650_p1));
    add_ln61_2_fu_821_p2 <= std_logic_vector(unsigned(j_0_i16_cast5_reg_993) + unsigned(shl_ln61_3_fu_813_p3));
    add_ln61_3_fu_830_p2 <= std_logic_vector(unsigned(shl_ln61_2_fu_805_p3) + unsigned(zext_ln61_5_fu_826_p1));
    add_ln61_fu_645_p2 <= std_logic_vector(unsigned(j_0_i3_cast8_reg_911) + unsigned(shl_ln61_1_fu_637_p3));
    and_ln23_1_fu_759_p2 <= (grp_fu_461_p2 and and_ln23_fu_753_p2);
    and_ln23_fu_753_p2 <= (or_ln23_fu_729_p2 and or_ln23_1_fu_747_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state79, icmp_ln145_fu_863_p2)
    begin
        if ((((icmp_ln145_fu_863_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_probability_sum_0_phi_fu_380_p4 <= probability_sum_0_reg_376;

    ap_ready_assign_proc : process(ap_CS_fsm_state79, icmp_ln145_fu_863_p2)
    begin
        if (((icmp_ln145_fu_863_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln23_1_fu_699_p1 <= reg_502;
    bitcast_ln23_fu_682_p1 <= fc_out_1_0_load_reg_975;
    conv_kernel_1_address0 <= grp_Conv2d_4_fu_419_kernel_address0;
    conv_kernel_1_ce0 <= grp_Conv2d_4_fu_419_kernel_ce0;
    conv_kernel_2_address0 <= grp_Conv2d_3_fu_429_kernel_address0;
    conv_kernel_2_ce0 <= grp_Conv2d_3_fu_429_kernel_ce0;

    conv_out_1_address0_assign_proc : process(grp_MaxPool2d_1_fu_399_conv_out_1_address0, grp_Conv2d_4_fu_419_out_matrix_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out_1_address0 <= grp_Conv2d_4_fu_419_out_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out_1_address0 <= grp_MaxPool2d_1_fu_399_conv_out_1_address0;
        else 
            conv_out_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_out_1_ce0_assign_proc : process(grp_MaxPool2d_1_fu_399_conv_out_1_ce0, grp_Conv2d_4_fu_419_out_matrix_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out_1_ce0 <= grp_Conv2d_4_fu_419_out_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out_1_ce0 <= grp_MaxPool2d_1_fu_399_conv_out_1_ce0;
        else 
            conv_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_1_we0_assign_proc : process(grp_Conv2d_4_fu_419_out_matrix_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_out_1_we0 <= grp_Conv2d_4_fu_419_out_matrix_we0;
        else 
            conv_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_2_address0_assign_proc : process(grp_MaxPool2d_fu_409_conv_out_2_address0, grp_Conv2d_3_fu_429_out_matrix_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_2_address0 <= grp_Conv2d_3_fu_429_out_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_2_address0 <= grp_MaxPool2d_fu_409_conv_out_2_address0;
        else 
            conv_out_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_out_2_ce0_assign_proc : process(grp_MaxPool2d_fu_409_conv_out_2_ce0, grp_Conv2d_3_fu_429_out_matrix_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_2_ce0 <= grp_Conv2d_3_fu_429_out_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_2_ce0 <= grp_MaxPool2d_fu_409_conv_out_2_ce0;
        else 
            conv_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_2_we0_assign_proc : process(grp_Conv2d_3_fu_429_out_matrix_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_2_we0 <= grp_Conv2d_3_fu_429_out_matrix_we0;
        else 
            conv_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer1_address0 <= zext_ln61_1_fu_660_p1(10 - 1 downto 0);

    fc_hidden_layer1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_hidden_layer1_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_hidden_layer2_address0 <= zext_ln61_3_fu_836_p1(8 - 1 downto 0);

    fc_hidden_layer2_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            fc_hidden_layer2_ce0 <= ap_const_logic_1;
        else 
            fc_hidden_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_1_0_address0_assign_proc : process(zext_ln54_reg_901, ap_CS_fsm_state13, ap_CS_fsm_state11, zext_ln61_fu_624_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_in_1_0_address0 <= zext_ln61_fu_624_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_in_1_0_address0 <= zext_ln54_reg_901(6 - 1 downto 0);
        else 
            fc_in_1_0_address0 <= "XXXXXX";
        end if; 
    end process;


    fc_in_1_0_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fc_in_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_1_0_d0 <= max_poo_out_2_q0;

    fc_in_1_0_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fc_in_1_0_we0 <= ap_const_logic_1;
        else 
            fc_in_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_2_relu1_0_address0_assign_proc : process(zext_ln67_reg_965, ap_CS_fsm_state40, ap_CS_fsm_state37, zext_ln61_2_fu_841_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fc_in_2_relu1_0_address0 <= zext_ln61_2_fu_841_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            fc_in_2_relu1_0_address0 <= zext_ln67_reg_965(5 - 1 downto 0);
        else 
            fc_in_2_relu1_0_address0 <= "XXXXX";
        end if; 
    end process;


    fc_in_2_relu1_0_ce0_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_1;
        else 
            fc_in_2_relu1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_2_relu1_0_d0 <= select_ln23_reg_988;

    fc_in_2_relu1_0_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            fc_in_2_relu1_0_we0 <= ap_const_logic_1;
        else 
            fc_in_2_relu1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_1_0_address0_assign_proc : process(fc_out_1_0_addr_reg_924, ap_CS_fsm_state13, ap_CS_fsm_state24, zext_ln67_fu_677_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            fc_out_1_0_address0 <= zext_ln67_fu_677_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_out_1_0_address0 <= fc_out_1_0_addr_reg_924;
        else 
            fc_out_1_0_address0 <= "XXXXX";
        end if; 
    end process;


    fc_out_1_0_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fc_out_1_0_ce0 <= ap_const_logic_1;
        else 
            fc_out_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_out_1_0_d0 <= storemerge_reg_294;

    fc_out_1_0_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fc_out_1_0_we0 <= ap_const_logic_1;
        else 
            fc_out_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_2_0_address0_assign_proc : process(fc_out_2_0_addr_2_reg_1006, ap_CS_fsm_state39, ap_CS_fsm_state50, ap_CS_fsm_state79, zext_ln146_fu_875_p1, zext_ln144_fu_858_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            fc_out_2_0_address0 <= zext_ln146_fu_875_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            fc_out_2_0_address0 <= zext_ln144_fu_858_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            fc_out_2_0_address0 <= fc_out_2_0_addr_2_reg_1006;
        else 
            fc_out_2_0_address0 <= "XXXX";
        end if; 
    end process;


    fc_out_2_0_ce0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state50, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            fc_out_2_0_ce0 <= ap_const_logic_1;
        else 
            fc_out_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_out_2_0_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            fc_out_2_0_we0 <= ap_const_logic_1;
        else 
            fc_out_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv2d_3_fu_429_ap_start <= grp_Conv2d_3_fu_429_ap_start_reg;
    grp_Conv2d_4_fu_419_ap_start <= grp_Conv2d_4_fu_419_ap_start_reg;
    grp_MaxPool2d_1_fu_399_ap_start <= grp_MaxPool2d_1_fu_399_ap_start_reg;
    grp_MaxPool2d_fu_409_ap_start <= grp_MaxPool2d_fu_409_ap_start_reg;

    grp_fu_439_p0_assign_proc : process(storemerge_reg_294, storemerge149_reg_340, ap_CS_fsm_state19, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_439_p0 <= storemerge149_reg_340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_439_p0 <= storemerge_reg_294;
        else 
            grp_fu_439_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_445_p0_assign_proc : process(fc_in_2_relu1_0_q0, fc_in_1_0_load_reg_947, ap_CS_fsm_state41, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_445_p0 <= fc_in_2_relu1_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_445_p0 <= fc_in_1_0_load_reg_947;
        else 
            grp_fu_445_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_445_p1_assign_proc : process(fc_hidden_layer1_loa_reg_952, fc_hidden_layer2_loa_reg_1029, ap_CS_fsm_state41, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_445_p1 <= fc_hidden_layer2_loa_reg_1029;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_445_p1 <= fc_hidden_layer1_loa_reg_952;
        else 
            grp_fu_445_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_450_p0_assign_proc : process(tmp_i1_15_reg_983, tmp_6_reg_1052, tmp_s_reg_1080, ap_CS_fsm_state33, ap_CS_fsm_state76, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            grp_fu_450_p0 <= tmp_s_reg_1080;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_450_p0 <= tmp_6_reg_1052;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_450_p0 <= tmp_i1_15_reg_983;
        else 
            grp_fu_450_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_454_p0_assign_proc : process(fc_out_1_0_q0, fc_out_2_0_q0, ap_CS_fsm_state51, ap_CS_fsm_state80, ap_CS_fsm_state25, ap_CS_fsm_state50, ap_phi_mux_probability_sum_0_phi_fu_380_p4, probability_sum_0_reg_376, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_454_p0 <= probability_sum_0_reg_376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_454_p0 <= fc_out_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_454_p0 <= ap_phi_mux_probability_sum_0_phi_fu_380_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_454_p0 <= fc_out_1_0_q0;
        else 
            grp_fu_454_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_478_p1_assign_proc : process(reg_494, tmp_8_reg_1075, ap_CS_fsm_state53, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_478_p1 <= tmp_8_reg_1075;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_fu_478_p1 <= reg_494;
        else 
            grp_fu_478_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_525_p2 <= std_logic_vector(unsigned(i_0_i_reg_261) + unsigned(ap_const_lv3_1));
    i_2_fu_618_p2 <= std_logic_vector(unsigned(i_0_i5_reg_307) + unsigned(ap_const_lv6_1));
    i_3_fu_799_p2 <= std_logic_vector(unsigned(i_0_i20_reg_353) + unsigned(ap_const_lv5_1));
    i_fu_852_p2 <= std_logic_vector(unsigned(i_0_reg_365) + unsigned(ap_const_lv4_1));
    icmp_ln143_fu_846_p2 <= "1" when (i_0_reg_365 = ap_const_lv4_A) else "0";
    icmp_ln145_fu_863_p2 <= "1" when (j_0_reg_388 = ap_const_lv4_A) else "0";
    icmp_ln23_1_fu_723_p2 <= "1" when (trunc_ln23_fu_695_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_2_fu_735_p2 <= "0" when (tmp_7_fu_703_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_3_fu_741_p2 <= "1" when (trunc_ln23_1_fu_713_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_717_p2 <= "0" when (tmp_2_fu_685_p4 = ap_const_lv8_FF) else "1";
    icmp_ln52_fu_519_p2 <= "1" when (i_0_i_reg_261 = ap_const_lv3_6) else "0";
    icmp_ln53_fu_565_p2 <= "1" when (j_0_i_reg_272 = ap_const_lv3_6) else "0";
    icmp_ln58_1_fu_776_p2 <= "1" when (j_0_i16_reg_329 = ap_const_lv4_A) else "0";
    icmp_ln58_fu_595_p2 <= "1" when (j_0_i3_reg_283 = ap_const_lv5_14) else "0";
    icmp_ln60_1_fu_793_p2 <= "1" when (i_0_i20_reg_353 = ap_const_lv5_14) else "0";
    icmp_ln60_fu_612_p2 <= "1" when (i_0_i5_reg_307 = ap_const_lv6_24) else "0";
    icmp_ln66_fu_665_p2 <= "1" when (j_0_i9_reg_318 = ap_const_lv5_14) else "0";
    j_0_i16_cast5_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i16_reg_329),6));
    j_0_i3_cast8_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i3_reg_283),8));
    j_3_fu_601_p2 <= std_logic_vector(unsigned(j_0_i3_reg_283) + unsigned(ap_const_lv5_1));
    j_5_fu_571_p2 <= std_logic_vector(unsigned(j_0_i_reg_272) + unsigned(ap_const_lv3_1));
    j_6_fu_671_p2 <= std_logic_vector(unsigned(j_0_i9_reg_318) + unsigned(ap_const_lv5_1));
    j_7_fu_782_p2 <= std_logic_vector(unsigned(j_0_i16_reg_329) + unsigned(ap_const_lv4_1));
    j_fu_869_p2 <= std_logic_vector(unsigned(j_0_reg_388) + unsigned(ap_const_lv4_1));
    max_poo_locate_1_address0 <= grp_MaxPool2d_1_fu_399_locate_matrix_address0;
    max_poo_locate_1_ce0 <= grp_MaxPool2d_1_fu_399_locate_matrix_ce0;
    max_poo_locate_1_d0 <= grp_MaxPool2d_1_fu_399_locate_matrix_d0;
    max_poo_locate_1_we0 <= grp_MaxPool2d_1_fu_399_locate_matrix_we0;
    max_poo_locate_2_address0 <= grp_MaxPool2d_fu_409_locate_matrix_address0;
    max_poo_locate_2_ce0 <= grp_MaxPool2d_fu_409_locate_matrix_ce0;
    max_poo_locate_2_d0 <= grp_MaxPool2d_fu_409_locate_matrix_d0;
    max_poo_locate_2_we0 <= grp_MaxPool2d_fu_409_locate_matrix_we0;

    max_poo_out_1_address0_assign_proc : process(grp_MaxPool2d_1_fu_399_output_matrix_address0, grp_Conv2d_3_fu_429_input_matrix_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_poo_out_1_address0 <= grp_Conv2d_3_fu_429_input_matrix_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_poo_out_1_address0 <= grp_MaxPool2d_1_fu_399_output_matrix_address0;
        else 
            max_poo_out_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_poo_out_1_ce0_assign_proc : process(grp_MaxPool2d_1_fu_399_output_matrix_ce0, grp_Conv2d_3_fu_429_input_matrix_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_poo_out_1_ce0 <= grp_Conv2d_3_fu_429_input_matrix_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_poo_out_1_ce0 <= grp_MaxPool2d_1_fu_399_output_matrix_ce0;
        else 
            max_poo_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_poo_out_1_d0 <= grp_MaxPool2d_1_fu_399_output_matrix_d0;

    max_poo_out_1_we0_assign_proc : process(grp_MaxPool2d_1_fu_399_output_matrix_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_poo_out_1_we0 <= grp_MaxPool2d_1_fu_399_output_matrix_we0;
        else 
            max_poo_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_out_2_address0_assign_proc : process(ap_CS_fsm_state10, zext_ln54_fu_586_p1, grp_MaxPool2d_fu_409_output_matrix_address0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_poo_out_2_address0 <= zext_ln54_fu_586_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_poo_out_2_address0 <= grp_MaxPool2d_fu_409_output_matrix_address0;
        else 
            max_poo_out_2_address0 <= "XXXXXX";
        end if; 
    end process;


    max_poo_out_2_ce0_assign_proc : process(ap_CS_fsm_state10, grp_MaxPool2d_fu_409_output_matrix_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_poo_out_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_poo_out_2_ce0 <= grp_MaxPool2d_fu_409_output_matrix_ce0;
        else 
            max_poo_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_poo_out_2_we0_assign_proc : process(grp_MaxPool2d_fu_409_output_matrix_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_poo_out_2_we0 <= grp_MaxPool2d_fu_409_output_matrix_we0;
        else 
            max_poo_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mnist_data_address0 <= grp_Conv2d_4_fu_419_input_matrix_address0;
    mnist_data_ce0 <= grp_Conv2d_4_fu_419_input_matrix_ce0;
    or_ln23_1_fu_747_p2 <= (icmp_ln23_3_fu_741_p2 or icmp_ln23_2_fu_735_p2);
    or_ln23_fu_729_p2 <= (icmp_ln23_fu_717_p2 or icmp_ln23_1_fu_723_p2);
    probability_result_address0 <= zext_ln146_reg_1065(4 - 1 downto 0);

    probability_result_ce0_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            probability_result_ce0 <= ap_const_logic_1;
        else 
            probability_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    probability_result_d0 <= grp_fu_450_p1;

    probability_result_we0_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            probability_result_we0 <= ap_const_logic_1;
        else 
            probability_result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln23_fu_765_p3 <= 
        fc_out_1_0_load_reg_975 when (and_ln23_1_fu_759_p2(0) = '1') else 
        reg_502;
        sext_ln54_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_577_p2),32));

    shl_ln1_fu_629_p3 <= (i_0_i5_reg_307 & ap_const_lv4_0);
    shl_ln54_1_fu_543_p3 <= (i_0_i_reg_261 & ap_const_lv1_0);
    shl_ln61_1_fu_637_p3 <= (i_0_i5_reg_307 & ap_const_lv2_0);
    shl_ln61_2_fu_805_p3 <= (i_0_i20_reg_353 & ap_const_lv3_0);
    shl_ln61_3_fu_813_p3 <= (i_0_i20_reg_353 & ap_const_lv1_0);
    shl_ln_fu_531_p3 <= (i_0_i_reg_261 & ap_const_lv3_0);
    sub_ln54_fu_555_p2 <= std_logic_vector(unsigned(zext_ln54_1_fu_539_p1) - unsigned(zext_ln54_2_fu_551_p1));
    tmp_2_fu_685_p4 <= bitcast_ln23_fu_682_p1(30 downto 23);
    tmp_7_fu_703_p4 <= bitcast_ln23_1_fu_699_p1(30 downto 23);
    trunc_ln23_1_fu_713_p1 <= bitcast_ln23_1_fu_699_p1(23 - 1 downto 0);
    trunc_ln23_fu_695_p1 <= bitcast_ln23_fu_682_p1(23 - 1 downto 0);
    zext_ln144_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_365),64));
    zext_ln146_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_388),64));
    zext_ln53_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_272),7));
    zext_ln54_1_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_531_p3),7));
    zext_ln54_2_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_1_fu_543_p3),7));
    zext_ln54_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln54_fu_582_p1),64));
    zext_ln59_1_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i16_reg_329),64));
    zext_ln59_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i3_reg_283),64));
    zext_ln61_1_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_1_fu_654_p2),64));
    zext_ln61_2_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i20_reg_353),64));
    zext_ln61_3_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_3_fu_830_p2),64));
    zext_ln61_4_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_645_p2),10));
    zext_ln61_5_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_2_fu_821_p2),8));
    zext_ln61_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_307),64));
    zext_ln67_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i9_reg_318),64));
end behav;
