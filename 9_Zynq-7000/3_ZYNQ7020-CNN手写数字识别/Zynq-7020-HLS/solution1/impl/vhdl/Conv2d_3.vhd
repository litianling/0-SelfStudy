-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2d_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_matrix_ce0 : OUT STD_LOGIC;
    input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_matrix_ce0 : OUT STD_LOGIC;
    out_matrix_we0 : OUT STD_LOGIC;
    out_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv2d_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_cast3_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_cast3_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_169_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_349 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln30_fu_199_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln30_reg_354 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln28_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_3_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_3_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_229_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_373 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_matrix_addr_reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln29_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_4_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_4_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_4_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_4_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln31_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln33_2_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_2_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln32_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_2_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_2_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_4_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_4_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_4_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_matrix_load_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal col_reg_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_reg_95 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_148_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_0_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_149_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal row_0_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_1_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal shl_ln_fu_175_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln30_2_fu_187_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_3_fu_183_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln30_4_fu_195_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln31_fu_205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln32_fu_215_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln30_fu_235_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln30_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_fu_249_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln33_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln33_3_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln33_4_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_5_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component forw_back_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component forw_back_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    forw_back_fadd_32bkb_U15 : component forw_back_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_149_reg_128,
        din1 => tmp_reg_439,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    forw_back_fmul_32cud_U16 : component forw_back_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_matrix_load_reg_424,
        din1 => kernel_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_0_reg_118 <= col_4_fu_330_p2;
            elsif (((icmp_ln29_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_0_reg_118 <= col_cast3_reg_340;
            end if; 
        end if;
    end process;

    col_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_reg_84 <= i_reg_349;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_reg_84 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    empty_148_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                empty_148_reg_106 <= empty_149_reg_128;
            elsif (((icmp_ln29_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_148_reg_106 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    empty_149_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_149_reg_128 <= empty_148_reg_106;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                empty_149_reg_128 <= tmp_s_reg_444;
            end if; 
        end if;
    end process;

    row_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_0_reg_140 <= zext_ln32_3_reg_364;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                row_0_reg_140 <= row_4_reg_414;
            end if; 
        end if;
    end process;

    row_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_reg_95 <= j_reg_373;
            elsif (((icmp_ln28_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_reg_95 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln33_2_reg_409 <= add_ln33_2_fu_319_p2;
                row_4_reg_414 <= row_4_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    col_cast3_reg_340(3 downto 0) <= col_cast3_fu_159_p1(3 downto 0);
                i_reg_349 <= i_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_matrix_load_reg_424 <= input_matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_373 <= j_fu_229_p2;
                    zext_ln32_3_reg_364(3 downto 0) <= zext_ln32_3_fu_219_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                out_matrix_addr_reg_378 <= zext_ln30_fu_244_p1(8 - 1 downto 0);
                    zext_ln32_4_reg_383(3 downto 0) <= zext_ln32_4_fu_255_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln30_reg_354(8 downto 2) <= sub_ln30_fu_199_p2(8 downto 2);
                    zext_ln31_reg_359(3 downto 0) <= zext_ln31_fu_211_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sub_ln33_2_reg_396 <= sub_ln33_2_fu_299_p2;
                    sub_ln33_4_reg_391(31 downto 1) <= sub_ln33_4_fu_276_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_reg_439 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_s_reg_444 <= grp_fu_149_p2;
            end if;
        end if;
    end process;
    col_cast3_reg_340(31 downto 4) <= "0000000000000000000000000000";
    sub_ln30_reg_354(1 downto 0) <= "00";
    zext_ln31_reg_359(31 downto 4) <= "0000000000000000000000000000";
    zext_ln32_3_reg_364(31 downto 4) <= "0000000000000000000000000000";
    zext_ln32_4_reg_383(31 downto 4) <= "0000000000000000000000000000";
    sub_ln33_4_reg_391(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln28_fu_163_p2, ap_CS_fsm_state3, icmp_ln29_fu_223_p2, ap_CS_fsm_state4, icmp_ln31_fu_259_p2, ap_CS_fsm_state5, icmp_ln32_fu_304_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln28_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln29_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln31_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln32_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln30_fu_235_p2 <= std_logic_vector(unsigned(sub_ln30_reg_354) + unsigned(zext_ln32_fu_215_p1));
    add_ln31_fu_205_p2 <= std_logic_vector(unsigned(col_reg_84) + unsigned(ap_const_lv4_3));
    add_ln32_fu_249_p2 <= std_logic_vector(unsigned(row_reg_95) + unsigned(ap_const_lv4_3));
    add_ln33_2_fu_319_p2 <= std_logic_vector(unsigned(sub_ln33_2_reg_396) + unsigned(row_0_reg_140));
    add_ln33_fu_309_p2 <= std_logic_vector(unsigned(row_0_reg_140) + unsigned(sub_ln33_4_reg_391));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln28_fu_163_p2)
    begin
        if ((((icmp_ln28_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln28_fu_163_p2)
    begin
        if (((icmp_ln28_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_4_fu_330_p2 <= std_logic_vector(unsigned(col_0_reg_118) + unsigned(ap_const_lv32_1));
    col_cast3_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_84),32));
    i_fu_169_p2 <= std_logic_vector(unsigned(col_reg_84) + unsigned(ap_const_lv4_1));
    icmp_ln28_fu_163_p2 <= "1" when (col_reg_84 = ap_const_lv4_C) else "0";
    icmp_ln29_fu_223_p2 <= "1" when (row_reg_95 = ap_const_lv4_C) else "0";
    icmp_ln31_fu_259_p2 <= "1" when (signed(col_0_reg_118) < signed(zext_ln31_reg_359)) else "0";
    icmp_ln32_fu_304_p2 <= "1" when (signed(row_0_reg_140) < signed(zext_ln32_4_reg_383)) else "0";
    input_matrix_address0 <= sext_ln33_fu_314_p1(8 - 1 downto 0);

    input_matrix_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_matrix_ce0 <= ap_const_logic_1;
        else 
            input_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_229_p2 <= std_logic_vector(unsigned(row_reg_95) + unsigned(ap_const_lv4_1));
    kernel_address0 <= sext_ln33_1_fu_336_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_matrix_address0_assign_proc : process(ap_CS_fsm_state3, out_matrix_addr_reg_378, ap_CS_fsm_state16, zext_ln30_fu_244_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_matrix_address0 <= out_matrix_addr_reg_378;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_matrix_address0 <= zext_ln30_fu_244_p1(8 - 1 downto 0);
        else 
            out_matrix_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_matrix_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_matrix_ce0 <= ap_const_logic_1;
        else 
            out_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_matrix_d0_assign_proc : process(ap_CS_fsm_state3, tmp_s_reg_444, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_matrix_d0 <= tmp_s_reg_444;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_matrix_d0 <= ap_const_lv32_0;
        else 
            out_matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_matrix_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln29_fu_223_p2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((icmp_ln29_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_matrix_we0 <= ap_const_logic_1;
        else 
            out_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_4_fu_324_p2 <= std_logic_vector(unsigned(row_0_reg_140) + unsigned(ap_const_lv32_1));
        sext_ln30_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_fu_235_p2),32));

        sext_ln33_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_2_reg_409),64));

        sext_ln33_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_fu_309_p2),64));

    shl_ln30_2_fu_187_p3 <= (col_reg_84 & ap_const_lv2_0);
    shl_ln33_3_fu_270_p2 <= std_logic_vector(shift_left(unsigned(col_0_reg_118),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln33_4_fu_287_p2 <= std_logic_vector(shift_left(unsigned(sub_ln33_fu_282_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln33_fu_264_p2 <= std_logic_vector(shift_left(unsigned(col_0_reg_118),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln_fu_175_p3 <= (col_reg_84 & ap_const_lv4_0);
    sub_ln30_fu_199_p2 <= std_logic_vector(unsigned(zext_ln30_3_fu_183_p1) - unsigned(zext_ln30_4_fu_195_p1));
    sub_ln33_2_fu_299_p2 <= std_logic_vector(unsigned(sub_ln33_5_fu_293_p2) - unsigned(zext_ln32_3_reg_364));
    sub_ln33_4_fu_276_p2 <= std_logic_vector(unsigned(shl_ln33_fu_264_p2) - unsigned(shl_ln33_3_fu_270_p2));
    sub_ln33_5_fu_293_p2 <= std_logic_vector(unsigned(shl_ln33_4_fu_287_p2) - unsigned(sub_ln33_fu_282_p2));
    sub_ln33_fu_282_p2 <= std_logic_vector(unsigned(col_0_reg_118) - unsigned(col_cast3_reg_340));
    zext_ln30_3_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_175_p3),9));
    zext_ln30_4_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln30_2_fu_187_p3),9));
    zext_ln30_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_fu_240_p1),64));
    zext_ln31_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_205_p2),32));
    zext_ln32_3_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_95),32));
    zext_ln32_4_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_249_p2),32));
    zext_ln32_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_95),9));
end behav;
