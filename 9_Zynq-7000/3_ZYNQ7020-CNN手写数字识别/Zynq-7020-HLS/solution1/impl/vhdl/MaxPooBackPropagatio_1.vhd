-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MaxPooBackPropagatio_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_matrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_matrix_ce0 : OUT STD_LOGIC;
    input_matrix_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_matrix_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_matrix_ce0 : OUT STD_LOGIC;
    output_matrix_we0 : OUT STD_LOGIC;
    output_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_poo_locate_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_poo_locate_1_ce0 : OUT STD_LOGIC;
    max_poo_locate_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MaxPooBackPropagatio_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_fu_170_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_reg_457 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln97_fu_200_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln97_reg_462 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln95_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal low_fu_216_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_242_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_478 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln101_fu_272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln101_reg_483 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln99_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_288_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_491 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln100_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_poo_locate_1_loa_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_matrix_load_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_17_fu_430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_0_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln96_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal low_0_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_153 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln97_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln102_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_176_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln97_2_fu_188_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln97_1_fu_184_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln97_2_fu_196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal low_0_cast_fu_206_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln97_fu_222_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln97_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln8_fu_248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln101_2_fu_260_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln101_1_fu_256_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln101_2_fu_268_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_cast_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln101_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln101_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_3_fu_330_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_334_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_320_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_348_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_352_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_372_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_376_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_3_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_4_fu_388_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_344_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_392_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_396_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_402_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_420_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln96_fu_210_p2 = ap_const_lv1_1))) then 
                col_0_reg_120 <= col_reg_457;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_0_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_142 <= ap_const_lv4_0;
            elsif (((icmp_ln100_fu_282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_142 <= i_reg_478;
            end if; 
        end if;
    end process;

    j_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_153 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_reg_153 <= j_reg_491;
            end if; 
        end if;
    end process;

    low_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                low_0_reg_131 <= ap_const_lv5_0;
            elsif (((icmp_ln96_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                low_0_reg_131 <= low_fu_216_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                col_reg_457 <= col_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_478 <= i_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_matrix_load_reg_511 <= input_matrix_q0;
                max_poo_locate_1_loa_reg_506 <= max_poo_locate_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_491 <= j_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Result_s_reg_516 <= p_Val2_s_fu_309_p1(31 downto 31);
                p_Val2_17_reg_521 <= p_Val2_17_fu_430_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln101_reg_483(8 downto 1) <= sub_ln101_fu_272_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln97_reg_462(10 downto 2) <= sub_ln97_fu_200_p2(10 downto 2);
            end if;
        end if;
    end process;
    sub_ln97_reg_462(1 downto 0) <= "00";
    sub_ln101_reg_483(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln95_fu_164_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln99_fu_236_p2, ap_CS_fsm_state5, icmp_ln100_fu_282_p2, icmp_ln96_fu_210_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln95_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln96_fu_210_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln99_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln100_fu_282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln101_fu_294_p2 <= std_logic_vector(unsigned(j_0_cast_fu_278_p1) + unsigned(sub_ln101_reg_483));
    add_ln339_fu_352_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_348_p1));
    add_ln97_fu_222_p2 <= std_logic_vector(unsigned(sub_ln97_reg_462) + unsigned(low_0_cast_fu_206_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln99_fu_236_p2)
    begin
        if ((((icmp_ln99_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln99_fu_236_p2)
    begin
        if (((icmp_ln99_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_170_p2 <= std_logic_vector(unsigned(col_0_reg_120) + unsigned(ap_const_lv5_1));
    i_fu_242_p2 <= std_logic_vector(unsigned(i_0_reg_142) + unsigned(ap_const_lv4_1));
    icmp_ln100_fu_282_p2 <= "1" when (j_0_reg_153 = ap_const_lv4_E) else "0";
    icmp_ln95_fu_164_p2 <= "1" when (col_0_reg_120 = ap_const_lv5_1C) else "0";
    icmp_ln96_fu_210_p2 <= "1" when (low_0_reg_131 = ap_const_lv5_1C) else "0";
    icmp_ln99_fu_236_p2 <= "1" when (i_0_reg_142 = ap_const_lv4_E) else "0";
    input_matrix_address0 <= zext_ln101_fu_303_p1(8 - 1 downto 0);

    input_matrix_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_matrix_ce0 <= ap_const_logic_1;
        else 
            input_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_358_p3 <= add_ln339_fu_352_p2(8 downto 8);
    j_0_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_153),9));
    j_fu_288_p2 <= std_logic_vector(unsigned(j_0_reg_153) + unsigned(ap_const_lv4_1));
    low_0_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_0_reg_131),11));
    low_fu_216_p2 <= std_logic_vector(unsigned(low_0_reg_131) + unsigned(ap_const_lv5_1));
    mantissa_V_fu_334_p4 <= ((ap_const_lv1_1 & tmp_V_3_fu_330_p1) & ap_const_lv1_0);
    max_poo_locate_1_address0 <= zext_ln101_fu_303_p1(8 - 1 downto 0);

    max_poo_locate_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_poo_locate_1_ce0 <= ap_const_logic_1;
        else 
            max_poo_locate_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_matrix_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, zext_ln97_fu_231_p1, sext_ln102_fu_449_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_matrix_address0 <= sext_ln102_fu_449_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_matrix_address0 <= zext_ln97_fu_231_p1(10 - 1 downto 0);
        else 
            output_matrix_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_matrix_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_matrix_ce0 <= ap_const_logic_1;
        else 
            output_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_matrix_d0_assign_proc : process(ap_CS_fsm_state3, input_matrix_load_reg_511, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_matrix_d0 <= input_matrix_load_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_matrix_d0 <= ap_const_lv32_0;
        else 
            output_matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_matrix_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln96_fu_210_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln96_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_matrix_we0 <= ap_const_logic_1;
        else 
            output_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_17_fu_430_p3 <= 
        zext_ln662_fu_416_p1 when (isNeg_fu_358_p3(0) = '1') else 
        tmp_12_fu_420_p4;
    p_Val2_18_fu_443_p3 <= 
        result_V_3_fu_438_p2 when (p_Result_s_reg_516(0) = '1') else 
        p_Val2_17_reg_521;
    p_Val2_s_fu_309_p1 <= max_poo_locate_1_loa_reg_506;
    r_V_3_fu_402_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_344_p1),to_integer(unsigned('0' & zext_ln1287_fu_392_p1(31-1 downto 0)))));
    r_V_fu_396_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_334_p4),to_integer(unsigned('0' & sext_ln1311_4_fu_388_p1(25-1 downto 0)))));
    result_V_3_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_17_reg_521));
        sext_ln101_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln101_fu_294_p2),32));

        sext_ln102_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_18_fu_443_p3),64));

        sext_ln1311_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_376_p3),32));

        sext_ln1311_4_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_376_p3),25));

        sext_ln1311_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_366_p2),9));

        sext_ln97_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln97_fu_222_p2),32));

    shl_ln101_2_fu_260_p3 <= (i_0_reg_142 & ap_const_lv1_0);
    shl_ln8_fu_248_p3 <= (i_0_reg_142 & ap_const_lv4_0);
    shl_ln97_2_fu_188_p3 <= (col_0_reg_120 & ap_const_lv2_0);
    shl_ln_fu_176_p3 <= (col_0_reg_120 & ap_const_lv5_0);
    sub_ln101_fu_272_p2 <= std_logic_vector(unsigned(zext_ln101_1_fu_256_p1) - unsigned(zext_ln101_2_fu_268_p1));
    sub_ln1311_fu_366_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_320_p4));
    sub_ln97_fu_200_p2 <= std_logic_vector(unsigned(zext_ln97_1_fu_184_p1) - unsigned(zext_ln97_2_fu_196_p1));
    tmp_12_fu_420_p4 <= r_V_3_fu_402_p2(55 downto 24);
    tmp_V_3_fu_330_p1 <= p_Val2_s_fu_309_p1(23 - 1 downto 0);
    tmp_V_fu_320_p4 <= p_Val2_s_fu_309_p1(30 downto 23);
    tmp_fu_408_p3 <= r_V_fu_396_p2(24 downto 24);
    ush_fu_376_p3 <= 
        sext_ln1311_fu_372_p1 when (isNeg_fu_358_p3(0) = '1') else 
        add_ln339_fu_352_p2;
    zext_ln101_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_248_p3),9));
    zext_ln101_2_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln101_2_fu_260_p3),9));
    zext_ln101_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln101_fu_299_p1),64));
    zext_ln1287_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_384_p1),79));
    zext_ln339_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_320_p4),9));
    zext_ln662_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_408_p3),32));
    zext_ln682_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_334_p4),79));
    zext_ln97_1_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_176_p3),11));
    zext_ln97_2_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln97_2_fu_188_p3),11));
    zext_ln97_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln97_fu_227_p1),64));
end behav;
